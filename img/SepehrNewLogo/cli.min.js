/*
 Â© Copyright 2018 by Beenius. All Rights Reserved
*/
if (navigator.userAgent.indexOf('Mozilla') !== -1) {
	function alert() {
		console.log.apply(null, arguments);
	}
}
(function (w) {

	var BS = {};

	if (typeof CLIENT_VERSION === 'undefined') {
		w.CLIENT_VERSION = 'unknown-version';
	}

	if (typeof IS_COLIBRY === 'undefined') {
		w.IS_COLIBRY = false;
	}

	BS.CLIENT_VERSION = CLIENT_VERSION;

	alert('\n\n##### BeeSmart ' + CLIENT_VERSION
		+ ' initialization START from:\n##### ' + location.href + '\n\n');

	BS.UserModel = {};
	BS.LanguageModel = {};
	BS.SkinModel = {};
	BS.PurchaseModel = {};
	BS.TaModel = {};
	BS.MosaicModel = {};
	BS.Utils = {};

	BS.F = function () {};

	BS.ui = {};
	BS.misc = {};

	BS.repositories = {};

	BS.users = null;
	BS.skins = null;
	BS.languages = null;
	BS.avatars = null;

	w.BeeSmart = BS;
})(
	window
);

if (!Function.prototype.bind) {
	Function.prototype.bind = function (oThis) {
		if (typeof this !== "function") {
			throw new TypeError("Function.prototype.bind");
		}

		var aArgs = Array.prototype.slice.call(arguments, 1),
			fToBind = this,
			fNOP = function () {},
			fBound = function () {
				return fToBind.apply(this instanceof fNOP && oThis
						? this
						: oThis,
					aArgs.concat(Array.prototype.slice.call(arguments)));
			};

		fNOP.prototype = this.prototype;
		fBound.prototype = new fNOP();

		return fBound;
	};
}

if (!Object.keys) {
	Object.keys = (function () {
		'use strict';
		var hasOwnProperty = Object.prototype.hasOwnProperty,
			hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),
			dontEnums = [
				'toString',
				'toLocaleString',
				'valueOf',
				'hasOwnProperty',
				'isPrototypeOf',
				'propertyIsEnumerable',
				'constructor'
			],
			dontEnumsLength = dontEnums.length;

		return function (obj) {
			if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
				throw new TypeError('Object.keys called on non-object');
			}

			var result = [], prop, i;

			for (prop in obj) {
				if (hasOwnProperty.call(obj, prop)) {
					result.push(prop);
				}
			}

			if (hasDontEnumBug) {
				for (i = 0; i < dontEnumsLength; i++) {
					if (hasOwnProperty.call(obj, dontEnums[i])) {
						result.push(dontEnums[i]);
					}
				}
			}
			return result;
		};
	}());
}

if (typeof Object.assign != 'function') {
	Object.assign = function (target, varArgs) {
		if (target == null) {
			throw new TypeError('Cannot convert undefined or null to object');
		}

		var to = Object(target);

		for (var index = 1; index < arguments.length; index++) {
			var nextSource = arguments[index];

			if (nextSource != null) {
				for (var nextKey in nextSource) {
					if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
						to[nextKey] = nextSource[nextKey];
					}
				}
			}
		}
		return to;
	};
}

Object.extend = function(child, supertype) {
	if (child.prototype.__proto__)
		child.prototype.__proto__ = supertype.prototype;
	else {
		for (var property in supertype.prototype)
			if (typeof child.prototype[property] == "undefined")
				child.prototype[property] = supertype.prototype[property];
	}
};

Object.clone = function(obj){
    return eval(uneval(obj));
};

Object.serialize = function(obj){
    return uneval(obj);
};

Object.eachKey = function(obj, it) {
	for (var i in obj)
		if (obj.hasOwnProperty(i))
			it.call(obj, i);
};

Object.isEmpty = function (obj) {
	if (obj == null) return true;

	if (obj.length > 0)    return false;
	if (obj.length === 0)  return true;

	for (var key in obj) {
		if (obj.hasOwnProperty(key)) return false;
	}

	return true;
};

if (!Object.keys) {
	Object.keys = (function () {
		'use strict';
		var hasOwnProperty = Object.prototype.hasOwnProperty,
			hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),
			dontEnums = [
				'toString',
				'toLocaleString',
				'valueOf',
				'hasOwnProperty',
				'isPrototypeOf',
				'propertyIsEnumerable',
				'constructor'
			],
			dontEnumsLength = dontEnums.length;

		return function (obj) {
			if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
				throw new TypeError('Object.keys called on non-object');
			}

			var result = [], prop, i;

			for (prop in obj) {
				if (hasOwnProperty.call(obj, prop)) {
					result.push(prop);
				}
			}

			if (hasDontEnumBug) {
				for (i = 0; i < dontEnumsLength; i++) {
					if (hasOwnProperty.call(obj, dontEnums[i])) {
						result.push(dontEnums[i]);
					}
				}
			}
			return result;
		};
	}());
}

Error.getJsStack = function $STACK_START$(){
	try { throw new Error; } catch (x) { return x.stack; }
};




Array.equals = function ArrayEquals(source, value){
	if (!(value instanceof Array)) return false;
	if (!(source instanceof Array)) return false;
	var i;
	if ((i = source.length) != value.length)
		return false;
	while(i--){
		if (source[i] instanceof Array){
			if (!ArrayEquals(source[i], value[i]))
				return false;
		} else
			if (source[i] != value[i])
				return false;
	}
	return true;
};

Array.getFirstHigherThan = function ArrayGetFirstHigherThan(array, value) {
	if (!array || !array.length || !value)
		throw new TypeError('array and value parameters are required');
	for (var i = 0, len = array.length; i < len; i++)
		if (array[i] >= value)
			return array[i];
	return array[array.length - 1];
};

Array.remove = function(array, from, to) {
	var rest = array.slice((to || from) + 1 || array.length);
	array.length = from < 0 ? array.length + from : from;
	array.push.apply(array, rest);
	return array;
};

Array.removeElement = function(array, element) {
	var index = array.indexOf(element);
	if (index === -1)
		return false;
	Array.remove(array, index);
	return true;
};

Array.processArguments = function(funcArguments) {
	var len = funcArguments.length, a = [];
	for (var i = 0; i < len; i++)
		a.push(funcArguments[i]);
	return a;
};
Array.contains = function(array, element){
	return array.indexOf(element) != -1;
};

Array.search = function(array, whichValue, byWhat){
	for (var i in array){
		if (array[i][byWhat] && array[i][byWhat] == whichValue)
			return array[i];
	}
};

Array.makeGroups = function(array, groupSize) {
	return array.reduce(function(groups, item, i) {
		var groupIndex = Math.floor(i / groupSize);
		if (groupIndex >= groups.length)
			groups.push([]);
		groups[groupIndex].push(item);
		return groups;
	}, []);
};

Array.calculateIndex = function (index, range) {
	if (range === 1)
		return 0;
	if (index < 0) {
		var c;
		return (c = range + index % range) === range ? 0 : c;
	}
	if (index >= range)
		return index % range;
	return index;
};

Number.prototype.padToLength = function(len){
	len = len || 2;
	var ret = this.toString();
	while (ret.length < len)
		ret = '0' + ret;
	return ret;
};

var _1secondTr = null;

Number.prototype.toMovieFormat = function(){
	if (!_1secondTr)
		_1secondTr = tr('s');
	var time = Math.round(this);

	return time > 59 ?
		Number(Math.floor(time / 60)).toFixed(0) +":"+ (time % 60).padToLength() + _1secondTr :
		Number(time).toFixed(0) + _1secondTr;
};

Number.prototype.toMovieFormat2 = function (inputFormat) {
	var multiplayer = inputFormat === undefined || inputFormat === 's' ? 1 :
		inputFormat === 'ms' ? 0.001 : 60;
	var seconds = this * multiplayer;
	var durationH = Math.floor(seconds / 3600);
	var durationM = Math.round(0.016666667 * (seconds % 3600));
	return (durationH ? (durationH + tr('hours') + ' ') : '') +
		(durationM ? durationM + tr('min') : '');
};



Number.prototype.toNiceSeconds = function(){
	return (this*0.001).toFixed(1);
};

Number.prototype.formatPrice = function(_format){
	var that = this, decimals, dec_point, thousands_sep;
	if (!_format)
		_format = BeeSmart.portal.local.formats.price;
   decimals = _format.decimals;
   dec_point = _format.decimalSign;
   thousands_sep = _format.thousandSign;
    that = (that+'').replace(',', '').replace(' ', '');
    var n = !isFinite(+that) ? 0 : + that,
        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
        sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
		dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
        s = '',
        toFixedFix = function (n, prec) {
            var k = Math.pow(10, prec);
            return '' + Math.round(n * k) / k;
		};
    s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
    if (s[0].length > 3) {
        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
	}
    if ((s[1] || '').length < prec) {
        s[1] = s[1] || '';
        s[1] += new Array(prec - s[1].length + 1).join('0');
    }
	return s.join(dec);
};

String.prototype._cacheMap = {};
String.prototype.cache = function () {
	return this._cacheMap[this] || (this._cacheMap[this] = this);
};
String.prototype.cache.clear = function () { String.prototype._cacheMap = {}; };

String.prototype.encodeEntities = function(){
	if (this.length == 0)
		return this;
	return this
		.replace(/&/g, '&amp;')
		.replace(/>/g, '&gt;')
		.replace(/</g, '&lt;')
		.replace(/'/g, '&apos;')
		.replace(/"/g, '&quot;');
};

String.prototype.decodeEntities = function(){
	if (this.length == 0)
		return this;
	return this
		.replace(/&amp;/g,'&')
		.replace(/&gt;/g, '>')
		.replace(/&lt;/g, '<')
		.replace(/&apos;/g, '\'')
		.replace(/&quot;/g, '"');
};

String.prototype.stripXmlTags = function () {
	return this.replace(/<[^>]*>/g, ' ');
};

String.prototype.escapedBeeText = function(){
	if (this.length == 0)
		return this;
	return this.split(/(<[^>]+>)/)
		.map(function (token, i) {
			return token.match(/^</) ? token : token.encodeEntities();
		})
		.join('');
};


String.prototype.trim = function(){
	return this.replace(/^\s+|\s+$/g, '');
};


String.prototype.capitalize = function(){
	return this.replace( /(^|\s)([a-z])/g , function(m,p1,p2){ return p1+p2.toUpperCase();
	} );
};

String.prototype.secondsToTime = function () {
	var hours = Math.floor(this / (60 * 60)).toString();

	var divisorForMinutes = this % (60 * 60);
	var minutes = Math.floor(divisorForMinutes / 60).toString();

	var divisorForSeconds = divisorForMinutes % 60;
	var seconds = Math.ceil(divisorForSeconds).toString();

	return hours.concat(tr('hours_short'),' ',minutes,tr('minutes_short'),' ',seconds,tr('seconds_short'));
};

(function(){

	var sprintf = function(fmt ){
		var _fmt = ':'+fmt;
		if (!sprintf.cache[_fmt])
			sprintf.cache[_fmt] = sprintf.parse(fmt);
		return sprintf.cache[_fmt](sprintf, arguments);
	};

	sprintf.cache = {};
	sprintf.to_int = function(num){
		return num>=0 ? Math.floor(num) : -Math.floor(-num); };
	var chr_repeat_cache = {};
	sprintf.chr_repeat = function(chr, n){
		var r = chr_repeat_cache[chr];
		if (r && r.length>=n)
			return r.slice(0, n);
		r = chr;
		for (; r.length<n; r += r);
		chr_repeat_cache[chr] = r;
		return r.slice(0, n);
	};

	sprintf.parse = function(fmt){
		var _fmt = fmt, match = [], parse_tree = [], arg_names = 0, cursor = 1;
		var pad_chr, pad_chrs, pad_length, arg_padded, f, s = JSON.stringify;
		f = 'var out = "", arg, arg_s;\n';
		for (; _fmt; _fmt = _fmt.substring(match[0].length))
		{
			if ((match = /^[^%]+/.exec(_fmt)))
				f += 'out += '+s(match[0])+';\n';
			else if ((match = /^%%/.exec(_fmt)))
				f += 'out += "%";\n';
			else if ((match =
				/^%(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([bcdefoOsuxX])/
					.exec(_fmt)))
			{
				var positional = match[1], keyword = match[2], sign = match[3];
				var pad_zero = match[4], pad_min = match[5], pad_max = match[6];
				var precision = match[7], conversion = match[8], keyword_list = [];
				if (keyword)
				{
					arg_names |= 1;
					var _keyword = keyword, kmatch;
					if (!(kmatch = /^([a-z_][a-z_\d]*)/i.exec(_keyword)))
						throw('sprintf: invalid keyword property name '+_keyword);
					keyword_list.push(kmatch[1]);
					while ((_keyword = _keyword.substring(kmatch[0].length)))
					{
						if ((kmatch = /^\.([a-z_][a-z_\d]*)/i.exec(_keyword)))
							keyword_list.push(kmatch[1]);
						else if ((kmatch = /^\[(\d+)\]/.exec(_keyword)))
							keyword_list.push(kmatch[1]);
						else
							throw('sprintf: invalid keyword format '+_keyword);
					}
				}
				else
					arg_names |= 2;
				if (arg_names === 3)
				{
					throw('sprintf: mixing positional and named placeholders is '
						+'not (yet) supported');
				}
				if (keyword_list.length)
				{
					f += 'arg = argv['+cursor+']';
					for (var k = 0; k < keyword_list.length; k++)
						f += '['+s(keyword_list[k])+']';
					f += ';\n';
				}
				else if (positional)
					f += 'arg = argv['+positional+'];\n';
				else
					f += 'arg = argv['+(cursor++)+'];\n';
				if (/[^sO]/.test(conversion))
					f += 'arg = +arg;\n';
				switch (conversion)
				{
				case 'b': f += 'arg_s = arg.toString(2);\n'; break;
				case 'c': f += 'arg_s = String.fromCharCode(arg);\n'; break;
				case 'd':
					f += 'arg = sprintf.to_int(arg); arg_s = ""+arg;\n';
					break;
				case 'e':
					f += 'arg_s = arg.toExponential('
						+(precision ? s(precision) : '')+');\n';
					break;
				case 'f':
					if (precision)
						f += 'arg_s = arg.toFixed('+precision+');\n';
					else
						f += 'arg_s = ""+arg;\n';
					break;
				case 'o': f += 'arg_s = arg.toString(8);\n'; break;
				case 'O': f += 'arg_s = JSON.stringify(arg);\n'; break;
				case 'u': f += 'arg = arg >>> 0; arg_s = ""+arg;\n'; break;
				case 'x': f += 'arg_s = arg.toString(16);\n'; break;
				case 'X': f += 'arg_s = arg.toString(16).toUpperCase();\n'; break;
				case 's':
					f += 'arg_s = ""+arg;\n';
					if (precision)
						f += 'arg_s = arg_s.substring(0, '+precision+');\n';
					break;
				}
				if (/[def]/.test(conversion) && sign)
					f += 'if (arg>=0) arg_s = "+"+arg_s;\n';
				pad_chr = pad_zero ? pad_zero=='0' ? '0' : pad_zero[1] : ' ';
				pad_chrs = '('+s(sprintf.chr_repeat(pad_chr, +pad_max))
					+".slice(0, "+(+pad_max)+"-arg_s.length))";
				arg_padded = !pad_max ? 'arg_s' :
					pad_min ? 'arg_s + '+pad_chrs : pad_chrs+' + arg_s';
				f += 'out += '+arg_padded+';\n';
			} else {
				alert('[WARN] sprintf invalid format ' + _fmt);
				f += 'out += "%";\n';
				match = ['%'];
			}
		}
		f += 'return out;\n';
		return new Function(['sprintf', 'argv'], f);
	};

	sprintf.vsprintf = function(fmt, argv){
		var _argv = [fmt];
		_argv.push.apply(_argv, argv);
		return sprintf.apply(null, _argv);
	};

	sprintf.sprintf = sprintf;
	String.prototype.sprintf = function(){
		return sprintf.apply(
			window,
			[""+this].concat(Array.processArguments(arguments))
		);
	};
	String.prototype.sprintf.clearCache = function () {
		sprintf.cache = {};
	};
	String.prototype.vprintf = function(parts){
		if (!(parts instanceof Array))
			throw "1. argument must be an array!";
		return sprintf.apply(window, [""+this].concat(parts));
	};

})();

Date.getUTCOffset = function () {
	var off = -1 * (new Date().getTimezoneOffset());
	return (off < 0 ? "-" : "+") + Math.abs(parseInt(off / 60, 10)).padToLength()
		+ Math.abs(parseInt(off % 60, 10)).padToLength();
};

Date.prototype.toShortString = function(){
	return this.getFullYear() +"-"+ (this.getMonth() + 1) +"-"+ this.getDate() +" "+
		this.getHours().padToLength() +":"+ this.getMinutes().padToLength() +":"+ this.getSeconds().padToLength();
};

Date.prototype.daySeconds = function(){
	var now = new Date(this.valueOf()),
		mdt = new Date(this.getFullYear(), this.getMonth(), this.getDate());

	return Math.floor(Math.abs(Math.round(
		now - mdt + (mdt.getTimezoneOffset() - now.getTimezoneOffset())*6e4
	)*1e-3));
};

if (!("getElementById" in window))
	getElementById = function(id) {
		return document.getElementById(id);
	};




(function(){
    var initializing = false, fnTest = /xyz/.test(function(){
        xyz;
    }) ? /\b_super\b/ : /.*/;

    this.Class = function(){};

    Class.extend = function(prop){
        var _super = this.prototype;

        initializing = true;
        var prototype = new this();
        initializing = false;

        for (var name in prop) {
            prototype[name] = typeof prop[name] == "function" &&
            typeof _super[name] == "function" &&
            fnTest.test(prop[name]) ? (function(name, fn){
                return function(){
                    var tmp = this._super;

                    this._super = _super[name];

                    var ret = fn.apply(this, arguments);
                    this._super = tmp;

                    return ret;
                };
            })(name, prop[name]) : prop[name];
        }

        function Class(){
            if (!initializing && this.init)
                this.init.apply(this, arguments);
        }

        Class.prototype = prototype;

        Class.constructor = Class;

        Class.extend = arguments.callee;

        return Class;
    };
})();



(function(){
	var _MONTHS, _DAY_NAMES;
	Date.prototype.toFormatedString = function(format, doLocalize) {
		doLocalize = typeof doLocalize === 'undefined' ? true : !!doLocalize;
		var date = this;
		var result = "";
		var calendar = BeeSmart.portal.calendar;

		if (calendar === 'persian' && doLocalize) {
			result = toJalaliFormat(format, date, doLocalize);
		} else {
			result = toGregorianFormat(format, date, doLocalize);
		}

		return result;
	};
	Date.prototype.toFormattedString = Date.prototype.toFormatedString;

	var englishMonths = [
		'January', 'February', 'March', 'April', 'May', 'June',
		'July', 'August', 'September', 'October', 'November', 'December'
	];
	var englishDays = [
		'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
	];
	var toGregorianFormat = function(format, d, doLocalize) {
		var date = d;


		if (!_MONTHS) {
			_MONTHS = BeeSmart.config.exists('MONTHS') ?
				BeeSmart.config.get('MONTHS') : englishMonths;
			_DAY_NAMES = BeeSmart.config.exists('DAY_NAMES') ?
				BeeSmart.config.get('DAY_NAMES') : englishDays;
		}

		var y=date.getYear()+"";
		var M=date.getMonth()+1;
		var d=date.getDate();
		var E=date.getDay();

		if (y.length < 4) {y=""+(y-0+1900);}

		return formatDate(y, M, d, E, date, format, doLocalize);
	};

	var toHijriFormat = function(format, date, doLocalize) {
		if (!_MONTHS) {
			_MONTHS = [
	           tr('Muharram'), tr('Safar'), tr('Rabial-Awwal'), tr('Rabiath-Thani'),
	           tr('Jumada l-Ula'), tr('Jumada t-Tania'), tr('Rajab'), tr('Shaban'),
	           tr('Ramadan'), tr('Shawwal'), tr('Dhu l-Qa da'), tr('Dhu l-Hijja')
			];
			_DAY_NAMES = [
				tr("al-ahad"), tr("al-ithnayn"),
				tr("ath-thalatha"), tr("al-arba"),
				tr("al-khamis"), tr("al-juma"), tr("as-sabt")
			];
		}

		var year=date.getYear();
		var month=date.getMonth()+1;
		var day=date.getDate();
		var E=date.getDay();

		year=year < 1000 ? (year - 0 + 1900) : date.getYear();

		var arabicDate = gregToHijri(day, month, year, 0);

		var y = arabicDate.year+"";
		var M = arabicDate.month;
		var d = arabicDate.day;

		return formatDate(y, M, d, E, date, format, doLocalize);
	};


	var toJalaliFormat = function(format, d, doLocalize) {
		var date = d;

			_MONTHS = [
			    tr('FARVARDEEN'), tr('ORDEEBEHESHT'), tr('KHORDAAD'), tr('TEER'),
			    tr('MORDAAD'), tr('SHAHREEVAR'), tr('MEHR'), tr('AABAAN'),
			    tr('AAZAR'), tr('DEY'),tr('BAHMANN'), tr('ESFAND')
			];
			_DAY_NAMES = [
			   tr("YEKSHANBE"), tr("DOSHANBE"),
			   tr("SESHANBE"), tr("CHAAHAARSHANBE"),
			   tr("PANGSHANBE"), tr("JOME"), tr("SHANBE")
			];

		var year=date.getYear();
		var month=date.getMonth()+1;
		var day=date.getDate();
		var E=date.getDay();

		year=year < 1000 ? (year - 0 + 1900) : date.getYear();

		var jalaliDate = gregToJalali(day, month, year);

		var y = jalaliDate.year+"";
		var M = jalaliDate.month;
		var d = jalaliDate.day;

		return formatDate(y, M, d, E, date, format, doLocalize);
	};

	function formatDate(y, M, d, E, date, format, doLocalize) {
		format=format+"";
		var result="";
		var i_format=0;
		var c="";
		var token="";

		var H=date.getHours();
		var m=date.getMinutes();
		var s=date.getSeconds();
		var ms=date.getMilliseconds();

		var value=new Object();
		value["z"]="";
		value["y"]=""+y;
		value["yyyy"]=y;
		value["yy"]=y.substring(2,4);
		value["M"]=M;
		value["MM"]=M.padToLength();
		value["MMM"]=_MONTHS[M-1];
		value["MMMM"]=_MONTHS[M-1];
		value["NNN"]=_MONTHS[12+M-1];
		value["d"]=d;
		value["dd"]=d.padToLength();
		value["E"]=_DAY_NAMES[E+7];
		value["EE"]=_DAY_NAMES[E];
		value["G"]="";
		value["H"]=H;
		value["HH"]=H.padToLength();
		if (H==0){value["h"]=12;}
		else if (H>12){value["h"]=H-12;}
		else {value["h"]=H;}
		value["hh"]=value["h"].padToLength();
		if (H>11){value["K"]=H-12;} else {value["K"]=H;}
		value["k"]=H+1;
		value["KK"]=value["K"].padToLength();
		value["kk"]=value["k"].padToLength();
		if (H > 11) { value["a"]="PM"; }
		else { value["a"]="AM"; }
		value["m"]=m;
		value["mm"]=m.padToLength();
		value["s"]=s;
		value["ss"]=s.padToLength();
		value["f"]=ms.padToLength(1);
		value["ff"]=ms.padToLength(2);
		value["fff"]=ms.padToLength(3);
		while (i_format < format.length) {
			c=format.charAt(i_format);
			token="";
			while ((format.charAt(i_format)==c) && (i_format < format.length)) {
				token += format.charAt(i_format++);
			}
			if (value[token] != null) {
				result=result + value[token];
			} else {
				result=result + token;
			}
		}
		if (doLocalize &&
			(
				BeeSmart &&
				BeeSmart.portal &&
				BeeSmart.portal.user &&
				BeeSmart.portal.user.language
			)
		) return result.toLocaleString(BeeSmart.portal.user.language.label);
		return result;
	}

	function gregToHijri(day, month, year, adjust) {
		function intPart(floatNum){
			if (floatNum< -0.0000001){
			 return Math.ceil(floatNum-0.0000001);
			}
			return Math.floor(floatNum+0.0000001);
		}

		var d = adjust? day + adjust : day, m = month, y = year, jd, n, l;

		if ((y>1582)||((y==1582)&&(m>10))||((y==1582)&&(m==10)&&(d>14))) {
			jd=intPart((1461*(y+4800+intPart((m-14)/12)))/4)+intPart((367*(m-2-12*(intPart((m-14)/12))))/12)-intPart( (3* (intPart(  (y+4900+    intPart( (m-14)/12)     )/100)    )   ) /4)+d-32075;
		} else {
			jd = 367*y-intPart((7*(y+5001+intPart((m-9)/7)))/4)+intPart((275*m)/9)+d+1729777;
		}

		l=jd-1948440+10632;
		n=intPart((l-1)/10631);
		l=l-10631*n+354;
		var j=(intPart((10985-l)/5316))*(intPart((50*l)/17719))+(intPart(l/5670))*(intPart((43*l)/15238));
		l=l-(intPart((30-j)/15))*(intPart((17719*j)/50))-(intPart(j/16))*(intPart((15238*j)/43))+29;

		var month=intPart((24*l)/709);
		var day=l-intPart((709*month)/24);
		var year=30*n+j-30;

		return {'day' : day, 'month' : month, 'year' : year};
	}

	function gregToJalali(d, M, y){
		function div(a,b) {
			return Math.floor(a/b);
		}

		function remainder(a,b) {
			return a - div(a,b)*b;
		}

		var g_days_in_month = new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31),
			j_days_in_month = new Array(31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29),
		   	gy, gm, gd, E,
		   	jy, jm, jd,
		   	g_day_no, j_day_no,
		   	j_np;

	   gy=y - 1600;
	   gm=M - 1;
	   gd=d - 1;

	   g_day_no = 365*gy+div((gy+3),4)-div((gy+99),100)+div((gy+399),400);

	   for (var i=0; i<gm; ++i)
		   g_day_no += g_days_in_month[i];

	   if (gm>1 && ((gy%4==0 && gy%100!=0) || (gy%400==0)))
		   ++g_day_no;

	   g_day_no += gd;
	   j_day_no = g_day_no-79;
	   j_np = div(j_day_no, 12053);
	   j_day_no = remainder (j_day_no, 12053);
	   jy = 979+33*j_np+4*div(j_day_no,1461);
	   j_day_no = remainder (j_day_no, 1461);

	   if (j_day_no >= 366) {
		   jy += div((j_day_no-1),365);
		   j_day_no = remainder ((j_day_no-1), 365);
	   }

	   var i;
	   for (i = 0; i < 11 && j_day_no >= j_days_in_month[i]; ++i)
		   j_day_no -= j_days_in_month[i];

	   jm = i+1;
	   jd = j_day_no+1;

	   return  {'day' : jd, 'month' : jm, 'year' : jy};
	}

})();


Number.prototype._latinToPersianNumeralsMap = {
	0: '\u06F0',
	1: '\u06F1',
	2: '\u06F2',
	3: '\u06F3',
	4: '\u06F4',
	5: '\u06F5',
	6: '\u06F6',
	7: '\u06F7',
	8: '\u06F8',
	9: '\u06F9',
	'%': '\u066A'
};
String.prototype._latinToPersianNumeralsMap = Number.prototype._latinToPersianNumeralsMap;

Number.prototype._persianToLatinNumeralsMap = {
	'\u06F0': 0,
	'\u06F1': 1,
	'\u06F2': 2,
	'\u06F3': 3,
	'\u06F4': 4,
	'\u06F5': 5,
	'\u06F6': 6,
	'\u06F7': 7,
	'\u06F8': 8,
	'\u06F9': 9,
	'\u066A': '%'
};
String.prototype._persianToLatinNumeralsMap = Number.prototype._persianToLatinNumeralsMap;

Number.prototype.toLocaleString = function (language) {
	var that = this.toString();
	switch (language) {
	case 'fa':
		var r = '';
		var i = that.length;
		var map = this._latinToPersianNumeralsMap;
		while(i--) {
			var c = that[i];
			r = c in map ? map[c] + r : c + r;
		}
		return r;
	default:
		return that;
	}
};

String.prototype.toLocaleString = Number.prototype.toLocaleString;

String.prototype.toArabicNumerals = function (language) {
	var that = this;
	switch (language) {
	case 'fa':
		var r = '';
		var i = that.length;
		var map = this._persianToLatinNumeralsMap;
		while(i--) {
			var c = that[i];
			r = c in map ? map[c] + r : c + r;
		}
		return r;
	default:
		return that.toString();
	}
};


(function (definition) {


	if (typeof bootstrap === "function") {
		bootstrap("promise", definition);

	} else if (typeof exports === "object") {
		module.exports = definition();

	} else if (typeof define === "function" && define.amd) {
		define(definition);

	} else if (typeof ses !== "undefined") {
		if (!ses.ok()) {
			return;
		} else {
			ses.makeQ = definition;
		}

	} else {
		Q = definition();
	}

})(function () {
	"use strict";

	var hasStacks = false;
	try {
		throw new Error();
	} catch (e) {
		hasStacks = !!e.stack;
	}

	var qStartingLine = captureLine();
	var qFileName;


	var noop = function () {};

	var nextTick =(function () {
		var head = {task: void 0, next: null};
		var tail = head;
		var flushing = false;
		var requestTick = void 0;
		var isNodeJS = false;

		function flush() {

			while (head.next) {
				head = head.next;
				var task = head.task;
				head.task = void 0;
				var domain = head.domain;

				if (domain) {
					head.domain = void 0;
					domain.enter();
				}

				try {
					task();

				} catch (e) {
					if (isNodeJS) {

						if (domain) {
							domain.exit();
						}
						setTimeout(flush, 0);
						if (domain) {
							domain.enter();
						}

						throw e;

					} else {
						setTimeout(function() {
							throw e;
						}, 0);
					}
				}

				if (domain) {
					domain.exit();
				}
			}

			flushing = false;
		}

		nextTick = function (task) {
			tail = tail.next = {
				task: task,
				domain: isNodeJS && process.domain,
				next: null
			};

			if (!flushing) {
				flushing = true;
				requestTick();
			}
		};

		if (typeof process !== "undefined" && process.nextTick) {
			isNodeJS = true;

			requestTick = function () {
				process.nextTick(flush);
			};

		} else if (typeof setImmediate === "function") {
			if (typeof window !== "undefined") {
				requestTick = setImmediate.bind(window, flush);
			} else {
				requestTick = function () {
					setImmediate(flush);
				};
			}

		} else if (typeof MessageChannel !== "undefined") {
			var channel = new MessageChannel();
			channel.port1.onmessage = function () {
				requestTick = requestPortTick;
				channel.port1.onmessage = flush;
				flush();
			};
			var requestPortTick = function () {
				channel.port2.postMessage(0);
			};
			requestTick = function () {
				setTimeout(flush, 0);
				requestPortTick();
			};

		} else {
			requestTick = function () {
				setTimeout(flush, 0);
			};
		}

		return nextTick;
	})();

	var call = Function.call;
	function uncurryThis(f) {
		return function () {
			return call.apply(f, arguments);
		};
	}

	var array_slice = uncurryThis(Array.prototype.slice);

	var array_reduce = uncurryThis(
		Array.prototype.reduce || function (callback, basis) {
			var index = 0,
				length = this.length;
			if (arguments.length === 1) {
				do {
					if (index in this) {
						basis = this[index++];
						break;
					}
					if (++index >= length) {
						throw new TypeError();
					}
				} while (1);
			}
			for (; index < length; index++) {
				if (index in this) {
					basis = callback(basis, this[index], index);
				}
			}
			return basis;
		}
	);

	var array_indexOf = uncurryThis(
		Array.prototype.indexOf || function (value) {
			for (var i = 0; i < this.length; i++) {
				if (this[i] === value) {
					return i;
				}
			}
			return -1;
		}
	);

	var array_map = uncurryThis(
		Array.prototype.map || function (callback, thisp) {
			var self = this;
			var collect = [];
			array_reduce(self, function (undefined, value, index) {
				collect.push(callback.call(thisp, value, index, self));
			}, void 0);
			return collect;
		}
	);

	var object_create = Object.create || function (prototype) {
		function Type() { }
		Type.prototype = prototype;
		return new Type();
	};

	var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

	var object_keys = Object.keys || function (object) {
		var keys = [];
		for (var key in object) {
			if (object_hasOwnProperty(object, key)) {
				keys.push(key);
			}
		}
		return keys;
	};

	var object_toString = uncurryThis(Object.prototype.toString);

	function isObject(value) {
		return typeof value == "object" && (value !== null);
	}


	function isStopIteration(exception) {
		return (
			object_toString(exception) === "[object StopIteration]" ||
				exception instanceof QReturnValue
			);
	}

	var QReturnValue;
	if (typeof ReturnValue !== "undefined") {
		QReturnValue = ReturnValue;
	} else {
		QReturnValue = function (value) {
			this.value = value;
		};
	}

	var hasES6Generators;
	try {
		new Function("(function* (){ yield 1; })");
		hasES6Generators = true;
	} catch (e) {
		hasES6Generators = false;
	}


	var STACK_JUMP_SEPARATOR = "From previous event:";

	function makeStackTraceLong(error, promise) {
		if (hasStacks &&
			promise.stack &&
			typeof error === "object" &&
			error !== null &&
			error.stack &&
			error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
			) {
			var stacks = [];
			for (var p = promise; !!p; p = p.source) {
				if (p.stack) {
					stacks.unshift(p.stack);
				}
			}
			stacks.unshift(error.stack);

			var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
			error.stack = filterStackString(concatedStacks);
		}
	}

	function filterStackString(stackString) {
		var lines = stackString.split("\n");
		var desiredLines = [];
		for (var i = 0; i < lines.length; ++i) {
			var line = lines[i];

			if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
				desiredLines.push(line);
			}
		}
		return desiredLines.join("\n");
	}

	function isNodeFrame(stackLine) {
		return stackLine.indexOf("(module.js:") !== -1 ||
			stackLine.indexOf("(node.js:") !== -1;
	}

	function getFileNameAndLineNumber(stackLine) {
		var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
		if (attempt1) {
			return [attempt1[1], Number(attempt1[2])];
		}

		var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
		if (attempt2) {
			return [attempt2[1], Number(attempt2[2])];
		}

		var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
		if (attempt3) {
			return [attempt3[1], Number(attempt3[2])];
		}
	}

	function isInternalFrame(stackLine) {
		var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

		if (!fileNameAndLineNumber) {
			return false;
		}

		var fileName = fileNameAndLineNumber[0];
		var lineNumber = fileNameAndLineNumber[1];

		return fileName === qFileName &&
			lineNumber >= qStartingLine &&
			lineNumber <= qEndingLine;
	}

	function captureLine() {
		if (!hasStacks) {
			return;
		}

		try {
			throw new Error();
		} catch (e) {
			var lines = e.stack.split("\n");
			var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
			var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
			if (!fileNameAndLineNumber) {
				return;
			}

			qFileName = fileNameAndLineNumber[0];
			return fileNameAndLineNumber[1];
		}
	}

	function deprecate(callback, name, alternative) {
		return function () {
			if (typeof console !== "undefined" &&
				typeof console.warn === "function") {
				console.warn(name + " is deprecated, use " + alternative +
					" instead.", new Error("").stack);
			}
			return callback.apply(callback, arguments);
		};
	}


	function Q(value) {
		if (isPromise(value)) {
			return value;
		}

		if (isPromiseAlike(value)) {
			return coerce(value);
		} else {
			return fulfill(value);
		}
	}
	Q.resolve = Q;

	Q.nextTick = nextTick;

	Q.longStackSupport = false;

	Q.defer = defer;
	function defer() {
		var messages = [], progressListeners = [], resolvedPromise;

		var deferred = object_create(defer.prototype);
		var promise = object_create(Promise.prototype);

		promise.promiseDispatch = function (resolve, op, operands) {
			var args = array_slice(arguments);
			if (messages) {
				messages.push(args);
				if (op === "when" && operands[1]) {
					progressListeners.push(operands[1]);
				}
			} else {
				nextTick(function () {
					resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
				});
			}
		};

		promise.valueOf = function () {
			if (messages) {
				return promise;
			}
			var nearerValue = nearer(resolvedPromise);
			if (isPromise(nearerValue)) {
				resolvedPromise = nearerValue;
			}
			return nearerValue;
		};

		promise.inspect = function () {
			if (!resolvedPromise) {
				return { state: "pending" };
			}
			return resolvedPromise.inspect();
		};

		if (Q.longStackSupport && hasStacks) {
			try {
				throw new Error();
			} catch (e) {
				promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
			}
		}


		function become(newPromise) {
			resolvedPromise = newPromise;
			promise.source = newPromise;

			array_reduce(messages, function (undefined, message) {
				nextTick(function () {
					newPromise.promiseDispatch.apply(newPromise, message);
				});
			}, void 0);

			messages = void 0;
			progressListeners = void 0;
		}

		deferred.promise = promise;
		deferred.resolve = function (value) {
			if (resolvedPromise) {
				return;
			}

			become(Q(value));
		};

		deferred.fulfill = function (value) {
			if (resolvedPromise) {
				return;
			}

			become(fulfill(value));
		};
		deferred.reject = function (reason) {
			if (resolvedPromise) {
				return;
			}

			become(reject(reason));
		};
		deferred.notify = function (progress) {
			if (resolvedPromise) {
				return;
			}

			array_reduce(progressListeners, function (undefined, progressListener) {
				nextTick(function () {
					progressListener(progress);
				});
			}, void 0);
		};

		return deferred;
	}

	defer.prototype.makeNodeResolver = function () {
		var self = this;
		return function (error, value) {
			if (error) {
				self.reject(error);
			} else if (arguments.length > 2) {
				self.resolve(array_slice(arguments, 1));
			} else {
				self.resolve(value);
			}
		};
	};

	Q.promise = promise;
	function promise(resolver) {
		if (typeof resolver !== "function") {
			throw new TypeError("resolver must be a function.");
		}
		var deferred = defer();
		try {
			resolver(deferred.resolve, deferred.reject, deferred.notify);
		} catch (reason) {
			deferred.reject(reason);
		}
		return deferred.promise;
	}

	Q.passByCopy = function (object) {
		return object;
	};

	Promise.prototype.passByCopy = function () {
		return this;
	};

	Q.join = function (x, y) {
		return Q(x).join(y);
	};

	Promise.prototype.join = function (that) {
		return Q([this, that]).spread(function (x, y) {
			if (x === y) {
				return x;
			} else {
				throw new Error("Can't join: not the same: " + x + " " + y);
			}
		});
	};

	Q.race = race;
	function race(answerPs) {
		return promise(function(resolve, reject) {
			for (var i = 0, len = answerPs.length; i < len; i++) {
				Q(answerPs[i]).then(resolve, reject);
			}
		});
	}

	Promise.prototype.race = function () {
		return this.then(Q.race);
	};

	Q.makePromise = Promise;
	function Promise(descriptor, fallback, inspect) {
		if (fallback === void 0) {
			fallback = function (op) {
				return reject(new Error(
					"Promise does not support operation: " + op
				));
			};
		}
		if (inspect === void 0) {
			inspect = function () {
				return {state: "unknown"};
			};
		}

		var promise = object_create(Promise.prototype);

		promise.promiseDispatch = function (resolve, op, args) {
			var result;
			try {
				if (descriptor[op]) {
					result = descriptor[op].apply(promise, args);
				} else {
					result = fallback.call(promise, op, args);
				}
			} catch (exception) {
				result = reject(exception);
			}
			if (resolve) {
				resolve(result);
			}
		};

		promise.inspect = inspect;

		if (inspect) {
			var inspected = inspect();
			if (inspected.state === "rejected") {
				promise.exception = inspected.reason;
			}

			promise.valueOf = function () {
				var inspected = inspect();
				if (inspected.state === "pending" ||
					inspected.state === "rejected") {
					return promise;
				}
				return inspected.value;
			};
		}

		return promise;
	}

	Promise.prototype.toString = function () {
		return "[object Promise]";
	};

	Promise.prototype.then = function (fulfilled, rejected, progressed) {
		var self = this;
		var deferred = defer();
		var done = false;

		function _fulfilled(value) {
			try {
				return typeof fulfilled === "function" ? fulfilled(value) : value;
			} catch (exception) {
				return reject(exception);
			}
		}

		function _rejected(exception) {
			if (typeof rejected === "function") {
				makeStackTraceLong(exception, self);
				try {
					return rejected(exception);
				} catch (newException) {
					return reject(newException);
				}
			}
			return reject(exception);
		}

		function _progressed(value) {
			return typeof progressed === "function" ? progressed(value) : value;
		}

		nextTick(function () {
			self.promiseDispatch(function (value) {
				if (done) {
					return;
				}
				done = true;

				deferred.resolve(_fulfilled(value));
			}, "when", [function (exception) {
				if (done) {
					return;
				}
				done = true;

				deferred.resolve(_rejected(exception));
			}]);
		});

		self.promiseDispatch(void 0, "when", [void 0, function (value) {
			var newValue;
			var threw = false;
			try {
				newValue = _progressed(value);
			} catch (e) {
				threw = true;
				if (Q.onerror) {
					Q.onerror(e);
				} else {
					throw e;
				}
			}

			if (!threw) {
				deferred.notify(newValue);
			}
		}]);

		return deferred.promise;
	};

	Q.when = when;
	function when(value, fulfilled, rejected, progressed) {
		return Q(value).then(fulfilled, rejected, progressed);
	}

	Promise.prototype.thenResolve = function (value) {
		return this.then(function () { return value; });
	};

	Q.thenResolve = function (promise, value) {
		return Q(promise).thenResolve(value);
	};

	Promise.prototype.thenReject = function (reason) {
		return this.then(function () { throw reason; });
	};

	Q.thenReject = function (promise, reason) {
		return Q(promise).thenReject(reason);
	};


	Q.nearer = nearer;
	function nearer(value) {
		if (isPromise(value)) {
			var inspected = value.inspect();
			if (inspected.state === "fulfilled") {
				return inspected.value;
			}
		}
		return value;
	}

	Q.isPromise = isPromise;
	function isPromise(object) {
		return isObject(object) &&
			typeof object.promiseDispatch === "function" &&
			typeof object.inspect === "function";
	}

	Q.isPromiseAlike = isPromiseAlike;
	function isPromiseAlike(object) {
		return isObject(object) && typeof object.then === "function";
	}

	Q.isPending = isPending;
	function isPending(object) {
		return isPromise(object) && object.inspect().state === "pending";
	}

	Promise.prototype.isPending = function () {
		return this.inspect().state === "pending";
	};

	Q.isFulfilled = isFulfilled;
	function isFulfilled(object) {
		return !isPromise(object) || object.inspect().state === "fulfilled";
	}

	Promise.prototype.isFulfilled = function () {
		return this.inspect().state === "fulfilled";
	};

	Q.isRejected = isRejected;
	function isRejected(object) {
		return isPromise(object) && object.inspect().state === "rejected";
	}

	Promise.prototype.isRejected = function () {
		return this.inspect().state === "rejected";
	};


	var unhandledReasons = [];
	var unhandledRejections = [];
	var unhandledReasonsDisplayed = false;
	var trackUnhandledRejections = true;
	function displayUnhandledReasons() {
		if (
			!unhandledReasonsDisplayed &&
				typeof window !== "undefined" && BeeSmart && BeeSmart.logger
			) {
			BeeSmart.logger.log("[Q] Unhandled rejection reasons (should be empty):");
			unhandledReasons.forEach(function(reason) {
				BeeSmart.logger.log(reason.toString(true));
			});
		}

		unhandledReasonsDisplayed = true;
	}

	function logUnhandledReasons() {
		if (
			!unhandledReasonsDisplayed &&
			typeof window !== "undefined" && BeeSmart && BeeSmart.logger
		) {
			for (var i = 0; i < unhandledReasons.length; i++) {
				var reason = unhandledReasons[i];
				BeeSmart.logger.log("Unhandled rejection reason:");
				BeeSmart.logger.log(reason);
			}
		}
	}

	function resetUnhandledRejections() {
		unhandledReasons.length = 0;
		unhandledRejections.length = 0;
		unhandledReasonsDisplayed = false;

		if (!trackUnhandledRejections) {
			trackUnhandledRejections = true;

			if (typeof process !== "undefined" && process.on) {
				process.on("exit", logUnhandledReasons);
			}
		}
	}

	function trackRejection(promise, reason) {
		if (!trackUnhandledRejections) {
			return;
		}

		unhandledRejections.push(promise);
		unhandledReasons.push(reason);
		displayUnhandledReasons();
	}

	function untrackRejection(promise) {
		if (!trackUnhandledRejections) {
			return;
		}

		var at = array_indexOf(unhandledRejections, promise);
		if (at !== -1) {
			unhandledRejections.splice(at, 1);
			unhandledReasons.splice(at, 1);
		}
	}

	Q.resetUnhandledRejections = resetUnhandledRejections;

	Q.getUnhandledReasons = function () {
		return unhandledReasons.slice();
	};

	Q.stopUnhandledRejectionTracking = function () {
		resetUnhandledRejections();
		if (typeof process !== "undefined" && process.on) {
			process.removeListener("exit", logUnhandledReasons);
		}
		trackUnhandledRejections = false;
	};

	resetUnhandledRejections();


	Q.reject = reject;
	function reject(reason) {
		var rejection = Promise({
			"when": function (rejected) {
				if (rejected) {
					untrackRejection(this);
				}
				return rejected ? rejected(reason) : this;
			}
		}, function fallback() {
			return this;
		}, function inspect() {
			return { state: "rejected", reason: reason };
		});

		trackRejection(rejection, reason);

		return rejection;
	}

	Q.fulfill = fulfill;
	function fulfill(value) {
		return Promise({
			"when": function () {
				return value;
			},
			"get": function (name) {
				return value[name];
			},
			"set": function (name, rhs) {
				value[name] = rhs;
			},
			"delete": function (name) {
				delete value[name];
			},
			"post": function (name, args) {
				if (name === null || name === void 0) {
					return value.apply(void 0, args);
				} else {
					return value[name].apply(value, args);
				}
			},
			"apply": function (thisp, args) {
				return value.apply(thisp, args);
			},
			"keys": function () {
				return object_keys(value);
			}
		}, void 0, function inspect() {
			return { state: "fulfilled", value: value };
		});
	}

	function coerce(promise) {
		var deferred = defer();
		nextTick(function () {
			try {
				promise.then(deferred.resolve, deferred.reject, deferred.notify);
			} catch (exception) {
				deferred.reject(exception);
			}
		});
		return deferred.promise;
	}

	Q.master = master;
	function master(object) {
		return Promise({
			"isDef": function () {}
		}, function fallback(op, args) {
			return dispatch(object, op, args);
		}, function () {
			return Q(object).inspect();
		});
	}

	Q.spread = spread;
	function spread(value, fulfilled, rejected) {
		return Q(value).spread(fulfilled, rejected);
	}

	Promise.prototype.spread = function (fulfilled, rejected) {
		return this.all().then(function (array) {
			return fulfilled.apply(void 0, array);
		}, rejected);
	};

	Q.async = async;
	function async(makeGenerator) {
		return function () {
			function continuer(verb, arg) {
				var result;
				if (hasES6Generators) {
					try {
						result = generator[verb](arg);
					} catch (exception) {
						return reject(exception);
					}
					if (result.done) {
						return result.value;
					} else {
						return when(result.value, callback, errback);
					}
				} else {
					try {
						result = generator[verb](arg);
					} catch (exception) {
						if (isStopIteration(exception)) {
							return exception.value;
						} else {
							return reject(exception);
						}
					}
					return when(result, callback, errback);
				}
			}
			var generator = makeGenerator.apply(this, arguments);
			var callback = continuer.bind(continuer, "next");
			var errback = continuer.bind(continuer, "throw");
			return callback();
		};
	}

	Q.spawn = spawn;
	function spawn(makeGenerator) {
		Q.done(Q.async(makeGenerator)());
	}

	Q["return"] = _return;
	function _return(value) {
		throw new QReturnValue(value);
	}

	Q.promised = promised;
	function promised(callback) {
		return function () {
			return spread([this, all(arguments)], function (self, args) {
				return callback.apply(self, args);
			});
		};
	}

	Q.dispatch = dispatch;
	function dispatch(object, op, args) {
		return Q(object).dispatch(op, args);
	}

	Promise.prototype.dispatch = function (op, args) {
		var self = this;
		var deferred = defer();
		nextTick(function () {
			self.promiseDispatch(deferred.resolve, op, args);
		});
		return deferred.promise;
	};

	Q.get = function (object, key) {
		return Q(object).dispatch("get", [key]);
	};

	Promise.prototype.get = function (key) {
		return this.dispatch("get", [key]);
	};

	Q.set = function (object, key, value) {
		return Q(object).dispatch("set", [key, value]);
	};

	Promise.prototype.set = function (key, value) {
		return this.dispatch("set", [key, value]);
	};

	Q.del =
		Q["delete"] = function (object, key) {
			return Q(object).dispatch("delete", [key]);
		};

	Promise.prototype.del =
		Promise.prototype["delete"] = function (key) {
			return this.dispatch("delete", [key]);
		};

	Q.mapply =
		Q.post = function (object, name, args) {
			return Q(object).dispatch("post", [name, args]);
		};

	Promise.prototype.mapply =
		Promise.prototype.post = function (name, args) {
			return this.dispatch("post", [name, args]);
		};

	Q.send =
		Q.mcall =
			Q.invoke = function (object, name ) {
				return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
			};

	Promise.prototype.send =
		Promise.prototype.mcall =
			Promise.prototype.invoke = function (name ) {
				return this.dispatch("post", [name, array_slice(arguments, 1)]);
			};

	Q.fapply = function (object, args) {
		return Q(object).dispatch("apply", [void 0, args]);
	};

	Promise.prototype.fapply = function (args) {
		return this.dispatch("apply", [void 0, args]);
	};

	Q["try"] =
		Q.fcall = function (object ) {
			return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
		};

	Promise.prototype.fcall = function () {
		return this.dispatch("apply", [void 0, array_slice(arguments)]);
	};

	Q.fbind = function (object ) {
		var promise = Q(object);
		var args = array_slice(arguments, 1);
		return function fbound() {
			return promise.dispatch("apply", [
				this,
				args.concat(array_slice(arguments))
			]);
		};
	};
	Promise.prototype.fbind = function () {
		var promise = this;
		var args = array_slice(arguments);
		return function fbound() {
			return promise.dispatch("apply", [
				this,
				args.concat(array_slice(arguments))
			]);
		};
	};

	Q.keys = function (object) {
		return Q(object).dispatch("keys", []);
	};

	Promise.prototype.keys = function () {
		return this.dispatch("keys", []);
	};

	Q.all = all;
	function all(promises) {
		return when(promises, function (promises) {
			var countDown = 0;
			var deferred = defer();
			array_reduce(promises, function (undefined, promise, index) {
				var snapshot;
				if (
					isPromise(promise) &&
						(snapshot = promise.inspect()).state === "fulfilled"
					) {
					promises[index] = snapshot.value;
				} else {
					++countDown;
					when(
						promise,
						function (value) {
							promises[index] = value;
							if (--countDown === 0) {
								deferred.resolve(promises);
							}
						},
						deferred.reject,
						function (progress) {
							deferred.notify({ index: index, value: progress });
						}
					);
				}
			}, void 0);
			if (countDown === 0) {
				deferred.resolve(promises);
			}
			return deferred.promise;
		});
	}

	Promise.prototype.all = function () {
		return all(this);
	};

	Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
	function allResolved(promises) {
		return when(promises, function (promises) {
			promises = array_map(promises, Q);
			return when(all(array_map(promises, function (promise) {
				return when(promise, noop, noop);
			})), function () {
				return promises;
			});
		});
	}

	Promise.prototype.allResolved = function () {
		return allResolved(this);
	};

	Q.allSettled = allSettled;
	function allSettled(promises) {
		return Q(promises).allSettled();
	}

	Promise.prototype.allSettled = function () {
		return this.then(function (promises) {
			return all(array_map(promises, function (promise) {
				promise = Q(promise);
				function regardless() {
					return promise.inspect();
				}
				return promise.then(regardless, regardless);
			}));
		});
	};

	Q.fail =
		Q["catch"] = function (object, rejected) {
			return Q(object).then(void 0, rejected);
		};

	Promise.prototype.fail =
		Promise.prototype["catch"] = function (rejected) {
			return this.then(void 0, rejected);
		};

	Q.progress = progress;
	function progress(object, progressed) {
		return Q(object).then(void 0, void 0, progressed);
	}

	Promise.prototype.progress = function (progressed) {
		return this.then(void 0, void 0, progressed);
	};

	Q.fin =
		Q["finally"] = function (object, callback) {
			return Q(object)["finally"](callback);
		};

	Promise.prototype.fin =
		Promise.prototype["finally"] = function (callback) {
			callback = Q(callback);
			return this.then(function (value) {
				return callback.fcall().then(function () {
					return value;
				});
			}, function (reason) {
				return callback.fcall().then(function () {
					throw reason;
				});
			});
		};

	Q.done = function (object, fulfilled, rejected, progress) {
		return Q(object).done(fulfilled, rejected, progress);
	};

	Promise.prototype.done = function (fulfilled, rejected, progress) {
		var onUnhandledError = function (error) {
			nextTick(function () {
				makeStackTraceLong(error, promise);
				if (Q.onerror) {
					Q.onerror(error);
				} else {
					throw error;
				}
			});
		};

		var promise = fulfilled || rejected || progress ?
			this.then(fulfilled, rejected, progress) :
			this;

		if (typeof process === "object" && process && process.domain) {
			onUnhandledError = process.domain.bind(onUnhandledError);
		}

		promise.then(void 0, onUnhandledError);
	};

	Q.timeout = function (object, ms, message) {
		return Q(object).timeout(ms, message);
	};

	Promise.prototype.timeout = function (ms, message) {
		var deferred = defer();
		var timeoutId = setTimeout(function () {
			deferred.reject(new Error(message || "Timed out after " + ms + " ms"));
		}, ms);

		this.then(function (value) {
			clearTimeout(timeoutId);
			deferred.resolve(value);
		}, function (exception) {
			clearTimeout(timeoutId);
			deferred.reject(exception);
		}, deferred.notify);

		return deferred.promise;
	};

	Q.delay = function (object, timeout) {
		if (timeout === void 0) {
			timeout = object;
			object = void 0;
		}
		return Q(object).delay(timeout);
	};

	Promise.prototype.delay = function (timeout) {
		return this.then(function (value) {
			var deferred = defer();
			setTimeout(function () {
				deferred.resolve(value);
			}, timeout);
			return deferred.promise;
		});
	};

	Q.nfapply = function (callback, args) {
		return Q(callback).nfapply(args);
	};

	Promise.prototype.nfapply = function (args) {
		var deferred = defer();
		var nodeArgs = array_slice(args);
		nodeArgs.push(deferred.makeNodeResolver());
		this.fapply(nodeArgs).fail(deferred.reject);
		return deferred.promise;
	};

	Q.nfcall = function (callback ) {
		var args = array_slice(arguments, 1);
		return Q(callback).nfapply(args);
	};

	Promise.prototype.nfcall = function () {
		var nodeArgs = array_slice(arguments);
		var deferred = defer();
		nodeArgs.push(deferred.makeNodeResolver());
		this.fapply(nodeArgs).fail(deferred.reject);
		return deferred.promise;
	};

	Q.nfbind =
		Q.denodeify = function (callback ) {
			var baseArgs = array_slice(arguments, 1);
			return function () {
				var nodeArgs = baseArgs.concat(array_slice(arguments));
				var deferred = defer();
				nodeArgs.push(deferred.makeNodeResolver());
				Q(callback).fapply(nodeArgs).fail(deferred.reject);
				return deferred.promise;
			};
		};

	Promise.prototype.nfbind =
		Promise.prototype.denodeify = function () {
			var args = array_slice(arguments);
			args.unshift(this);
			return Q.denodeify.apply(void 0, args);
		};

	Q.nbind = function (callback, thisp ) {
		var baseArgs = array_slice(arguments, 2);
		return function () {
			var nodeArgs = baseArgs.concat(array_slice(arguments));
			var deferred = defer();
			nodeArgs.push(deferred.makeNodeResolver());
			function bound() {
				return callback.apply(thisp, arguments);
			}
			Q(bound).fapply(nodeArgs).fail(deferred.reject);
			return deferred.promise;
		};
	};

	Promise.prototype.nbind = function () {
		var args = array_slice(arguments, 0);
		args.unshift(this);
		return Q.nbind.apply(void 0, args);
	};

	Q.nmapply =
		Q.npost = function (object, name, args) {
			return Q(object).npost(name, args);
		};

	Promise.prototype.nmapply =
		Promise.prototype.npost = function (name, args) {
			var nodeArgs = array_slice(args || []);
			var deferred = defer();
			nodeArgs.push(deferred.makeNodeResolver());
			this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
			return deferred.promise;
		};

	Q.nsend =
		Q.nmcall =
			Q.ninvoke = function (object, name ) {
				var nodeArgs = array_slice(arguments, 2);
				var deferred = defer();
				nodeArgs.push(deferred.makeNodeResolver());
				Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
				return deferred.promise;
			};

	Promise.prototype.nsend =
		Promise.prototype.nmcall =
			Promise.prototype.ninvoke = function (name ) {
				var nodeArgs = array_slice(arguments, 1);
				var deferred = defer();
				nodeArgs.push(deferred.makeNodeResolver());
				this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
				return deferred.promise;
			};

	Q.nodeify = nodeify;
	function nodeify(object, nodeback) {
		return Q(object).nodeify(nodeback);
	}

	Promise.prototype.nodeify = function (nodeback) {
		if (nodeback) {
			this.then(function (value) {
				nextTick(function () {
					nodeback(null, value);
				});
			}, function (error) {
				nextTick(function () {
					nodeback(error);
				});
			});
		} else {
			return this;
		}
	};

	var qEndingLine = captureLine();

	return Q;

});

MD5 = (function(){
	var hexcase = 0;
	var b64pad  = "";
	var chrsz   = 8;

	function hex_md5(s){ return binl2hex(core_md5(str2binl(s), s.length * chrsz));}
	function b64_md5(s){ return binl2b64(core_md5(str2binl(s), s.length * chrsz));}
	function str_md5(s){ return binl2str(core_md5(str2binl(s), s.length * chrsz));}
	function hex_hmac_md5(key, data) { return binl2hex(core_hmac_md5(key, data)); }
	function b64_hmac_md5(key, data) { return binl2b64(core_hmac_md5(key, data)); }
	function str_hmac_md5(key, data) { return binl2str(core_hmac_md5(key, data)); }

	function md5_vm_test()
	{
	  return "abc".md5() == "900150983cd24fb0d6963f7d28e17f72";
	}

	function core_md5(x, len)
	{
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	function core_hmac_md5(key, data)
	{
	  var bkey = str2binl(key);
	  if(bkey.length > 16) bkey = core_md5(bkey, key.length * chrsz);

	  var ipad = Array(16), opad = Array(16);
	  for(var i = 0; i < 16; i++)
	  {
	    ipad[i] = bkey[i] ^ 0x36363636;
	    opad[i] = bkey[i] ^ 0x5C5C5C5C;
	  }

	  var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);
	  return core_md5(opad.concat(hash), 512 + 128);
	}

	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	function str2binl(str)
	{
	  var bin = Array();
	  var mask = (1 << chrsz) - 1;
	  for(var i = 0; i < str.length * chrsz; i += chrsz)
	    bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (i%32);
	  return bin;
	}

	function binl2str(bin)
	{
	  var str = "";
	  var mask = (1 << chrsz) - 1;
	  for(var i = 0; i < bin.length * 32; i += chrsz)
	    str += String.fromCharCode((bin[i>>5] >>> (i % 32)) & mask);
	  return str;
	}

	function binl2hex(binarray)
	{
	  var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
	  var str = "";
	  for(var i = 0; i < binarray.length * 4; i++)
	  {
	    str += hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4)) & 0xF) +
	           hex_tab.charAt((binarray[i>>2] >> ((i%4)*8  )) & 0xF);
	  }
	  return str;
	}

	function binl2b64(binarray)
	{
	  var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	  var str = "";
	  for(var i = 0; i < binarray.length * 4; i += 3)
	  {
	    var triplet = (((binarray[i   >> 2] >> 8 * ( i   %4)) & 0xFF) << 16)
	                | (((binarray[i+1 >> 2] >> 8 * ((i+1)%4)) & 0xFF) << 8 )
	                |  ((binarray[i+2 >> 2] >> 8 * ((i+2)%4)) & 0xFF);
	    for(var j = 0; j < 4; j++)
	    {
	      if(i * 8 + j * 6 > binarray.length * 32) str += b64pad;
	      else str += tab.charAt((triplet >> 6*(3-j)) & 0x3F);
	    }
	  }
	  return str;
	}


	return {
		hex_md5: hex_md5,
		b64_md5: b64_md5,
		str_md5: str_md5,
		hex_hmac_md5: hex_hmac_md5,
		b64_hmac_md5: b64_hmac_md5,
		str_hmac_md5: str_hmac_md5
	};

})();


String.prototype.md5 = function(){
	return MD5.hex_md5(this);
};



SHA1 = (function SHA1(){

	var hexcase = 0;
	var b64pad  = "";
	var chrsz   = 8;

	function hex_sha1(s){return binb2hex(core_sha1(str2binb(s),s.length * chrsz));}
	function b64_sha1(s){return binb2b64(core_sha1(str2binb(s),s.length * chrsz));}
	function str_sha1(s){return binb2str(core_sha1(str2binb(s),s.length * chrsz));}
	function hex_hmac_sha1(key, data){ return binb2hex(core_hmac_sha1(key, data));}
	function b64_hmac_sha1(key, data, pad){ b64pad = pad; return binb2b64(core_hmac_sha1(key, data));}
	function str_hmac_sha1(key, data){ return binb2str(core_hmac_sha1(key, data));}

	function sha1_vm_test()
	{
	  return hex_sha1("abc") == "a9993e364706816aba3e25717850c26c9cd0d89d";
	}

	function core_sha1(x, len)
	{
		var w, a, b, c, d, e, xlen, olda, oldb, oldc, oldd, olde, t2, t1, r3, lsw, t, num;
		x[len >> 5] |= 0x80 << (24 - len % 32);
		x[((len + 64 >> 9) << 4) + 15] = len;

		w = Array(80);
		a = 1732584193;
		b = -271733879;
		c = -1732584194;
		d = 271733878;
		e = -1009589776;
		xlen = x.length;
		for (var i = 0; i < xlen; i += 16) {
			olda = a;
			oldb = b;
			oldc = c;
			oldd = d;
			olde = e;

			for (var j = 0; j < 80; j++) {
				if (j < 16) w[j] = x[i + j];
				else {
					num = w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16];
					w[j] = (num << 1) | (num >>> (32 - 1));
				}
				t1 = (a << 5) | (a >>> (32 - 5));
				t2 = (j < 20) ? (b & c) | ((~b) & d) :
					(j < 40) ? b ^ c ^ d :
						(j < 60) ? (b & c) | (b & d) | (c & d) :
							b ^ c ^ d;
				lsw = (t1 & 0xFFFF) + (t2 & 0xFFFF);
				t2 = ((t1 >> 16) + (t2 >> 16) + (lsw >> 16) << 16) | (lsw & 0xFFFF);

				t1 = (j < 20) ? 1518500249 :
					(j < 40) ? 1859775393 :
						(j < 60) ? -1894007588 :
							-899497514;

				lsw = (e & 0xFFFF) + (w[j] & 0xFFFF);
				r3 = ((e >> 16) + (w[j] >> 16) + (lsw >> 16) << 16) | (lsw & 0xFFFF);

				lsw = (r3 & 0xFFFF) + (t1 & 0xFFFF);
				r3 = ((r3 >> 16) + (t1 >> 16) + (lsw >> 16) << 16) | (lsw & 0xFFFF);

				lsw = (t2 & 0xFFFF) + (r3 & 0xFFFF);
				t = ((t2 >> 16) + (r3 >> 16) + (lsw >> 16) << 16) | (lsw & 0xFFFF);

				e = d;
				d = c;
				c = (b << 30) | (b >>> (32 - 30));
				b = a;
				a = t;
			}

			lsw = (a & 0xFFFF) + (olda & 0xFFFF);
			a = ((a >> 16) + (olda >> 16) + (lsw >> 16) << 16) | (lsw & 0xFFFF);

			lsw = (b & 0xFFFF) + (oldb & 0xFFFF);
			b = ((b >> 16) + (oldb >> 16) + (lsw >> 16) << 16) | (lsw & 0xFFFF);

			lsw = (c & 0xFFFF) + (oldc & 0xFFFF);
			c = ((c >> 16) + (oldc >> 16) + (lsw >> 16) << 16) | (lsw & 0xFFFF);

			lsw = (d & 0xFFFF) + (oldd & 0xFFFF);
			d = ((d >> 16) + (oldd >> 16) + (lsw >> 16) << 16) | (lsw & 0xFFFF);

			lsw = (e & 0xFFFF) + (olde & 0xFFFF);
			e = ((e >> 16) + (olde >> 16) + (lsw >> 16) << 16) | (lsw & 0xFFFF);
		}
		return Array(a, b, c, d, e);
	}

	function sha1_ft(t, b, c, d)
	{
	  if(t < 20) return (b & c) | ((~b) & d);
	  if(t < 40) return b ^ c ^ d;
	  if(t < 60) return (b & c) | (b & d) | (c & d);
	  return b ^ c ^ d;
	}

	function sha1_kt(t)
	{
	  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	         (t < 60) ? -1894007588 : -899497514;
	}

	function core_hmac_sha1(key, data, pad)
	{
	  var bkey = str2binb(key);
	  if(bkey.length > 16) bkey = core_sha1(bkey, key.length * chrsz);

	  var ipad = Array(16), opad = Array(16);
	  for(var i = 0; i < 16; i++)
	  {
	    ipad[i] = bkey[i] ^ 0x36363636;
	    opad[i] = bkey[i] ^ 0x5C5C5C5C;
	  }

	  var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * chrsz);
	  return core_sha1(opad.concat(hash), 512 + 160);
	}

	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	function rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	function str2binb(str)
	{
	  var bin = Array();
	  var mask = (1 << chrsz) - 1;
	  for(var i = 0; i < str.length * chrsz; i += chrsz)
	    bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (32 - chrsz - i%32);
	  return bin;
	}

	function binb2str(bin)
	{
	  var str = "";
	  var mask = (1 << chrsz) - 1;
	  for(var i = 0; i < bin.length * 32; i += chrsz)
	    str += String.fromCharCode((bin[i>>5] >>> (32 - chrsz - i%32)) & mask);
	  return str;
	}

	function binb2hex(binarray)
	{
	  var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
	  var str = "";
	  for(var i = 0; i < binarray.length * 4; i++)
	  {
	    str += hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8+4)) & 0xF) +
	           hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8  )) & 0xF);
	  }
	  return str;
	}

	function binb2b64(binarray)
	{
	  var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	  var str = "";
	  for(var i = 0; i < binarray.length * 4; i += 3)
	  {
	    var triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16)
	                | (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 )
	                |  ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);
	    for(var j = 0; j < 4; j++)
	    {
	      if(i * 8 + j * 6 > binarray.length * 32) str += b64pad;
	      else str += tab.charAt((triplet >> 6*(3-j)) & 0x3F);
	    }
	  }

	  return str;
	}

	String.prototype.SHA1 = function(){
		return str_sha1(this);
	};


	return {
		hex_sha1: hex_sha1,
		b64_sha1: b64_sha1,
		str_sha1: str_sha1,
		hex_hmac_sha1: hex_hmac_sha1,
		b64_hmac_sha1: b64_hmac_sha1,
		str_hmac_sha1: str_hmac_sha1
	};
})();



OAuth = (function (b64_hmac_sha1) {





	var OAuth;
	if (OAuth == null) OAuth = {};

	OAuth.setProperties = function setProperties(into, from) {
		if (into != null && from != null) {
			for (var key in from) {
				into[key] = from[key];
			}
		}
		return into;
	};

	OAuth.setProperties(OAuth,
		{
			percentEncode: function percentEncode(s) {
				if (s == null) {
					return "";
				}
				if (s instanceof Array) {
					var e = "";
					for (var i = 0; i < s.length; ++s) {
						if (e != "") e += '&';
						e += OAuth.percentEncode(s[i]);
					}
					return e;
				}
				s = encodeURIComponent(s);
				s = s.replace(/\!/g, "%21");
				s = s.replace(/\*/g, "%2A");
				s = s.replace(/\'/g, "%27");
				s = s.replace(/\(/g, "%28");
				s = s.replace(/\)/g, "%29");
				return s;
			}
			,
			decodePercent: function decodePercent(s) {
				if (s != null) {
					s = s.replace(/\+/g, " ");
				}
				return decodeURIComponent(s);
			}
			,
			getParameterList: function getParameterList(parameters) {
				if (parameters == null) {
					return [];
				}
				if (typeof parameters != "object") {
					return OAuth.decodeForm(parameters + "");
				}
				if (parameters instanceof Array) {
					return parameters;
				}
				var list = [];
				for (var p in parameters) {
					list.push([p, parameters[p]]);
				}
				return list;
			}
			,
			getParameterMap: function getParameterMap(parameters) {
				if (parameters == null) {
					return {};
				}
				if (typeof parameters != "object") {
					return OAuth.getParameterMap(OAuth.decodeForm(parameters + ""));
				}
				if (parameters instanceof Array) {
					var map = {};
					for (var p = 0; p < parameters.length; ++p) {
						var key = parameters[p][0];
						if (map[key] === undefined) {
							map[key] = parameters[p][1];
						}
					}
					return map;
				}
				return parameters;
			}
			,
			getParameter: function getParameter(parameters, name) {
				if (parameters instanceof Array) {
					for (var p = 0; p < parameters.length; ++p) {
						if (parameters[p][0] == name) {
							return parameters[p][1];
						}
					}
				} else {
					return OAuth.getParameterMap(parameters)[name];
				}
				return null;
			}
			,
			formEncode: function formEncode(parameters) {
				var form = "";
				var list = OAuth.getParameterList(parameters);
				for (var p = 0; p < list.length; ++p) {
					var value = list[p][1];
					if (value == null) value = "";
					if (form != "") form += '&';
					form += OAuth.percentEncode(list[p][0])
						+ '=' + OAuth.percentEncode(value);
				}
				return form;
			}
			,
			decodeForm: function decodeForm(form) {
				var list = [];
				var nvps = form.split('&');
				for (var n = 0; n < nvps.length; ++n) {
					var nvp = nvps[n];
					if (nvp == "") {
						continue;
					}
					var equals = nvp.indexOf('=');
					var name;
					var value;
					if (equals < 0) {
						name = OAuth.decodePercent(nvp);
						value = null;
					} else {
						name = OAuth.decodePercent(nvp.substring(0, equals));
						value = OAuth.decodePercent(nvp.substring(equals + 1));
					}
					list.push([name, value]);
				}
				return list;
			}
			,
			setParameter: function setParameter(message, name, value) {
				var parameters = message.parameters;
				if (parameters instanceof Array) {
					for (var p = 0; p < parameters.length; ++p) {
						if (parameters[p][0] == name) {
							if (value === undefined) {
								parameters.splice(p, 1);
							} else {
								parameters[p][1] = value;
								value = undefined;
							}
						}
					}
					if (value !== undefined) {
						parameters.push([name, value]);
					}
				} else {
					parameters = OAuth.getParameterMap(parameters);
					parameters[name] = value;
					message.parameters = parameters;
				}
			}
			,
			setParameters: function setParameters(message, parameters) {
				var list = OAuth.getParameterList(parameters);
				for (var i = 0; i < list.length; ++i) {
					OAuth.setParameter(message, list[i][0], list[i][1]);
				}
			}

			,
			setTimestampAndNonce: function setTimestampAndNonce(message) {
				OAuth.setParameter(message, "oauth_timestamp", OAuth.timestamp());
				OAuth.setParameter(message, "oauth_nonce", OAuth.nonce(6));
			}
			,
			addToURL: function addToURL(url, parameters) {
				newURL = url;
				if (parameters != null) {
					var toAdd = OAuth.formEncode(parameters);
					if (toAdd.length > 0) {
						var q = url.indexOf('?');
						if (q < 0) newURL += '?';
						else       newURL += '&';
						newURL += toAdd;
					}
				}
				return newURL;
			}
			,
			getAuthorizationHeader: function getAuthorizationHeader(realm, parameters) {
				var header = 'OAuth realm="' + OAuth.percentEncode(realm) + '"';
				var list = OAuth.getParameterList(parameters);
				for (var p = 0; p < list.length; ++p) {
					var parameter = list[p];
					var name = parameter[0];
					if (name.indexOf("oauth_") == 0) {
						header += ',' + OAuth.percentEncode(name) + '="' + OAuth.percentEncode(
								parameter[1]) + '"';
					}
				}
				return header;
			}
			,
			correctTimestampFromSrc: function correctTimestampFromSrc(parameterName) {
				parameterName = parameterName || "oauth_timestamp";
				var scripts = document.getElementsByTagName('script');
				if (scripts == null || !scripts.length) return;
				var src = scripts[scripts.length - 1].src;
				if (!src) return;
				var q = src.indexOf("?");
				if (q < 0) return;
				parameters = OAuth.getParameterMap(OAuth.decodeForm(src.substring(q + 1)));
				var t = parameters[parameterName];
				if (t == null) return;
				OAuth.correctTimestamp(t);
			}
			,
			correctTimestamp: function correctTimestamp(timestamp) {
				OAuth.timeCorrectionMsec = (timestamp * 1000) - Date.now();
			}
			,
			timeCorrectionMsec: 0
			,
			timestamp: function timestamp() {
				var t = Date.now() + OAuth.timeCorrectionMsec;
				return Math.floor(t / 1000);
			}
			,
			nonce: function nonce(length) {
				var chars = OAuth.nonce.CHARS;
				var result = "";
				for (var i = 0; i < length; ++i) {
					var rnum = Math.floor(Math.random() * chars.length);
					result += chars.substring(rnum, rnum + 1);
				}
				return result;
			}
		});

	OAuth.nonce.CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";

	OAuth.declareClass = function declareClass(parent, name, newConstructor) {
		var previous = parent[name];
		parent[name] = newConstructor;
		if (newConstructor != null && previous != null) {
			for (var key in previous) {
				if (key != "prototype") {
					newConstructor[key] = previous[key];
				}
			}
		}
		return newConstructor;
	};

	OAuth.declareClass(OAuth, "SignatureMethod", function OAuthSignatureMethod() {
	});

	OAuth.setProperties(OAuth.SignatureMethod.prototype,
		{
			sign: function sign(message) {
				var baseString = OAuth.SignatureMethod.getBaseString(message);
				var signature = this.getSignature(baseString);
				OAuth.setParameter(message, "oauth_signature", signature);
				return signature;
			}
			,
			initialize: function initialize(name, accessor) {
				var consumerSecret;
				if (accessor.accessorSecret != null
					&& name.length > 9
					&& name.substring(name.length - 9) == "-Accessor") {
					consumerSecret = accessor.accessorSecret;
				} else {
					consumerSecret = accessor.consumerSecret;
				}



				this.key = OAuth.percentEncode(consumerSecret)
					+ "&" + OAuth.percentEncode(accessor.tokenSecret);



					alert("+==========================================================================================");
					alert("consumerSecret: " + OAuth.percentEncode(consumerSecret));
					alert("accessor.tokenSecret: " + OAuth.percentEncode(accessor.tokenSecret));
					alert("KEY: " + this.key);
					alert("+==========================================================================================");

			}
		});

	OAuth.setProperties(OAuth.SignatureMethod,
		{
			sign: function sign(message, accessor) {
				var name = OAuth.getParameterMap(message.parameters).oauth_signature_method;
				if (name == null || name == "") {
					name = "HMAC-SHA1";
					OAuth.setParameter(message, "oauth_signature_method", name);
				}
				OAuth.SignatureMethod.newMethod(name, accessor).sign(message);
			}
			,
			newMethod: function newMethod(name, accessor) {
				var impl = OAuth.SignatureMethod.REGISTERED[name];
				if (impl != null) {
					var method = new impl();
					method.initialize(name, accessor);
					return method;
				}
				var err = new Error("signature_method_rejected");
				var acceptable = "";
				for (var r in OAuth.SignatureMethod.REGISTERED) {
					if (acceptable != "") acceptable += '&';
					acceptable += OAuth.percentEncode(r);
				}
				err.oauth_acceptable_signature_methods = acceptable;
				throw err;
			}
			,
			REGISTERED: {}
			,
			registerMethodClass: function registerMethodClass(names, classConstructor) {
				for (var n = 0; n < names.length; ++n) {
					OAuth.SignatureMethod.REGISTERED[names[n]] = classConstructor;
				}
			}
			,
			makeSubclass: function makeSubclass(getSignatureFunction) {
				var superClass = OAuth.SignatureMethod;
				var subClass = function () {
					superClass.call(this);
				};
				subClass.prototype = new superClass();
				subClass.prototype.getSignature = getSignatureFunction;
				subClass.prototype.constructor = subClass;
				return subClass;
			}
			,
			getBaseString: function getBaseString(message) {
				var URL = message.action;
				var q = URL.indexOf('?');
				var parameters;
				if (q < 0) {
					parameters = message.parameters;
				} else {
					parameters = OAuth.decodeForm(URL.substring(q + 1))
						.concat(OAuth.getParameterList(message.parameters));
				}
				parameters = parameters.sort(function (a, b) {
					a = a[0];
					b = b[0];
					return a > b ? 1 : (a < b ? -1 : 0);
				});
				return OAuth.percentEncode(message.method.toUpperCase())
					+ '&' + OAuth.percentEncode(OAuth.SignatureMethod.normalizeUrl(URL))
					+ '&' + OAuth.percentEncode(
						OAuth.SignatureMethod.normalizeParameters(parameters));
			}
			,
			normalizeUrl: function normalizeUrl(url) {
				var uri = OAuth.SignatureMethod.parseUri(url);
				var scheme = uri.protocol.toLowerCase();
				var authority = uri.authority.toLowerCase();
				var dropPort = (scheme == "http" && uri.port == 80)
					|| (scheme == "https" && uri.port == 443);
				if (dropPort) {
					var index = authority.lastIndexOf(":");
					if (index >= 0) {
						authority = authority.substring(0, index);
					}
				}
				var path = uri.path;
				if (!path) {
					path = "/";
				}
				return scheme + "://" + authority + path;
			}
			,
			parseUri: function parseUri(str) {
				var o = {
					key: ["source", "protocol", "authority", "userInfo", "user", "password", "host",
						"port", "relative", "path", "directory", "file", "query", "anchor"
					],
					parser: {strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@\/]*):?([^:@\/]*))?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/}
				};
				var m = o.parser.strict.exec(str);
				var uri = {};
				var i = 14;
				while (i--) uri[o.key[i]] = m[i] || "";
				return uri;
			}
			,
			normalizeParameters: function normalizeParameters(parameters) {
				if (parameters == null) {
					return "";
				}
				var list = OAuth.getParameterList(parameters);
				var sortable = [];
				for (var p = 0; p < list.length; ++p) {
					var nvp = list[p];
					if (nvp[0] != "oauth_signature") {
						sortable.push([OAuth.percentEncode(nvp[0])
						+ " "
						+ OAuth.percentEncode(nvp[1])
							, nvp
						]);
					}
				}
				sortable.sort(function (a, b) {
					if (a[0] < b[0]) return -1;
					if (a[0] > b[0]) return 1;
					return 0;
				});
				var sorted = [];
				for (var s = 0; s < sortable.length; ++s) {
					sorted.push(sortable[s][1]);
				}
				return OAuth.formEncode(sorted);
			}
		});

	OAuth.SignatureMethod.registerMethodClass(["PLAINTEXT", "PLAINTEXT-Accessor"],
		OAuth.SignatureMethod.makeSubclass(
			function getSignature(baseString) {
				return this.key;
			}
		));

	OAuth.SignatureMethod.registerMethodClass(["HMAC-SHA1", "HMAC-SHA1-Accessor"],
		OAuth.SignatureMethod.makeSubclass(
			function getSignature(baseString) {

				alert("");
				alert("===========================================================");
				alert("Generate Signature");
				alert("KEY: " + this.key);
				alert("BaseString: " + baseString);
				alert("===========================================================");
				alert("");

				return b64_hmac_sha1(this.key, baseString, "=");
			}
		));

	OAuth.generateOauthMessage = function (properties) {
		var methodUrl = "url" in properties && properties.url || "",
			tokenSecret = "tokenSecret" in properties && properties.tokenSecret || "",
			consumerKey = "consumerKey" in properties && properties.consumerKey || "",
			consumerSecret = "consumerSecret" in properties && properties.consumerSecret || "",
			method = "method" in properties && properties.method || "post",
			parameters = "parameters" in properties && properties.parameters || {}
			;
		var alreadyInParams = [];
		var message = {
			action: methodUrl,
			method: method,
			parameters: [
				["oauth_consumer_key", consumerKey],
				["oauth_signature_method", "HMAC-SHA1"],
				["oauth_version", "1.0"]
			]
		};

		alreadyInParams.push("oauth_consumer_key");
		alreadyInParams.push("oauth_signature_method");
		alreadyInParams.push("oauth_version");

		for (var i in parameters) {
			if (alreadyInParams.indexOf(i) == -1) {
				message.parameters.push([i, parameters[i]]);
				alreadyInParams.push(i);
			} else {
				l('OAUTH: cannot add ' + i + ' to parameter twice!');
			}
		}

		OAuth.setTimestampAndNonce(message);
		OAuth.SignatureMethod.sign(
			message,
			{
				consumerSecret: consumerSecret,
				tokenSecret: tokenSecret
			}
		);

		return OAuth.getParameterMap(message.parameters);
	};


	OAuth.getAuthorizationQueryString = function (url, method, accessPair) {
		var oauthMsgParams = {"url": url, "method": method};
		oauthMsgParams.consumerKey = accessPair.consumerKey;
		oauthMsgParams.consumerSecret = accessPair.consumerSecret;
		var authHeader = OAuth.getAuthorizationHeader('www.beesmart.tv',
			OAuth.generateOauthMessage(oauthMsgParams));

		return oauthMsgParams.url + "?" +
			authHeader
				.replace(/OAuth realm="[^"]+",/, '')
				.replace('",', "&", "g")
				.replace('"', '', "g");
	};

	OAuth.generateOauthMessageAsQueryString = function (url, method, accessPair) {
		var oauthMsgParams = {"url": url, "method": method};
		var authHeader = OAuth.getAuthorizationHeader('www.beesmart.tv',
			OAuth.generateOauthMessage(accessPair));

		var paramsChar = '?';
		if (oauthMsgParams.url.indexOf('?') != -1)
			paramsChar = '&';

		return oauthMsgParams.url + paramsChar +
			authHeader
				.replace(/OAuth realm="[^"]+",/, '')
				.replace('",', "&", "g")
				.replace('"', '', "g");
	};


	try {
	} catch (e) {
	}

	return OAuth;

})(SHA1.b64_hmac_sha1);

(function(){

var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
	done = 0,
	toString = Object.prototype.toString,
	debugSizzle = false,
	baseHasDuplicate = true;

var log = debugSizzle ? alert : function(){};

[0, 0].sort(function() {
	baseHasDuplicate = false;
	return 0;
});


var Sizzle = function(selector, context, results, seed) {
	results = results || [];
	context = context || document;

	var origContext = context;

	if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
		return [];
	}

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}
	log('************* SIZZLE '+ selector +' @ '+ context);
	var m, set, checkSet, extra, ret, cur, pop, i,
		prune = true,
		contextXML = Sizzle.isXML( context ),
		parts = [],
		soFar = selector;

	do {
		chunker.exec( "" );
		m = chunker.exec( soFar );

		if ( m ) {
			soFar = m[3];

		parts.push( m[1] );

		if ( m[2] ) {
				extra = m[3];
			break;
		}
	}
	} while ( m );

	if ( parts.length > 1 && origPOS.exec( selector ) ) {
		if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
			set = posProcess( parts[0] + parts[1], context );
		} else {
			set = Expr.relative[ parts[0] ] ?
				[ context ] :
				Sizzle( parts.shift(), context );

			while ( parts.length ) {
				selector = parts.shift();

				if ( Expr.relative[ selector ] ){
					selector += parts.shift();
				}

				set = posProcess( selector, set );
			}
		}
	} else {
		if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
				Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {

			ret = Sizzle.find( parts.shift(), context, contextXML );
			context = ret.expr ?
				Sizzle.filter( ret.expr, ret.set )[0] :
				ret.set[0];
		}

		if ( context ) {
			ret = seed ?
			{ expr: parts.pop(), set: makeArray(seed) } :
				Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );

			set = ret.expr ?
				Sizzle.filter( ret.expr, ret.set ) :
				ret.set;

		if ( parts.length > 0 ) {
			checkSet = makeArray(set);
		} else {
			prune = false;
		}

		while ( parts.length ) {
				cur = parts.pop();
				pop = cur;

			if ( !Expr.relative[ cur ] ) {
				cur = "";
			} else {
				pop = parts.pop();
			}

			if ( pop == null ) {
				pop = context;
			}

				Expr.relative[ cur ]( checkSet, pop, contextXML );
			}

		} else {
			checkSet = parts = [];
		}
	}

	if ( !checkSet ) {
		checkSet = set;
	}

	if ( !checkSet ) {
		Sizzle.error( cur || selector );
	}

	if ( toString.call(checkSet) === "[object Array]" ) {
		if ( !prune ) {
			results.push.apply( results, checkSet );

		} else if ( context && context.nodeType === 1 ) {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i])) ) {
					results.push( set[i] );
				}
			}
		} else {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
					results.push( set[i] );
				}
			}
		}
	} else {
		makeArray( checkSet, results );
	}

	if ( extra ) {
		Sizzle( extra, origContext, results, seed );
		Sizzle.uniqueSort( results );
	}

	return results;
};

Sizzle.uniqueSort = function( results ) {
		if ( sortOrder ) {
		hasDuplicate = baseHasDuplicate;
			results.sort(sortOrder);

			if ( hasDuplicate ) {
				for ( var i = 1; i < results.length; i++ ) {
					if ( results[i] === results[i-1] ) {
						results.splice(i--, 1);
					}
				}
			}
		}

	return results;
};

Sizzle.matches = function(expr, set){
	return Sizzle(expr, null, null, set);
};

Sizzle.matchesSelector = function( node, expr ) {
	return Sizzle( expr, null, null, [node] ).length > 0;
};

Sizzle.find = function(expr, context, isXML){
	var set;

	if ( !expr ) {
		return [];
	}
	log('SIZZLE find: '+ expr +', '+ context);

	for ( var i = 0, l = Expr.order.length; i < l; i++ ) {
		var match,
			type = Expr.order[i];

		if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
			var left = match[1];
			match.splice( 1, 1 );

			if ( left.substr( left.length - 1 ) !== "\\" ) {
				match[1] = (match[1] || "").replace(/\\/g, "");
				set = Expr.find[ type ]( match, context, isXML );

				if ( set != null ) {
					expr = expr.replace( Expr.match[ type ], "" );
					break;
				}
			}
		}
	}



	if ( !set ) {
		if (context === document)
			throw new Error('ERROR @ SIZZLE: Whole dom search triggered. '+
				'Try to init #id selector and then search for desired nodes.');
		set = Expr.find.TAG([null, "*"], context);
	}

	return {set: set, expr: expr};
};

Sizzle.filter = function(expr, set, inplace, not){
	var match, anyFound,
		old = expr,
		result = [],
		curLoop = set,
		isXMLFilter = set && set[0] && Sizzle.isXML( set[0] );

	while ( expr && set.length ) {
		for ( var type in Expr.filter ) {
			if ( (match = Expr.leftMatch[ type ].exec( expr )) != null && match[2] ) {
				var found, item,
					filter = Expr.filter[ type ],
					left = match[1];

				anyFound = false;

				match.splice(1,1);

				if ( left.substr( left.length - 1 ) === "\\" ) {
					continue;
				}

				if ( curLoop === result ) {
					result = [];
				}

				if ( Expr.preFilter[ type ] ) {
					match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );

					if ( !match ) {
						anyFound = found = true;
					} else if ( match === true ) {
						continue;
					}
				}

				if ( match ) {
					for ( var i = 0; (item = curLoop[i]) != null; i++ ) {
						if ( item ) {
							found = filter( item, match, i, curLoop );

							var pass = not ^ !!found;

							if ( inplace && found != null ) {
								if ( pass ) {
									anyFound = true;
								} else {
									curLoop[i] = false;
								}
							} else if ( pass ) {
								result.push( item );
								anyFound = true;
							}

						}
					}
				}


				if ( found !== undefined ) {
					if ( !inplace ) {
						curLoop = result;
					}

					expr = expr.replace( Expr.match[ type ], "" );

					if ( !anyFound ) {
						return [];
					}

					break;
				}
			}
		}

		if ( expr === old ) {
			if ( anyFound == null ) {
				Sizzle.error( expr );

			} else {
				break;
			}
		}

		old = expr;
	}

	return curLoop;
};

Sizzle.error = function( msg ) {
	throw "Syntax error, unrecognized expression: " + msg;
};

var Expr = (Sizzle.selectors = {
	order: [ "ID", "NAME", "TAG" ],
	match: {
		ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
		TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
		CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
		PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
	},

	leftMatch: {},

	attrMap: {
		"class": "className",
		"for": "htmlFor"
	},
	attrHandle: {
		href: function(elem){
			return elem.getAttribute("href");
		}
	},
	relative: {
		"+": function(checkSet, part){
			var isPartStr = typeof part === "string",
				isTag = isPartStr && !/\W/.test(part),
				isPartStrNotTag = isPartStr && !isTag;

			if ( isTag ) {
				part = part.toLowerCase();
			}

			for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
				if ( (elem = checkSet[i]) ) {
					while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}

					checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
						elem || false :
						elem === part;
				}
			}

			if ( isPartStrNotTag ) {
				Sizzle.filter( part, checkSet, true );
			}
		},
		">": function(checkSet, part){
			log('SIZZLE Expr >');
			var elem,
				isPartStr = typeof part === "string",
				i = 0,
				l = checkSet.length;

			if ( isPartStr && !/\W/.test(part) ) {
				part = part.toLowerCase();

				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						var parent = elem.parentNode;
						checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
					}
				}
			} else {
				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						checkSet[i] = isPartStr ?
							elem.parentNode :
							elem.parentNode === part;
					}
				}

				if ( isPartStr ) {
					Sizzle.filter( part, checkSet, true );
				}
			}
		},
		"": function(checkSet, part, isXML){
			log('SIZZLE Expr ""');
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !/\W/.test(part) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML);
		},
		"~": function(checkSet, part, isXML){
			log('SIZZLE Expr ~');
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !/\W/.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML);
		}
	},
	find: {
		ID: function(match, context, isXML){
			log('SIZZLE Expr::find ID');
			if (typeof context.getElementById !== "undefined") {
				var m = context.getElementById(match[1]);
				return m && m.parentNode ? [m] : [];
			}
		},
		NAME: function(match, context){
			log('SIZZLE Expr::find NAME');
			if ( typeof context.getElementsByName !== "undefined" ) {
				var ret = [],
					results = context.getElementsByName( match[1] );

				for ( var i = 0, l = results.length; i < l; i++ ) {
					if ( results[i].getAttribute("name") === match[1] ) {
						ret.push( results[i] );
					}
				}

				return ret.length === 0 ? null : ret;
			}
		},
		TAG: function(match, context){
			log('SIZZLE Expr::find TAG');
			return context.getElementsByTagName(match[1]);
		}
	},
	preFilter: {
		CLASS: function(match, curLoop, inplace, result, not, isXML){
			log('SIZZLE Expr::preFilter CLASS');
			match = " " + match[1].replace(/\\/g, "") + " ";

			if ( isXML ) {
				return match;
			}

			for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
				if ( elem ) {
					if ( not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0) ) {
						if ( !inplace ) {
							result.push( elem );
						}

					} else if ( inplace ) {
						curLoop[i] = false;
					}
				}
			}

			return false;
		},
		ID: function(match){
			log('SIZZLE Expr::preFilter ID -> '+match);
			return match[1].replace(/\\/g, "");
		},
		TAG: function(match, curLoop){
			log('SIZZLE Expr::preFilter TAG -> '+match);
			return match[1].toLowerCase()
		},
		CHILD: function(match){
			log('SIZZLE Expr::preFilter CHILD');
			if ( match[1] === "nth" ) {
				if ( !match[2] ) {
					Sizzle.error( match[0] );
				}

				match[2] = match[2].replace(/^\+|\s*/g, '');

				var test = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(
					match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);

				match[2] = (test[1] + (test[2] || 1)) - 0;
				match[3] = test[3] - 0;
			}
			else if ( match[2] ) {
				Sizzle.error( match[0] );
			}

			match[0] = done++;

			return match;
		},
		ATTR: function(match, curLoop, inplace, result, not, isXML){
			log('SIZZLE Expr::preFilter ATTR');
			var name = match[1].replace(/\\/g, "");

			if ( !isXML && Expr.attrMap[name] ) {
				match[1] = Expr.attrMap[name];
			}

			if ( match[2] === "~=" ) {
				match[4] = " " + match[4] + " ";
			}

			return match;
		},
		PSEUDO: function(match, curLoop, inplace, result, not){
			log('SIZZLE Expr::preFilter PESUDO');
			if ( match[1] === "not" ) {
				if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
					match[3] = Sizzle(match[3], null, null, curLoop);
				} else {
					var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
					if ( !inplace ) {
						result.push.apply( result, ret );
					}
					return false;
				}
			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
				return true;
			}

			return match;
		},
		POS: function(match){
			log('SIZZLE Expr::preFilter POS');
			match.unshift( true );
			return match;
		}
	},
	filters: {
		enabled: function(elem){
			return elem.disabled === false && elem.type !== "hidden";
		},
		disabled: function(elem){
			return elem.disabled === true;
		},
		checked: function(elem){
			return elem.checked === true;
		},
		selected: function(elem){
			elem.parentNode.selectedIndex;
			return elem.selected === true;
		},
		parent: function(elem){
			log('SIZZLE Expr::filters parent');
			return !!elem.firstChild;
		},
		empty: function(elem){
			log('SIZZLE Expr::filters empty');
			return !elem.firstChild;
		},
		has: function(elem, i, match){
			log('SIZZLE Expr::filters has');
			return !!Sizzle( match[3], elem ).length;
		},
		header: function(elem){
			return (/h\d/i).test( elem.nodeName );
		},
		text: function(elem){
			return "text" === elem.type;
		},
		radio: function(elem){
			return "radio" === elem.type;
		},
		checkbox: function(elem){
			return "checkbox" === elem.type;
		},
		file: function(elem){
			return "file" === elem.type;
		},
		password: function(elem){
			return "password" === elem.type;
		},
		submit: function(elem){
			return "submit" === elem.type;
		},
		image: function(elem){
			return "image" === elem.type;
		},
		reset: function(elem){
			return "reset" === elem.type;
		},
		button: function(elem){
			return "button" === elem.type || elem.nodeName.toLowerCase() === "button";
		},
		input: function(elem){
			return (/input|select|textarea|button/i).test( elem.nodeName );
		}
	},
	setFilters: {
		first: function(elem, i){
			log('SIZZLE Expr::setFilters first');
			return i === 0;
		},
		last: function(elem, i, match, array){
			log('SIZZLE Expr::setFilters last');
			return i === array.length - 1;
		},
		even: function(elem, i){
			log('SIZZLE Expr::setFilters even');
			return i % 2 === 0;
		},
		odd: function(elem, i){
			log('SIZZLE Expr::setFilters odd');
			return i % 2 === 1;
		},
		lt: function(elem, i, match){
			log('SIZZLE Expr::setFilters lt');
			return i < match[3] - 0;
		},
		gt: function(elem, i, match){
			log('SIZZLE Expr::setFilters gt');
			return i > match[3] - 0;
		},
		nth: function(elem, i, match){
			log('SIZZLE Expr::setFilters nth');
			return match[3] - 0 === i;
		},
		eq: function(elem, i, match){
			log('SIZZLE Expr::setFilters eq');
			return match[3] - 0 === i;
		}
	},
	filter: {
		PSEUDO: function(elem, match, i, array){
			log('SIZZLE Expr::filter PSEUDO');
			var name = match[1],
				filter = Expr.filters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			} else if ( name === "contains" ) {
				return (elem.textContent || elem.innerText || Sizzle.getText([ elem ]) || "").indexOf(match[3]) >= 0;

			} else if ( name === "not" ) {
				var not = match[3];

				for ( var i = 0, l = not.length; i < l; i++ ) {
					if ( not[i] === elem ) {
						return false;
					}
				}

				return true;

			} else {
				Sizzle.error( name );
			}
		},
		CHILD: function(elem, match){
			log('SIZZLE Expr::filter CHILD');
			var type = match[1],
				node = elem;
			switch (type) {
				case "only":
				case "first":
					while ((node = node.previousSibling))  {
						if ( node.nodeType === 1 ) {
							return false;
						}
					}

					if ( type === "first" ) {
						return true;
					}

					node = elem;

				case "last":
					while ((node = node.nextSibling))  {
						if ( node.nodeType === 1 ) {
							return false;
						}
					}
					return true;

				case "nth":
					var first = match[2],
						last = match[3];

					if ( first === 1 && last === 0 ) {
						return true;
					}

					var doneName = match[0],
						parent = elem.parentNode;

					if ( parent && (parent.sizcache !== doneName || !elem.nodeIndex) ) {
						var count = 0;
						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								node.nodeIndex = ++count;
							}
						}
						parent.sizcache = doneName;
					}

					var diff = elem.nodeIndex - last;

					if ( first === 0 ) {
						return diff === 0;

					} else {
						return ( diff % first === 0 && diff / first >= 0 );
					}
			}
		},
		ID: function(elem, match){
			log('SIZZLE Expr::filter ID (#'+match+') -> @id='+ elem.getAttribute("id")+', nodeType='+ elem.nodeType);
			return elem.nodeType === 1 && elem.getAttribute("id") === match;
		},
		TAG: function(elem, match){
			log('SIZZLE Expr::filter TAG > '+ match);
			return (match === "*" && elem.nodeType === 1) || elem.nodeName.toLowerCase() === match;
		},
		CLASS: function(elem, match){
			log('SIZZLE Expr::filter CLASS (<'+ elem.nodeName +' /> vs. '+ match +')');
			return (" " + (elem.getAttribute("class") || elem.className) + " ")
				.indexOf( match ) > -1;
		},
		ATTR: function(elem, match){
			log('SIZZLE Expr::filter ATTR');
			var name = match[1],
				result = Expr.attrHandle[ name ] ?
					Expr.attrHandle[ name ]( elem ) :
					elem[ name ] != null ?
						elem[ name ] :
						elem.getAttribute( name ),
				value = result + "",
				type = match[2],
				check = match[4];

			return result == null ?
				type === "!=" :
				type === "=" ?
				value === check :
				type === "*=" ?
				value.indexOf(check) >= 0 :
				type === "~=" ?
				(" " + value + " ").indexOf(check) >= 0 :
				!check ?
				value && result !== false :
				type === "!=" ?
				value !== check :
				type === "^=" ?
				value.indexOf(check) === 0 :
				type === "$=" ?
				value.substr(value.length - check.length) === check :
				type === "|=" ?
				value === check || value.substr(0, check.length + 1) === check + "-" :
				false;
		},
		POS: function(elem, match, i, array){
			log('SIZZLE Expr::filter POS');
			var name = match[2],
				filter = Expr.setFilters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			}
		}
	}
});

var origPOS = Expr.match.POS,
	fescape = function(all, num){
		return "\\" + (num - 0 + 1);
	};

for ( var type in Expr.match ) {
	Expr.match[ type ] = new RegExp( Expr.match[ type ].source + (/(?![^\[]*\])(?![^\(]*\))/.source) );
	Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source.replace(/\\(\d+)/g, fescape) );
}

var makeArray = function(array, results) {
	array = Array.prototype.slice.call( array, 0 );

	if ( results ) {
		results.push.apply( results, array );
		return results;
	}

	return array;
};

try {
	Array.prototype.slice.call( document.documentElement.childNodes, 0 )[0].nodeType;

} catch(e){
	makeArray = function(array, results) {
		var i = 0,
			ret = results || [];

		if ( toString.call(array) === "[object Array]" ) {
			Array.prototype.push.apply( ret, array );
		} else {
			if ( typeof array.length === "number" ) {
				for ( var l = array.length; i < l; i++ ) {
					ret.push( array[i] );
				}
			} else {
				for ( ; array[i]; i++ ) {
					ret.push( array[i] );
				}
			}
		}

		return ret;
	};
}

var sortOrder, siblingCheck;

if ( document.documentElement.compareDocumentPosition ) {
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
			return a.compareDocumentPosition ? -1 : 1;
		}

		return a.compareDocumentPosition(b) & 4 ? -1 : 1;
	};
} else if ( document.documentElement.sourceIndex === 1 ) {
	sortOrder = function( a, b ) {
		var al, bl,
			ap = [],
			bp = [],
			aup = a.parentNode,
			bup = b.parentNode,
			cur = aup;

		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		} else if ( aup === bup ) {
			return siblingCheck( a, b );

		} else if ( !aup ) {
			return -1;

		} else if ( !bup ) {
			return 1;
		}

		while ( cur ) {
			ap.unshift( cur );
			cur = cur.parentNode;
		}

		cur = bup;

		while ( cur ) {
			bp.unshift( cur );
			cur = cur.parentNode;
		}

		al = ap.length;
		bl = bp.length;

		for ( var i = 0; i < al && i < bl; i++ ) {
			if ( ap[i] !== bp[i] ) {
				return siblingCheck( ap[i], bp[i] );
			}
		}

		return i === al ?
			siblingCheck( a, bp[i], -1 ) :
			siblingCheck( ap[i], b, 1 );
	};

	siblingCheck = function( a, b, ret ) {
		if ( a === b ) {
		return ret;
		}

		var cur = a.nextSibling;

		while ( cur ) {
			if ( cur === b ) {
				return -1;
			}

			cur = cur.nextSibling;
		}

		return 1;
	};
}

Sizzle.getText = function( elems ) {
	var ret = "", elem;

	for ( var i = 0; elems[i]; i++ ) {
		elem = elems[i];

		if ( elem.nodeType === 3 || elem.nodeType === 4 ) {
			ret += elem.nodeValue;

		} else if ( elem.nodeType !== 8 ) {
			ret += Sizzle.getText( elem.childNodes );
		}
	}

	return ret;
};

(function(){
	var form = document.createElement("div"),
		id = "script" + (new Date()).getTime(),
		root = document.documentElement;

	form.innerHTML = "<a name='" + id + "'/>";

	root.insertBefore( form, root.firstChild );

	if ( document.getElementById( id ) ) {
		Expr.find.ID = function(match, context, isXML){
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);

				return m ?
					m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ?
						[m] :
						undefined :
					[];
			}
		};

		Expr.filter.ID = function(elem, match){
			var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
			return elem.nodeType === 1 && node && node.nodeValue === match;
		};
	}

	root.removeChild( form );

	root = form = null;
})();

(function(){

	var div = document.createElement("div");
	div.appendChild( document.createTextNode("") );

	if ( div.getElementsByTagName("*").length > 0 ) {
		Expr.find.TAG = function(match, context){
			log('SIZZLE Expr::preFilter TAG > '+ match);
			var results = context.getElementsByTagName(match[1]);

			if ( match[1] === "*" ) {
				var tmp = [];

				for ( var i = 0; results[i]; i++ ) {
					if ( results[i].nodeType === 1 ) {
						tmp.push( results[i] );
					}
				}

				results = tmp;
			}

			return results;
		};
	}

	div.innerHTML = "<a href='#'></a>";
	if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
			div.firstChild.getAttribute("href") !== "#" ) {
		Expr.attrHandle.href = function(elem){
			return elem.getAttribute("href", 2);
		};
	}

	div = null;
})();

if ( document.querySelectorAll ) {
	(function(){
		var oldSizzle = Sizzle,
			div = document.createElement("div"),
			id = "__sizzle__";

	div.innerHTML = "<p class='TEST'></p>";

	if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
		return;
	}

	Sizzle = function(query, context, extra, seed){
		context = context || document;

			query = query.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");

			if ( !seed && !Sizzle.isXML(context) ) {
				if ( context.nodeType === 9 ) {
			try {
				return makeArray( context.querySelectorAll(query), extra );
					} catch(qsaError) {}

				} else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					var old = context.getAttribute( "id" ),
						nid = old || id,
						hasParent = context.parentNode,
						relativeHierarchySelector = /^\s*[+~]/.test( query );

					if ( !old ) {
						context.setAttribute( "id", nid );
					} else {
						nid = nid.replace( /'/g, "\\$&" );
					}
					if ( relativeHierarchySelector && hasParent ) {
						context = context.parentNode;
					}

					try {
						if ( !relativeHierarchySelector || hasParent ) {
							return makeArray( context.querySelectorAll( "[id='" + nid + "'] " + query ), extra );
						}

					} catch(pseudoError) {
					} finally {
						if ( !old ) {
							context.removeAttribute( "id" );
						}
					}
				}
		}

		return oldSizzle(query, context, extra, seed);
	};

		for ( var prop in oldSizzle ) {
			Sizzle[ prop ] = oldSizzle[ prop ];
		}

		div = null;
	})();
}

(function(){
	var html = document.documentElement,
		matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector,
		pseudoWorks = false;

	try {
		matches.call( document.documentElement, "[test!='']:sizzle" );

	} catch( pseudoError ) {
		pseudoWorks = true;
	}

	if ( matches ) {
		Sizzle.matchesSelector = function( node, expr ) {
			expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");

			if ( !Sizzle.isXML( node ) ) {
				try {
					if ( pseudoWorks || !Expr.match.PSEUDO.test( expr ) && !/!=/.test( expr ) ) {
						return matches.call( node, expr );
					}
				} catch(e) {}
			}

			return Sizzle(expr, null, null, [node]).length > 0;
		};
	}
})();

(function(){
	var div = document.createElement("div");
	div.innerHTML = "<div class='test e'></div><div class='test'></div>";

	if ( !div.getElementsByClassName || div.getElementsByClassName("e").length === 0 ) {
		return;
	}

	div.lastChild.className = "e";

	if ( div.getElementsByClassName("e").length === 1 ) {
		return;
	}

	Expr.order.splice(1, 0, "CLASS");
	Expr.find.CLASS = function(match, context, isXML) {
		if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
			return context.getElementsByClassName(match[1]);
		}
	};

	div = null;
})();

function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];
		if ( elem ) {
			var match = false;

			elem = elem[dir];

			while ( elem ) {
				if ( elem.sizcache === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 && !isXML ){
					elem.sizcache = doneName;
					elem.sizset = i;
				}

				if ( elem.nodeName.toLowerCase() === cur ) {
					match = elem;
					break;
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];
		if ( elem ) {
			var match = false;

			elem = elem[dir];

			while ( elem ) {
				if ( elem.sizcache === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 ) {
					if ( !isXML ) {
						elem.sizcache = doneName;
						elem.sizset = i;
					}
					if ( typeof cur !== "string" ) {
						if ( elem === cur ) {
							match = true;
							break;
						}

					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
						match = elem;
						break;
					}
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

if ( document.documentElement.contains ) {
	Sizzle.contains = function( a, b ) {
	return a !== b && (a.contains ? a.contains(b) : true);
};

} else if ( document.documentElement.compareDocumentPosition ) {
	Sizzle.contains = function( a, b ) {
		return !!(a.compareDocumentPosition(b) & 16);
	};

} else {
	Sizzle.contains = function() {
		return false;
	};
}

Sizzle.isXML = function( elem ) {
	var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;

	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

var posProcess = function(selector, context){
	var match,
		tmpSet = [],
		later = "",
		root = context.nodeType ? [context] : context;

	while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
		later += match[0];
		selector = selector.replace( Expr.match.PSEUDO, "" );
	}

	selector = Expr.relative[selector] ? selector + "*" : selector;

	for ( var i = 0, l = root.length; i < l; i++ ) {
		Sizzle( selector, root[i], tmpSet );
	}

	return Sizzle.filter( later, tmpSet );
};


window.Sizzle = Sizzle;

})();

(function (window, sizzle) {

	var _svg = document.getElementsByTagName('svg')[0] || {};



	window.NS = {
		bee: 'http://www.beesmart.biz/2008/beesmart',
		svg: 'http://www.w3.org/2000/svg',
		xml: 'http://www.w3.org/XML/1998/namespace',
		xlink: 'http://www.w3.org/1999/xlink',
		ekioh: 'http://www.ekioh.com/2007/ekioh'
	};

	function isTagNode(node) {
		return node && node.nodeType === 1;
	}

	function each(elems, action) {
		for (var i = 0, len = elems.length; i < len; i++)
			action(elems[i], i);
		return elems;
	}

	function BsJqueryObject(elems) {
		var i = elems.length;
		while (i--)
			this[i] = elems[i];
		this.length = elems.length;
	}

	BsJqueryObject.prototype = {
		beeSmart: '1.0',
		length: 0,
		show: function () {
			return each(this, function (el) {
				setTrait(el, 'display', 'inline');
			});
		},
		hide: function () {
			return each(this, function (el) {
				setTrait(el, 'display', 'none');
			});
		},
		visible: function () {
			var allElements = [];
			each(this, function (el) {
				if (getTrait(el, 'display') !== 'none')
					allElements.push(el);
			});
			return new BsJqueryObject(allElements);
		},
		text: function (text) {
			if (typeof text !== 'undefined')
				return each(this, function (el) {
					el.textContent = text;
				});
			else {
				var t = '';
				each(this, function (el) {
					t += el.textContent;
				});
				return t;
			}
		},
		svg: function (svg) {
			return each(this, function (el) {
				$.setSvgContent(el, svg);
			});
		},
		append: function (SVGstringOrDom) {
			return each(this, function (el) {
				el.appendChild(
					typeof SVGstringOrDom === 'string' ?
						$.parseSvg(SVGstringOrDom) :
						'beeSmart' in SVGstringOrDom ?
							SVGstringOrDom.get(0) :
							SVGstringOrDom
				);
			});
		},
		remove: function () {
			var r = this;
			return each(this, function (el, i) {
				r[i] = el.parentNode.removeChild(el);
			});
		},
		first: function () {
			var allElements = [];
			each(this, function (el) {
				if (isTagNode(el.firstElementChild))
					allElements.push(el.firstElementChild);
			});
			return new BsJqueryObject(allElements);
		},
		last: function () {
			var allElements = [];
			each(this, function (el) {
				if (isTagNode(el.lastElementChild))
					allElements.push(el.lastElementChild);
			});
			return new BsJqueryObject(allElements);
		},
		next: function () {
			var allElements = [];
			each(this, function (el) {
				if (isTagNode(el.nextElementSibling))
					allElements.push(el.nextElementSibling);
			});
			return new BsJqueryObject(allElements);
		},
		get tag() {
			return this[0].tagName;
		},
		attr: function (name, value, ns) {
			var aLength = arguments.length;
			var elementsOrValue = [];
			if (value === null || value === undefined) {
				if (this[0]) {
					if (aLength === 3) {
						elementsOrValue = this[0].getAttributeNS(ns, name);
					} else {
						elementsOrValue = this[0].getAttribute(name);
					}
					elementsOrValue = elementsOrValue === null ? '' : elementsOrValue;
				} else
					elementsOrValue = '';
			} else {
				each(this, function (el) {
					if (aLength === 3) {
						el.setAttributeNS(ns, name, value);
						elementsOrValue.push(el);

					} else if (aLength === 2) {
						el.setAttribute(name, value);
						elementsOrValue.push(el);
					}
				});
			}
			return typeof elementsOrValue === 'object' ?
				new BsJqueryObject(elementsOrValue) :
				elementsOrValue;
		},
		addClass: function (className) {
			return each(this, function (el) {
				var classes = (el.getAttributeNS(NS.svg, 'class') || '').split(/\s+/);
				if (classes.indexOf(className) >= 0)
					return;
				classes.push(className);
				el.setAttributeNS(NS.svg, 'class', classes.join(' '));
			});
		},
		removeClass: function (className) {
			return each(this, function (el) {
				var classes = (el.getAttributeNS(NS.svg, 'class') || '').split(/\s+/),
					i = classes.indexOf(className);
				if (i < 0)
					return;
				classes.splice(i, 1);
				el.setAttributeNS(NS.svg, 'class', classes.join(' '));
			});
		},
		find: function (selector) {
			var allElements = [];

			each(this, function (el) {
				var cEls = sizzle(selector, el);
				for (var i = 0, len = cEls.length; i < len; i++)
					allElements.push(cEls[i]);
			});

			return new BsJqueryObject(allElements);
		},
		filter: function (selector) {
			var allElements = [];
			each(this, function (el) {
				allElements.push(el);
			});
			return new BsJqueryObject(sizzle.matches(selector, allElements));
		},
		filterByClass: function (selector) {
			var allElements = [],
				classMatcher = new RegExp(selector.substring(1) + '(\\s|$)');
			each(this, function (el) {
				if (el.getAttributeNS(NS.svg, 'class').match(classMatcher))
					allElements.push(el);
			});
			return new BsJqueryObject(allElements);
		},
		children: function () {
			var allElements = [];
			each(this, function (el) {
				var nextEl = el.firstElementChild;
				while (nextEl) {
					allElements.push(nextEl);
					nextEl = nextEl.nextElementSibling;
				}
			});
			return new BsJqueryObject(allElements);
		},
		each: function (action) {
			for (var i = 0, len = this.length; i < len; i++)
				action.call(this[i], i);
			return this;
		},
		get toArray() {
			var elements = [];
			for (var i = 0, len = this.length; i < len; i++) elements.push(this[i]);
			return elements;
		},
		eq: function (number) {
			number = parseInt(number, 10);
			return this['' + number] ? new BsJqueryObject([this['' + number]]) : this;
		},
		get: function (number) {
			return this['' + number];
		},
		parent: function () {
			return new BsJqueryObject([this[0].parentNode]);
		},
		bind: function (eventName, callback) {
			var eventListenersData = [];
			each(this, function (el, i) {
				var _callback = function (e) {
					callback.call(el, e);
				};
				eventListenersData.push({element: el, callback: _callback});
				el.addEventListener(eventName, _callback, false);
			});
			return {
				unbind: function() {
					eventListenersData.forEach(function (d) {
						d.element.removeEventListener(eventName, d.callback, false);
					});
					eventListenersData = null;
				}
			};
		},
		trigger: function (eventHandler, data) {
			var ev = document.createEvent('Event');
			ev.initEvent(eventHandler, true, true);
			ev.data = data;
			return each(this, function (el) {
				if (eventHandler)
					el.dispatchEvent(ev);
			});
		},
		begin: function (callback, at) {
			at = at || 0;
			return each(this, function (el, i) {
				if (callback) {
					unbindEventHandler();
					el._beginElementEvent = BsJqueryObject.prototype.bind
						.call([el], 'endEvent', endEventHandler);
				}

				el.beginElementAt(at);

				function endEventHandler(e) {
					unbindEventHandler();
					callback.call(el, e);
				}

				function unbindEventHandler() {
					if (el._beginElementEvent) {
						el._beginElementEvent.unbind();
						delete el._beginElementEvent;
					}
				}

			});
		},
		end: function () {
			return each(this, function (el, i) {
				el.endElementAt(0);
				if (el._beginElementEvent) {
					el._beginElementEvent.unbind();
					delete el._beginElementEvent;
				}
			});
		},
		ctm: function (a, b, c, d, e, f) {
			var mapping = ['a', 'b', 'c', 'd', 'e', 'f'];
			if (arguments.length === 0) {
				return this[0].getMatrixTrait('transform');

			} else if (a instanceof SVGMatrix) {
				return each(this, function (el) {
					el.setMatrixTrait('transform', a);
				});

			} else if (a instanceof Object) {
				return each(this, function (el) {
					var m = el.getMatrixTrait('transform'), index;
					for (var j in a) {
						if (a.hasOwnProperty(j) && (index = mapping.indexOf(j)) !== -1)
							m.setComponent(index, a[j]);
					}
					el.setMatrixTrait('transform', m);
				});

			} else {
				return each(this, function (el) {
					var m = el.getMatrixTrait('transform');
					m.setComponent(0, a === undefined || a === null ? m.a : a);
					m.setComponent(1, b === undefined || b === null ? m.b : b);
					m.setComponent(2, c === undefined || c === null ? m.c : c);
					m.setComponent(3, d === undefined || d === null ? m.d : d);
					m.setComponent(4, e === undefined || e === null ? m.e : e);
					m.setComponent(5, f === undefined || f === null ? m.f : f);
					el.setMatrixTrait('transform', m);
				});

			}
		},
		clone: function (deep) {
			var objs = [];
			each(this, function (el) {
				objs.push(el.cloneNode(deep));
			});
			return new BsJqueryObject(objs);
		},
		dimensions: function () {
			try {
				var bbox = this[0].getBBox();
				return {width: bbox.width, height: bbox.height, x: bbox.x, y: bbox.y};
			} catch (x) {
				return {
					width: this[0].width.baseVal.value,
					height: this[0].height.baseVal.value,
					x: null,
					y: null
				};
			}
		},
		toString: function () {
			var elms = BeeSmart && BeeSmart.logger && BeeSmart.logger.isGreaterThanDebug() ?
				this.toArray : this.toArray.slice(0, 1);
			return 'BsJqueryObject (%d) [%s%s]'.sprintf(
				this.length,
				elms.reduce(function (p, el) {
					return '%s<%s#%s class="%s">'.sprintf(p, el.nodeName,
						el.getAttribute('id') || '?', el.getAttribute('class') || '?');
				}, ''),
				this.length > 1 ? '...' : ''
			);
		}
	};

	var setTrait = function (el, attr, value) {
		el.setAttribute(attr, value);
	};

	var getTrait = function (el, attr) {
		el.getAttribute(attr);
	};

	if (typeof _svg.setTrait !== 'undefined') {
		setTrait = function (el, attr, value) {
			el.setTrait(attr, value);
		};

		getTrait = function (el, attr) {
			return el.getTrait(attr);
		};
	}


	window.$ = function (inp, context) {
		var els = [];
		if (typeof inp !== 'undefined' && inp !== null) {
			if (typeof inp === 'string') {
				if (inp[0] === '<')
					els.push(_parseSvg(inp));
				else
					els = sizzle(inp, context);

			} else if (typeof inp === 'object') {
				els = [inp];
			}
		}

		return new BsJqueryObject(els);
	};
	$.BsJqueryObject = BsJqueryObject;

	function svgDocumentConstruction(payload, onlySvgNs) {
		onlySvgNs = onlySvgNs || false;
		return onlySvgNs ? payload : (
		'<svg xmlns="http://www.w3.org/2000/svg" ' +
		'xmlns:svg="http://www.w3.org/2000/svg" ' +
		'xmlns:xlink="http://www.w3.org/1999/xlink" ' +
		'xmlns:ev="http://www.w3.org/2001/xml-events" ' +
		'xmlns:bee="http://www.beesmart.biz/2008/beesmart" ' +
		'xmlns:ekioh="http://www.ekioh.com/2007/ekioh" ' +
		'xmlns:oipf="http://www.openiptvforum.org/ns">' + payload + '</svg>');
	}

	function _parseSvg(xml, onlySvgNs) {
		if (xml.match(/^\s*<\?xml\s*/) === null) {
			xml = svgDocumentConstruction(xml, onlySvgNs);
		}
		try {
			if ('parseXML' in window) {
				var d = parseXML(xml, document);
				if ('documentElement' in d)
					d = d.documentElement;
				return d;
			}
			if ('DOMParser' in window) {
				var parser = new DOMParser();
				var doc = parser.parseFromString(xml, 'text/xml');
				if ('documentElement' in doc)
					doc = doc.documentElement;
				return doc;
			}
		} catch (e) {
			throw new Error('XML/SVG parsing error via parseXML: ' + e);
		}
		throw new Error('XML/SVG parsing unavailable');
	}

	function parseBeeTags(doc) {
		var beeTags = doc.getElementsByTagNameNS(NS.bee, 'client-app') || [];
		var i = beeTags.length;
		var clientApp = IS_COLIBRY === true ? 'is-colibry' : 'is-full';
		while (i--) {
			var node = beeTags[i];
			var container = node.getElementsByTagNameNS(NS.bee, clientApp)[0];
			if (container) {
				var j = container.childNodes.length;
				while (j--) {
					node.parentNode.insertBefore(container.childNodes[j], node);
				}
			}
			node.parentNode.removeChild(node);
		}
	}

	function translateSvg(elt) {
		var elts = elt.getElementsByTagName('desc');
		for (var i = elts.length; i--;) {
			var kwText = tr(elts[i].textContent),
				node = _parseSvg('<svg>' + kwText + '</svg>', true),
				pNode = elts[i].parentNode
				;
			pNode.removeChild(elts[i]);
			while (node.childNodes.length !== 0)
				pNode.appendChild(node.removeChild(node.firstChild));
		}
		return elt;
	}

	$.parseAndAppendModuleSVG = function (SVGcode) {
		var dstID, node;
		var result = [];
		var d = typeof SVGcode === 'string' ? _parseSvg(SVGcode, true) : SVGcode;

		parseBeeTags(d);

		node = d.firstElementChild;

		while (d.firstElementChild) {
			dstID = node.getAttributeNS(NS.bee, 'append-to');
			dstID = dstID ? dstID : 'baseInterface';

			translateSvg(node);

			(getElementById(dstID) || getElementById('baseInterface'))
				.appendChild(d.removeChild(node));

			result.push(
				{'domRef': node, 'dst': dstID}
			);

			node = d.firstElementChild;
		}

		return result;
	};

	$._parseSvg = _parseSvg;

	$.parseSvg = function (xmlContent, translate, wrapWithSVGHead) {
		translate = translate || false;
		var elt = _parseSvg(xmlContent, wrapWithSVGHead);

		if (translate)
			translateSvg(elt.firstElementChild);

		return elt.firstElementChild;
	};

	$.setSvgContent = function (element, svgCode) {
		if (!svgCode && svgCode !== '')
			return;

		element.textContent = '';

		var d = _parseSvg(svgCode);

		while (d.firstChild)
			element.appendChild(d.removeChild(d.firstChild));

		d = null;
		delete d;
	};

	$.ModuleDom = function (svgDomIDs, actions, onInitCallback) {
		actions = actions || {};
		for (var i = 0, len = svgDomIDs.length; i < len; i++) {
			actions[svgDomIDs[i]] = $('#' + svgDomIDs[i]);
		}
		this.__proto__ = actions;
		this.destroy = $.ModuleDom.destroy;
		(onInitCallback || function () {}).apply(this);
	};
	$.ModuleDom.destroy = function () {
		for (var i in this) {
			delete this.__proto__[i];
			delete this[i];
		}
	};

})(
	window,
	Sizzle
);

(function (window, BS) {

	function Logger() {
		var that = this;
		var logArr = ['BS[', '', '|', '', ']:', '', '> ', ''];
		var envLogLevel = null;
		var noTimings = function () {
			return [];
		};
		var F = function () {};
		var getTimings = {output: F};
		var logFunction = function (level, myLevel) {
			return function (msg) {

				var date = new Date();
				logArr[1] = level[0];
				logArr[3] = myLevel === 'info' || myLevel === 'none' ? myLevel + ' ' : myLevel;
				logArr[5] = getTimings.output(date).join('') || '';
				if (arguments.length > 1) {
					var args = Array.processArguments(arguments);
					args.shift();
					logArr[7] = msg.vprintf(args);
				} else {
					if (msg instanceof Error)
						logArr[7] = msg.name + '> ' + msg.message + ' @ ' + msg.fileName + ':' +
							msg.lineNumber + '\nTrace:\n' + msg.stack;
					else if (typeof msg === 'undefined')
						logArr[7] = '>undefined<';
					else if  (msg === null)
						logArr[7] = '>null<';
					else
						logArr[7] = msg.toString(true);
				}

				alert(logArr.join(''));
			};
		};
		var modes = ['none', 'info', 'debug', 'trace'];
		getTimings.output = shortTimings;

		this.modes = modes;

		this.print = window.l;
		this.log = logFunction('n', 'none');

		this.changeLogLevel = function (level) {
			level = modes.indexOf(level) === -1 ? 'info' : level;
			switch (level) {
			case 'none':
				that.info = F;
				that.debug = F;
				that.trace = F;
				break;
			case 'info':
				that.info = logFunction(level, 'info');
				that.debug = F;
				that.trace = F;
				break;
			case 'debug':
				that.info = logFunction(level, 'info');
				that.debug = logFunction(level, 'debug');
				that.trace = F;
				break;
			case 'trace':
				that.info = logFunction(level, 'info');
				that.debug = logFunction(level, 'debug');
				that.trace = logFunction(level, 'trace');
				break;
			}
			envLogLevel = level;
		};
		this.changeLogLevel('none');

		this.getLogLevel = function () {
			return envLogLevel;
		};
		this.isGreaterThanDebug = function () {
			return envLogLevel === 'trace';
		};
		this.isGreaterThanInfo = function () {
			return envLogLevel === 'trace' || envLogLevel === 'debug';
		};

		this.printStackTrace = function () {
			alert('\n\n' + Error.getJsStack() + '\n');
		};


		this.excludeTime = function () {
			getTimings.output = noTimings;
		};

		function shortTimings(date) {
			var dateString =
				[date.getDate(), '-', date.getHours().padToLength(2), ':',
					date.getMinutes().padToLength(2), ':', date.getSeconds().padToLength(2)
				];

			if (envLogLevel === 'trace') {
				dateString.push('.');
				dateString.push((date.getMilliseconds() + 1).padToLength(3));
			}
			return dateString;
		}
	}

	window.Logger = Logger;

	window.l = function () {
		for (var i = 0; i < arguments.length; i++) {
			var argFormatted = objectRepresentation(arguments[i], ''),
				lines = argFormatted.split('\n')
				;
			for (var len = lines.length, line = 0; len > line; line++)
				alert(lines[line]);

			if (arguments.length !== i + 1)
				alert(',');
		}
	};

	function objectRepresentation(o, indentation) {
		var indentationStep = '  ', s, i, newIndentation;

		switch (typeof o) {
		case 'number':
			return o.toString();
		case 'string':
			return '"' + o + '"';
		case 'object':
			if (o === null)
				return '>null<';
			else if (o['nodeName']) {
				o.dumpTree();
				return '';

			} else if (Array.isArray(o)) {

				if (o.length === 0)
					return '[ ]';
				newIndentation = indentation + indentationStep;
				s = '[\n' + newIndentation + objectRepresentation(o[0], newIndentation);
				i = 1;
				while (i < o.length) {
					s += ',\n' + newIndentation + objectRepresentation(o[i], newIndentation);
					i++;
				}
				s += '\n' + indentation + ']';
				return s;

			} else if (o.toString !== Object.prototype.toString) {
				return o.toString();

			} else {
				s = 'Object ';
				i = 0;
				newIndentation = indentation + indentationStep;
				for (var k in o) {
					if (!o.hasOwnProperty(k)) continue;
					if (i === 0)
						s += '{';
					else
						s += ',';

					s += '\n' + newIndentation + k + ': ';
					s += objectRepresentation(o[k], newIndentation);
					i++;
				}
				if (i > 0) s += '\n' + indentation + '}';
				return s;
			}
		case 'undefined':
			return '>undefined<';
		case 'function':
			return '>function<';
		case 'boolean':
			return o.toString();
		default:
			return '(unhandled type: ' + typeof o + ')';
		}
	}

	if (BS) {
		BS.logger = new Logger();
	}

})(
	window, BeeSmart
);

(function (BS) {

	BS.emptyPerformanceService = { start: BS.F, end: BS.F };


	function createPerformanceService() {
		var performanceService = {};
		var times = {};
		performanceService.start = function performanceStart(key) {
			times[key] = Date.now();
		};
		performanceService.stop = function performanceStop(key, stringTemplate, args) {
			if (key in times) {
				var diff = Date.now() - times[key];
				delete times[key];
				if (stringTemplate) {
					var templateArgs = Array.prototype.slice.call(arguments, 2);
					var additionalData = stringTemplate.vprintf(templateArgs);
					BS.logger.trace('[Perf] %s: %6d ms | %s', key, diff, additionalData);
				} else {
					BS.logger.trace('[Perf] %s: %6d ms', key, diff);
				}
			}
		};
		return performanceService;
	}

	BS.createPerformanceService = createPerformanceService;
	BS.perf = createPerformanceService();

})(BeeSmart);

(function (BS) {

	var fineGlobalVariableNames = [];
	var evilGlobalVariableNames = [];
	fineGlobalVariableNames = Object.keys(window);

	BS.registerGlobalVariable = function (key) {
		fineGlobalVariableNames.push(key);
	};

	BS.debugGlobalVariables = function debugGlobalVariables() {
		var diff = [];
		evilGlobalVariableNames = [];
		Object.eachKey(window, function (key) {
			if (fineGlobalVariableNames.indexOf(key) === -1)
				diff.push(key);
			evilGlobalVariableNames.push(key);
		});
		var totalEvilVariables = (evilGlobalVariableNames.length - fineGlobalVariableNames.length);
		if (totalEvilVariables) {
			BS.logger.debug('WARNING: %d Registered (evil) global variables: \n\t%s'.sprintf(
				totalEvilVariables, diff.join(',\n\t')
			));
		}
	};

})(
	BeeSmart
);

(function (BS, q) {

	function EventManager() {
		this._evGroupHandlers = {};
	}

	EventManager.prototype = {
		_evGroupHandlers: {},
		bind: function (type, handler) {
			if (!(type in this._evGroupHandlers))
				this._evGroupHandlers[type] = [];
			this._evGroupHandlers[type].push(handler);

			return {
				unbind: function () {
					var index = this._evGroupHandlers[type].indexOf(handler);
					if (index !== -1)
						Array.remove(this._evGroupHandlers[type], index);
					BS.logger.trace('EventManager: unbind handler for "' + type + '"');
				}.bind(this)
			};
		},
		unbind: function (type) {
			if (!(type in this._evGroupHandlers))
				return;
			BS.logger.trace('EventManager .unbind(%s)', type);
			delete this._evGroupHandlers[type];
		},
		countHandlers: function (type) {
			return type in this._evGroupHandlers ? this._evGroupHandlers[type].length : 0;
		},
		destroy: function () {
			this._evGroupHandlers = null;
		},
		dispatch: function (event) {
			var dfr;
			if (event.promiseOnDispatch === true)
				dfr = q.defer();
			BS.logger.debug('EventManager: dispatching ' + event.type
				+ ' event for handler: ' + event.handler);
			var handlerName = event.handler;

			if (handlerName in this._evGroupHandlers) {
				var handlers = this._evGroupHandlers[handlerName];
				for (var i = 0, len = handlers.length; i < len; i++) {
					if (event._canceled === true) {
						if (dfr) dfr.resolve();
						return dfr ? dfr.promise : void 0;

					}
					var func = function (handler) {
						try {
							if (event._canceled === true) {
								BS.logger.trace('EventManager: skipping handler for %s',
									event.type);
								return;
							}

							if (handler && handler(event) === false)
								event.preventDefault();
						} catch (x) {
							BS.logger.log(x);
						}
					};

					if (event.synced === true) {
						func(handlers[i]);
					} else {
						setTimeout(function () {
							var t = Date.now();
							this.func(this.handler);
							var elapsed = Date.now() - t;
							if (elapsed > 50) {
								BS.logger.trace(
									'EventManager: Handler: %s lasted too long (%s ms)',
									this.name, elapsed
								);
							}
						}.bind({func: func, handler: handlers[i], name: handlerName }), 0);
					}
				}
			}

			var defaultActionHandler = function () {
				if (event._defaultAction === false) {
					if (dfr) dfr.resolve();
					return;
				}

				BS.logger.trace('EventManager: default action for "' +
					event.type + '" ' + (event._canceled === true ? '& WAS CANCELED!' : ''));

				try {
					event._defaultAction();
					if (dfr) dfr.resolve();
				} catch (x) {
					BS.logger.log(x);
					if (dfr) dfr.reject(x);
				}
			};

			if (event.synced === true)
				defaultActionHandler();
			else
				setTimeout(defaultActionHandler, 0);

			return dfr ? dfr.promise : void 0;
		},
		registerEvent: function (name, eventConstruct) {
			if (!name)
				throw new TypeError('name should be provided');
			if (!eventConstruct)
				throw new TypeError('eventConstruct should be provided');
			if (!(eventConstruct.prototype instanceof BeeSmartEvent))
				throw new TypeError('eventConstruct must inherit from BeeSmart.Event');
			if (name in this)
				throw new TypeError('Property with provided name already exists');
			this[name] = eventConstruct;
		}
	};

	function BeeSmartEvent(type, data, description) {
		if (type) {
			this.type = type;
			this.handler = 'on' + type;
		}
		if (description) this.description = description;
		if (data) this.data = data;
	}

	BeeSmartEvent.prototype = {
		type: 'BeeSmartEvent',
		description: 'Generic BeeSmart event',
		data: null,
		handler: '',
		_canceled: false,
		cancelable: true,
		synced: false,
		_defaultAction: false,
		promiseOnDispatch: false,
		preventDefault: function () {
			this._defaultAction = false;
		},
		stopPropagation: function () {
			this._canceled = true;
		}
	};

	BS.EventManager = EventManager;
	BS.Event = BeeSmartEvent;
	BS.evMgr = new BS.EventManager();

})(
	BeeSmart,
	Q
);

(function (BS) {

	function ImageUrlProvider() {}
	ImageUrlProvider.prototype = {
		_urlPrefix: '',
		setBasePath: function (url) {
			if (typeof url !== 'string') return;
			var urlParts = url.match(/^\w+:\/\/[^\/]+/);
			this._urlPrefix = urlParts ? urlParts[0] + '/stb/' : '';
		},
		get basePath () {
			return this._urlPrefix;
		},
		fromRelative: function (relativePath) {
			return this.basePath + relativePath;
		},
		toImageUrl: function (path) {
			if (!path) return '';
			return this.fromRelative(path);
		},
		toAbsolute: function (pathOrUrl) {
			if (pathOrUrl === null)
				return '';
			return pathOrUrl.match(/^\w+:\/\/[^\/]+/) ? pathOrUrl : this.fromRelative(pathOrUrl);
		}
	};

	BS.ImageUrlProvider = ImageUrlProvider;
	BS.imageUrlProvider = new BS.ImageUrlProvider();
})(
	BeeSmart
);

(function (BS, q) {

	function timeoutPromise(promise, timeoutMilliseconds) {
		var dfr = q.defer();
		setTimeout(function () {
			if (promise.inspect().state === 'pending') {
				var timeoutError = new Error('promise-timeouted');
				timeoutError.isPromiseTimeouted = true;
				dfr.reject(timeoutError);
			}
		}, timeoutMilliseconds);
		promise.then(dfr.resolve, dfr.reject);
		return dfr.promise;
	}


	function Task(runCallback, options) {
		this._callback = runCallback;
		if (!('interval' in options) || typeof options.interval !== 'number')
			throw new TypeError('interval should be defined in options and should be a number');
		this._interval = options.interval;

		if ('startInterval' in options) {
			this.startInterval = options.startInterval;
			this.runAt = Date.now() + this.startInterval[0] +
				Math.floor(Math.random() * (this.startInterval[1] - this.startInterval[0]));
		} else {
			this.runAt = Date.now() + this.interval;
		}
		this.runCount = 0;
		if ('name' in options && options.name)
			this.name = options.name;
		else
			this.name = 'Unnamed task #%s'.sprintf(Math.floor(Math.random()*100000));
		this.runOnce = options.runOnce || false;
	}

	Task.prototype = {
		name: '',
		startInterval: null,
		_interval: null,
		get interval () { return this._interval; },
		set interval (newInterval) {
			this._interval = newInterval;
			this.recalculateRunAt();
			this.onIntervalChanged();
		},
		nextInterval: null,
		runAt: null,
		runCount: 0,
		runOnce: false,
		run: function () {
			var audit = 'Task .run() %s '.sprintf(this.toString());
			var t = Date.now();
			BS.logger.trace(audit + 'is being run.');

			this.runCount++;
			return q.try(function () {
				return this._callback.call(this);
			}.bind(this)).finally(function () {
				this.recalculateRunAt();
				BS.logger.trace(audit + 'completed in %d ms.', Date.now() - t);
			}.bind(this));
		},
		recalculateRunAt: function () {
			if (typeof this.nextInterval === 'number') {
				this.runAt = Date.now() + this.nextInterval;
				this.nextInterval = null;
			} else {
				this.runAt = Date.now() + this.interval;
			}
		},
		hasBeenRun: function () { return this.runCount > 0; },
		destroy: function () {
			this.onIntervalChanged = null;
		},
		onIntervalChanged: function () {},
		toString: function () { return this.name; },
		debug: function () {
			BS.logger.trace('-- Task: %s (Run count: %s)', this.name, this.runCount);
			BS.logger.trace('     runAt: %s', new Date(this.runAt));
			BS.logger.trace('     interval: %s', this.interval);
			BS.logger.trace('     nextInterval: %s', this.nextInterval);
		}
	};

	function BackgroundService(idleChecker, idleDelay, taskTimeout) {
		this._tasks = [];
		this._idleChecker = idleChecker;
		this.idleDelay = idleDelay || 10e3;
		this.taskTimeout = taskTimeout || 30e3;
	}

	BackgroundService.prototype = {
		_tasks: [],
		_idleChecker: BS.F,
		_scheduledTaskTimer: 0,
		_destroyed: false,
		_runningTask: null,
		idleDelay: 10e3,
		taskTimeout: 30e3,
		_nextTask: null,
		addTask: function (runCallback, options) {
			var task = new Task(runCallback, options);
			task.onIntervalChanged = this._scheduleNextTask.bind(this);
			this._tasks.push(task);
			this._scheduleNextTask();
			return task;
		},
		removeTask: function(task) {
			task.destroy();
			this._tasks = this._tasks.filter(function (t) { return t !== task; });
			this._scheduleNextTask();
		},
		destroy: function () {
			this._tasks.forEach(function (t) { t.destroy(); });
			this._tasks = null;
			this._clearScheduledTaskTimer();
			this._destroyed = true;
		},
		runTask: function (task) {
			task.runAt = Date.now();
			this._scheduleNextTask();
		},
		runOnce: function (runCallback, taskName) {
			if (!runCallback) throw new TypeError('runCallback parameter is required!');
			return this.addTask(runCallback, { runOnce: true, interval: 0, name: taskName });
		},
		_scheduleNextTask: function () {
			if (this._destroyed || this._runningTask) return;
			this._clearScheduledTaskTimer();
			var task = this._tasks.reduce(function (closest, t) {
				if (!closest) return t;
				return closest.runAt > t.runAt ? t : closest;
			}, null);

			if (task) {
				this._scheduleTask(task);
			}
		},
		_scheduleTask: function (task) {
			var audit = 'BackgroundService ._scheduleTask(%s) '.sprintf(task.toString());
			this._clearScheduledTaskTimer();

			this._scheduledTaskTimer = setTimeout(function () {
				if (this._destroyed) return;
				if (!this._idleChecker()) {
					BS.logger.trace(
						audit + 'Not idle, reschedule by ' + (this.idleDelay / 1000) + 's'
					);
					task.nextInterval = this.idleDelay;
					task.recalculateRunAt();
					this._scheduleTask(task);
					return;
				}
				this._runningTask = task;

				q.try(function () {
					return timeoutPromise(task.run(), this.taskTimeout);
				}.bind(this)).catch(function (ex) {
					if (ex.isPromiseTimeouted) {
						BS.logger.info('%sTask "%s" took too long, ignoring it.', audit, task);
						return;
					}
					throw ex;
				}).finally(function () {
					if (this._runningTask.runOnce === true) {
						this.removeTask(this._runningTask);
					}
					this._runningTask = null;
					this._scheduleNextTask();
				}.bind(this)).done();
			}.bind(this), Math.max(task.runAt - Date.now(), 0));

			this._nextTask = task;

			BS.logger.trace(
				audit + 'Scheduling task to be run at %s', new Date(task.runAt)
			);
		},
		_clearScheduledTaskTimer: function () {
			if (this._scheduledTaskTimer) {
				clearTimeout(this._scheduledTaskTimer);
				this._scheduledTaskTimer = null;
			}
		},
		debug: function () {
			BS.logger.trace('BackgroundService .debug()');
			BS.logger.trace('   Total tasks: %s', this._tasks.length);
			BS.logger.trace('   Running task: %s', this._runningTask);
			BS.logger.trace('   Next task: %s at %s',
				this._nextTask, this._nextTask ? new Date(this._nextTask.runAt) : '');
			this._tasks.forEach(function (task) {
				task.debug();
			});
		}
	};

	BS.BackgroundService = BackgroundService;

})(
	BeeSmart,
	Q
);


(function (BS) {

	function TokenManager() {
		this.resource = null;
		this.expiresTimeoutRef = null;
	}

	TokenManager.prototype = {
		resource: null,
		expiresTimeoutRef: null,
		isTokenizedResource: function (resource) {
			return resource.signOauth;
		},
		isResourceValid: function (resource) {
			var notExpired = resource.expiresAt && Date.now() < resource.expiresAt;
			return Boolean(notExpired);
		},
		refreshToken: function (resource) {
			BS.logger.info('TOKEN MANAGER .refreshToken(%s)', resource.oauthSrc);
			return BS.request.Get(resource.oauthSrc, {
				accept: 'json',
				preventEvent: true
			}).then(function (response) {
				resource.src = response.data.url;
				resource.expiresAt = response.data.expiresAt;
				BS.logger.info(
					'TOKEN MANAGER .refreshToken(...) Tokenized url: %s, Valid till: %s',
					resource.src,
					new Date(resource.expiresAt)
				);
				return resource;
			}).catch(function (ex) {
				BS.logger.info('MR TOKEN: received invalid response - cannot play');
				throw ex;
			});
		},
		setResource: function (resource, expireCallback) {
			BS.logger.trace('TOKEN MANAGER .setResource(%s)', resource.oauthSrc);
			this.clearExpireCallback();
			this.resource = resource;
			var expiresIn = resource.expiresAt - Date.now();
			this.expiresTimeoutRef = setTimeout(expireCallback.bind(null, resource), expiresIn);
		},
		clearExpireCallback: function () {
			BS.logger.trace('TOKEN MANAGER .clearExpireCallback()');
			if (this.expiresTimeoutRef !== null) {
				clearTimeout(this.expiresTimeoutRef);
				this.expiresTimeoutRef = null;
			}
		}
	};

	BS.TokenManager = TokenManager;
	BS.tokenManager = new TokenManager();

})(BeeSmart);

(function (BS) {

	function DelaysSeries(series) {
		this.series = series;
		this.tempSeries = Object.clone(series);
	}

	DelaysSeries.prototype = {
		series: null,
		tempSeries: null,
		getNextDelay: function () {
			return this.tempSeries.length !== 1 ? this.tempSeries.shift() : this.tempSeries[0];
		},
		getNextDelayFinite: function () {
			return this.tempSeries.length !== 0 ? this.tempSeries.shift() : false;
		},
		current: function () {
			return this.series.length - this.tempSeries.length;
		},
		reset: function () {
			this.tempSeries = Object.clone(this.series);
		}
	};

	BS.Utils.DelaysSeries = DelaysSeries;

})(
	BeeSmart
);

(function (BS) {

	function Timer(onTimeout, timeout) {
		if (typeof onTimeout !== 'function' || typeof timeout !== 'number')
			throw new Error(
				'Timer not initialized properly ((Function)%s, (Number)%s)'.sprintf(
					typeof onTimeout,
					timeout)
			);
		this.onTimeout = onTimeout;
		this.timeout = timeout;
	}

	Timer.prototype = {
		tid: null,
		begin: function () {
			var that = this;
			if (this.tid !== null)
				return false;
			this.tid = setTimeout(function () {
				that.onTimeout.call(that);
				that.tid = null;
			}, this.timeout);
		},
		clear: function () {
			if (this.tid === null)
				return false;
			clearTimeout(this.tid);
			this.tid = null;
		},
		reset: function () {
			this.clear();
			this.begin();
		}
	};
	BS.Utils.Timer = Timer;

})(
	BeeSmart
);

(function (BS) {

	function NiceException(msg, msgNice) {
		this.name = 'NiceException';
		this.message = msg;
		this.msgNice = msgNice;
		this.stack = (new Error()).stack;
	}

	NiceException.prototype = new Error();
	NiceException.prototype.toString = function () {
		return this.message;
	};
	NiceException.prototype.toNiceString = function () {
		return this.msgNice;
	};
	BS.NiceException = NiceException;

})(
	BeeSmart
);

(function (BS, q) {
	function BeeSmartModule(moduleObj) {
		var _config = {
			id: true,
			isDefault: false,
			startupTasks: false,
			requiredLicense: false
		};
		var that = this;
		this._moduleObj = moduleObj;
		this._defaultModuleApp = null;
		this._licenseParsed = null;
		this._tasksWereRed = BS.modMgr.tasksRed;
		this._localStartupTasks = [];
		this._localApps = {};
		this._localAppIdsWithStartup = [];
		this._extendedDestroys = [];
		if (!(this instanceof BeeSmartModule)) throw new Error('Use constructor syntax');
		for (var i in _config) {
			if (_config[i] && !(i in moduleObj)) {
				throw new Error('BeeSmartModule object argument has to define >' + i + '<');
			}
			this[i] = i in moduleObj ? moduleObj[i] : null;
		}
		this.addToModuleManager(that);
		for (var i in BS.moduleExtensions) {
			var exts = BS.moduleExtensions[i];
			var pName = exts[0];
			var construct = exts[1];
			var destruct = exts[2];

			if (pName in moduleObj) {
				that[pName] = moduleObj[pName];
				try {
					construct.call(BS, that[pName]);
					if (destruct) this._extendedDestroys.push([pName, destruct]);
				} catch (e) {
					BS.logger.info('BeeSmart.extend construction method failed for ' + this + ':\n'
						+ e);
				}
			}
		}
		if (('launcher' in moduleObj) && moduleObj.launcher instanceof Function) {
			that.launcher = moduleObj.launcher;
		}
		this._onModulePayloadEnded = {
			name: 'ModuleAvalableInformer-' + that.id,
			payload: function (params, cback) {
				BS.evMgr.dispatch(new BeeSmartModuleAvailable(this.moduleId));
				cback();
			}.bind({moduleId: that.id})
		};
		if (moduleObj.startupTasks) {
			var st = moduleObj.startupTasks;
			for (var i in st) {
				BS.ModuleManager._modulesStartupTasks.push(st[i]);
				this._localStartupTasks.push(st[i]);
			}
			this._localStartupTasks.push(this._onModulePayloadEnded);
			BS.ModuleManager._modulesStartupTasks.push(this._onModulePayloadEnded);
		}
		if (this._tasksWereRed) {
			this._localStartupTasks
				.map(function (task) {
					return this.prmsTaskify.bind(task);
				}.bind(this))
				.reduce(function (soFar, f) {
					return soFar.then(f);
				}, q())
				.then(this.startupMethodsGroup.bind(this))
				.done();
		}

		if (moduleObj.isDefault === true) {
			if (BS.ModuleManager._defaultModule){
				BS.logger.debug('Default module was already set, overriding with \'' + this +
					'\'');
			}
			BS.ModuleManager._defaultModule = this;
		}
	}
	BeeSmartModule.prototype = {
		get defaultApp() {
			if (this._defaultModuleApp !== null) return this._defaultModuleApp;
			throw new Error('Default application was not defined in current module');
		},
		get isLicensed () {
			var rl = '' + this.requiredLicense;
			if (!this.requiredLicense) return true;
			if (this._licenseParsed !== null) return this._licenseParsed;
			this._licenseParsed = BS.Module.parseLicenseExpr(rl, BS.modMgr.services);
			return this._licenseParsed;
		}
	};
	BeeSmartModule.prototype.addToModuleManager = function (module) {
		BS.modMgr.add(module);
	};
	BeeSmartModule.prototype.register = function (appRef) {
		if (!(appRef instanceof BS.Application)){
			throw new Error('App object must be an instance of BeeSmart.App template');
		}
		appRef.owner = '' + this;
		var hasStartupHandler = typeof appRef.startup === 'function';
		if (appRef.isDefault === true) this._defaultModuleApp = appRef;
		if (hasStartupHandler) this._localAppIdsWithStartup.push('' + appRef);
		this._localApps[appRef] = appRef;
		return this;
	};
	BeeSmartModule.prototype.unregister = function (appRef) {
		if (!(appRef instanceof BS.Application)){
			throw new Error('App object must be an instance of BeeSmart.App template');
		}
		if (!(appRef in this._localApps)){
			throw new Error('Application >' + appRef + '< doesn\'t exist in module >' +
				this + '<');
		}
		appRef.owner = undefined;
		if (this._defaultModuleApp === appRef) this._defaultModuleApp = null;
		if (typeof appRef.startup === 'function'){
			delete this._localAppIdsWithStartup[this._localAppIdsWithStartup
				.indexOf(appRef.toString())];
		}
		delete this._localApps[appRef];
		delete BS.appMgr.applications[appRef];
	};
	BeeSmartModule.prototype.appExists = function (id) {
		return id in this._localApps;
	};
	BeeSmartModule.prototype.getApp = function (id) {
		if (!(id in this._localApps)) {
			throw new Error('Application does not exist in current module');
		}
		if (!this._localApps[id].isLicensed) throw 'invalid-license';
		return this._localApps[id];
	};
	BeeSmartModule.prototype.getLicensedLocalApps = function () {
		return this._localAppIdsWithStartup
			.map(function (appId) {
				return this._localApps[appId];
			}, this)
			.filter(function (app) {
				return app.isLicensed;
			});
	};
	BeeSmartModule.prototype.callAppStartup = function (app) {
		try {
			app.startup.apply(app);
		} catch (e) {
			var msg = 'Error in %s.startup:'.sprintf(app.id) + '\n' + (e.stack || '');
			BS.logger.log(msg);
			return msg;
		}
	};
	BeeSmartModule.prototype.startupMethodsGroup = function (tmp, onFinishCallback) {
		var errors = this
			.getLicensedLocalApps()
			.map(this.callAppStartup)
			.filter(function (value) {
				return value !== undefined;
			});
		(onFinishCallback || function () {}).call();
		return errors;
	};
	BeeSmartModule.prototype.prmsTaskify = function () {
		var dfrd = q.defer();
		var task = this;
		try {
			task.payload({}, function (data, status) {
				if (false === status) {
					dfrd.reject('Task `%s` failed!%s'.sprintf(task.name, data.stack ?
					' Reason:\n' + data.message + '\n' + data.stack : ''));
				} else dfrd.resolve(data);
			}.bind(task));
		} catch (x) {
			dfrd.reject(x);
			BS.logger.log(x);
		}
		return dfrd.promise.then(function (d) {
			if ('finished' in task) task.finished({result: d, success: true}, true);
			return q(true);
		}).catch(function (ex) {
			if ('finished' in task) task.finished({result: null, success: false}, false);
			BS.logger.info('NOTE: %s', ex);
			return q(true);
		});
	};
	BeeSmartModule.prototype.destroy = function () {
		BS.logger.debug('Cleaning module ' + this);
		for (var i in this._localApps) {
			BS.logger.debug('* Removing app: ' + this._localApps[i]);
			delete BS.appMgr.applications[i];
		}
		delete BS.ModuleManager._modules['' + this];
		for (var i in this._localStartupTasks){
			Array.remove(
				BS.ModuleManager._modulesStartupTasks,
				BS.ModuleManager._modulesStartupTasks.indexOf(this._localStartupTasks[i])
			);
		}
		for (var i in this._extendedDestroys) {
			try {
				this._extendedDestroys[i][1].call(BS,
					this._moduleObj[this._extendedDestroys[i][0]]);

			} catch (e) {
				BS.logger.info(
					'BeeSmart.extend destruction method failed for ' + this + ':\n' + e
				);
			}
		}
		for (var i in BS.ModuleManager._modules){
			if (BS.ModuleManager._modules[i].isDefault) {
				BS.ModuleManager._defaultModule = BS.ModuleManager._modules[i];
			}
		}
		return null;
	};
	BeeSmartModule.prototype.toString = function () {
		return this.id;
	};
	BeeSmartModule.prototype.valueOf = function () {
		return this.id;
	};
	BeeSmartModule.parseLicenseExpr = function (expression, availableLicenses) {
		return eval(expression.split(/[^a-zA-Z0-9_\-]/g)
			.reduce(function (expression, part) {
				return part.length === 0 ?
					expression :
					expression.replace(part, availableLicenses.indexOf(part) !== -1 ?
						'true' : 'false');
			}, expression));
	};
	function BeeSmartModuleAvailable(moduleId) {
		this.type = 'BeeSmartModuleAvailable';
		this.value = moduleId;
		this.handler = 'onBeeSmartModuleAvailable';
		this.description = 'BeeSmart module has completed it\'s startup requirements';
	}

	BeeSmartModuleAvailable.prototype = new BS.Event();
	BS.Module = BeeSmartModule;
})(BeeSmart, Q);

(function (BS, q) {
	function ModuleManager() {}
	ModuleManager._modules = {};
	ModuleManager._addonModules = {};
	ModuleManager._modulesStartupTasks = [];
	ModuleManager._defaultModule = null;
	ModuleManager.prototype = {
		_services: [],
		dfrModules: {},
		tasksRed: false,
		modModifyTypes : {
			REGISTER: 'REGISTER',
			UNREGISTER: 'UNREGISTER',
			REREGISTER: 'REREGISTER',
			UNKNOWN: 'UNKNOWN'
		},
		moduleTypes:{
			BASIC_MODULE: 'BASIC_MODULE',
			SDK_MODULE: 'SDK_MODULE'
		},
		set services (serviceList) {
			this._services = serviceList;
			BS.logger.debug('Enabled services: ' + serviceList.join(', '));
			for (var i in ModuleManager._modules) {
				var mod = ModuleManager._modules[i];
				if (!mod.isLicensed) {
					BS.logger.info('Module >' + mod + '< not enabled!');
					mod.destroy();
					delete ModuleManager._modules[i];
				}
			}
		},
		get services () {
			return this._services;
		},
		get defaultModule () {
			var dMod;
			var dModConf = BS.config.get('Core.Client.DEFAULT_MODULE_ID');
			if (this.moduleExists(dModConf) && (dMod = this.getModule(dModConf))) return dMod;
			if (ModuleManager._defaultModule !== null) return ModuleManager._defaultModule;
			throw new Error('No default module was defined yet');
		},
		get startupTasks () {
			var tasks = [];
			for (var modId in ModuleManager._modules) {
				var modObj = ModuleManager._modules[modId];
				tasks.push({name: 'Startup methods from ' + modId,
					payload: modObj.startupMethodsGroup.bind(modObj)});
			}
			this.tasksRed = true;
			return ModuleManager._modulesStartupTasks.concat(tasks);
		},
		get addons () {
			return Object.clone(ModuleManager._addonModules);
		}
	};
	ModuleManager.prototype.add = function (moduleObj) {
		if (moduleObj.id in this.dfrModules) {
			this.dfrModules[moduleObj.id].resolve(moduleObj);
			delete this.dfrModules[moduleObj.id];
		}
		ModuleManager._modules[moduleObj.id] = moduleObj;
	};
	ModuleManager.prototype.moduleExists = function (id) {
		return id in ModuleManager._modules;
	};
	ModuleManager.prototype.getModule = function (id) {
		return ModuleManager._modules[id];
	};
	ModuleManager.prototype.appExists = function (id) {
		return id in BS.appMgr.applications;
	};
	ModuleManager.prototype.getApp = function (id) {
		if (!(id in BS.appMgr.applications)){
			throw new Error('App >' + id + '< does not exist');
		}
		var app = BS.appMgr.applications[id];
		if (!app.owner){
			throw new Error('App >' + id + '< is not registered in any module!');
		}
		if (!app.isLicensed) throw 'invalid-service';
		return BS.appMgr.applications[id];
	};
	ModuleManager.prototype.isAllowed = function (serviceName) {
		return this._services.indexOf(serviceName) !== -1;
	};
	ModuleManager.prototype.isAppAllowed = function (appId) {
		return (appId in BS.appMgr.applications ? BS.appMgr.applications[appId].isLicensed : false);
	};
	ModuleManager.prototype.registerAddon = function registerAddon(addon, callback) {
		var alreadyPresent = ModuleManager._addonModules[addon.id] ? true : false;
		BS.logger.info('Addon >' + addon.id + '< valid, requesting script file...');
		BS.request.getScript(
			addon.location,
			this._onAddonScriptLoaded.bind({'addon': addon, 'alreadyPresent': alreadyPresent,
				callback: callback || function () {}}),
			5000
		);
	};
	ModuleManager.prototype._onAddonScriptLoaded = function (s) {
		var ModifyTypes = ModuleManager.prototype.modModifyTypes;
		var ModuleTypes = ModuleManager.prototype.moduleTypes;
		if (!s) {
			BS.logger.info('addon >' + this.addon.id + '< getScript timeouted, not registered');
			this.callback(s);
			return;
		}
		BS.logger.info('addon >' + this.addon.id + '< getScript response returned, registering'
			+ ' addon');
		BS.evMgr.dispatch(
			new ModuleManager.prototype.BeeSmartAddonModified(
				this.addon.id,
				ModuleTypes.SDK_MODULE,
				this.alreadyPresent ? ModifyTypes.REREGISTER : ModifyTypes.REGISTER
			)
		);
		this.addon.registered = s;
		ModuleManager._addonModules[this.addon.id] = this.addon;
		this.callback(s);
	};
	ModuleManager.prototype.unregisterAddon = function (id) {
		var addon = ModuleManager._addonModules[id] || false;
		if (!addon) {
			BS.logger.info('addon >' + id + '< not present, cant unregister !');
			return false;
		}
		ModuleManager._addonModules[id].registered = false;
		BS.logger.info('addon >' + id + '< unregistered ');
		BS.evMgr.dispatch(
			new this.BeeSmartAddonModified(
				addon.id,
				this.moduleTypes.SDK_MODULE,
				this.modModifyTypes.UNREGISTER
			)
		);
	};
	ModuleManager.prototype.getInstanceAvailabilityPromiseOf = function (instanceId) {
		var dfr;
		if (instanceId) {
			try {
				dfr = q.defer();
				dfr.resolve(this.getModule(instanceId));
				return dfr.promise;
			} catch (x) {
				dfr = this.dfrModules[instanceId] = q.defer();
				return dfr.promise;
			}
		}
		return q(undefined);
	};

	function BeeSmartAddonModified(moduleId, moduleType, modifyType) {
		if (!(moduleType in ModuleManager.prototype.moduleTypes)) throw 'invalid moduleType';
		if (!(modifyType in ModuleManager.prototype.modModifyTypes)) throw 'invalid modifyType';
		this.moduleId = moduleId;
		this.handler = 'onBeeSmartAddonModified';
		this.moduleType = moduleType;
		this.modModifyType = modifyType;
	}
	BeeSmartAddonModified.prototype = new BS.Event();
	ModuleManager.prototype.BeeSmartAddonModified = BeeSmartAddonModified;

	BS.ModuleManager = ModuleManager;
	BS.modMgr = new ModuleManager();


	BS.extend = function (extObj) {
		if (extObj.type === 'ModuleConstructor') {
			BS.moduleExtensions.push([
				extObj.bindToProperty,
				extObj.constructorAction,
				extObj.destructorAction
			]);
		}
		if (extObj.type === 'Events') {
			BS.EventManager.prototype[extObj.name] = extObj.objectTemplate;
		}
	};
	BS.moduleExtensions = [];
})(BeeSmart, Q, BeeSmart.Event);

(function (BS) {

	function PowerManager() {
		this.bindEvent();
	}
	PowerManager.prototype = {
		_currentPowerHandler: null,
		eventBinding: null,
		addPowerManager: function (pwrMapObjectTpl) {
			this[pwrMapObjectTpl.id] = pwrMapObjectTpl;
		},
		set powerMap (id) {
			if (id === 'default') {
				BS.logger.info('PowerManager: using >default< powermap');
				this._currentPowerHandler = new this.PowerHandler();

			} else if (!(id in this)) {
				BS.logger.info('PowerManager: powermap >' + id
					+ '< does not exist. Using default power map!');
				this._currentPowerHandler = new this.PowerHandler();

			} else {
				BS.logger.info('PowerManager: using >' + id + '< powermap');
				this._currentPowerHandler = new this[id]();
			}
		},
		get powerMap () { return this._currentPowerHandler; },
		PowerHandler: PowerHandler,
		listenToEkiohPowerChangeEvent: function () {
			try {
				ekiohPlatformInfo.addEventListener('ekiohPowerStateChange', function (ev) {
					BS.evMgr.dispatch(new EkiohPowerStateChangeEvent(ev.state));
				}, false);
			} catch (e) {
				BS.logger.info('NOTE: Features based on POWER mode changes are disabled!');
			}
		},
		bindEvent: function () {
			this.eventBinding = BS.evMgr.bind('onPowerStateChange', function (ev) {
				var a = this.powerMap.onPowerStateChangeEvent(ev.value);
				if (a) {
					BS.device._setPowerMode(ev.value);
					BS.evMgr.dispatch(new BeeSmartPowerStateChange(ev.value));
				}
			}.bind(this));
		},
		destroy: function () {
			this.eventBinding.unbind();
		}
	};

	function PowerHandler() {}
	PowerHandler.prototype = {
		lastPowerKeyTS: null,
		ignorePowerKeyDelay: 3000,
		ignorePowerChgEvtDelay: 3000,
		onPowerKey: function () {
			var lastKeyTSDiff = Date.now() - (this.lastPowerKeyTS || 0);

			if (lastKeyTSDiff < this.ignorePowerKeyDelay) {
				BS.logger.info('last power press was ' + lastKeyTSDiff
					+ 'ms ago, ignoring it!');
				return false;
			}

			this.lastPowerKeyTS = Date.now();

			if (BeeSmart.device.power === 'standby') {
				BeeSmart.device.power = 'on';
				return true;

			} else if (BeeSmart.device.power === 'on') {
				BeeSmart.device.power = 'standby';
				return true;
			}

			BS.logger.info('onPowerKey did nothing !!');
			return false;

		},
		lastPowerChangeTime: null,
		onPowerStateChangeEvent: function () {
			var lastPowerChangeTimeDiff = Date.now() - (this.lastPowerChangeTime || 0);

			if (lastPowerChangeTimeDiff < this.ignorePowerChgEvtDelay) {
				BS.logger.info('power change event was triggered ' + lastPowerChangeTimeDiff
					+ 'ms ago, ignoring it now!');
				return false;
			}

			this.lastPowerChangeTime = Date.now();

			return true;
		}
	};

	function BeeSmartPowerStateChange(state) {
		var ev = this;
		ev.type = 'BeeSmartPowerStateChange';
		ev.value = state;
		ev.handler = 'onBeeSmartPowerStateChange';
		ev.description = 'When power state of device actually changes';
	}

	BeeSmartPowerStateChange.prototype = new BS.Event();
	BS.BeeSmartPowerStateChange = BeeSmartPowerStateChange;

	function EkiohPowerStateChangeEvent(state) {
		var ev = this;
		ev.type = 'PowerStateChange';
		ev.value = state;
		ev.handler = 'onPowerStateChange';
		ev.description = 'When power state of device changes';
	}

	EkiohPowerStateChangeEvent.prototype = new BS.Event();
	BS.EkiohPowerStateChangeEvent = EkiohPowerStateChangeEvent;
	BS.PowerManager = PowerManager;
	BS.powerManager = new PowerManager();
	BS.powerManager.listenToEkiohPowerChangeEvent();
})(
	BeeSmart
);

(function (BS) {
	BS.Application = function Application(id, properties) {
		properties = properties || {};
		this.appID = this.id = id;
		this.isDefault = properties.isDefault || false;
		this._isPopup = properties.type === 'popup';
		this.contextHelp = properties.helpId || null;
		this._license = properties.requiredLicense || null;
		this.inputMapper = properties.inputMapper || BS.Application.prototype.inputMapper;
		var _kg = BS.InputManager.keyGroups;
		this._registeredKeys = Application.parseKeysAndGroups([
			_kg.navigation,
			_kg.colored,
			_kg.playback,
			_kg.numbers,
			_kg.characters,
			_kg.input
		]);
		var inputIdentifiers = properties.listenTo || [];
		for (var i in inputIdentifiers) {
			var ks = inputIdentifiers[i];
			if (typeof ks === 'string') this._registeredKeys[ks] = true;
			if (ks instanceof Array){
				for (var j in ks) this._registeredKeys[ks[j]] = true;
			}
		}
		BS.appMgr.applications[this.id] = this;
	};
	BS.Application.parseKeysAndGroups = function (keyGroups) {
		var keys = {};
		for (var i in keyGroups) {
			var ks = keyGroups[i];
			if (typeof ks === 'string'){
				keys[ks] = true;
			} else {
				for (var j in ks) keys[ks[j]] = true;
			}
		}
		return keys;
	};
	BS.Application.portalDirectionKeyMapper = function (inputKey) {
		var keyMapper = {'left': 'right', 'right': 'left'};
		if (BS.portal.direction === 'rtl') return keyMapper[inputKey];
	};
	BS.Application.prototype = {
		_registeredKeys: {},
		id: null,
		appID: null,
		contextHelp: null,
		_lock: false,
		_license: null,
		_isLicensed: null,
		owner: null,
		isDefault: false,
		_isPopup: false,
		toString: function () { return this.id; },
		valueOf: function () { return this.id; },
		get isPopup () { return this._isPopup; },
		get lock () { return this._lock; },
		set lock (value) { this._lock = !!value; },
		get isLicensed () {
			if (this._license === null) return true;
			if (this._isLicensed === null){
				this._isLicensed = this._license ?
					(
						BS.modMgr.moduleExists(this.owner) &&
						BS.modMgr.getModule(this.owner).isLicensed &&
						BS.Module.parseLicenseExpr(this._license, BS.modMgr.services)
					) :
					true
				;
			}
			return this._isLicensed;
		},
		init: function () {},
		destroy: function () {},
		focus: function () {},
		blur: function () {},
		interupt: function () {},
		inputMapper: function (inputKey) { return inputKey; },
		unregister: function () {
			var id = '' + this;
			if (this.owner === null) {
				throw new Error('Application >' + id + '< wasn\'t registered yet');
			} else {
				var mod = BeeSmart.modMgr.getModule(this.owner);
				mod.unregister(mod.getApp(id));
			}
		},
		_inputEvent: function (keyKeyword, message) {
			keyKeyword = this.inputMapper(keyKeyword) || keyKeyword;
			var isKey = keyKeyword in this._registeredKeys;
			if (!isKey) return false;
			return !(this.onInputEvent(keyKeyword, message) === true);
		}
	};

	BS.App = BS.Application;

})(BeeSmart);

(function (BS, q, em, log, Application) {

	BS.AppManager = function AppManager() {
		this.stack = [];
		this.applications = {};
	};
	BS.AppManager.prototype = {
		stack: [],
		applications: {},
		keyPressHandler: function (currentKeyPressed, originalKeyCode) {
			var stack = this.stack;
			var apps = this.applications;
			var i = stack.length;
			while (i--) {
				if (apps[stack[i].appID]._inputEvent(currentKeyPressed, originalKeyCode)){
					return;
				}
			}
		},
		push: function AppLayerPush(appLayer) {
			var that = BS.appMgr;
			var stack = that.stack;
			var apps = that.applications;
			log.trace('ApplicationManager pushing new application (' + appLayer + ') to stack');
			if (!(appLayer instanceof Application)){
				throw new Error('Cannot push invalid BeeSmart.Application object >' + appLayer +
					'<');
			}
			if (!appLayer.isLicensed) throw 'invalid-license';

			var i = stack.length,
				args = arguments.length === 0 ? [] : Array.processArguments(arguments),
				initArgs = [this instanceof Application ? '' + this : null
				].concat(args.splice(1)),
				blurArgs = ['' + appLayer].concat(args.splice(1));

			if (i !== 0) {
				try {
					var lowerApp = apps[stack[i - 1].appID];
					lowerApp.blur.apply(lowerApp, blurArgs);
				} catch (e) {
					log.log(e);
				}
			}

			that.stack.push({appID: appLayer.appID, stackID: null});

			try {
				apps[that.stack[i].appID].init.apply(appLayer, initArgs);
			} catch (e) {
				if (e === 'app-stack-op-abort') {
					that.stack.pop();
					return e;
				}
				log.log(e);
			}

			em.dispatch(new EventStackOperation({
				action: 'push',
				appId: appLayer.appID,
				parameters: initArgs
			}));
		},
		pop: function AppLayerPop() {
			var that = BS.appMgr;
			var stack = that.stack;
			var apps = that.applications;
			var e, prmsOnDone;
			var i = that.stack.length - 1;
			var args = arguments.length === 0 ? [] : Array.processArguments(arguments);
			var appId = this instanceof Application ? '' + this : stack[i].appID;
			log.trace('ApplicationManager pop last application: %s', appId);

			function finish() {
				stack.pop();
				if (i !== 0) {
					var me = apps[stack[i - 1].appID];
					try {
						me.focus.apply(me, [appId].concat(args));
					} catch (ex) {
						log.log(ex);
					}
					em.dispatch(e = new EventStackOperation({action: 'pop', appId: appId}));
				}
			}

			try {
				prmsOnDone = apps[stack[i].appID].destroy
						.apply(apps[stack[i].appID], [appId].concat(args)) || {};
			} catch (ex) {
				log.log(ex);
			}
			if (q.isPromise(prmsOnDone)) prmsOnDone.finally(finish);
			else finish();
		},

		inContextOf: function inContextOf(reference) {
			var that = this;
			if (!(reference instanceof Application)){
				throw new Error('1. argument should be an BeeSmartApplication object reference');
			}
			return {
				push: function () {
					that.push.apply(reference, arguments);
				},
				pop: function () {
					that.pop.apply(reference, arguments);
				}
			};
		},
		interuptable: function (callerAppLayerID) {
			var m;
			var stack = this.stack;
			var apps = this.applications;
			if (stack.length) {
				for (var k = stack.length - 1; k !== 0; k--) {
					m = apps[stack[k].appID];
					if (m.isPopup|| m.lock) {
						m.interupt(callerAppLayerID);
						return false;
					}
				}
			}
			return true;
		},
		get isStackInteruptable () {
			return this.interuptable();
		},
		cutOff: function (appLayerID) {
			appLayerID = appLayerID instanceof BS.App ? appLayerID.id : appLayerID;
			var stack = this.stack;
			var apps = this.applications;
			log.trace('ApplicationManager cutOff until >' + appLayerID + '<');
			var m;
			var k = stack.length - 1;
			var lastAppPoped = null;
			while (k !== 0) {
				m = apps[stack[k].appID];
				if (m.appID === appLayerID)break;
				try {
					m.destroy(appLayerID);
				} catch (e) {
					log.log(e);
				}
				lastAppPoped = stack[k].appID;
				stack.pop();
				k--;

				em.dispatch(new EventStackOperation({
					action: 'cutOff',
					appId: m.appID
				}));
			}

			try {
				var argArray = Array.prototype.slice.apply(arguments, [1]);
				if (argArray && argArray.length) apps[stack[k].appID].focus(argArray);
				else apps[stack[k].appID].focus(lastAppPoped);
			} catch (e) {
				log.log(e);
			}
			return true;
		},
		isLoaded: function isLoaded(bsApplication) {
			var stack = this.stack;
			bsApplication = typeof bsApplication === 'object' ? bsApplication.id : bsApplication;
			return stack.some(function (el) {
				return el.appID === bsApplication;
			});
		},
		lastLoaded: function lastLoaded(bsApplication) {
			var stack = this.stack;
			if (stack.length === 0)
				return false;
			var lastId = stack[stack.length - 1].appID;
			return bsApplication ? (lastId === '' + bsApplication) : lastId;
		},
		debug: function () {
			var stack = this.stack;
			log.print('# Application stack dump #');
			stack.forEach(function (el, i) {
				log.print(i + '. ' + el.appID);
			});
			alert('\n');
		},
		get applicationStack () {
			var stack = this.stack;
			var list = [];
			for (var i in stack) list.push('' + stack[i].appID);
			return list;
		}
	};


	function EventStackOperation(data) {
		var ev = this;
		ev.type = 'EventStackOperation';
		ev.handler = 'onAppStackChange';
		ev.data = data;
		ev.cancelable = false;
	}
	EventStackOperation.prototype = new BS.Event();


	BS.appMgr = new BS.AppManager();

})(BeeSmart, Q, BeeSmart.evMgr, BeeSmart.logger, BeeSmart.Application);

(function (BS, em) {

	function InputManager() {
	}

	InputManager.keyGroups = {
		'navigation': ['ok', 'up', 'down', 'left', 'right', 'back'],
		'colored': ['green', 'red', 'blue', 'yellow'],
		'playback': ['play', 'pause', 'rew', 'fw', 'stop', 'toBegin', 'toEnd', 'record', 'chDown',
			'chUp'
		],
		'numbers': ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
		'characters': [
			'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'a', 's', 'd', 'f', 'g',
			'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'space', 'delete'
		],
		'input': ['ttx', 'keyboard', 'clear', 'select'],
		'shortcuts': ['epg', 'games', 'fsTV', 'www', 'radio', 'music', 'reload', 'menu',
			'info', 'ttx', 'audio', 'subtitle', 'fav'
		],
		'globals': ['power', 'mute', 'volup', 'voldown', 'vod', 'dvr', 'aod', 'settings', 'extras', 'help']
	};

	var allKeyCodes = [];
	Object.eachKey(InputManager.keyGroups, function (i) {
		Object.eachKey(InputManager.keyGroups[i], function (j) {
			allKeyCodes.push(InputManager.keyGroups[i][j]);
		});
	});

	InputManager.allKeys = allKeyCodes;

	InputManager.prototype = {
		_rcEnabled: true,
		_dKeyMap: null,
		KeyMappingsDefault: function KeyMappingsDefault() {
			this['8'] = 'back';
			this['13'] = 'ok';
			this['32'] = 'space';
			this['37'] = 'left';
			this['38'] = 'up';
			this['39'] = 'right';
			this['40'] = 'down';
			this['46'] = 'delete';

			this['48'] = '0';
			this['49'] = '1';
			this['50'] = '2';
			this['51'] = '3';
			this['52'] = '4';
			this['53'] = '5';
			this['54'] = '6';
			this['55'] = '7';
			this['56'] = '8';
			this['57'] = '9';

			this['97'] = this['65'] = 'a';
			this['98'] = this['66'] = 'b';
			this['99'] = this['67'] = 'c';
			this['100'] = this['68'] = 'd';
			this['101'] = this['69'] = 'e';
			this['102'] = this['70'] = 'f';
			this['103'] = this['71'] = 'g';
			this['104'] = this['72'] = 'h';
			this['105'] = this['73'] = 'i';
			this['106'] = this['74'] = 'j';
			this['107'] = this['75'] = 'k';
			this['108'] = this['76'] = 'l';
			this['109'] = this['77'] = 'm';
			this['110'] = this['78'] = 'n';
			this['111'] = this['79'] = 'o';
			this['112'] = this['80'] = 'p';
			this['113'] = this['81'] = 'q';
			this['114'] = this['82'] = 'r';
			this['115'] = this['83'] = 's';
			this['116'] = this['84'] = 't';
			this['117'] = this['85'] = 'u';
			this['118'] = this['86'] = 'v';
			this['119'] = this['87'] = 'w';
			this['120'] = this['88'] = 'x';
			this['121'] = this['89'] = 'y';
			this['122'] = this['90'] = 'z';

			this['36'] = 'vod';

			this.get = function (id) {
				return this[id];
			};
		},
		addDeviceKeyMap: function (KeyObjectTpl) {
			this._dKeyMap = new KeyObjectTpl();
		},
		get keyMap() {
			return this._dKeyMap;
		},
		set remoteControlEnabled(enabled) {
			this._rcEnabled = !!enabled;
		},
		get remoteControlEnabled() {
			return this._rcEnabled;
		}
	};

	BS.InputManager = InputManager;
	BS.inputManager = new InputManager();

	em.bind('onSkinManifestLoaded', function () {
		var remoteControls = BS.skinConfiguration.remoteControls;
		var dKeyMap = BS.inputManager._dKeyMap;

		if (!remoteControls) return;

		var rcName = Object.keys(remoteControls).filter(function (rcName) {
			return rcName === dKeyMap.code;
		})[0];

		if (rcName) {
			var rc = remoteControls[rcName];
			Object.keys(rc).forEach(function (keyCode) {
				var keyName = rc[keyCode];
				dKeyMap[keyCode] = keyName;
				BS.logger.debug('Added RC link for keyCode(%s) and keyName(%s)'
					.sprintf(keyCode, keyName));
			});
		}
	});

})(
	BeeSmart,
	BeeSmart.evMgr
);

(function (BS) {

	function TemplateService(defaultSkin, location, remoteBasePath, localBasePath) {
		this.skin = defaultSkin;
		this.location = location;
		this.setBasePath(remoteBasePath, localBasePath);
	}

	TemplateService.prototype = {
		_skin: null,
		get skin() {
			return this._skin;
		},
		set skin(value) {
			this._skin = value;
		},
		basePath: null,
		setBasePath: function (remote, local) {
			remote = remote.replace(/^\/?(.*)$/g, '/$1').replace(/\/$/, '');
			local = local.replace(/^\/?(.*)$/g, '/$1').replace(/\/$/, '');
			var onlineLoc = this.location.replace(/((?:#|\?).*)$/, '');
			remote = !!remote ? onlineLoc.replace(/\/(:?index|colibry)\.svg/, remote) : remote;
			local = !!local ? this.location.replace(/\/(:?index|colibry)\.svg/, local) : local;
			this.basePath = -1 === this.location.indexOf('file://') ?
				remote : local;
		},
		get: function (path) {
			var url = this._translatePath(path);
			return BS.request.Get(url, {accept: 'svg'}).then(function (response) {
				return $.parseAndAppendModuleSVG(response.data);
			});
		},
		getSkinManifest: function () {
			var url = this._translatePath('manifest.json');
			return BS.request.Get(url, {accept: 'json', cache: 'CARD'})
				.then(function (response) {
					return response.data;
				});
		},
		_translatePath: function (path) {
			var pthSkin = this.skin === null ? '' : '/' + this.skin;
			return this.basePath.replace('/{skin-name}', pthSkin) + '/' + path;
		}
	};

	BS.TemplateService = TemplateService;

})(
	BeeSmart
);

(function (BS, q, em) {
	function PortalEnvironment() {
		this.dfrAvail = q.defer();
	}

	PortalEnvironment.prototype = {
		CONNECTIVITIES: {
			ONLINE_CONNECTED: 'online-connected',
			ONLINE_DISCONNECTED: 'online-disconnected',
			OFFLINE_STANDALONE: 'offline-standalone'
		},
		connectivityEndpoint: '',
		get calendar () {
			return BS.skinConfiguration.localization.calendar;
		},
		formats: {
			_date: 'd. M. yyyy',
			_date2: 'd. M.',
			_time: 'HH:mm',
			dateTimeDelimiter: ' ',
			time2: 'HH:mm:ss',
			price: {
				decimals: 2,
				decimalSign: '.',
				thousandSign: ',',
				currencySign: ''
			},
			set currencySign(value) {
				if (!value)
					throw 'No value for >Currency sign< was specified';
				this.price.currencySign = value;
			},
			get currencySign() {
				return this.price.currencySign;
			},
			set date(value) {
				if (!value)
					throw 'No value for >Date format< was specified';
				this._date = value;
			},
			get date() {
				return this._date;
			},
			get shortDate() {
				return this._date2;
			},
			set time(value) {
				if (!value)
					throw 'No value for >Time format< was specified';
				this._time = value;
			},
			get time() {
				return this._time;
			},
			get dateTime() {
				return this._date + this.dateTimeDelimiter + this._time;
			}
		},
		get local() {
			return {formats: this.formats};
		},
		set language(objLanguage) {
			this._interfaceLanguage = objLanguage;
		},
		get language() {
			return this._interfaceLanguage;
		},
		set skin(objSkin) {
			this._skin = objSkin;
		},
		get skin() {
			return this._skin;
		},
		set user(objUser) {
			this.dfrAvail.resolve(objUser);
			this._user = objUser;
		},
		get user() {
			return this._user;
		},

		_connectivity: null,
		get connectivity() {
			return this._connectivity || this.CONNECTIVITIES.ONLINE_CONNECTED;
		},
		get isEmbedded () {
			return this._connectivity === this.CONNECTIVITIES.OFFLINE_STANDALONE;
		},
		get isDisconnected () {
			return this._connectivity === this.CONNECTIVITIES.ONLINE_DISCONNECTED;
		},
		get isOnline () { return this._connectivity === this.CONNECTIVITIES.ONLINE_CONNECTED; },
		updateFormatsFromLanguage: function (language) {
			var timeFormat = BS.skinConfiguration ? BS.skinConfiguration.timeFormat : 'shortFormat';
			var dateFormat = BS.skinConfiguration ? BS.skinConfiguration.dateFormat : 'shortFormat';
			var overrideTimeFormat = BS.config.get('Core.Client.TIME_FORMAT');
			var overrideDateFormat = BS.config.get('Core.Client.DATE_FORMAT');
			if (overrideTimeFormat) {
				this.formats.time = overrideTimeFormat;
			} else if (language.timeFormats) {
				this.formats.time = language.timeFormats[timeFormat];
			}
			if (overrideDateFormat) {
				this.formats.date = overrideDateFormat;
			} else if (language.dateFormats) {
				this.formats.date = language.dateFormats[dateFormat];
			}

			this.formats.price.decimals =
				typeof BS.skinConfiguration.priceDecimals === 'number' ?
					BS.skinConfiguration.priceDecimals : language.priceDecimals;
			this.formats.price.decimalSign = language.priceDecimalSign;
			this.formats.price.thousandSign = language.priceThousandSign;
		},
		updateFormatsFromSkin: function(skinConfig) {
			var priceDecimals = parseInt(skinConfig.priceDecimals, 10);
			if (priceDecimals >= 0) this.formats.price.decimals = priceDecimals;

		},
		setOnlineConnected: function () {
			var newCn = this.CONNECTIVITIES.ONLINE_CONNECTED;
			if (newCn !== this._connectivity) {
				this._connectivity = newCn;
				BS.evMgr.dispatch(new ConnectivityChange(newCn, this._connectivity));
			}
		},
		setOnlineDisconnected: function () {
			var newCn = this.CONNECTIVITIES.ONLINE_DISCONNECTED;
			if (newCn !== this._connectivity) {
				this._connectivity = newCn;
				BS.evMgr.dispatch(new ConnectivityChange(newCn, this._connectivity));
			}
		},
		setOfflineStandalone: function () {
			var newCn = this.CONNECTIVITIES.OFFLINE_STANDALONE;
			if (newCn !== this._connectivity) {
				this._connectivity = newCn;
				BS.evMgr.dispatch(new ConnectivityChange(newCn, this._connectivity));
			}
		},
		getInstanceAvailabilityPromise: function () {
			return this.dfrAvail.promise;
		}
	};
	BS.portal = new PortalEnvironment();

	function ConnectivityChange(currState, prevState) {
		this.current = currState;
		this.previous = prevState;
	}

	ConnectivityChange.prototype = {
		msg: {
			'online-connected': 'PORTAL: Backend connected.',
			'online-disconnected': 'PORTAL: No backend connection.',
			'offline-standalone': 'PORTAL: Embedded runtime - no backend connected ever was.'
		},
		previous: null,
		current: null,
		type: 'onConnectivityChange',
		_defaultAction: function () {
			BS.logger.info(this.msg[BS.portal.connectivity]);
		}
	};
	Object.extend(ConnectivityChange, BS.Event);

	em.bind('onSkinManifestLoaded', function () {
		BS.portal.updateFormatsFromSkin(BS.skinConfiguration);
	});
})(
	BeeSmart,
	Q,
	BeeSmart.evMgr
);

(function (BS) {

	function I18N() {
		this.available = false;
		this._translations = {};
	}
	I18N.prototype = {
		_translations: {},
		available: false,
		_monthKeys: [
			'January', 'February', 'March', 'April', 'May', 'June', 'July',
			'August', 'September', 'October', 'November', 'December',
			'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'
		],
		_dayKeys: [
			'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday',
			'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'
		],
		_translatedMonths: null,
		_translatedDays: null,
		getMonthNames: function () {
			return this._monthKeys.map(function (k) {return this.translate(k);}.bind(this));
		},
		getDayNames: function () {
			return this._dayKeys.map(function (k) {return this.translate(k);}.bind(this));
		},
		translate: function (keyword) {
			if (keyword === null) {
				return keyword;
			} else if (keyword in this._translations) {
				return this._translations[keyword];
			} else {
				BS.logger.trace('#### Missing keyword translation: ' + keyword);
				return keyword;
			}
		},
		loadTranslations: function (data) {
			if (!(data instanceof Object))
				throw new Error('Invalid translations object supplied (%s)'.sprintf(data));
			this._translations = data;
			var trCount = Object.keys(data).length;
			BS.logger.trace('I18n translations count: ' + trCount);
			this.available = true;
		}
	};

	BS.I18N = I18N;

})(
	BeeSmart
);

(function (BS) {

	function SkinMeta(p) {
		this.name = p.name || this.name;
		if ('api-level' in p) this['api-level'] = parseInt(p['api-level']);
		if ('id' in p) this['id'] = parseInt(p['id']);
		if ('displayDirection' in p) this.displayDirection = p.displayDirection;
		if ('supportedLanguages' in p) this.supportedLanguages = p.supportedLanguages.split(',');
		if ('mime' in p) this.mime = p.mime;
		if ('hash' in p) this.hash = p.hash;
		if ('revision' in p) this.revision = p.revision;
		p.uiRatio = (p.uiRatio || '').trim().replace(/[^\d]+/, '_');
		this.uiRatio = UiRatio.getByName(p.uiRatio) || UiRatio.Any;
	}
	SkinMeta.prototype = {
		'api-level': 0,
		id: 0,
		name: '',
		displayDirection: '',
		supportedLanguages: [],
		mime: '',
		hash: '',
		revision: '',
		uiRatio: null,
		toString: function () {
			return ('SkinMeta#%s (%s), dbId: %d, ui-ratio: %s').sprintf(this.keyword, this.name,
				this.id, this.uiRatio);
		}
	};

	function UiRatio (name) {
		this.name = name;
		UiRatio.list.push(this);
		Object.freeze(this);
	}
	UiRatio.prototype.toString = function () {
		return 'UiRatio.' + this.name;
	};
	UiRatio.prototype.valueOf = function () {
		return this.name;
	};
	UiRatio.getByName = function (name) {
		var enums = UiRatio.list.filter(function (obj) {
			return obj.name === name;
		});
		return enums.length !== 0 ? enums[0] : null;
	};
	UiRatio.list = [];
	UiRatio.Any = new UiRatio('Any');
	UiRatio.Wide169 = new UiRatio('16_9');
	UiRatio.Narrow43 = new UiRatio('4_3');
	Object.freeze(UiRatio);
	Object.freeze(UiRatio.list);

	BS.SkinModel.UiRatio = UiRatio;
	BS.SkinModel.SkinMeta = SkinMeta;

})(
	BeeSmart
);

(function (BS, SkinMeta, UiRatio) {

	function Skin(id, name, keyword, supportedLanguages, displayDirection, uiRatio) {
		this.id = id;
		this.name = name;
		this.keyword = keyword;
		this.supportedLanguages = supportedLanguages;
		this.displayDirection = displayDirection;
		this.uiRatio = uiRatio || UiRatio.Any;
	}
	Skin.SkinMeta = SkinMeta;
	Skin.prototype = {
		SkinMeta: SkinMeta,
		isDeviceDisplayRatioSupported: function (device) {
			var UiRatio = BS.SkinModel.UiRatio;
			var devAr = device.is169() ? UiRatio.Wide169 : UiRatio.Narrow43;
			if (this.uiRatio === UiRatio.Any) return true;
			return this.uiRatio === devAr;
		},
		getSupportedAspectRatios: function (device) {
			return device.DisplayAspectRatio.list.filter(function (v) {
				return (
					this === UiRatio.Any
					|| v.name.indexOf(this.name) !== -1
				);
			}, this.uiRatio);
		},
		toString: function () {
			var extra = BS.logger.isGreaterThanInfo() ?
				' (name: %s, dir: %s, supported langs: %s, ui ratio: %s)' : '';
			return ('Skin#%s/%s ' + extra).sprintf(this.id, this.keyword, this.name,
				this.displayDirection, this.supportedLanguages, this.uiRatio);
		}
	};

	BS.SkinModel.Skin = Skin;

})(
	BeeSmart,
	BeeSmart.SkinModel.SkinMeta,
	BeeSmart.SkinModel.UiRatio
);

(function (BS, Skin) {


	function SkinRepository(list) {
		this.list = list.map(this.factory).sort(this.sorter);
	}

	SkinRepository.prototype = {
		list: null,
		factory: function (dto) {
			var label = dto.label.toLowerCase();
			return new Skin(dto.skinId, dto.description, label, dto.skinSupportedLanguages,
				dto.skinDisplayDirection);
		},
		factory1: function (sm) {
			return new Skin(0, sm.name, sm.name, sm.supportedLanguages.join(','),
				sm.displayDirection, sm.uiRatio);
		},
		sorter: function (a, b) {
			return a.name > b.name ? 1 : (a.name < b.name ? -1 : 0);
		},
		getAll: function () {
			return this.list;
		},
		getById: function (id) {
			return this.list.filter(function (s) {
				return s.id === id;
			})[0];
		},
		getByKeyword: function (keyword) {
			return this.list.filter(function (s) {
				return s.keyword === keyword;
			})[0];
		}
	};

	BS.SkinModel.SkinRepository = SkinRepository;

})(
	BeeSmart,
	BeeSmart.SkinModel.Skin
);

(function (BS) {

	var DEFAULT_WORKAROUNDS = {
		enableAlbisHlsTrickplay: false,
		enableAlbisBroadpeakHlsRecordingWorkaround: false,
		enableBroadpeakPlayNowParameter: false,
		broadpeakPlayNowParameterDeltaInSeconds: false,
		enableDuneRTSPSessionFix: false,
		enableDuneHardwarePositionSync: false,
		duneIranianDVBProgramOffset: false,
		blockPositionSetWhileTrickplayActive: false
	};

	function checkEnableContinuousCuTVPlayOutConfiguration(skinConfiguration) {
		if (typeof skinConfiguration.enableContinuousCuTVPlayOut !== 'boolean') {
			BS.logger.info(
				'Skin configuration `%s` should contain boolean, but has %s. ' +
				'Will be set to `false`.',
				'enableContinuousCuTVPlayOut',
				skinConfiguration.enableContinuousCuTVPlayOut
			);
			skinConfiguration.enableContinuousCuTVPlayOut = false;
		}
	}

	function checkWorkaroundsConfiguration(skinConfiguration) {
		if (typeof skinConfiguration.workarounds !== 'object') {
			BS.logger.info(
				'Skin configuration `%s` is not object, setting defaults: "%s"',
				'workarounds.',
				JSON.stringify(DEFAULT_WORKAROUNDS)
			);
			skinConfiguration.workarounds = DEFAULT_WORKAROUNDS;
			return;
		}

		if (typeof skinConfiguration.workarounds.enableAlbisHlsTrickplay !== 'boolean') {
			BS.logger.info(
				'Skin configuration `%s` should contain boolean, but has %s. ' +
				'Will be set to `false`.',
				'workarounds.enableAlbisHlsTrickplay',
				skinConfiguration.workarounds.enableAlbisHlsTrickplay
			);
			skinConfiguration.workarounds.enableAlbisHlsTrickplay = false;
		}

		var enableAlbisBroadpeakHlsRecordingWorkaround =
			skinConfiguration.workarounds.enableAlbisBroadpeakHlsRecordingWorkaround;
		if (typeof enableAlbisBroadpeakHlsRecordingWorkaround !== 'boolean') {
			BS.logger.info(
				'Skin configuration `%s` should contain boolean, but has %s. ' +
				'Will be set to `false`.',
				'workarounds.enableAlbisBroadpeakHlsRecordingWorkaround',
				skinConfiguration.workarounds.enableAlbisBroadpeakHlsRecordingWorkaround
			);
			skinConfiguration.workarounds.enableAlbisBroadpeakHlsRecordingWorkaround = false;
		}

		var enableBroadpeakPlayNowParameter =
			skinConfiguration.workarounds.enableBroadpeakPlayNowParameter;
		if (typeof enableBroadpeakPlayNowParameter !== 'boolean') {
			BS.logger.info(
				'Skin configuration `%s` should contain boolean, but has %s. ' +
				'Will be set to `false`.',
				'workarounds.enableBroadpeakPlayNowParameter',
				skinConfiguration.workarounds.enableBroadpeakPlayNowParameter
			);
			skinConfiguration.workarounds.enableBroadpeakPlayNowParameter = false;
		}

		var broadpeakPlayNowParameterDeltaInSeconds =
			skinConfiguration.workarounds.broadpeakPlayNowParameterDeltaInSeconds;
		if (
			broadpeakPlayNowParameterDeltaInSeconds !== false &&
			typeof broadpeakPlayNowParameterDeltaInSeconds !== 'number'
		) {
			BS.logger.info(
				'Skin configuration `%s` should be false or number, but is %s. ' +
				'Will be set to `false`.',
				'workarounds.broadpeakPlayNowParameterDeltaInSeconds',
				skinConfiguration.workarounds.broadpeakPlayNowParameterDeltaInSeconds
			);
			skinConfiguration.workarounds.broadpeakPlayNowParameterDeltaInSeconds = false;
		}

		if (typeof skinConfiguration.workarounds.enableDuneRTSPSessionFix !== 'boolean') {
			BS.logger.info(
				'Skin configuration `%s` should contain boolean, but has %s. ' +
				'Will be set to `false`.',
				'workarounds.enableDuneRTSPSessionFix',
				skinConfiguration.workarounds.enableDuneRTSPSessionFix
			);
			skinConfiguration.workarounds.enableDuneRTSPSessionFix = false;
		}

		if (typeof skinConfiguration.workarounds.enableDuneHardwarePositionSync !== 'boolean') {
			BS.logger.info(
				'Skin configuration `%s` should contain boolean, but has %s. ' +
				'Will be set to `false`.',
				'workarounds.enableDuneHardwarePositionSync',
				skinConfiguration.workarounds.enableDuneHardwarePositionSync
			);
			skinConfiguration.workarounds.enableDuneHardwarePositionSync = false;
		}

		if (typeof skinConfiguration.workarounds.duneIranianDVBProgramOffset === 'object') {
			var requiredProperties = ['IRSTOffsetInMinutes', 'IRDTOffsetInMinutes'];
			var isValid = requiredProperties.every(function (prop) {
				return prop in skinConfiguration.workarounds.duneIranianDVBProgramOffset;
			});
			if (!isValid) {
				BS.logger.info(
					'Skin configuration `%s` should contain object with properties: %s, ' +
					'but has %s. Will be set to `false`.',
					'workarounds.duneIranianDVBProgramOffset',
					JSON.stringify({ IRSTOffsetInMinutes: -210, IRDTOffsetInMinutes: -270 }),
					JSON.stringify(skinConfiguration.workarounds.duneIranianDVBProgramOffset)
				);
				skinConfiguration.workarounds.duneIranianDVBProgramOffset = false;
			}
		} else if (typeof skinConfiguration.workarounds.duneIranianDVBProgramOffset !== 'boolean') {
			BS.logger.info(
				'Skin configuration `%s` should contain boolean or object, but has %s. ' +
				'Will be set to `false`.',
				'workarounds.duneIranianDVBProgramOffset',
				JSON.stringify(skinConfiguration.workarounds.duneIranianDVBProgramOffset)
			);
			skinConfiguration.workarounds.duneIranianDVBProgramOffset = false;
		}

		if (typeof skinConfiguration.workarounds.blockPositionSetWhileTrickplayActive !== 'boolean') {
			BS.logger.info(
				'Skin configuration `%s` should contain boolean, but has %s. ' +
				'Will be set to `false`.',
				'workarounds.enableDuneHardwarePositionSync',
				skinConfiguration.workarounds.blockPositionSetWhileTrickplayActive
			);
			skinConfiguration.workarounds.blockPositionSetWhileTrickplayActive = false;
		}
	}






	function SkinConfiguration(p) {
		for (var i in p) {
			if (p.hasOwnProperty(i) && p[i] !== undefined && (i in this)) {
				if (i === 'timeFormat' || i === 'dateFormat') {
					this[i] = this._getFormatValue(p[i]);
				} else if (i === 'mosaicStartingPosition') {
					this[i] = this._getMosaicPositionValue(p[i]);
				} else if (i === 'maxChannelDigits') {
					if (typeof p[i] === 'number') {
						this[i] = p[i];
					} else {
						BS.logger.info(
							'[WARN] Ignoring "maxChannelDigits" skin manifest setting. ' +
							'Expecting number, but got ' + (typeof p[i])
						);
					}
				} else {
					this[i] = p[i];
				}
			}
		}
		this._applySubscriptionStoreConfigRule();
		checkEnableContinuousCuTVPlayOutConfiguration(this);
		checkWorkaroundsConfiguration(this);
	}

	SkinConfiguration.prototype = {
		showCurrencySymbolCode: false,
		enableAutoLoginMenuItem: true,
		enableRecordingQuotaMenuItem: true,
		enablePayPointMenuItem: true,
		enableTaMenuItem: true,
		enableFlickrMenuItem: true,
		enablePhoneMenuItem: true,
		showDeviceAuthCode: true,
		hideMainMenuIconLabelOnBlur: true,
		disableMultivariants: false,
		epgMenuListOrder: [
			'watchable',
			'play',
			'pvr',
			'series',
			'adoptEpisode',
			'descriptionPresent',
			'reminder',
			'channel',
			'parentalRestriction',
			'recommendToFriend',
			'showPurchase'
		],
		priceDecimals: false,
		mmItemVisibilityAndPositionProps: {
			subscriptionApp: {position: 1, hidden: false},
			tvPanel: {position: 2, hidden: false},
			Vod: {position: 3, hidden: false},
			MyRecordings: {position: 4, hidden: false},
			AppStoreCategories: {position: 5, hidden: false},
			Settings: {position: 6, hidden: false},
			Promotions: {position: 7, hidden: false},
			Bills: {position: 8, hidden: false},
			'sidebar_helpmenu': {position: 9, hidden: false},
			voip: {position: 10, hidden: false},
			contactsMain: {position: 11, hidden: false},
			UserServices: {position: 12, hidden: false},
			searchResults: {position: 13, hidden: false}
		},
		mmHidesOnSelection: false,
		timeFormat: 'shortFormat',
		dateFormat: 'shortFormat',
		_formatNames: {short: 'shortFormat', medium: 'mediumFormat', long: 'longFormat'},
		mosaicStartingPosition: 'topLeft',
		flyover: {
			'slow-device': {
				'enterPressWindow': 350,
				'exitPressWindow': 2000,
				'setStreamOnFirstPress': true
			},
			'other-device': {
				'enterPressWindow': 350,
				'exitPressWindow': 2000,
				'setStreamOnFirstPress': true
			}
		},
		enableSubscriptionStoreMenuItem: true,
		localization: {
			calendar: 'gregorian'
		},
		remoteControls: null,
		alwaysShowConnectionErrorDialog: true,
		canResetChannelNumbers: true,
		maxChannelDigits: 3,
		enableSubscriptionStoreApp: true,
		onDemandCategories: {
			order: [
				'recommended',
				'most-purchased',
				'most-watched',
				'my-vod',
				'gifts',
				'favourite',
				'dynamic-categories'
			],
			maxNumberOfItemsFetched: {
				'most-watched': 6,
				'recommended': 6,
				'most-purchased': 6
			}
		},
		enableContinuousCuTVPlayOut: true,
		workarounds: DEFAULT_WORKAROUNDS,
		_applySubscriptionStoreConfigRule: function () {
			if (this.enableSubscriptionStoreApp) return;
			var msg = 'Skin Configuration: Changed `%s` setting to `%s`, '
				+ 'because subscription store app is disabled!';

			if (this.enableSubscriptionStoreMenuItem) {
				this.enableSubscriptionStoreMenuItem = false;
				BS.logger.info(msg, 'enableSubscriptionStoreMenuItem', false);
			}
			var mmItemVisibility = this.mmItemVisibilityAndPositionProps;
			if (
				mmItemVisibility &&
				mmItemVisibility.subscriptionApp &&
				!mmItemVisibility.subscriptionApp.hidden
			) {
				mmItemVisibility.subscriptionApp.hidden = true;
				BS.logger.info(msg, 'subscriptionApp.hidden', true);
			}
		},
		_getMosaicPositionValue: function (value) {
			return value === 'bottomRight' || value === 'center' ? value : 'topLeft';
		},
		_getFormatValue: function (value) {
			if (value === 'medium') {
				return this._formatNames.medium;
			} else if (value === 'long') {
				return this._formatNames.long;
			} else {
				return this._formatNames.short;
			}
		}
	};
	BS.SkinConfiguration = SkinConfiguration;
	BS.SkinModel.SkinConfiguration = SkinConfiguration;

})(
	BeeSmart,
	Q
);

(function (BS) {

	function Language(p) {
		for (var i in p) {
			if (p.hasOwnProperty(i) && i in this) this[i] = p[i];
		}
	}

	Language.prototype = {
		label: '',
		iso3Code: '',
		name: '',
		nativeDescription: '',
		dateFormats: {},
		timeFormats: {},
		priceDecimals: 2,
		priceDecimalSign: ',',
		priceThousandSign: '.',
		displayDirection: '',
		toString: function () {
			var extra = BS.logger.isGreaterThanInfo() ? '(Name:%s, Dir:%s, Df:%s, Tf:%s,'
			+ ' Price decs:%d, 10 sign:%s, 1000 sign: %s, iso3: %s)'
				: '';
			return ('Language#%s ' + extra).sprintf(this.label, this.name, this.displayDirection,
				this.dateFormats, this.timeFormats, this.priceDecimals, this.priceDecimalSign,
				this.priceThousandSign, this.iso3Code);
		}
	};

	Language.languageCodeToCountryCode = {
		'en': 'gb',
		'hy': 'am', 'ar': 'sa', 'az': 'az', 'bg': 'bg', 'be': 'by', 'bs': 'ba', 'zh': 'cn',
		'hr': 'hr', 'cs': 'cz', 'da': 'dk', 'nl': 'nl', 'et': 'ee', 'fa': 'ir', 'fi': 'fi',
		'fr': 'fr', 'de': 'de', 'el': 'gr', 'kl': 'gl', 'hi': 'in', 'hu': 'hu', 'is': 'is',
		'ga': 'ie', 'it': 'it', 'ja': 'jp', 'jv': 'jp', 'ko': 'kr', 'lv': 'lv', 'lt': 'lt',
		'mk': 'mk', 'mt': 'mt', 'mn': 'mn', 'ne': 'np', 'no': 'no', 'pl': 'pl', 'pt': 'pt',
		'ro': 'ro', 'ru': 'ru', 'sr': 'rs', 'sh': 'rs', 'sk': 'sk', 'sl': 'si', 'so': 'so',
		'es': 'es', 'sv': 'se', 'th': 'th', 'tr': 'tr', 'tk': 'tm', 'uk': 'ua', 'vi': 'vn'
	};

	BS.LanguageModel.Language = Language;

})(
	BeeSmart
);

(function (BS) {

	function LanguageRepository(list) {
		this.list = list.filter(function (dto) {
			return dto.isActive;
		}).map(this.factory);
	}

	LanguageRepository.prototype = {
		list: null,
		factory: languageFactory,
		sorter: function (a, b) {
			return a.name > b.name ? 1 : (a.name < b.name ? -1 : 0);
		},
		getAll: function () {
			return this.list.sort(this.sorter);
		},
		getByLabel: function (label) {
			return this.list.filter(function (langObj) {
				return langObj.label === label;
			})[0];
		}
	};

	function languageFactory(dto) {
		var langObj = new BS.LanguageModel.Language(languageFactory.mapperOAv6(dto));
		Object.freeze(langObj);
		return langObj;
	}

	languageFactory.mapperOAv6 = function (dto) {
		return {
			label: dto.label,
			name: dto.description,
			iso3Code: dto.iso3Code,
			timeFormats: dto.timeFormat,
			dateFormats: dto.dateFormat,
			priceDecimals: dto.priceDecimals,
			priceDecimalSign: dto.priceDecimalSign,
			priceThousandSign: dto.priceThousandSign,
			displayDirection: dto.displayDirection,
			nativeDescription: dto.nativeDescription
		};
	};

	BS.LanguageModel.LanguageRepository = LanguageRepository;

})(
	BeeSmart
);

(function (BS) {

	function Avatar(avatarDto) {
		for (var key in avatarDto) {
			if (avatarDto.hasOwnProperty(key) && key in this) {
				this[key] = avatarDto[key];
			}
		}
	}

	Avatar.prototype = {
		avatarId: null,
		name: null,
		resourceLink: null,
		toString: function () {
			return "Avatar#%s/%s|%s".sprintf(this.avatarId, this.name, this.resourceLink);
		}

	};

	BS.UserModel.Avatar = Avatar;

})(
	BeeSmart
);

(function (BS) {

	AvatarRepository.prototype = {
		list: null,
		factory: function (dto) {
			return new BS.UserModel.Avatar(dto);
		},
		get all() {
			return this.list;
		}
	};

	function AvatarRepository(list) {
		this.list = list.map(this.factory);
	}

	BS.UserModel.AvatarRepository = AvatarRepository;

})(
	BeeSmart
);

(function (BS) {


	function User(userDto) {
		this._setProps(userDto);
		this._parentalUnlockTimerRef = null;
	}
	User.prototype = {
		userId: null,
		name: null,
		surname: null,
		isDefault: false,
		birthDate: null,
		gender: 'M',
		ageRating: 0,
		defaultAgeRating: 0,
		autoSub: false,
		autoAudio: false,
		autoReminderTime: 5 * 60000,
		autoLoginDevices: [],
		tvRecommend: false,
		vodRecommend: false,
		avatarId: null,
		avatarLink: null,
		email: null,
		nickname: null,
		phoneNum: null,
		chatable: false,
		pMessage: null,
		address: null,
		linkDetails: null,
		videoType: null,
		authPin: null,
		token: null,
		secret: null,
		pin: null,
		parentalPin: null,
		lastChannelCategoryId: null,
		lastChannelId: null,
		defaultPosition: 0,

		_language: 'en',
		set language(value) {
			if (typeof value !== 'string') throw Error('invalid-value-as-language');
			this._language = value;
		},
		get language() {
			return BS.languages.getByLabel(this._language);
		},

		_skin: null,
		set skin(skinId) {
			this._skin = skinId;
		},
		get skin() {
			return BS.skins.getById(this._skin);
		},

		set userName(newUserName) {
			this.name = newUserName;
		},
		get userName() {
			return this.name;
		},

		set rating(value) {
			this.ageRating = value;
		},
		get rating() {
			return this.ageRating;
		},
		get regionId() {
			return BS.regionId;
		},

		_setProps: function (userDto) {
			userDto.skin = userDto.idSkin;
			for (var key in userDto) {
				if (userDto.hasOwnProperty(key) && key in this) {
					this[key] = userDto[key];
				}
			}
			this.userId = userDto.idProfile;
			this.avatarId = userDto.idAvatar;
			this.avatarLink = userDto.avatarResourceLink;
			this.autoReminderTime = this.autoReminderTime * 60000;
			this.defaultAgeRating = this.ageRating;
			this.lastChannelCategoryId = userDto.idChannelCategory;
			this.lastChannelId = userDto.idChannel;

			var upvt = userDto.pinValidTill;
			if (!upvt)
				upvt = new Date(Date.now() + 24 * 36 * 1e7);
			this.pinValidTill = upvt instanceof Date ? upvt : new Date(upvt);
			this.userName = (this.userName || '').encodeEntities();
		},

		get isAutoLoginEnabled () {
			var deviceMac = BS.device.getMAC();
			return this.autoLoginDevices.indexOf(deviceMac) !== -1 ||
				this.autoLoginDevices.indexOf('embedded-device') !== -1;
		},
		setAutoLoginForDevice: function (deviceMac) {
			this.autoLoginDevices.push(deviceMac);
		},
		deleteAutoLoginForDevice: function (deviceMac) {
			this.autoLoginDevices = this.autoLoginDevices.filter(function(mac){
				return mac !== deviceMac;
			});
		},
		comparePinTo: function (pin) {
			return this.pin === pin.md5();
		},
		compareParentalPinTo: function (pin) {
			return this.parentalPin === pin.md5();
		},
		checkParentalLimit: function (toCompareWith) {
			if (typeof toCompareWith === 'undefined')
				throw 'checkParentalLimit-invalid-arguments';
			return !this.ageRating ||
				this.ageRating >= (toCompareWith === null ? 0 : toCompareWith);
		},
		setParentalRating: function (rating) {
			this.defaultAgeRating = rating;
			if (!this.isParentalyUnlocked())
				BS.evMgr.dispatch(new ParentalStatusChanged(rating));
			this.ageRating = rating;
		},
		unlockParentalControl: function () {
			var duration = BS.config.get('Core.Client.PARENTAL_UNLOCK_DURATION') * 60;
			BS.logger.info('P_C: Unlocking parental control for %ds', duration);
			if (this._parentalUnlockTimerRef)
				clearTimeout(this._parentalUnlockTimerRef);
			this.ageRating = 0;
			BS.evMgr.dispatch(new ParentalStatusChanged(this.ageRating, 'allow'));
			this._parentalUnlockTimerRef = setTimeout(function () {
				this.resetParentalControl();
			}.bind(this), duration * 1e3);
		},
		resetParentalControl: function () {
			BS.logger.info('P_C: Reseting parental rating for user, it will be set to rating: '
				+ this.defaultAgeRating);
			this.ageRating = this.defaultAgeRating;
			if (this._parentalUnlockTimerRef)
				clearTimeout(this._parentalUnlockTimerRef);
			this._parentalUnlockTimerRef = null;
			BS.evMgr.dispatch(new ParentalStatusChanged(this.ageRating, 'reset'));
		},
		isParentalyUnlocked: function () {
			return this._parentalUnlockTimerRef !== null;
		},
		update: function (userDto) {
			if (userDto.idProfile !== this.userId) return;
			BS.logger.trace('Updating user: %s', this);
			this._setProps(userDto);
			this.setParentalRating(this.ageRating);
			BS.logger.trace('New user: %s', this);
		},
		toString: function () {
			var extra = BS.logger.isGreaterThanInfo() ?
			' (Language: %s, AutoSub: %s, AutoAudio: %s, AutoReminderTime: %smin,'
			+ ' TVRecommendations: %s, VODRecommendations: %s' : '';
			return ('User#%s/%s|%s' + extra).sprintf(this.userId, this.userName, this.isDefault ?
				'PARENT' : 'CHILD', this._language, this.autoSub, this.autoAudio,
				this.autoReminderTime / 60000, this.tvRecommend, this.vodRecommend);
		}
	};

	function ParentalStatusChanged(newRating, actionType) {
		this.newRating = newRating;
		this.actionType = actionType || 'reset';
	}
	ParentalStatusChanged.prototype = {
		type: 'ParentalStatusChanged',
		description: 'When user is parentaly locked/unlocked',
		handler: 'onUserParentalStatusChange'
	};
	Object.extend(ParentalStatusChanged, BS.Event);

	BS.UserModel.ParentalStatusChanged = ParentalStatusChanged;
	BS.UserModel.User = User;

})(
	BeeSmart
);

(function (BS, q) {

	function UserRepository() {
		this._users = [];
	}

	UserRepository.prototype = {
		_users: null,
		getById: function (id) {
			return this._users.filter(function (usr) {
				return usr.userId === id;
			})[0];
		},
		add: function (username, pin) {
			var that = this;

			return q.try(function () {
					that.validateName(username, -1);
				})
				.then(function () {
					return that.prmsUserAdd(username, pin);
				})
				.then(function (userDto) {
					var user = new BS.UserModel.User(userDto);
					that._users.push(user);
					BS.logger.trace('UserRepository: successfully added new user %s', user);
					return q(user);
				})
				.catch(function (e) {
					var exception = e;
					if (e.data) {
						e = e.data;
						var errorCode = e.errors[0].errorCode;
						if (errorCode === 904) {
							exception = 'user-limit-reached';
						} else if (errorCode === 905) {
							exception = 'name-too-long';
						} else {
							exception = 'unknown-error';
						}
					}
					BS.logger.trace('UserRepository: adding user failed: %s', exception);
					throw exception;
				});
		},
		addMany: function (users) {
			this._users = this._users.concat(users);
		},
		removeById: function (userId) {
			var that = this;

			return that.prmsUserRemove(userId)
				.then(function () {
					that._users = that._users.filter(function (cUser) {
						return userId !== cUser.userId;
					});
					BS.logger.trace('UserRepository: successfully removed user id %d', userId);
				})
				.catch(function (e) {
					BS.logger.trace('UserRepository: removing profile failed: %s',
						e.data.errors[0].errorMessage);

					throw 'unknown-error';
				});
		},
		update: function (data) {
			var that = this;
			var currentUser = BS.portal.user;

			return q.try(function () {
				if (typeof data.name === 'undefined') {
					return true;
				}
				that.validateName(data.name, currentUser.userId);
			}).then(function () {
				return that.prmsUserUpdate(data);
			}).then(function (userDto) {
				var user = new BS.UserModel.User(userDto);
				that._users = that._users.map(function (cUser) {
					if (user.userId === cUser.userId) {
						cUser = user;
					}
					if (user.userId === currentUser.userId) {
						for (var key in user) {
							if (user.hasOwnProperty(key) && key in currentUser) {
								currentUser[key] = user[key];
							}
						}
					}
					return cUser;
				});

				if (user.userId === BS.portal.user.userId)
					BS.portal.user = user;

				BS.logger.trace('UserRepository: successfully updated user %s', user);

				return q(user);
			}).catch(function (e) {
				var exception = e;
				if (e.data) {
					e = e.data;
					var errorCode = e.errors[0].errorCode;

					if (errorCode === 905) {
						exception = 'name-too-long';
					} else {
						exception = 'unknown-error';
					}
					BS.logger.trace('UserRepository: error updating user: %s, %d',
						e, errorCode);
				}
				throw exception;
			});
		},
		validateName: function (name, userId) {
			if (name.trim().length === 0) {
				BS.logger.trace('UserRepository: username is empty');
				throw 'no-entries-changed';
			}
			name = name.toLowerCase();
			this._users.forEach(function (user) {
				if (user.name.toLowerCase() === name &&
					user.userId !== userId) {
					BS.logger.trace('UserRepository: username exists');
					throw 'user-exists';
				}
			});
			return true;
		},
		get defaultUser() {
			return this._users.filter(function (user) {
				return user.isDefault;
			})[0];
		},
		get all() {
			return this._users;
		},
		prmsUserAdd: function (username, pin) {
			return BS.request.Post('/restapi/rest/%d/%d/profiles'
				.sprintf(BS.regionId, BS.portal.user.userId), {
				accept: 'json',
				data: {
					'name': username,
					'system_pin': pin,
					'return_security_token': true
				}
			}).then(function (response) {
				return response.data;
			});
		},
		prmsUserRemove: function (userId) {
			return BS.request.Delete('/restapi/rest/%d/%d/profiles'
				.sprintf(BS.regionId, BS.portal.user.userId), {
				accept: 'json',
				data: {
					'target_user_id': userId
				}
			}).then(function () {
				return true;
			});
		},
		prmsUserUpdate: function (data) {
			return BS.request.Put('/restapi/rest/%d/%d/profiles'
				.sprintf(BS.regionId, data['target_user_id']), {
				accept: 'json',
				data: data
			}).then(function (response) {
				return response.data;
			});
		}
	};

	BS.UserModel.UserRepository = UserRepository;

})(
	BeeSmart,
	Q
);

(function (BS) {
	var hasHttpNotModifiedBug = function hasHttpNotModifiedBug() {
		var vParts = CompatibilityManager.prototype.ekVersion;
		if (vParts === null)
			return false;
		if (vParts[0].indexOf('Ekioh') === -1)
			return false;
		return new EkiohVersion('2.2.2.4')
			> new EkiohVersion(vParts[1] === '1.00' ? vParts[4] : vParts[1] || '1.00');
	};
	var ekVersionRx = /\w+\s+v?([0-9\.]+)(?:[^\s]+)?\s+\(?([^\(\)]+)?\)?\s*(r([0-9\-:]*))?/i;
	var ekVersionValidValidRx = /(1\.00)|(\d+)|(\d+)\.(\d+)\.?(\d+)?\.?(\d+)?/g;

	function EkiohVersion(versionNumber) {
		var vParts;
		if (
			versionNumber.constructor !== String
			|| ((vParts = versionNumber.match(ekVersionValidValidRx)) === null)
			) throw 'invalid-ekioh-version-argument';

		this.vParsed = vParts;
		this.vSource = versionNumber;

		if (vParts.length === 1) {
			this.vLevel = vParts[0] === '1.00' ? 4715 : ~~vParts[0];

		} else {
			if (vParts.length === 4)
				vParts[vParts.length - 1] = '%02s'.sprintf(vParts[vParts.length - 1]);
			if (vParts.length === 3)
				vParts.push('00');
			this.vLevel = parseInt(vParts.reduce(function (prev, curr) {
				return prev + curr;
			}), 10);
		}
	}

	EkiohVersion.prototype = {
		vSource: null,
		vParsed: null,
		vLevel: null,
		equals: function (verObj) {
			return verObj.vLevel === this.vLevel;
		},
		greater: function (verObj) {
			return verObj.vLevel < this.vLevel;
		},
		valueOf: function () {
			return this.vLevel;
		},
		toString: function () {
			return 'EkiohVersion-%s (%s)'.sprintf(this.vLevel, this.vSource);
		}
	};

	function CompatibilityManager (aDtoDevice) {
		var dtoDevice = aDtoDevice || this.detectDevice();
		if (!aDtoDevice) {
			BS.logger.info('COMPATIBILITY-MANAGER: auto-detected device: %s',
				dtoDevice.deviceTypeDesc);
		}
		dtoDevice.displayAspectRatio =
			DisplayAspectRatio.getByLgwValue(dtoDevice.displayAspectRatio) ||
			DisplayAspectRatio.Preserve169;
		BS.CompatibilityManager = CompatibilityManager;

		dtoDevice.ott_enabled = !!dtoDevice.ott_enabled;
		if (dtoDevice.ott_enabled === false){
			BS.logger.debug('DEVICE: OTT unsupported (HW incapable)');
		}
		dtoDevice.mcast_enabled = !!dtoDevice.mcast_enabled;
		dtoDevice.rtp_enabled = !!dtoDevice.rtp_enabled;
		dtoDevice.dvbc_enabled = !!dtoDevice.dvbc_enabled;
		dtoDevice.hasEnabledPIP = !!dtoDevice.pip;
		BS.logger.debug('DEVICE: LiveTV PIP (HW %scapable)'
			.sprintf(dtoDevice.hasEnabledPIP ? '' : ' in'));

		var device = BS.device.info = new Device(dtoDevice);
		BS.media.videoAspectRatio = device.displayAspectRatio;
		BS.powerManager.powerMap = 'default';
		var devType = device.deviceTypeDesc ? device.deviceTypeDesc.toLowerCase() : null;
		if (!devType) return;
		for (var deviceDescription in BS.CompatibilityManager.layers) {
			if (devType.indexOf(deviceDescription) !== -1){
				BS.logger.info('COMPATIBILITY-MANAGER: Executed code for : %s', deviceDescription);
				BS.CompatibilityManager.layers[deviceDescription].call(window, BS, Q);
			} else {
				delete BS.CompatibilityManager.layers[deviceDescription];
				delete window[deviceDescription];
			}
		}
	}
	CompatibilityManager.layers = {};
	CompatibilityManager.addDeviceCompatibility = function (name, moduleFunction) {
		this.layers[name] = moduleFunction;
	};

	CompatibilityManager.prototype = {
		ekVersion: navigator.userAgent.match(ekVersionRx),
		hasHttpNotModifiedBug: hasHttpNotModifiedBug,
		hasWebLocalStorageApi: function () {
			return ('localStorage' in window) &&
				(
					navigator.platform.match(/(win)/i) !== null ||
					navigator.platform.match(/(dune)/i) !== null
				);
		},
		hasStreamQualityApi: function () {
			return false;
		},
		hasLocalPvrApi: function() {
			var ekRecorder;
			try {
				ekRecorder = window.oipfObjectFactory.createRecordingSchedulerObject();
				return ekRecorder && !!ekRecorder.discInfo;
			} catch (e) {}
			return false;
		},
		detectDevice: function () {
			var model = BS.device.getModel() || '';
			var deviceInfo = {
				'deviceId': null,
				'deviceType': null,
				'deviceTypeDesc': 'IP STB Generic',
				'deviceUid': BS.device.getMAC(),
				'deviceGroupDesc': null,
				'localStorage': localStorage ? 0 : 1,
				'pip': 1,
				'ott_enabled': 1,
				'rtp_enabled': 1,
				'mcast_enabled': 1,
				'dvbc_enabled': 1,
				'connectedDevices': [{
					deviceGroupDesc: 'RC',
					deviceTypeDesc: 'PC Keyboard'
				}],
				'displayAspectRatio': 'FIT_16_9'
			};

			try {
				var layers = Object.keys(CompatibilityManager.layers)
					.filter(function (layer) {
						var fun = CompatibilityManager.layers[layer];
						return fun.bsModels && fun.bsModels.length &&
								fun.bsModels.length !== fun.rxModels;
					})
					.map(function (layer) {
						return {
							rxModels: CompatibilityManager.layers[layer].rxModels,
							bsModels: CompatibilityManager.layers[layer].bsModels,
							rcKeymap: CompatibilityManager.layers[layer].rcKeymap
						};
					});

				BS.logger.debug('HAL: Recognizes following devices based on `%s`: %s', model, layers
						.map(function (layer) { return layer.bsModels[0]; }).join(', '));

				var detectedDeviceLayer = layers.filter(function (layer) {
					return layer.rxModels.some(function (rx) {
						return rx.test(model);
					});
				})[0];

				if (detectedDeviceLayer) {
					deviceInfo.connectedDevices.deviceTypeDesc = detectedDeviceLayer.rcKeymap;
					detectedDeviceLayer.rxModels.forEach(function (rx, index) {
						if (rx.test(model)) {
							deviceInfo.deviceTypeDesc = detectedDeviceLayer.bsModels[index];
						}
					});
				}

			} catch (x) {
				BS.logger.info('HAL.detectDevice: ERROR: Unable to detect STB HW model!');
				BS.logger.log(x);
			}

			return deviceInfo;
		},
		getAcquireSystemTimeTask: function getAcquireSystemTimeTask() {
			BS.logger.info('BOOT.preparedAccurateTime(): Start preparation of system time!');
			var dfr = Q.defer(), tmrId, retries = 0, msInterval = 250, msMaxWait = 10e3;
			(function timeCheck() {
				if (!this.isTimevalid()) {
					tmrId = setTimeout(timeCheck.bind(this), msInterval);
				} else {
					BS.logger.info('BOOT.preparedAccurateTime(): System time acquired!');
					dfr.resolve();
					return;
				}
				if ((++retries * msInterval) > msMaxWait) {
					clearTimeout(tmrId);
					dfr.reject(new BS.NiceException('BOOT: System time sync wait exceeded %dms!'
						.sprintf(msMaxWait), tr('errorCouldNotFetchValidSystemTime')));
				}
			}).call(this);

			return dfr.promise;
		},
		isTimevalid: function  () {
			return Date.now() > 1388534400000;
		}
	};
	BS.CompatibilityManager = CompatibilityManager;
	function Device(p) {
		for (var i in p) {
			if (i in this){
				this[i] = p[i];
			}
		}
	}
	Device.prototype = {
		deviceId: null,
		deviceType: null,
		deviceTypeDesc: null,
		deviceUid: null,
		deviceGroupDesc: null,
		localStorage: 0,
		hasEnabledPIP: false,
		ott_enabled: 0,
		rtp_enabled: 0,
		mcast_enabled: 0,
		dvbc_enabled: 0,
		connectedDevices: null,
		displayAspectRatio: 0,
		is169: function () {
			return this.displayAspectRatio === DisplayAspectRatio.Fit169 ||
				this.displayAspectRatio === DisplayAspectRatio.Preserve169;
		}
	};

	BS.Device = Device;

	function DisplayAspectRatio (name, lgwValue) {
		this.name = name;
		this.lgwValue = lgwValue;
		DisplayAspectRatio.list.push(this);
		Object.freeze(this);
	}
	DisplayAspectRatio.prototype.toString = function () {
		return 'UiRatio.' + this.name;
	};
	DisplayAspectRatio.prototype.valueOf = function () {
		return this.name;
	};
	DisplayAspectRatio.getByLgwValue = function (name) {
		var enums = this.list.filter(function (obj) {
			return obj.lgwValue === name;
		});
		return enums.length !== 0 ? enums[0] : null;
	};
	DisplayAspectRatio.list = [];
	DisplayAspectRatio.Preserve43 = new DisplayAspectRatio('4_3-preserve', 'PRESERVE_4_3');
	DisplayAspectRatio.Fit43 = new DisplayAspectRatio('4_3-fit', 'FIT_4_3');
	DisplayAspectRatio.Preserve169 = new DisplayAspectRatio('16_9-preserve', 'PRESERVE_16_9');
	DisplayAspectRatio.Fit169 = new DisplayAspectRatio('16_9-fit', 'FIT_16_9');
	Device.prototype.DisplayAspectRatio = DisplayAspectRatio;
	Object.freeze(DisplayAspectRatio);
	Object.freeze(DisplayAspectRatio.list);

})(BeeSmart);

BeeSmart.CompatibilityManager.addDeviceCompatibility('albis', function (BS, q) {
	function embedToSVG() {
		if (document.getElementById('AlbisSTB'))
			return;

		var foreignObj = document.createElement('foreignObject');
		foreignObj.setAttributeNS(null, 'id', 'AlbisSTB');
		foreignObj.setAttributeNS(
			null,
			'requiredExtensions',
			'application/STBOperation'
		);
		document.documentElement.appendChild(foreignObj);

	}



	embedToSVG();

	function MMAlbis() {
	}

	MMAlbis.prototype = {
		iAm: 'Albis',
		lastEventDispatcherTimer: null,
		eventDispatcher: function (nativeEvent) {
			var timestamp = this.lastEventDispatcherTimer;
			var now = Date.now();

			if (!timestamp || timestamp + 100 < now) {
				BS.logger.debug('Video event (type "' + nativeEvent.type + '") triggered!');
				BS.evMgr.dispatch(new this.VideoEvent(nativeEvent.type));
				this.lastEventDispatcherTimer = now;
			}
		}
	};
	BS.MediaManager.extendWith(MMAlbis);

	var callbackEvents = [];
	callbackEvents[15] = 'PLAYBACK_INFO';

	var ALBIS_PLAYBACK_INFO = 15;

	window.PlaybackInfoEvent = function PlaybackInfoEvent() {
		this.SizeInMs = 0;
		this.ActualPlayPos = 0;
		this.NumberOfHLSVariants = 0;
		this.ActualHLSVariant = 0;
	};

	BS.registerGlobalVariable('PlaybackInfoEvent');


	window.albisEventCallback = function albisEventCallback() {

		if (BS.media.mediaResource === null)
			return BS.evMgr.dispatch(new BS.MediaManager.StreamInfoEvent(0, 0, 0));

		var streamType = JSON.stringify(BS.media.mediaResource.protocolStack).replace(/"/g, '');

		var position = arguments[1].ActualPlayPos;
		var duration = arguments[1].SizeInMs;

		var quality = streamType === 'mcast' ? 'mcast' : BS.media.convertHlsProfileToQuality(
			arguments[1].NumberOfHLSVariants,
			arguments[1].ActualHLSVariant);


		if (arguments[1].ActualHLSVariant === 1 || (Date.now() - BS.lastChannelChangeTS) > 500)
			BS.evMgr.dispatch(new BS.MediaManager.StreamInfoEvent(position, duration, quality));
	};

	BS.registerGlobalVariable('albisEventCallback');

	var stb = document.getElementById('AlbisSTB');
	stb.subscribeEvent(ALBIS_PLAYBACK_INFO, 'albisEventCallback');

	var manualHttpRedirect = false;
	var devType = BS.device.info.deviceTypeDesc.toLowerCase();
	if (BS.device.info.ott_enabled) {
		switch (devType) {
		case 'IP STB Albis SG 8100'.toLowerCase():
		case 'IP STB Albis SG 8000'.toLowerCase():
		case 'IP STB Albis SG Micro'.toLowerCase():
		case 'IP STB Albis'.toLowerCase():
			BS.device.info.ott = ['hls', 'http'];
			break;
		}
	}

	var rcName = 'rc albis black';

	function KeyMappingsAlbis() {
		this.code = 'rc albis black';
		this['917553'] = 'chDown';
		this['917552'] = 'chUp';
		this['917776'] = 'epg';
		this['917554'] = 'fsTV';
		this['917556'] = this['6'] = 'info';

		this['A13'] = 'ok';
		this['917536'] = this['917760'] = 'back';
		this['917555'] = 'menu';
		this['917527'] = 'record';

		this['917791'] = 'radio';


		this['917505'] = 'green';
		this['917504'] = 'red';
		this['917506'] = 'yellow';
		this['917507'] = 'blue';

		this['917777'] = 'ttx';

		this['917528'] = 'play';
		this['917523'] = 'rew';
		this['917524'] = 'fw';
		this['917521'] = 'pause';
		this['917522'] = 'stop';
		this['917525'] = this['112'] = 'toBegin';
		this['917526'] = this['918018'] = 'toEnd';

		this['917744'] = 'mute';
		this['917747'] = this['C917747'] = 'volup';
		this['917748'] = this['C917748'] = 'voldown';

		this['917538'] = 'reload';
		this['917557'] = 'power';
	}

	KeyMappingsAlbis.code = rcName;
	KeyMappingsAlbis.prototype = new BS.inputManager.KeyMappingsDefault();
	BS.inputManager.addDeviceKeyMap(KeyMappingsAlbis);


	BS.CompatibilityManager.prototype.hasStreamQualityApi = function () {
		var firmwareCheck = false;
		try {
			if (parseInt(BS.device.getFirmware().match(/BSM\.(\d+)\.(\d+)\.(\d+)\.(\d+)/i)[3], 10)
				>= 565) firmwareCheck = true;
		}
		catch (x) {
			l('Albis note: Unable to parse Albis firmware version number.');
		}
		return firmwareCheck;
	};

	var Tv = BS.modMgr.getModule('Tv');
	Tv.PipManager.createVideoElement = function duneCreateVideoElement(id, width, height) {
		BS.logger.trace('ALBIS PipManager.createVideoElement(%s, %s, %s)', id, width, height);
		return (
			'<video preserveAspectRatio="none" oipf:decoderType="reduced" ' +
			'oipf:decoderPriority="0" xml:id="PipManager-%s" width="%s" height="%s" ' +
			'overlay="top" />'
		).sprintf(id, width, height);
	};

	var mediaResolutionSetter = BS.modMgr.getApp('mediaResolutionSetter');
	mediaResolutionSetter.enabled = true;

	function MMAlbis() {
		this.enableBroadpeakHlsRecordingWorkaround = false;
	}

	MMAlbis.prototype = {
		iAm: 'Albis',
		enableBroadpeakHlsRecordingWorkaround: false,
		playMediaResource: function () {
			BS.logger.info('VOD: Albis augmented .playMediaResource method called');
			if (arguments[3]) {
				BS.logger.info('VOD: Albis augmented .playMediaResource method called settings ' +
					'hls_seek_in_live=2');
				try {
					EkiohPlatformInfo.setVendorProperty('hls_seek_in_live', '2');
				} catch (ex) {
					BS.logger.log(
						'hls_seek_in_live failed with: ' + ex.toString() + ' With code: ' + ex.code
					);
				}
			}
			this._player.setSpeed(1);
			BS.MediaManager.prototype.playMediaResource.apply(this, arguments);
		},
		_playAsset: function () {
			BS.logger.info('ALBIS MM ._playAsset()');
			var offset = parseInt(arguments[1]);
			var startPosition = arguments[3]
				? Math.round(offset/1000) + Math.floor(parseInt(arguments[3]) / 1000)
				: Math.round(offset/1000);
			BS.MediaManager.prototype._playAsset.apply(this, arguments);
			if (
				this.enableBroadpeakHlsRecordingWorkaround &&
				this.VendorMediaResources.isOtt(this._cMediaResource)
			) {
				if (typeof startPosition === 'number' && !isNaN(startPosition)) {
					BS.media.player.currentTime = startPosition;
				}
				BS.media.player.pauseElement();
				BS.media.player.resumeElement();
			}
		},
		_playUrl: function () {
			this._player.setSpeed(1);
			BS.logger.info('VOD: Albis augmented ._playUrl method called settings ' +
				'hls_seek_in_live=1');
			try {
				EkiohPlatformInfo.setVendorProperty('hls_seek_in_live', '1');
			} catch (ex) {
				BS.logger.log(
					'hls_seek_in_live failed with: ' + ex.toString() + ' With code: ' + ex.code
				);
			}
			BS.MediaManager.prototype._playUrl.apply(this, arguments);
		},
		play: function (startOffset) {
			this._player.setSpeed(1);
			BS.MediaManager.prototype.play.apply(this, arguments);

			if (
				typeof startOffset === 'undefined' &&
				this.enableBroadpeakHlsRecordingWorkaround &&
				this.VendorMediaResources.isOtt(this._cMediaResource)
			) {
				BS.media.player.pauseElement();
				BS.media.player.resumeElement();
			}
		},
		stop: function () {
			this.player.setSpeed(1);
			BS.MediaManager.prototype.stop.apply(this, arguments);
		},
		pause: function () {
			this._player.setSpeed(1);
			BS.MediaManager.prototype.pause.apply(this, arguments);
		},
		syncWithHardwarePosition: function () {
			if (this.currentMediaresourceObj.isOtt(this.mediaResource)) {
				BS.logger.debug(
					'ALBIS MM Syncing of position disabled as it does not work well on OTT'
				);
				return;
			}
			var currentPosition = this.player.currentTime;
			if (currentPosition === 0 && this.syncTimeoutRef === null) {
				this.syncTimeoutRef = setTimeout(function () {
					this.syncTimeoutRef = null;
					this.syncWithHardwarePosition();
				}.bind(this), 100);
			} else if (currentPosition !== 0) {
				clearTimeout(this.syncTimeoutRef);
				this.syncTimeoutRef = null;
				BS.MediaManager.prototype.syncWithHardwarePosition.apply(this, arguments);
			}
		}
	};
	BS.MediaManager.extendWith(MMAlbis);

	BS.evMgr.bind('onSkinManifestLoaded', function () {
		if (BS.skinConfiguration.workarounds.enableAlbisHlsTrickplay === true) {
			BS.logger.info(
				'[WARN] ALBIS enable trickplay on HLS. Nor Beenius nor Albis do not officially ' +
				'support trickplay on HLS streams. Use at your own risk.'
			);
			BS.device.ottTrickPlayCapable = true;
		}
		if (BS.skinConfiguration.workarounds.enableAlbisBroadpeakHlsRecordingWorkaround === true) {
			BS.logger.info(
				'[WARN] ALBIS enable Broadpeak HLS recordings workarounds. Disable this setting ' +
				'when Albis corrects play-out of Broadpeak\'s HLS recordings.'
			);
			BS.media.enableBroadpeakHlsRecordingWorkaround = true;
		}
	});

	BS.logger.info('ALBIS COMPATIBILITY CODE LOADED!');
});

BeeSmart.CompatibilityManager.addDeviceCompatibility('amino', function (BS, q) {
	var cecMgr = BS.cecMgr,
		cecaddr = null
		;

	function embedToiInSvg() {
		if (document.getElementById('embed1'))
			return;

		var foreignObj = document.createElement("foreignObject");
		foreignObj.setAttributeNS(null, "id", "embed1");
		foreignObj.setAttributeNS(
			null,
			"requiredExtensions",
			"application/x-beesmart"
		);
		foreignObj.setAttributeNS(null, "hidden", "true");
		document.documentElement.appendChild(foreignObj);

		aminoCEC = document.getElementById('embed1');
		aminoCEC.stb_registerCECHandler = "amino_cec_callback";
	};

	window.amino_cec_callback = function (tag, source, destination, body) {
		BS.logger.debug(tag + " " + source + " " + destination + " " + body);
	};

	var AminoCECManager = function () {
	};
	AminoCECManager.prototype = {
		ClassName: "AminoCECManager",
		checkConditions: function () {
			var that = this,
				audit = "AminoCECManager Condition Checker: ";

			embedToiInSvg();

			if (aminoCEC == null) {
				BS.logger.info(audit + " Amino CEC Present = FALSE");
				return false;
			}

			cecaddr = that.getAddress();

			if (cecaddr == null) {
				BS.logger.info(audit + " Amino CEC Present = TRUE, CEC Address = null");
				return false;
			}

			BS.logger.info(audit + " Amino CEC Present = TRUE, CEC Address = " + cecaddr
				+ " - AminoCECManager in use");
			return true;
		},
		tvOn: function () {
			try {
				BS.logger.debug('CEC TV ON called');
				aminoCEC.stb_sendCEC("04");
				return true;
			} catch (e) {
				BS.logger.debug("CEC TV ON FAILED - " + e);
				return false;
			}
		},
		tvOff: function () {
			try {
				BS.logger.debug('CEC TV OFF called');
				aminoCEC.stb_sendCEC("36");
				return true;
			} catch (e) {
				BS.logger.debug("CEC TV OFF FAILED - " + e);
				return false;
			}
		},
		getAddress: function () {
			try {
				return aminoCEC.stb_getCECaddress();
			} catch (e) {
				BS.logger.debug("GET CEC ADDRESS FAILED - " + e);
				return null;
			}
		},
		volumeUp: function () {
			try {
				aminoCEC.stb_sendCEC("44", 0x41);
				return true;
			} catch (e) {
				BS.logger.debug("CEC VOLUME UP FAILED - " + e);
				return false;
			}
		},
		volumeDown: function () {
			try {
				aminoCEC.stb_sendCEC("44", 0x42);
				return true;
			} catch (e) {
				BS.logger.debug("CEC VOLUME DOWN FAILED - " + e);
				return false;
			}
		},
		activeSource: function () {
			try {
				aminoCEC.stb_sendCEC("82" + cecaddr, 15);
				return true;
			} catch (e) {
				BS.logger.debug("CEC ACTIVE SOURCE FAILED - " + e);
				return null;
			}
		}
	};

	Object.extend(AminoCECManager, cecMgr.DefaultCECHandler);
	cecMgr.addHandler(AminoCECManager);

	BS.cecMgr.initializeCEC();


	var devType = BS.device.info.deviceTypeDesc.toLowerCase();
	if (BS.device.info.ott_enabled) {
		switch (devType) {
		case 'IP STB Amino 110'.toLowerCase():
		case 'IP STB Amino 125'.toLowerCase():
		case 'IP STB Amino 540'.toLowerCase():
		case 'IP STB Amino A140'.toLowerCase():
			break;
		}
	}


	var rcName = "rc amino a140";

	function KeyMappingsAminetA() {
		this.code = "rc amino a140";

		this['917553'] = 'chDown';
		this['917552'] = 'chUp';
		this['917776'] = 'epg';
		this['917527'] = 'record';

		this['13'] = 'ok';
		this['917555'] = 'menu';
		this['917760'] = 'back';
		this['917536'] = this['917760'] = 'back';

		this['917505'] = 'green';
		this['917504'] = 'red';
		this['917506'] = 'yellow';
		this['917507'] = 'blue';

				this['917777'] = 'ttx';

		this['917520'] = 'play';
		this['917521'] = 'pause';
		this['917523'] = 'rew';
		this['917524'] = 'fw';
		this['917522'] = 'stop';

		this['917776'] = 'epg';
		this['917556'] = 'info';
		this['917583'] = 'reload';
		this['917557'] = 'power';
		this['917784'] = 'dvr';
		this['918022'] = 'subtitles';

		this['917744'] = 'mute';
		this['917747'] = 'volup';
		this['917748'] = 'voldown';
	}

	KeyMappingsAminetA.code = rcName;
	KeyMappingsAminetA.prototype = new BS.inputManager.KeyMappingsDefault;
	BS.inputManager.addDeviceKeyMap(KeyMappingsAminetA);

	var rcName = "rc amino gray";

	function KeyMappingsAmino1() {
		this.code = "rc amino gray";
		this['917553'] = 'chDown';
		this['917552'] = 'chUp';
		this['917527'] = 'record';

		this['8'] = 'delete';

		this['917505'] = 'green';
		this['917504'] = 'red';
		this['917506'] = 'yellow';
		this['917507'] = 'blue';

				this['917777'] = 'ttx';

		this['917555'] = 'menu';
		this['A13'] = 'ok';
		this['917536'] = 'toBegin';
		this['917537'] = 'toEnd';
		this['33'] = 'moveUp';
		this['34'] = 'moveDown';

		this['917520'] = 'play';
		this['917521'] = 'pause';
		this['917523'] = 'rew';
		this['917524'] = 'fw';
		this['917522'] = 'stop';

		this['917583'] = 'reload';

	}

	KeyMappingsAmino1.code = rcName;
	KeyMappingsAmino1.prototype = new BS.inputManager.KeyMappingsDefault;
	BS.inputManager.addDeviceKeyMap(KeyMappingsAmino1);


	var rcName = "rc amino black";

	function KeyMappingsAmino2() {
		this.code = "rc amino black";
		this['917553'] = 'chDown';
		this['917552'] = 'chUp';
		this['917527'] = 'record';

		this['A13'] = 'ok';
		this['917555'] = 'menu';
		this['33'] = 'moveUp';
		this['34'] = 'moveDown';

		this['8'] = 'delete';

		this['917505'] = 'green';
		this['917504'] = 'red';
		this['917506'] = 'yellow';
		this['917507'] = 'blue';

				this['917777'] = 'ttx';

		this['917520'] = 'play';
		this['917521'] = 'pause';
		this['917523'] = 'rew';
		this['917524'] = 'fw';
		this['917522'] = 'stop';


	}

	KeyMappingsAmino2.code = rcName;
	KeyMappingsAmino2.prototype = new BS.inputManager.KeyMappingsDefault;
	BS.inputManager.addDeviceKeyMap(KeyMappingsAmino2);

	function KeyMappingsAmino3() {
		this.code = 'Amino RC A139';
		this['917553'] = 'chDown';
		this['917552'] = 'chUp';
		this['917527'] = 'record';

		this['A13'] = 'ok';
		this['917555'] = 'menu';
		this['33'] = 'moveUp';
		this['34'] = 'moveDown';
		this['917536'] = 'back';
		this['8'] = 'delete';

		this['917505'] = 'green';
		this['917504'] = 'red';
		this['917506'] = 'yellow';
		this['917507'] = 'blue';

				this['917777'] = 'ttx';

		this['917520'] = 'play';
		this['917521'] = 'pause';
		this['917523'] = 'rew';
		this['917524'] = 'fw';
		this['917522'] = 'stop';

		this['917525'] = 'toBegin';
		this['917526'] = 'toEnd';
		this['917776'] = 'epg';
		this['917744'] = 'mute';
		this['917747'] = 'volup';
		this['917748'] = 'voldown';
		this['917556'] = 'info';
		this['917557'] = 'power';
		this['917782'] = 'www';
	}

	KeyMappingsAmino3.code = 'Amino RC A139';
	KeyMappingsAmino3.prototype = new BS.inputManager.KeyMappingsDefault;
	BS.inputManager.addDeviceKeyMap(KeyMappingsAmino3);


	function MMAmino() {
	};
	MMAmino.prototype = {
		iAm: "Amino",
		_isStreaming: function () {
			return true;
		},
		playMediaResource: function (mr, context, onBeforePlay) {
			if (context && context.toLowerCase() == 'vod' && mr.resources) {
				for (var i = 0; i < mr.resources.length; i++) {
					var cMr = mr.resources[i];
					if (cMr.protocolStack && cMr.protocolStack.indexOf('hls') != -1)
						cMr.src += ";offset=" + cMr.offset;
				}
			}
			var args = [];
			args.push(mr);
			args.push(context);
			args.push(onBeforePlay);
			BS.MediaManager.prototype.playMediaResource.apply(this, args);
		}
	};
	BS.MediaManager.extendWith(MMAmino);


});

(function() {
	function motorolaOrArris(BS, q) {
		BS.logger.excludeTime();

		BS.registerGlobalVariable('exceptions');
		BS.registerGlobalVariable('TToiJsException');
		BS.registerGlobalVariable('TToiSessionViolationException');
		BS.registerGlobalVariable('TToiInvalidArgumentException');
		BS.registerGlobalVariable('TToiUnavailableException');
		BS.registerGlobalVariable('TToiBusyException');
		BS.registerGlobalVariable('TToiNoDataException');
		BS.registerGlobalVariable('TToiFileException');
		BS.registerGlobalVariable('TToiPermissionDeniedException');
		BS.registerGlobalVariable('TToiInvalidPreconditionException');
		BS.registerGlobalVariable('TToiOperationNotSupportedException');
		BS.registerGlobalVariable('TToiUnhandledValueException');
		BS.registerGlobalVariable('TToiNotEnoughResourcesException');
		BS.registerGlobalVariable('util');
		BS.registerGlobalVariable('toi');

		function ArrisMotorolaPowerHandler() {}
		ArrisMotorolaPowerHandler.prototype = {
			onPowerKey: function () {
				BeeSmart.logger.info("ARRIS onPowerKey handler !!! something has changed regarding power behaviour on arris STB!!!");
				return true;
			},
			onPowerStateChangeEvent: function () {

				return true;
			}
		};
		ArrisMotorolaPowerHandler.id = 'ArrisMotorola';
		Object.extend(ArrisMotorolaPowerHandler, BeeSmart.powerManager.PowerHandler);
		BeeSmart.powerManager.addPowerManager(ArrisMotorolaPowerHandler);

		BeeSmart.powerManager.powerMap = 'ArrisMotorola';

		var rcNameArris = "rc arris vip 1113";

		function KeyMappingsArris() {
			this.code = rcNameArris;
			this['8'] = 'delete';
			this['A13'] = this['983041'] = 'ok';
			this['917505'] = 'green';
			this['917504'] = 'red';
			this['917506'] = 'yellow';
			this['917507'] = 'blue';
			this['917555'] = 'menu';
			this['C917528'] = 'play';
			this['C917523'] = 'rew';
			this['C917524'] = 'fw';
			this['C917522'] = 'stop';
			this['917536'] = 'back';
			this['C917776'] = this['C917781'] = 'epg';
			this['917554'] = this['C145'] = 'fsTV';
			this['A917506'] = 'games';

			this['A917505'] = this['A18'] = 'radio';
			this['C917784'] = 'dvr';
			this['917744'] = this['C917744'] = 'mute';

			this['917777'] = 'ttx';
			this['C17'] = 'keyboard';
			this['917747'] = this['C917747'] = 'volup';

			this['917748'] = this['C917748'] = 'voldown';
			this['A917527'] = 'record';
			this['917556'] = 'info';

			this['917783'] = 'reload';
			this['917557'] = this['C917557'] = 'power';
			this['917782'] = 'www';
			this['A917525'] = 'toBegin';
			this['A917526'] = 'toEnd';
			this['A917552'] = 'chUp';
			this['A917553'] = 'chDown';
			this['A917536'] = 'vod';

			var _prevKey = null,
				radioHack = "A983041",
				keyboardHack = "C983041";
			try {
				if (EkiohPlatformInfo.getVendorProperty('config.build.version').search('4.4') != -1) {
					radioHack = "A917791";
					keyboardHack = "C918282";
				}
			} catch (e) {
				l('cannot read EkiohPlatformInfo');
			}

			this.get = function (id, event) {
				if (_prevKey == "A18" && id == radioHack) {
					_prevKey = id;
					return this["A18"];
				}

				if (_prevKey == "C17" && id == keyboardHack) {
					_prevKey = id;
					return this["C17"];
				}

				_prevKey = id;

				if (event.keyIdentifier == 'U+f0001')
					return 'keyboard';

				if (id == "C17" || id == "A18" || !this[id])
					return false;

				return this[id];
			};

		}

		KeyMappingsArris.code = rcNameArris;
		KeyMappingsArris.prototype = new BS.inputManager.KeyMappingsDefault;

		BS.inputManager.addDeviceKeyMap(KeyMappingsArris);

		var rcName = "rc motorola black";

		function KeyMappingsMotorola1() {
			this.code = rcName;
			this['8'] = 'delete';
			this['A13'] = this['983041'] = 'ok';
			this['917505'] = 'green';
			this['917504'] = 'red';
			this['917506'] = 'yellow';
			this['917507'] = 'blue';
			this['917555'] = 'menu';
			this['C917528'] = 'play';
			this['C917523'] = 'rew';
			this['C917524'] = 'fw';
			this['C917522'] = 'stop';
			this['917536'] = 'back';
			this['C917776'] = this['C917781'] = 'epg';
			this['917554'] = this['C145'] = 'fsTV';
			this['A917506'] = 'games';

			this['A917505'] = this['A18'] = 'radio';
			this['C917784'] = 'dvr';
			this['917744'] = this['C917744'] = 'mute';

			this['917777'] = 'ttx';
			this['C17'] = 'keyboard';
			this['917747'] = this['C917747'] = 'volup';

			this['917748'] = this['C917748'] = 'voldown';
			this['A917527'] = 'record';
			this['917556'] = 'info';

			this['917783'] = 'reload';
			this['917557'] = this['C917557'] = 'power';
			this['917782'] = 'www';
			this['A917525'] = 'toBegin';
			this['A917526'] = 'toEnd';

			this['A917552'] = 'chUp';
			this['A917553'] = 'chDown';
			this['A917536'] = 'vod';

			var _prevKey = null,
				radioHack = "A983041",
				keyboardHack = "C983041";
			try {
				if (EkiohPlatformInfo.getVendorProperty('config.build.version').search('4.4') != -1) {
					radioHack = "A917791";
					keyboardHack = "C918282";
				}
			} catch (e) {
				l('cannot read EkiohPlatformInfo');
			}

			this.get = function (id, event) {
				if (_prevKey == "A18" && id == radioHack) {
					_prevKey = id;
					return this["A18"];
				}

				if (_prevKey == "C17" && id == keyboardHack) {
					_prevKey = id;
					return this["C17"];
				}

				_prevKey = id;

				if (event.keyIdentifier == 'U+f0001')
					return 'keyboard';

				if (id == "C17" || id == "A18" || !this[id])
					return false;

				if (_prevKey == "917536" && event.shiftKey) {
					return 'play';
				}

				if (_prevKey == "917783" && event.shiftKey) {
					return 'blue';
				}

				return this[id];
			};
		}

		KeyMappingsMotorola1.code = rcName;
		KeyMappingsMotorola1.prototype = new BS.inputManager.KeyMappingsDefault;

		var device = BS.device.info;
		var devType = device && device.deviceTypeDesc ? device.deviceTypeDesc.toLowerCase() : null;

		if (devType && devType.indexOf('1910') != -1) {
			BS.device.performanceIndex = BS.device.consts.performance.MIN;
		}

		if (devType && devType.indexOf('1003') != -1) {
			BS.device.performanceIndex = BS.device.consts.performance.MID;
		}

		BS.inputManager.addDeviceKeyMap(KeyMappingsMotorola1);

		try {
			if (
				typeof(EkiohPlatformInfo) == 'undefined' ||
				!!EkiohPlatformInfo.getVendorProperty('config.build.version').match(/^(3)\..*/g) == true
			) {
				BS.logger.info('Motorola 3.x image overriding ekioh version to 1.0.0.0, because version is unknown or unreliable');
				var ekVersionRx = /\w+\s+v?([0-9\.]+)\s+\(?([^\(\)]+)?\)?\s*(r([0-9\-:]*))?/i;
				BS.CompatibilityManager.prototype.ekVersion = navigator.userAgent.match(ekVersionRx);
				BS.CompatibilityManager.prototype.ekVersion[4] = "1.0.0.0";
				return;
			}
		} catch (e) {
			l(e);
			return;
		}

		var mm = BS.modMgr,
			am = BS.appMgr,
			BeeSmartMain = mm.getModule("BeeSmartMain"),
			evMgr = BS.evMgr,
			motoVolumeUsed = false,
			toiObj = null,
			media = BS.media,
			ui = BS.ui,
			ignoreHddModeForRec = true,
			motoToiStatisticsUsed = false,
			motoStatisticsOutputIntervalSeconds = 0;

		function embedToiInSvg() {
			if (document.getElementById('toiJs2Plugin'))
				return;

			var foreignObj = document.createElement("foreignObject");
			foreignObj.setAttributeNS(null, "id", "toiJs2Plugin");
			foreignObj.setAttributeNS(
				null,
				"requiredExtensions",
				"application/x-motorola-toi"
			);
			foreignObj.setAttributeNS(null, "hidden", "true");
			toiObj = document.documentElement.appendChild(foreignObj);

			document.getElementById('toiJs2Plugin');

		};

		function unloadToiFromSvg() {
			if (toiObj && !motoVolumeUsed && !motoToiStatisticsUsed) {
				document.documentElement.removeChild(toiObj);
				toiObj = null;
			}
		};

		var mediaResolutionSetter = BS.modMgr.getApp('mediaResolutionSetter');
		var VIDEO_CONNECTION_TYPE_HDMI = 0;
		var VIDEO_CONNECTION_TYPE_SCART = 2;
		mediaResolutionSetter.mToi = null;
		mediaResolutionSetter.allVideoModes = [];
		mediaResolutionSetter.enabled = true;
		mediaResolutionSetter.outputs = [];
		mediaResolutionSetter.getCurrentMode = function () {
			var r = mediaResolutionSetter;
			if (!r.outputs || r.outputs.length == 0)
				r.startup();
			return r.getVideoMode();
		};
		mediaResolutionSetter.startup = function () {
			var r = mediaResolutionSetter;
			r.outputs = r.getVideoSession().getVideoOutputs();
			r.allVideoModes = {};
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI] = [];
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('NO_VIDEO_MODE');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('480I60');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('576I50');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('480P60');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('576P50');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('720P50');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('720P60');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('1080I50');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('1080I60');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('1080P23976');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('1080P24');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('1080P25');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('1080P29970');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('1080P30');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('1080P50');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('1080P59940');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI].push('1080P60');

			r.allVideoModes[VIDEO_CONNECTION_TYPE_SCART] = [];
			r.allVideoModes[VIDEO_CONNECTION_TYPE_SCART].push('NO_SCART_MODE');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_SCART].push('SCART_MODE_CVBS');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_SCART].push('SCART_MODE_YC');
			r.allVideoModes[VIDEO_CONNECTION_TYPE_SCART].push('SCART_MODE_RGB_CVBS');
		};
		mediaResolutionSetter.getVideoModes = function () {
			var r = mediaResolutionSetter;
			if (!r.outputs || r.outputs.length == 0)
				r.startup();
			var videoModes = [];
			try {
				var r = mediaResolutionSetter;
				var vidSess = r.getVideoSession();
				var hdmi = vidSess.getVideoOutputInfo(VIDEO_CONNECTION_TYPE_HDMI);
				if (hdmi) {
					for (var i = 0; i < hdmi.allowedVideoModes.length; i++) {
						var vMode = r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI][hdmi.allowedVideoModes[i]];
						if (vMode != 'NO_VIDEO_MODE')
							videoModes.push(vMode);
					}
				}
				var scart = vidSess.getVideoOutputCapabilityInfo(VIDEO_CONNECTION_TYPE_SCART);
				if (scart) {
					for (var i = 0; i < scart.scartModes.length; i++) {
						var vMode = r.allVideoModes[VIDEO_CONNECTION_TYPE_SCART][scart.scartModes[i]];
						if (vMode != 'NO_SCART_MODE')
							videoModes.push(vMode);
					}
				}

			} catch (e) {
				l(e);
			}
			return videoModes;
		};
		mediaResolutionSetter.getVideoSession = function () {
			var r = mediaResolutionSetter;
			if (!r.mToi)
				r.mToi = window.toi.videoOutputService.createVideoConfigurationSession();

			return r.mToi;
		},
			mediaResolutionSetter.releaseVideoSession = function () {
				var r = mediaResolutionSetter;
				if (r.mToi) {
					r.mToi.releaseInstance();
					r.mToi = null;
				}
			};
		mediaResolutionSetter.getVideoMode = function () {
			var r = mediaResolutionSetter;
			for (var i = 0, len = r.outputs.length; i < len; i++) {
				try {
					var output = r.outputs[i];
					var info = r.getVideoSession().getVideoOutputInfo(output);
					var type = info.connectionType;

					switch (type) {
					case VIDEO_CONNECTION_TYPE_HDMI:
						if (info.videoMode > 0) {
							return r.allVideoModes[type][info.videoMode];

						}
						break;
					case VIDEO_CONNECTION_TYPE_SCART:
						if (info.scartMode > 0)
							return r.allVideoModes[type][info.scartMode];
						break;
					}
				} catch (e) {
					l(e);
				}
			}
			return r.allVideoModes[VIDEO_CONNECTION_TYPE_HDMI][0];
		};

		mediaResolutionSetter.setVideoMode = function (mode) {
			var r = mediaResolutionSetter;
			for (var i = 0, len = r.outputs.length; i < len; i++) {
				try {
					var output = r.outputs[i],
						info = r.getVideoSession().getVideoOutputInfo(output),
						outputType = info.connectionType;

					if (!r.allVideoModes[outputType])
						continue;

					var idx = r.allVideoModes[outputType].indexOf(mode);
					if (idx == -1)
						continue;

					switch (outputType) {
					case VIDEO_CONNECTION_TYPE_HDMI:
						r.getVideoSession().setDefaultVideoMode(VIDEO_CONNECTION_TYPE_HDMI, idx);
						break;
					case VIDEO_CONNECTION_TYPE_SCART:
						r.getVideoSession().setScartMode(VIDEO_CONNECTION_TYPE_SCART, idx);
						break;
					}

				} catch (e) {
					l(e);
				}
			}
			try {
				r.getVideoSession().apply();
				r.releaseVideoSession();
			} catch (e) {
				l('apply problems', e);
			}
		};

		evMgr.bind("onBeeSmartLoginSuccess", function () {
			embedToiInSvg();

			try {
				motoVolumeUsed = (toi && toi.audioOutputService) || false;
			} catch (e) {
				motoVolumeUsed = false;
			}

			if (motoVolumeUsed) {
				var misc = BS.modMgr.getApp('Misc');
				var miscStartup = misc.startup;
				misc.startup = function () {
					var r = miscStartup.apply(this, arguments);
					misc.dom.systemUnMute = function () {
						this.isSystemMute = false;
						var vol = !this.isMute ? Number(this.currVolume).toFixed(2) : 0;
						setVolume(vol * 100);
					};

					misc.dom.systemMute = function () {
						this.isSystemMute = true;
						setVolume(0);
					};
					return r;
				};

				evMgr.bind("onVolumeChange", function (ev) {
					if (misc.dom.isSystemMute)
						return;
					var vol = 100;

					if (ev && ev.data != null)
						vol = ev.data * 100;

					setVolume(vol);
				});

				function setVolume(vol) {
					if (vol > 100)
						vol = 100;
					else if (vol < 0)
						vol = 0;

					var connections = toi.audioOutputService.getConnections();

					for (var i = 0; i < connections.length; i++) {
						var conn = connections[i];
						try {
							if (!conn.isAdjustable)
								continue;

							toi.audioOutputService.setVolume(conn.id, vol);
						} catch (e) {
							l(e);
						}
					}
				}
			}
		});


		evMgr.bind("onBeeSmartLoginSuccess", function (e) {
			function ArrisTeletext(x, y, width, height) {
				var teletextObject = {},
					video = BeeSmart.media.player.getBBox();

				x = x || video.x;
				y = y || video.y;
				width = width || video.width;
				height = height || video.height;
				teletextObject.node = document.createElement("foreignObject");
				teletextObject.node.setAttribute("id", "teletext");
				teletextObject.node.setAttribute("x", x);
				teletextObject.node.setAttribute("y", y);
				teletextObject.node.setAttribute("width", width);
				teletextObject.node.setAttribute("height", height);
				teletextObject.node.setAttribute("requiredExtensions",
					"application/motorola-teletext-plugin");

				teletextObject.setVisible = function (isVisible) {
					this.node.setAttribute("display", isVisible ? "inline" : "none");
				};

				teletextObject.isShown = function () {
					return this.node.getAttribute('display') !== 'none';
				};

				teletextObject.setTransparent = function (mode) {
					this.node.transparent = mode;
				};

				teletextObject.inputRedKey = function () {
					this.node.inputRedKey();
				};

				teletextObject.inputGreenKey = function () {
					this.node.inputGreenKey();
				};

				teletextObject.inputYellowKey = function () {
					this.node.inputYellowKey();
				};

				teletextObject.inputCyanKey = function () {
					this.node.inputCyanKey();
				};

				teletextObject.gotoIndexPage = function () {
					this.node.gotoIndexPage();
					return true;
				};

				teletextObject.gotoPreviousPage = function () {
					this.node.gotoPreviousPage();
				};

				teletextObject.gotoNextPage = function () {
					this.node.gotoNextPage();
				};

				teletextObject.setControllableSubpages = function (mode) {
					this.node.controllableSubPages = mode;
				};

				teletextObject.isSubpagesVisible = function () {
					return this.node.controllableSubPages;
				};

				teletextObject.gotoPreviousSubpage = function () {
					this.node.gotoPreviousSubpage();
				};

				teletextObject.gotoNextSubpage = function () {
					this.node.gotoNextSubpage();
				};

				teletextObject.inputDigit = function (digit) {
					this.node.inputDigit(digit);
				};

				teletextObject.destroy = function () {
					document.documentElement.removeChild(teletextObject.node);
					teletextObject.node = null;
					delete teletextObject;
				};

				document.documentElement.appendChild(teletextObject.node);
				teletextObject.setVisible(false);
				teletextObject.setTransparent(false);
				return teletextObject;
			};
			var useTTX = true;
			if (useTTX) {

				var ttx = new ArrisTeletext();

				BS.media.isTeletextShown = function () {
					try {
						return ttx.isShown();
					} catch(e) {}
					return false;
				};

				try {
					if (ttx && ttx.gotoIndexPage()) {
						BeeSmart.modMgr.getApp('teletextScreen').unregister();
						var teletextScreen = new BS.App('teletextScreen', {
							replacement: true,
							type: 'popup',
							listenTo: ["reload", "fsTV"]
						});
						teletextScreen.ttx = ttx;
						teletextScreen.onInputEvent = function (key) {
							var r = this;
							switch (key) {
							case 'back':
							case 'ttx':
							case 'fsTV':
							case 'reload':
								am.pop();
								break;
							case 'down':
								r.ttx.gotoPreviousPage();
								break;
							case 'up':
								r.ttx.gotoNextPage();
								break;
							case 'left':
							case 'right':
								r.ttx.setControllableSubpages(true);
								if (key == 'left')
									r.ttx.gotoPreviousSubpage();
								else
									r.ttx.gotoNextSubpage();
								break;
							case 'red':
								r.ttx.inputRedKey();
								break;
							case 'green':
								r.ttx.inputGreenKey();
								break;
							case 'yellow':
								r.ttx.inputYellowKey();
								break;
							case 'blue':
								r.ttx.inputCyanKey();
								break;
							default:
								if (isNaN(parseInt(key)))
									break;
								r.ttx.inputDigit(key);
								break;
							}
						};
						teletextScreen.init = function () {
							this.ttx.setVisible(true);
							this.ttx.setTransparent(true);
							setTimeout(function () {
								teletextScreen.ttx.setTransparent(false);
							}, 250);
						};
						teletextScreen.destroy = function () {
							this.ttx.setVisible(false);
						};

						var tvModule = mm.getModule('Tv');
						tvModule.register(teletextScreen);

					} else {
						ttx.destroy();
						delete ttx;

					}
				} catch (e) {
					ttx.destroy();
					delete ttx;
				}
			}

			unloadToiFromSvg();
		});

		evMgr.bind("onVideoAspectRatioChange", function (e) {
			var video = BeeSmart.media.player.getBBox();

			var x = video.x,
				y = video.y,
				width = video.width,
				height = video.height,
				teletext = document.getElementById('teletext');

			if (teletext) {
				teletext.setAttribute("x", x);
				teletext.setAttribute("y", y);
				teletext.setAttribute("width", width);
				teletext.setAttribute("height", height);
			}
		});

		try {
			if (parseFloat(EkiohPlatformInfo.getVendorProperty('config.build.version')) >= 4.4) {
				embedToiInSvg();

				var is = 0;
				if (!toi) {
					BS.logger.debug("TOI/JS 2 is not available, please check your " +
						"whitelisturls.xml and that your boot image supports TOI/JS 2.");
					return;
				}

				try {
					function onStateChange(event) {
						is = toi.informationService;
						var evt = is.getObject("var.io.state");
						switch (evt) {
						case 'standby':
						case 'suspended':
							BS.evMgr.dispatch(new BS.EkiohPowerStateChangeEvent(0));
							break;
						case 'normal':
							BS.evMgr.dispatch(new BS.EkiohPowerStateChangeEvent(1));
							break;
						}
					}

					is = toi.informationService;
					is.setObject("var.standby.mode", "normal", is.STORAGE_VOLATILE);
					is.addEventListener(is.ON_OBJECTS_CHANGED, onStateChange);
					is.subscribeObject(onStateChange, "var.standby.mode", true);


					BS.logger.debug("Power manager for arris image "
						+ parseFloat(EkiohPlatformInfo.getVendorProperty('config.build.version'))
						+ " loaded");
				} catch (e) {
					BS.logger.debug("Power manager for arris image "
						+ parseFloat(EkiohPlatformInfo.getVendorProperty('config.build.version'))
						+ " not working" + e);
				}

				motoToiStatisticsUsed = false;
				if (motoStatisticsOutputIntervalSeconds) {
					motoToiStatisticsUsed = true;

					var possibleStatsParameters = [
						"StatisticsBufferOverrun",
						"StatisticsBufferUnderrun",
						"StatisticsTimePlaying",
						"StatisticsTimeTotal",
						"StatisticsTsAVOutOfSyncs",
						"StatisticsTsDecodingErrors",
						"StatisticsTsDuplicatePackets",
						"StatisticsTsErrorPackets",
						"StatisticsTsLostPackets",
						"StatisticsTsTotalBytes",
						"StatisticsTsTotalBytesPlayed",
						"StatisticsTsTotalPackets",
						"StatisticsUrl"
					];
					setInterval(function () {
						try {
							var p = toi.mediaService.enumeratePlayers();
							var mainPlayer = p && p[0]
							&& p[0].sessionId ? toi.mediaService.openSession(p[0].sessionId) : false;
							var outputString = "";
							if (mainPlayer) {
								for (var i in possibleStatsParameters) {
									outputString += possibleStatsParameters[i] + ":"
										+ mainPlayer.getParameter(possibleStatsParameters[i]) + ";";
								}
								BS.logger.info(outputString);
								mainPlayer.releaseInstance();
							} else {
								BS.logger.info('no player defined, cannot output statistics');
							}
						} catch (e) {
							l('exception at output moto video stat:', e);
						}
					}, motoStatisticsOutputIntervalSeconds * 1e3);
				}

				BS.logger.info("Arris statistics output " + (motoToiStatisticsUsed ? "ENABLED every "
					+ motoStatisticsOutputIntervalSeconds + " seconds" : "DISABLED"));
			}
		} catch (e) {
			l(e);
		}

		function MMArris() {
		}

		MMArris.prototype = {
			iAm: 'Arris',
			playSpeedIncrement: function (mode) {
				BS.logger.trace('ARRIS/MOTOROLA .playSpeedIncrement(%s, cb)', mode);
				if (BeeSmart.appMgr.isLoaded('vodPlayer')) {
					var currentPosition = this.player.currentTime;
					if (mode === 'backward' && currentPosition - EDGE_DETECT_DELTA_SECONDS < 0) {
						var vodPlayer = BeeSmart.modMgr.getApp('vodPlayer');
						var mediaDuration = this.length;
						setTimeout(function () {
							vodPlayer.handleLeftEdge(currentPosition, mediaDuration);
						}, 0);
						return;
					}
				}
				BS.MediaManager.prototype.playSpeedIncrement.apply(this, arguments);
			}
		};

		if (parseFloat(EkiohPlatformInfo.getVendorProperty('config.build.version')) >= 4.6) {
			MMArris.prototype = Object.assign(MMArris.prototype, {
				_playAsset: function () {
					BS.MediaManager.prototype._playAsset.apply(this, arguments);
					BS.MediaManager.prototype.pause.apply(this);
					setTimeout(function () {
						BS.MediaManager.prototype.play.apply(this);
					}.bind(this), 500);
				},
				_playUrl: function (url) {
					if (!url) {
						BS.logger.info("No url given, so i'm stopping video");
						if (this.playMode == "pause") {
							this.play();
						} else {
							this.stop();
						}
						return;
					}
					if (url == this.cPlayingUrl) {
						BS.logger.info('Channel already set, skipping channel change (' + url + ', '
							+ this.cPlayingUrl + ')');
						return;
					}
					this.cPlayingUrl = url;
					try {
						var r = this.player;
						r.endElement();
						BS.logger.info("Setting video URL to: " + url);
						r.setAttributeNS(NS.xlink, 'href', url);
						r.start = 0;
						r.beginElement();
						this._playMode = 'live';
						this._resetSubStreamProps();
						this.cPlayingUrl = url;

					} catch (e) {
						BS.logger.info("Unable to set the channel. Exception: ");
						BS.logger.log(e);
					}
				},
				stop: function () {
					try {
						if ('stop' === this._playMode)
							throw new Error('player-already-stopped');

						BS.logger.info("beesmart stop");

						this.positionTime = 0;
						this.ctAtPaused = 0;
						this._playMode = 'stop';
						this.player.endElement();
						this.player.setAttributeNS(NS.xlink, 'href', '');
						this.cPlayingUrl = null;

					} catch (e) {
						BS.logger.debug("Unable to stop mcast/unicast stream. Reason: " +
							e.message);
					}
				},
				_isStreaming: function () {
					if (this.cPlayingUrl) {
						return BS.MediaManager.prototype._isStreaming.apply(this, arguments);
					} else {
						return false;
					}
				}
			});
		}

		BS.MediaManager.extendWith(MMArris);

		const EDGE_DETECT_DELTA_SECONDS = 3;

		BeeSmart.evMgr.bind('onVideoSpeedChangeEvent', function (ev) {
			if (BeeSmart.appMgr.isLoaded('vodPlayer')) {
				var currentSpeed = ev.data.current;
				if (currentSpeed !== 0) return;
				var vodPlayer = BeeSmart.modMgr.getApp('vodPlayer');
				var media = BeeSmart.media;
				var currentPosition = media.player.currentTime;
				var mediaDuration = media.length;
				var trickplayDirection = media.trickplayDirection;

				if (currentPosition === -1) return;
				if (media.playMode !== 'trickplay') return;

				if (currentPosition - EDGE_DETECT_DELTA_SECONDS < 0 && trickplayDirection < 0) {
					vodPlayer.handleLeftEdge(currentPosition, mediaDuration);
				} else if (currentPosition + EDGE_DETECT_DELTA_SECONDS > mediaDuration && trickplayDirection > 0) {
					vodPlayer.handleRightEdge(currentPosition, mediaDuration)
				}
			}
		});

	}

	BeeSmart.CompatibilityManager.addDeviceCompatibility('motorola', motorolaOrArris);
	BeeSmart.CompatibilityManager.addDeviceCompatibility('arris', motorolaOrArris);
})();

BeeSmart.dune = function dune(BS, q) {
	var dunePlugin;

	BS.CompatibilityManager.prototype.hasWebLocalStorageApi = function () {
		return 'localStorage' in window;
	};

	function embedToSVG() {
		if (document.getElementById('ttPlugin'))
			return;

		var foreignObj = document.createElement('foreignObject');
		foreignObj.setAttributeNS(null, 'id', 'dunePlugin');
		foreignObj.setAttributeNS(null, 'requiredExtensions', 'application/x-dune-stb-api');
		foreignObj.setAttributeNS(null, 'hidden', 'true');
		document.documentElement.appendChild(foreignObj);



		return document.getElementById('dunePlugin');


	}

	dunePlugin = embedToSVG();

	function DuneDvbChannelScanner() {
		BS.TvModel.DvbChannelScanner.call(this);
	}
	DuneDvbChannelScanner.prototype = {
		totalChannels: 0,
		_createEventObject: function(state) {
			return {type: state, channels: this.channels, foundChannels: this.totalChannels };
		},
		startScan: function (statusCallback) {
			var that = this;
			var state = 'failed';
			try {
				that.totalChannels = 0;
				dunePlugin.setDvbtScannerCallback(function(value) {
					switch(value.state) {
					case dunePlugin.DVB_SCANNER_STATE_SCANNING:
						that.totalChannels = value.foundChannelsNumber;
						statusCallback.call(that, that._createEventObject('scanning'));

						break;
					case dunePlugin.DVB_SCANNER_STATE_SUCCEEDED:
						state = 'succeeded';

						break;
					case dunePlugin.DVB_SCANNER_STATE_FAILED:
						state = 'failed';

						break;
					case dunePlugin.DVB_SCANNER_STATE_CANCELLED:
						state = 'canceled';

						break;
					case dunePlugin.DVB_SCANNER_STATE_STOPPED:
						statusCallback.call(that, that._createEventObject(state));

						break;
					}
				});
				dunePlugin.startDvbtScan();
			} catch(ex) {
				BS.logger.log(ex);
				statusCallback.call(that, that._createEventObject('failed'));
			}

		},
		stopScan: function () {
			dunePlugin.cancelDvbtScan();
		},
		get channels () {
			var channels = eval(dunePlugin.getChannelsDescription(0, 999));
			return channels.map(function (c, i) {
				return {
					number: i+1,
					name: c.name,
					protocolStack: 'dvbt',
					src: c.mediaUrl
				};
			});
		},
		clearChannels: function () {
			dunePlugin.deleteChannels();
		}
	};
	Object.extend(DuneDvbChannelScanner, BS.TvModel.DvbChannelScanner);

	function isDaylightSavingTime(date) {
		function normalTimezoneOffset() {
			var jan = new Date(date.getFullYear(), 0, 1);
			var jul = new Date(date.getFullYear(), 6, 1);
			return Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
		}

		return date.getTimezoneOffset() < normalTimezoneOffset();
	}

	function getTimeOffset(now) {
		if (BS.skinConfiguration.workarounds.duneIranianDVBProgramOffset === false) return 0;
		var offsetInMinutes = isDaylightSavingTime(now)
			? BS.skinConfiguration.workarounds.duneIranianDVBProgramOffset.IRDTOffsetInMinutes
			: BS.skinConfiguration.workarounds.duneIranianDVBProgramOffset.IRSTOffsetInMinutes;
		return offsetInMinutes * 60e3;
	}

	function DuneDvbTvShowScanner() {
		BS.TvModel.DvbTvShowScanner.call(this);
	}
	DuneDvbTvShowScanner.prototype = {
		getForChannel: function (dvbChannel, forDate) {
			var url = dvbChannel.mediaResources.resources[0].src;
			var now = forDate;
			var timeOffset = getTimeOffset(now);
			var startTime = new Date(now.getFullYear(), now.getMonth(), now.getDate()).getTime();
			var endTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1).getTime();
			var shows = eval(dunePlugin.getEpgFromMpegTsStream(url, {
				startTime: (startTime + timeOffset) / 1000, endTime: (endTime + timeOffset) / 1000
			}));
			return shows.map(function(s) {
				return {
					id: DuneDvbTvShowScanner.getShowId(s, dvbChannel),
					channelId: dvbChannel.id,
					title: s.name,
					description: s.description ? s.description.replace(/\n/, '<tbreak/>') : '',
					start: s.startTime * 1e3 + timeOffset,
					duration: (s.endTime - s.startTime) / 60,
					ageRating: s.parentalRating
				};
			});
		}
	};
	DuneDvbTvShowScanner.getShowId = function (duneShowObj, dvbChannel) {
		var secondsInADay = duneShowObj.startTime % 1e5;
		var dayOfMonth = new Date(duneShowObj.startTime * 1e3).getDate() * 1e5;
		var channelId = dvbChannel.id * 1e7;
		return channelId - dayOfMonth - secondsInADay;
	};
	Object.extend(DuneDvbTvShowScanner, BS.TvModel.DvbTvShowScanner);

	dunePlugin.enableEpgFromMpegTsStream();

	BS.TvModel.activateDvb(
		new BS.TvModel.DvbProvider(new DuneDvbChannelScanner(), new DuneDvbTvShowScanner())
	);


	function KeyMappingsDune() {
		this.code = dune.rcKeymap;

		this['917776'] = 'epg';

		this['917505'] = 'green';
		this['917504'] = 'red';
		this['917506'] = 'yellow';
		this['917507'] = 'blue';

		this['917777'] = 'ttx';

		this['918019'] = 'vod';
		this['917528'] = this['917521'] = 'play';
		this['917523'] = 'rew';
		this['917524'] = 'fw';
		this['917522'] = 'stop';
		this['917525'] = 'toBegin';
		this['917526'] = 'toEnd';

		this['917536'] = 'back';
		this['917555'] = 'menu';
		this['13'] = 'ok';
		this['917527'] = 'record';
		this['917556'] = 'info';
		this['917557'] = 'power';

		this['917747'] = 'volup';
		this['917748'] = 'voldown';
		this['917744'] = 'mute';
		this['917760'] = 'keyboard';

		this['8'] = 'clear';
		this['918022'] = 'subtitle';
		this['918016'] = 'audio';
		this['917791'] = 'radio';
		this['917561'] = 'aod';
		this['918282'] = 'select';
		this['917784'] = 'dvr';
	}

	KeyMappingsDune.code = dune.rcKeymap;
	KeyMappingsDune.prototype = new BS.inputManager.KeyMappingsDefault();
	BS.inputManager.addDeviceKeyMap(KeyMappingsDune);

	var mediaResolutionSetter = BS.modMgr.getApp('mediaResolutionSetter');
	mediaResolutionSetter.enabled = true;

	BS.CompatibilityManager.prototype.getAcquireSystemTimeTask = function getAcquireSystemTimeTask() {
		var dvbProvider = BS.TvModel.activeDvbProvider;
		var dfr = q.defer();

		if (this.isTimevalid()) {
			BS.logger.info('Dune.getAcquireSystemTimeTask: time valid, proceed');
			dfr.resolve();

		} else if (dvbProvider.scanCompleted) {
			BS.logger.info('Dune.getAcquireSystemTimeTask: do some channel switching!');
			switchChannelsForSysTime(dvbProvider, dfr);

		} else {
			BS.logger.info('Dune.getAcquireSystemTimeTask: scan pending');
			var texts = {
				scanning: tr('dvb_scan_msg'),
				foundChannels: tr('dvb_scan_msg') + '<tbreak/>' + tr('DVB-T_Found_channels')
			};
			$message().setText(texts.scanning);
			dvbProvider
				.scanForChannels(function (ev) {
					if (ev.foundChannels)
						$message().setText(texts.foundChannels.sprintf(ev.foundChannels));
				})
				.delay(500)
				.then(function () {
					BS.logger.info('Dune.getAcquireSystemTimeTask: scan done');
					switchChannelsForSysTime(dvbProvider, dfr);
				}).done();
		}

		return dfr.promise;
	};

	function switchChannelsForSysTime (dvbProvider, dfr) {
		if (BS.compatibilityManager.isTimevalid()) return dfr.resolve();
		$message().setText(tr('systemTimeProcedure'));
		$('#video').attr('audio-level', '0');
		var chs = dvbProvider.channelScanner.channels;
		playDvb(chs).then(function (result) {
			if (result === false) {
				dfr.reject(new BS.NiceException('Dune.getAcquireSystemTimeTask: no DVB channels '
					+ 'found to acquire clock', tr('systemTimeFailedCheckDVBCables')));
			} else {
				dfr.resolve();
			}
		}).finally(function () {
			$('#video').attr('audio-level', '1');
			BS.media.stop();
		}).done();
	}
	function playDvb(channels) {
		if (!channels[playDvb.index]) return q(false);
		BS.media._playUrl(channels[playDvb.index].src);
		playDvb.index++;
		return q.delay(3e3).then(function () {
			if (playDvb.index > 20) return q(false);
			return BS.compatibilityManager.isTimevalid() ? q() : playDvb(channels);
		}.bind(this));
	}
	playDvb.index = 0;

	function $message() {
		if ($message.instance !== null) return $message.instance;
		$message.instance = $('#systemTimeScanDialog');
		$message.instance.setText = function (msg) {
			this.find('.c').svg(msg);
		};
		return $message.instance;
	}
	$message.instance = null;

	function isRtspUrl(url) {
		return /^rtsp?:\/\//.test(url);
	}

	var hwPositions = [];

	function shouldSyncHardwareTime(hwPosition) {
		if (hwPositions[hwPositions.length - 1] !== hwPosition) {
			hwPositions.push(hwPosition);
			if (hwPositions.length > 3) {
				hwPositions = hwPositions.slice(hwPositions.length - 3);
			}
		}
		if (hwPositions.length < 3) return false;
		return Math.abs((hwPositions[1] - hwPositions[0]) - (hwPositions[2] - hwPositions[1])) <= 1;
	}

	function MMDune() {
	}

	MMDune.prototype = {
		iAm: 'Dune',
		_syncHardwarePositionTimeoutRef: null,
		syncWithHardwarePosition: function () {
			var workarounds = BS.skinConfiguration.workarounds;
			if (!workarounds.enableDuneHardwarePositionSync) return;

			clearTimeout(this._syncHardwarePositionTimeoutRef);
			hwPositions = [];

			if (this._playMode === 'live' || this._playMode === 'pause') {
				clearTimeout(this._syncHardwarePositionTimeoutRef);
				return;
			}

			var audit = 'Dune MM .syncWithHardwarePosition()';
			(function loop() {
				var currentHWPosition = this.player.currentTime;
				BS.logger.trace('%s currentHWPosition=%s', audit, currentHWPosition);
				var doSync = shouldSyncHardwareTime(currentHWPosition);
				if (doSync) {
					BS.logger.trace(
						'%s hwPositions=[%s] HW Position seems OK, syncing SW position',
						audit,
						hwPositions.join(',')
					);

					BS.MediaManager.prototype.syncWithHardwarePosition.call(this);
					clearTimeout(this._syncHardwarePositionTimeoutRef);

					if (this._playMode === 'trickplay') {
						this._syncHardwarePositionTimeoutRef = setTimeout(loop.bind(this), 100);
					} else {
						hwPositions = [];
						this._syncHardwarePositionTimeoutRef = null;
					}
				} else {
					BS.logger.trace(
						'%s hwPositions=[%s] HW Position does not seem OK',
						audit,
						hwPositions.join(',')
					);
					clearTimeout(this._syncHardwarePositionTimeoutRef);
					this._syncHardwarePositionTimeoutRef = setTimeout(loop.bind(this), 100);
				}
			}.bind(this))();
		},
		_playAsset: function () {
			var args = Array.prototype.slice.call(arguments);
			const workarounds = BS.skinConfiguration.workarounds;
			if (workarounds.enableDuneRTSPSessionFix === true && isRtspUrl(args[0])) {
				BS.logger.trace('Dune MM ._playAsset() Add dune param `rtsp_seek_via_reopen:0`');
				args[0] = args[0] + '|||dune_params|||rtsp_seek_via_reopen:0';
			}
			BS.MediaManager.prototype._playAsset.apply(this, args);
		},
		play: function (startOffset) {
			if (typeof startOffset !== 'undefined') {
				BS.logger.trace('Dune MM .play() Resume before seeking');
				this.player.resumeElement();
			}
			BS.MediaManager.prototype.play.apply(this, arguments);
		}
	};
	BS.MediaManager.extendWith(MMDune);
};
BeeSmart.dune.rxModels = [/(tv102|shima__tv102|shima__tv102v2)/];
BeeSmart.dune.bsModels = ['IP STB Dune HD TV-102'];
BeeSmart.dune.rcKeymap = 'RC Dune';
BeeSmart.CompatibilityManager.addDeviceCompatibility('dune', BeeSmart.dune);

BeeSmart.CompatibilityManager.addDeviceCompatibility('generic', function (BS, q) {
	var rcName = "PC Keyboard";
	function KeyMappingsPC() {
		this.code = rcName;
		this.id = this.code;
		this.description = "Ekioh PC keyboard mappings";

		this['67'] = 'fw';
		this['71'] = 'green';
		this['73'] = 'info';
		this['76'] = this['78'] = this['27'] = 'back';
		this['77'] = 'menu';
		this['79'] = 'power';
		this['80'] = 'reload';
		this['82'] = 'red';
		this['85'] = 'games';
		this['86'] = 'stop';
		this['87'] = 'yellow';
		this['88'] = 'rew';
		this['89'] = 'play';
		this['66'] = 'blue';
		this['69'] = 'epg';
		this['70'] = 'fsTV';
		this['106'] = 'mute';
		this['107'] = 'volup';
		this['109'] = 'voldown';
		this['221'] = this['68'] = this['192'] = 'record';
		this['65'] = 'www';
		this['188'] = 'toBegin';
		this['84'] = 'ttx';
		this['75'] = 'keyboard';

		this['81'] = 'settings';
		this['83'] = 'vod';
		this['90'] = 'fav';
	}
	KeyMappingsPC.code = rcName;
	KeyMappingsPC.prototype = new BS.inputManager.KeyMappingsDefault;
	BS.inputManager.addDeviceKeyMap(KeyMappingsPC);
});

BeeSmart.CompatibilityManager.addDeviceCompatibility('infomir', function infomir(BS, q) {
	var rcName = 'rc infomir';

	function KeyMappingsInfomir() {
		this.code = rcName;

		this['917555'] = 'menu';
		this['917556'] = 'info';
		this['917789'] = 'epg';

		this['917523'] = 'rew';
		this['917520'] = 'play';
		this['917524'] = 'fw';
		this['917522'] = 'stop';
		this['917527'] = 'record';

		this['917552'] = 'chUp';
		this['917553'] = 'chDown';

		this['13'] = this['A13'] = 'ok';
		this['917536'] = 'back';

		this['917504'] = 'red';
		this['917505'] = 'green';
		this['917506'] = 'yellow';
		this['917507'] = 'blue';

		this['917557'] = 'power';
		this['917782'] = 'ttx';

		this['917747'] = 'volup';
		this['917748'] = 'voldown';
		this['917744'] = 'mute';
	}

	KeyMappingsInfomir.code = rcName;
	KeyMappingsInfomir.prototype = new BS.inputManager.KeyMappingsDefault;
	BS.inputManager.addDeviceKeyMap(KeyMappingsInfomir);

	var mediaResolutionSetter = BS.modMgr.getApp('mediaResolutionSetter');
	mediaResolutionSetter.enabled = true;

});

BeeSmart.technotrend = function technotrend(BS) {

	BeeSmart.CompatibilityManager.prototype.hasWebLocalStorageApi = function () {
		return 'localStorage' in window;
	};

	var ttPlugin;

	function embedToSVG() {
		if (ttPlugin)
			return ttPlugin;

		var foreignObj = document.createElement('foreignObject');
		foreignObj.setAttribute('id', 'ttPlugin');
		foreignObj.setAttribute('requiredExtensions', 'application/x-ttplugin');
		foreignObj.setAttribute('hidden', 'true');
		document.documentElement.appendChild(foreignObj);

		ttPlugin = document.getElementById('ttPlugin');
		return ttPlugin;
	}

	ttPlugin = embedToSVG();

	function TTDvbChannelScanner() {
		BS.TvModel.DvbChannelScanner.call(this);
	}
	TTDvbChannelScanner.prototype = {
		get scanResult() {
			try {
				return JSON.parse(ttPlugin.PhoenixDvbScanGetServiceScanResult());
			} catch(e){
				BS.logger.info('TTDvbChannelScanner.scanResult ERROR');
				BS.logger.log(e);
				return {
					listUpdate: 1,
					numVideoServices: 0,
					numAudioServices: 0,
					numNewVideoServices: 0,
					numNewAudioServices: 0
				};
			}
		},
		get totalChannels() {
			var r = this.scanResult;
			return r.numVideoServices + r.numAudioServices;
		},
		startScan: function (statusCallback) {
			var that = this;
			var numberOfChannelsAtStart = that.totalChannels;
			ttPlugin.PhoenixDvbScanStartServiceScan();

			var i = 0;
			var intervalRef = setInterval(function ttScanStatusInterval() {
				var scanActive = ttPlugin.PhoenixDvbScanIsActive();
				if (scanActive && i % 5 === 0) {
					statusCallback.call(that, {
						type: 'scanning',
						foundChannels: that.totalChannels - numberOfChannelsAtStart
					});
				} else if (!scanActive) {
					statusCallback.call(that, {
						type: 'succeeded',
						foundChannels: that.totalChannels - numberOfChannelsAtStart
					});
					clearInterval(intervalRef);
				}
				i++;
			}, 200);
		},
		stopScan: function () {
			ttPlugin.PhoenixDvbScanStopServiceScan();
		},
		get channels () {
			var videoChannelsData = ttPlugin.PhoenixServicesGetServiceList('video', false);
			var audioChannelsData = ttPlugin.PhoenixServicesGetServiceList('audio', false);
			videoChannelsData = videoChannelsData || '[]';
			audioChannelsData = audioChannelsData || '[]';
			var videoChannels = JSON.parse(videoChannelsData);
			var audioChannels = JSON.parse(audioChannelsData);
			return videoChannels.concat(audioChannels).map(function (c, i) {
				return { number: i+1, name: c.name, src: c.url, protocolStack: 'dvbc' };
			});
		},
		clearChannels: function () {
			var videoDeleted = ttPlugin.PhoenixServicesDeleteServices('video');
			var audioDeleted = ttPlugin.PhoenixServicesDeleteServices('audio');
			return videoDeleted && audioDeleted;
		}
	};
	Object.extend(TTDvbChannelScanner, BS.TvModel.DvbChannelScanner);

	function TTDvbTvShowScanner() {
		BS.TvModel.DvbTvShowScanner.call(this);
	}
	TTDvbTvShowScanner.prototype = {
		getForChannel: function (dvbChannel, forDate) {
			var url = dvbChannel.mediaResources.resources[0].src;
			var now = forDate;
			var startTime = new Date(now.getFullYear(), now.getMonth(), now.getDate()).getTime();
			var endTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1).getTime();
			var shows = ttPlugin.PhoenixEPGGetScheduleEvents(
				url, startTime / 1000, endTime / 1000, true
			);
			if (!shows)
				return [];
			shows = JSON.parse(shows);
			return shows.map(function(s) {
				return {
					id: dvbChannel.id * 1e8 - s.eventId,
					channelId: dvbChannel.id,
					title: s.title,
					description: s.description || ' ',
					duration: s.duration / 60,
					start: s.start * 1000,
					ageRating: s.parentalRating
				};
			});
		}
	};
	Object.extend(TTDvbTvShowScanner, BS.TvModel.DvbTvShowScanner);

	ttPlugin.PhoenixEPGEnable(1);

	BS.TvModel.activateDvb(
		new BS.TvModel.DvbProvider(new TTDvbChannelScanner(), new TTDvbTvShowScanner())
	);

	var dvbScanSettingApp = BS.modMgr.getApp('SettDVBChannelScan');
	dvbScanSettingApp.init = function() {
		BS.appMgr.cutOff('liveTv');
		hideUserInterface();
		BS.media._playUrl('dvb://0.0.000');
		BS.TvModel.activeDvbProvider.scanForChannels(function(ev) {
			if (ev.type === 'succeeded') {
				showUserInterface();
				if (ev.foundChannels > 0)
					dvbScanSettingApp.showAlertScanCompleted(ev.foundChannels);
				BS.media.stop();
				dvbScanSettingApp.updateTvLibrary();
			}
		});
	};

	BS.modMgr.getModule('DVB').startScan = function () {
		BS.appMgr.push(dvbScanSettingApp);
	};

	var interfaces = [
		'videoOverlay', 'interfacesHolder', 'mainMenuHolder', 'gamesHolder', 'dialogs_layer0',
		'dialogs_layer1', 'dialogs_layer2', 'dialogs_layer3', 'leftSide', 'rightSide'
	];
	var interfaceShown = true;
	var shownInterfaces = null;

	function hideUserInterface() {
		if (!interfaceShown) return;
		var $interfaces = interfaces
			.map(function (interfaceId) { return $('#' + interfaceId);});
		shownInterfaces = $interfaces
			.filter(function ($interface) {
				return $interface.visible().length > 0;
			});

		$interfaces.forEach(function ($interface) { $interface.hide(); });
		interfaceShown = false;
	}

	function showUserInterface() {
		if (interfaceShown) return;
		shownInterfaces
			.forEach(function ($interface) { $interface.show(); });
		shownInterfaces = null;
		interfaceShown = true;
	}

	BS.CompatibilityManager.prototype.getAcquireSystemTimeTask = function getAcquireSystemTimeTask() {
		var dvbProvider = BS.TvModel.activeDvbProvider;
		var dfr = Q.defer();
		if (this.isTimevalid()) {
			BS.logger.info('KTT.getAcquireSystemTimeTask: time valid, proceed');
			dfr.resolve();
		} else if (dvbProvider.scanCompleted) {
			BS.logger.info('KTT.getAcquireSystemTimeTask: do some channel switching!');
			switchChannelsForSysTime(dvbProvider, dfr);
		} else {
			BS.logger.info('KTT.getAcquireSystemTimeTask: scan pending');
			hideUserInterface();
			BS.media._playUrl('dvb://0.0.000');
			dvbProvider.scanForChannels().then(function () {
				BS.logger.info('KTT.getAcquireSystemTimeTask: scan done');
				showUserInterface();
				switchChannelsForSysTime(dvbProvider, dfr);
			}).done();
		}
		return dfr.promise;
	};

	function switchChannelsForSysTime (dvbProvider, dfr) {
		$('#video').attr('audio-level', '0');
		var chs = dvbProvider.channelScanner.channels;
		playDvb(chs).then(function (result) {
			if (result === false) {
				dfr.reject(new BS.NiceException('KTT.getAcquireSystemTimeTask: no DVB channels '
					+ 'found to acquire clock', 'System time acquisition failed, check the DVB'
					+ ' cables and reset the device.'));
			} else {
				dfr.resolve();
			}
		}).finally(function () {
			$('#video').attr('audio-level', '1');
			BS.media.stop();
		}).done();
	}
	function playDvb(channels) {
		if (!channels[playDvb.index]) return Q(BS.compatibilityManager.isTimevalid());
		BS.media._playUrl(channels[playDvb.index].src);
		playDvb.index++;
		return Q.delay(3e3).then(function () {
			if (playDvb.index > 3) return Q(BS.compatibilityManager.isTimevalid());
			return BS.compatibilityManager.isTimevalid() ? Q(true) : playDvb(channels);
		}.bind(this));
	}
	playDvb.index = 0;

	function KeyMap() {
		this.code = technotrend.rcKeymap;
		this['917553'] = 'chDown';
		this['917552'] = 'chUp';
		this['917776'] = 'epg';
		this['917760'] = this['8'] = 'fsTV';

		this['A13'] = 'ok';
		this['917536'] = 'back';
		this['917555'] = 'menu';
		this['917527'] = 'record';
		this['917556'] = 'info';

		this['917505'] = 'green';
		this['917504'] = 'red';
		this['917506'] = 'yellow';
		this['917507'] = 'blue';

		this['917777'] = 'ttx';

		this['917528'] = 'play';
		this['917523'] = 'rew';
		this['917524'] = 'fw';
		this['917521'] = 'pause';
		this['917522'] = 'stop';

		this['917744'] = 'mute';
		this['917747'] = this['C917747'] = 'volup';
		this['917748'] = this['C917748'] = 'voldown';

		this['917538'] = 'reload';
		this['917557'] = 'power';

		this['917526'] = 'toBegin';
		this['917525'] = 'toEnd';
	}
	KeyMap.code = technotrend.rcKeymap;
	KeyMap.prototype = new BS.inputManager.KeyMappingsDefault();
	BS.inputManager.addDeviceKeyMap(KeyMap);

	var mediaResolutionSetter = BS.modMgr.getApp('mediaResolutionSetter');
	mediaResolutionSetter.enabled = true;


	function MMTechnotrend() {
	}

	MMTechnotrend.prototype = {
		iAm: 'Technotrend',
		_playAsset: function () {
			this._player.setSpeed(1);
			BS.MediaManager.prototype._playAsset.apply(this, arguments);
		},
		_syncHwPositionTimerRef: null,
		pause: function () {
			this.position;
			BS.MediaManager.prototype.pause.apply(this, arguments);
		},
		syncWithHardwarePosition: function () {
			if (this.playMode === 'live') return;
			if (this.playMode === 'trickplay') return;

			if (this.cPlayingUrl.indexOf('pl=nw') !== -1) {
				BS.MediaManager.prototype.syncWithHardwarePosition.call(this);
			} else {
				setTimeout(function () {
					BS.MediaManager.prototype.syncWithHardwarePosition.call(this);
				}.bind(this), 500);
			}
		}
	};
	BS.MediaManager.extendWith(MMTechnotrend);
};

BeeSmart.CompatibilityManager.addDeviceCompatibility('technotrend', BeeSmart.technotrend);
BeeSmart.technotrend.rxModels = [/(IPT8300|IPC8391|IPC9391)/];
BeeSmart.technotrend.bsModels = ['HYB STB TechnoTrend'];
BeeSmart.technotrend.rcKeymap = 'rc technotrend black';

BeeSmart.CompatibilityManager.addDeviceCompatibility('vestel', function (BS) {
	var rcName = "rc vestel";
	function KeyMappingsVestel(){
		this.code = 'rc vestel';
		this['917553'] = 'chDown';
		this['917552'] = 'chUp';
		this['917776'] = 'epg';

		this['A13'] = 'ok';
		this['917536'] = 'back';
		this['917760'] = this['917554'] = 'fsTV';
		this['917555'] = 'menu';
		this['917527'] = 'record';

		this['917505'] = 'green';
		this['917504'] = 'red';
		this['917506'] = 'yellow';
		this['917507'] = 'blue';

		this['8'] = 'delete';
		this['917777'] = 'ttx';

		this['917528'] = this['917520'] = 'play';
		this['917523'] = 'rew';
		this['917524'] = 'fw';
		this['917521'] = 'pause';
		this['917522'] = 'stop';

		this['917744'] = 'mute';
		this['917747'] = this['C917747'] = 'volup';
		this['917748'] = this['C917748'] = 'voldown';

		this['917538'] = 'reload';
		this['917782'] = 'www';
		this['917557'] = 'power';
		this['917556'] = 'info';
		this['917791'] = 'radio';
		this['917778'] = 'vod';
		this['917509'] = 'settings';
		this['917786'] = 'fav';


		this['112'] = 'rew';
		this['113'] = 'fw';
		this['114'] = 'pause';
		this['115'] = 'stop';
		this['117'] = 'play';
		this['118'] = 'www';
		this['119'] = 'games';
		this['120'] = 'ttx';
		this['121'] = 'green';
		this['122'] = 'menu';
		this['123'] = 'keyboard';
		this['34'] = 'chDown';
		this['33'] = 'chUp';
		this['14'] = 'ok';
		this['27'] = 'fsTV';
		this['106'] = 'mute';
		this['107'] = 'volup';
		this['189'] = 'voldown';


	}
	KeyMappingsVestel.code = rcName;
	KeyMappingsVestel.prototype = new BS.inputManager.KeyMappingsDefault();
	BS.inputManager.addDeviceKeyMap(KeyMappingsVestel);

	var mediaResolutionSetter = BS.modMgr.getApp('mediaResolutionSetter');
	mediaResolutionSetter.enabled = true;


	var devType = BS.device.info.deviceTypeDesc.toLowerCase();
	if (devType.indexOf('7350') !== -1){
		mediaResolutionSetter.allVideoModes = [
			'STANDARD_PAL_50HZ',
			'STANDARD_NTSC_60HZ',
			'STANDARD_720P_50HZ',
			'STANDARD_720P_60HZ'
		];
	}


	function MMVestel() {
	}

	MMVestel.prototype = {
		iAm: 'Vestel',
		_playAsset: function () {
			BS.logger.info('VESTEL: Augument _playAsset to support Vestels broken video.start'
				+ ' setter!');
			var offset = parseInt(arguments[1]);
			var startPosition = Math.round(offset/1000) + Math.floor(parseInt(arguments[3]) / 1000);
			BS.MediaManager.prototype._playAsset.apply(this, arguments);
			if (startPosition) {
				BS.media.player.currentTime = startPosition;
			}
		}
	};
	BS.MediaManager.extendWith(MMVestel);

});

BeeSmart.CompatibilityManager.addDeviceCompatibility('zte', function (BS) {
	var rcName = 'RC ZTE';
	function KeyMappingsPC() {
		this.code = rcName;
		this.id = this.code;
		this.description = 'ZTE STB keyboard mappings';

		this['917555'] = 'menu';
		this['917556'] = 'info';
		this['917801'] = 'epg';
		this['917800'] = 'keyboard';

		this['917523'] = 'rew';
		this['917528'] = 'play';
		this['917524'] = 'fw';
		this['917522'] = 'stop';
		this['917527'] = 'record';

		this['917552'] = 'chUp';
		this['917553'] = 'chDown';

		this['13'] = 'ok';
		this['917536'] = 'back';

		this['917504'] = 'red';
		this['917505'] = 'green';
		this['917506'] = 'yellow';
		this['917507'] = 'blue';

		this['917557'] = 'power';
		this['917777'] = 'ttx';

		this['38']	   = 'up';
		this['37']	   = 'left';
		this['39']	   = 'right';
		this['40']	   = 'down';
		this['917760'] = this['917536'] = 'back';

		this['917747'] = 'volup';
		this['917748'] = 'voldown';
		this['917744'] = 'mute';
	}
	KeyMappingsPC.code = rcName;
	KeyMappingsPC.prototype = new BS.inputManager.KeyMappingsDefault;
	BS.inputManager.addDeviceKeyMap(KeyMappingsPC);

	var mediaResolutionSetter = BS.modMgr.getApp('mediaResolutionSetter');
	mediaResolutionSetter.enabled = true;

});

BeeSmart.CompatibilityManager.addDeviceCompatibility('zyxel', function (BS, q) {
	function KeyMappingsZyXEL(){
		this.code = 'rc zyxel';
		this['917553'] = 'chDown';
		this['917552'] = 'chUp';
		this['917776'] = this['921604'] = 'epg';
		this['917527'] = 'record';
		this['921603'] = 'keyboard';

		this['A13'] = 'ok';
		this['917555'] = 'menu';
		this['917760'] = this['917536'] = this['8'] = 'back';
		this['917557'] = 'power';


		this['917505'] = 'green';
		this['917504'] = 'red';
		this['917506'] = 'yellow';
		this['917507'] = 'blue';

		this['917744'] = this['C917744'] = 'mute';
		this['917747'] = this['C917747'] = 'volup';
		this['917748'] = this['C917748'] = 'voldown';

		this['917520'] = 'play';
		this['917528'] = 'pause';
		this['917523'] = 'rew';
		this['917524'] = 'fw';
		this['A917525'] = this['917525'] = 'toBegin';
		this['A917526'] = this['917526'] = 'toEnd';
		this['917522'] = this['917509']  = 'stop';

		this['917508'] = 'vod';
		this['917583'] = 'reload';
		this['36'] = 'fsTV';
		this['917777'] = 'ttx';


		this['917556'] = 'info';
	}
	KeyMappingsZyXEL.code = 'rc zyxel';
	KeyMappingsZyXEL.prototype = new BS.inputManager.KeyMappingsDefault();

	function KeyMappingsZyxelRCTech4Home(){
		this.code = 'rc zyxel tech4home';

		this['38']	   = 'up';
		this['37']	   = 'left';
		this['39']	   = 'right';
		this['40']	   = 'down';

		this['917552'] = 'chUp';
		this['917553'] = 'chDown';
		this['917776'] = 'epg';
		this['917527'] = 'record';
		this['921605'] = 'select';

		this['13'] = 'ok';
		this['917555'] = 'menu';
		this['917557'] = 'power';

		this['917505'] = 'green';
		this['917504'] = 'red';
		this['917506'] = 'yellow';
		this['917507'] = 'blue';
		this['921603'] = 'keyboard';

		this['917744'] = 'mute';
		this['917747'] = 'volup';
		this['917748'] = 'voldown';

		this['917520'] = 'play';
		this['917528'] = 'pause';
		this['917523'] = 'rew';
		this['917524'] = 'fw';
		this['917522'] = 'stop';
		this['36'] = 'fsTV';

		this['917556'] = 'info';
		this['917777'] = 'ttx';

		this['917508'] = 'vod';
		this['917536'] = this['917760'] = 'back';

		this['917784'] = 'dvr';
		this['921602'] = 'back';
		this['6'] = 'help';
		this['921607'] = 'settings';
		this['917778'] = 'vod';
	}
	KeyMappingsZyxelRCTech4Home.code = 'rc zyxel tech4home';
	KeyMappingsZyxelRCTech4Home.prototype = new BS.inputManager.KeyMappingsDefault();

	if (BS.device.info.deviceTypeDesc.match(/Tech4Home/i) !== null) {
		BS.logger.info('Using Zyxel Tech4Home RC');
		BS.inputManager.addDeviceKeyMap(KeyMappingsZyxelRCTech4Home);
	} else {
		BS.logger.info('Using Zyxel RC');
		BS.inputManager.addDeviceKeyMap(KeyMappingsZyXEL);
	}

	function MMZyxelSeekToStartAndRewFromLiveTvWorkarounds() {}
	MMZyxelSeekToStartAndRewFromLiveTvWorkarounds.prototype = {
		iAm: 'ZyXEL NMD-2106 or ZyXEL STB-2101H',
		play: function () {
			var startOffset = Math.floor(arguments[0] / 1000);
			BS.logger.trace('Zyxel MMWorkarounds .play(%d)', startOffset);
			var args = [].slice.call(arguments);
			if (startOffset === 0) {
				BS.logger.trace(
					'Zyxel NMD-2106 .play(%d) Cannot jump to position 0s, ' +
					'jumping to 1s instead',
					startOffset
				);
				args[0] = 1000;
			}
			BS.MediaManager.prototype.play.apply(this, args);
		},
		eventDispatcher: function (nativeEvent) {
			BS.logger.trace('Zyxel MMWorkarounds .eventDispatcher({type:"%s")', nativeEvent.type);
			var args = arguments;
			if (BS.appMgr.isLoaded('vodPlayer') && nativeEvent.type === 'play') {
				var vodPlayer = BS.modMgr.getApp('vodPlayer');
				if (vodPlayer.options.startWithRewTrickplay) {
					setTimeout(function () {
						BS.MediaManager.prototype.eventDispatcher.apply(this, args);
					}.bind(this), 0);
				} else {
					BS.MediaManager.prototype.eventDispatcher.apply(this, args);
				}
			} else {
				BS.MediaManager.prototype.eventDispatcher.apply(this, args);
			}
		}
	};

	if (
		BS.device.getModel().indexOf('NMD-2106') !== -1 ||
		BS.device.getModel().indexOf('STB-2101H')
	) {
		BS.MediaManager.extendWith(MMZyxelSeekToStartAndRewFromLiveTvWorkarounds);
	}

	BS.modMgr.getApp('mediaResolutionSetter').enabled = true;

	BS.device.performanceIndex = BS.device.consts.performance.MIN;
});


(function (BS, q) {
	BS._confStorage = {};

	var _urlHash = location.href.indexOf('?') === -1 ?
			location.href.split('#') : location.href.split('?'),
		_urlPairs = [],
		_urlPairKey,
		_urlPairValue
	;

	function wasOverridenByUrl(key) {
		for (var i in _urlPairs) {
			var keySetByUrl = _urlPairs[i].split('=')[0].toLowerCase();
			if (key.toLowerCase().indexOf(keySetByUrl) !== -1) {
				return true;
			}
		}
		return false;
	}


	function ConfigurationManager() {
		var _length = 0;
		var dfrAvailable = q.defer();
		this.__defineGetter__('isLoaded', function () {
			return _length > 0;
		});

		this.get = function (key) {
			key = key.toLowerCase();
			if (!key)
				throw new Error('CONF:Option key must be defined propery');

			if (key in BS._confStorage)
				return BS._confStorage[key].value;
			else
				throw new Error('CONF:Option `' + key + '` does not exist!');
		};

		this.exists = function (key) {
			key = key.toLowerCase();
			return key in BS._confStorage;
		};

		this.getObject = function (key) {
			key = key.toLowerCase();
			if (!key)
				throw new Error('CONF:Option key must be defined propery');

			if (key in BS._confStorage)
				return Object.clone(BS._confStorage[key]);
			else
				throw new Error('CONF:Option `' + key + '` does not exist!');
		};

		this.readOnly = function (key) {
			key = key.toLowerCase();
			return BS._confStorage[key].readOnly;
		};


		var _set = function (key, value, readOnly, source, origValue) {
			readOnly = typeof readOnly === undefined ? true : readOnly;
			key = key.toLowerCase();
			if (!key || typeof value === 'undefined')
				throw new Error('CONF:Option (' + key
					+ ') and coresponding value must be specified');

			if (key in BS._confStorage && BS._confStorage[key].readOnly) {
				BS.logger.debug('CONF:Option (' + key
					+ ') already exists and it`s only for reading');
				return null;
			}

			_length++;
			BS._confStorage[key] = {
				value: value,
				originalValue: typeof origValue === 'undefined' ? value : origValue,
				readOnly: readOnly,
				source: source,
				equals: function (toCmpWith) {
					var me = this.value, i, len;
					if (me instanceof Array) {
						if (toCmpWith.length !== me.length)
							return false;
						for (i = 0, len = toCmpWith.length; i < len; i++) {
							if (toCmpWith[i] !== me[i])
								return false;
						}
						return true;
					} else if (me instanceof Object) {
						for (i in toCmpWith)
							if (toCmpWith[i] !== me[i])
								return false;
						return true;
					} else {
						return me === toCmpWith;
					}
				}
			};
		};


		this.setFromClient = function (key, value, readOnly) {

			_set(key, value, readOnly, 'client');
		};

		this.setFromServer = function (key, value) {

			if (value.match(/^\[.*\]$/)) {
				var quotes = value.match(/['"]/g);
				if (quotes) {
					value = value.replace(/'/g, '"');
				} else {
					value = value.replace(/[^\[\],]+/g, '"$&"');
				}
			}

			if (value === null || value === '') {
				BS.logger.debug('skipping configuration key set from server, since no value' +
					' defined for key ' + key);
				return;
			}
			_set(key, this.parse(value), false, 'server', value);
		};


		var rx1 = /^['"\[\{]/,
			rx2 = /^0+(?!\.)/
		;

		this.parse = function (value) {
			try {
				if (value instanceof Array)
					return value;
				if (value.match(rx1))
					return JSON.parse(value);

				switch (value.toLowerCase()) {
				case 'true':
					return true;
				case 'false':
					return false;
				case 'null':
					return null;
				}
				if (value.match(rx2) && value !== '0') {
					return value;

				} else {
					var numValue = parseFloat(value);
					return isNaN(numValue) ? value : numValue;
				}
			} catch (e) {
				BS.logger.debug('error parsing ' + value + ' ' + e);
			}
			return null;
		};

		function _ConfigChangeEvent(changedConfigs) {
			var ev = this;
			ev.updated = function (key) {
				for (var i in ev.value) {
					var cKey = i.toLowerCase();
					if (cKey === key.toLowerCase())
						return true;
				}
				return false;
			};
			ev.defaultAction = function () {};
			ev.type = 'ConfigChangeEvent';
			ev.value = changedConfigs || null;
			ev.handler = 'onConfigChange';
			ev.description = 'New configuration keys pack';
		}

		_ConfigChangeEvent.prototype = new BS.Event();
		this.ConfigChangeEvent = _ConfigChangeEvent;

		this.processConfigObject = function (conf) {
			var confs = {}, isSomethingNew = false, report = [];

			for (var i in conf) {
				try {
					var cConfKey = i.toLowerCase();
					var newConfValue = conf[i];
					var prevCfgValue = BS._confStorage[cConfKey];

					if (wasOverridenByUrl(cConfKey)) {
						continue;
					}
					if (!(cConfKey in BS._confStorage))
						BS.logger.debug('CONFIGURATION WARNING: client doesn\'t have default setting for `%s` and server returned value `%s`'.sprintf(cConfKey, newConfValue));

					BS.config.setFromServer(cConfKey, newConfValue);
					if (prevCfgValue !== newConfValue) {
						confs[i] = {
							oldValue: prevCfgValue,
							newValue: newConfValue
						};
						isSomethingNew = true;
					}

					report.push('%s > %s%s'.sprintf(i, BS.config.get(i),
						(BS.logger.isGreaterThanDebug() ?
							' [%s] %s'.sprintf(typeof BS.config.get(i), conf[i]) : '')));

				} catch (ex) {
					if (ex.name === 'parse-invalid-value')
						BS.logger.debug('CONF: WARNING:' + i + ' encountered ' + ex.message);
				}
			}
			BS.logger.debug('CONF:\n' + report.join(',\n'));

			if (isSomethingNew)
				BS.evMgr.dispatch(new BS.config.ConfigChangeEvent(confs));

			if (dfrAvailable.state !== 'fulfilled')
				dfrAvailable.resolve(BS.config);
		};


		this.getInstanceAvailabilityPromise = function(){
			return dfrAvailable.promise;
		};

		BS.evMgr.bind('onConfigurationChanged', function () {
			var resVer = BS.resourceDataVersions.configuration;
			var dataObj = {};
			if (resVer) {
				dataObj.v = resVer;
			}
			BS.request.Get('/restapi/rest/%d/system/configuration'.sprintf(BS.portal.user.regionId), {
				data: dataObj
			}).then(function(response) {
				BS.config.processConfigObject(response.data);
			}).done();
		});
	}

	BS.config = new ConfigurationManager();

	BS.config.setFromClient('Core.Client.DEFAULT_MAC', '111111222222', false);
	BS.config.setFromClient('Core.Client.LOG_LEVEL', 'trace', false);
	BS.config.setFromClient('Core.Client.TIME_FORMAT', null, false);
	BS.config.setFromClient('Core.Client.DATE_FORMAT', null, false);

	if (_urlHash[1] && _urlHash[1].indexOf('=') !== -1) {
		_urlHash[1] = _urlHash[1].replace(/[;&]\s*$/, '');
		_urlHash[1] = unescape(_urlHash[1]);
		_urlPairs = _urlHash[1].split(/[;&]/);

		for (var i = 0; i < _urlPairs.length; i++) {
			var _urlTemp = _urlPairs[i].split('=');
			if (_urlTemp.length !== 2) {
				alert('ERROR: Won`t acknowledge URL configuration setting >' + _urlPairs[i] + '<');
				continue;
			}
			_urlPairKey = _urlTemp[0].replace(/\s+/g, '');

			if (_urlPairKey.match(/time_format/i) !== null) {
				alert('[WARN] TIME_FORMAT override should not be used in production environment.');
			}
			if (_urlPairKey.match(/date_format/i) !== null) {
				alert('[WARN] DATE_FORMAT override should not be used in production environment.');
			}

			_urlPairValue = _urlTemp[1];
			BS.config.setFromClient('Core.Client.' + _urlPairKey, _urlPairValue);
		}
	}

	BS.logger.changeLogLevel(BS.config.get('Core.Client.LOG_LEVEL'));


	BS.config.setFromClient('Core.Client.CONSUMER_KEY', 'xqtmdcqjl1pr2gn0em3a5qbafc5x8rfn', false);
	BS.config.setFromClient('Core.Client.CONSUMER_SECRET', 't9ygdykjfhtxhkjgxcje99bc2yjm357e',
		false);

	BS.config.setFromClient('Core.Client.DEFAULT_MODULE_ID', 'Tv', false);

	BS.config.setFromClient('User.MAX_PIN_SIZE', 8, false);
	BS.config.setFromClient('User.MIN_PIN_SIZE', 4, false);
	BS.config.setFromClient('Core.Client.Pin.MAX_FAILED_ATTEMPTS', 5, false);

	BS.config.setFromClient('Core.Client.DEFAULT_SYSTEM_PIN', '0000', false);


	BS.config.setFromClient('Core.Client.STREAM_FALLBACK_ENABLED', false, false);
	BS.config.setFromClient('Core.Client.CONTENT_FALLBACK_ENABLED', true, false);

	BS.config.setFromClient('Core.Client.FRESH_CONTENT_INTERVAL', 6 * 3600 * 1000, false);
	BS.config.setFromClient('Core.Client.FRESH_CONTENT_START', 3 * 3600 * 1000, false);

	BS.config.setFromClient('Epg.Client.MAX_DAYS_OFFSET', 10, false);
	BS.config.setFromClient('Core.Client.REMINDER_AUTO_SWITCH_TIME', 10, false);

	BS.config.setFromClient('Content.Recording.CONFIRM_DIALOG_ON_INSTANT_RECORDING', false, false);
	BS.config.setFromClient('Content.Recording.EPISODE_ADOPTION_ENABLED', false, false);
	BS.config.setFromClient('Content.Recording.SERIES_RECORDING_DEFAULT_WINDOWS_SIZE', false,
		false);

	BS.config.setFromClient('Core.Client.Recording.PRE_RECORDING_MARGIN', 10, false);
	BS.config.setFromClient('Core.Client.Recording.POST_RECORDING_MARGIN', 5, false);

	BS.config.setFromClient('Vod.MAX_BOOKMARKS_PER_CONTENT', 5, false);
	BS.config.setFromClient('Core.Client.PC_CHANNEL_POLICY', 0, false);
	BS.config.setFromClient('Core.Client.CHANNEL_ZAPPING_PRICING_POLICY', 1, false);
	BS.config.setFromClient('Purchase.Client.CH_PURCHASE_ENABLED', true, false);
	BS.config.setFromClient('Drm.Client.STREAM_UNLOCK_DELAY', 2, false);
	BS.config.setFromClient('Core.Client.DEFAULT_VOLUME', 30, false);

	BS.config.setFromClient('Core.Client.LiveTv.PREVIEW_REPEAT_DELAY', 120, false);

	BS.config.setFromClient('Core.Client.INITIAL_CHANNEL', -1, false);

	BS.config.setFromClient('Core.Statistics.ENABLED', false, false);
	BS.config.setFromClient('Core.Statistics.MAX_EVENTS_TO_SEND', 100, false);

	BS.config.setFromClient('Billing.BILLING_SERVICE_AVAILABLE', ['all', 'vod', 'livetv', 'store'],
		false);

	BS.config.setFromClient('Core.Client.PARENTAL_UNLOCK_DURATION', 10, false);
	BS.config.setFromClient('Core.Client.USE_FALLBACK_FIRST_SUBTITLE', false, false);

	BS.config.setFromClient('Msgpush.Poll.REQUEST_TIMEOUT', 55, false);
	BS.config.setFromClient('Msgpush.Nginxstream.Client.PING_INTERVAL', 60, false);
	BS.config.setFromClient('Msgpush.Client.MESSAGING_RESTART_MAX_DELAY', 600, false);

	BS.config.setFromClient('Core.Client.Pin.LOCK_PERIOD', 3, false);
	BS.config.setFromClient('Core.Client.Late_provisioning.MAX_RETRIES', 5, false);
	BS.config.setFromClient('Core.Client.Pin.LOCK_PERIOD', 30, false);

	BS.config.setFromClient('Core.Client.Vod.NEW_MOVIES_MARK_HOURS', 24, false);
	BS.config.setFromClient('Core.Client.RESUME_PLAYOUT_POPUP_ENABLED', true, false);
	BS.config.setFromClient('Content.Recording.EARLY_AVAILABILITY_DELAY', 30, false);
	BS.config.setFromClient('Core.Client.Vod.FAVORITES_CATEGORY_ENABLED', true, false);
	BS.config.setFromClient('Core.Client.Vod.MOST_PURCHASED_CATEGORY_ENABLED', true, false);
	BS.config.setFromClient('Core.Client.Vod.MOST_WATCHED_CATEGORY_ENABLED', true, false);

	BS.config.setFromClient('Core.Client.Livetv.CURRENTLY_MOST_WATCHED_CATEGORY_ENABLED', true,
		false);
	BS.config.setFromClient('Core.Client.Livetv.CURRENTLY_MOST_LISTENED_CATEGORY_ENABLED', true,
		false);

	BS.config.setFromClient('Core.Client.SLEEP_TIMER_MINUTES', 120, false);
	BS.config.setFromClient('oauth.consumers.HOME_GROUP_TOTAL_DEVICE_LIMIT', 1, false);
	BS.config.setFromClient('core.client.livetv.USER_CHANNEL_RENAMING_ENABLED', false, false);
	BS.config.setFromClient('core.client.livetv.USER_CHANNEL_RENUMBERING_ENABLED', false, false);




})(BeeSmart, Q);



(function(BS) {
	function LRUCache(capacity) {
		this._capacity = capacity;
		this._start = null;
		this._end = null;
		this._size = 0;
		this._hashTable = {};
	}

	LRUCache.prototype = {
		onRemove: BS.F,
		onClear: BS.F,
		get size() {
			return this._size;
		},
		get capacity() {
			return this._capacity;
		},
		set capacity(value) {
			this._capacity = value;
		},
		_moveToStart: function(element) {
			if (!this._start) {
				this._start = element;
				this._end = element;
				return;
			}

			if (this._start.key === element.key)
				return;

			var prev = element.prev;
			var next = element.next;

			var start = this._start;
			start.prev = element;
			element.next = start;
			this._start = element;
			element.prev = null;

			if (prev) {
				prev.next = next;
				if (!next) {
					this._end = prev;
				} else {
					next.prev = prev;
				}
			}
		},
		get: function(key) {
			var el = this._hashTable[key];
			if (el && Date.now() < el.expires) {
				this._moveToStart(el);
				return {
					key: key,
					expires: el.expires,
					size: el.size
				};
			} else if (el) {
				this.clean();
			}
		},
		remove: function(key) {
			BS.logger.debug('LRU CACHE REPO :: Removing key=%s', key);
			var el = this._hashTable[key];
			if (!el)
				return;
			var prev = el.prev;
			var next = el.next;
			if (prev) {
				prev.next = next;
				if (!next) {
					this._end = prev;
				} else {
					next.prev = prev;
				}
			}
			el.next = null;
			el.prev = null;
			delete this._hashTable[key];
			this._size -= el.size;
			this.onRemove(key);
		},
		put: function(key, size, expires) {
			var el = this._hashTable[key];
			if (el) {
				el.expires = expires;
				if (el.size !== size) {
					this._size += size - el.size;
					el.size = size;
				}
				this._moveToStart(el);

			} else {
				el = this._elementFactory(key, size, expires);
				this._moveToStart(el);
				this._hashTable[key] = el;
				this._size += size;
			}

			if (this.size > this._capacity) {
				BS.logger.trace('LRU CACHE REPO :: Over capacity :: %d/%d',
					this.size, this.capacity);
				this.clean();
			}
		},
		_elementFactory: function(key, size, expires) {
			return {
				next: null,
				prev: null,
				key: key,
				size: size,
				expires: expires
			};
		},
		clean: function() {
			var p = this._end;
			while(p && (this.size > this.capacity || p.expires < Date.now())) {
				var key = p.key;
				var prev = p.prev;
				this.remove(key);
				p = prev;
				BS.logger.trace('LRU CACHE SIZE :: %d / %d'.sprintf(this.size, this.capacity));
			}
		},
		clear: function() {
			this._hashTable = {};
			this._size = 0;
			this._start = null;
			this._end = null;
			this.onClear();
		},
		debug: function(verbose) {
			var p = this._start;
			BS.logger.debug('LRU CACHE SIZE :: %d / %d'.sprintf(this.size, this.capacity));
			var output = [];
			while(p && verbose) {
				output.push('%s (%s,%s)'
					.sprintf(p.key, p.prev ? p.prev.key : '-', p.next ? p.next.key : '-'));
				p = p.next;
			}
			if (output.length)
				BS.logger.debug(output.join(' --> '));
			else
				BS.logger.debug('LRU Cache Repository is EMPTY');
		}
	};

	if (!BeeSmart.repositorySupertypes)
		BeeSmart.repositorySupertypes = {};
	BeeSmart.repositorySupertypes.LRUCache = LRUCache;

})(BeeSmart);


'use strict';
(function (BS, DelaysSeries, q, OAuth, setTimeout, clearTimeout, portal) {
	var moduleName = 'requester';
	var portalUrl = '/stb/';
	var legacyGwURL = '/stb/legacy-gateway/';
	var info = function () {
		arguments[0] = moduleName.toUpperCase() + ':' + arguments[0];
		BS.logger.info.apply(this, arguments);
	};
	var trace = function () {
		arguments[0] = moduleName.toUpperCase() + ':' + arguments[0];
		BS.logger.trace.apply(this, arguments);
	};
	var debug = function () {
		arguments[0] = moduleName.toUpperCase() + ':' + arguments[0];
		BS.logger.debug.apply(this, arguments);
	};

	function RequestEvent(responseResult) {
		if (!(responseResult instanceof Result))
			throw 'invalid-argument-provided';
		var ev = this;
		ev.type = 'RequestEvent';
		ev.data = responseResult;
		ev.handler = responseResult.success ? 'onRequestSuccess' : 'onRequestError';
		ev.description = '';
		if (!responseResult.success && responseResult.url) {
			debug('Failed request url: ' + responseResult.url);
		}
	}

	RequestEvent.prototype = new BS.Event();

	function RequestManager(locationHref) {
		this.locationHref = locationHref;
	}

	RequestManager.prototype = {
		get: function (servicePath, callback, serviceArgs) {
			var servicePathParts = servicePath.split('/');

			if (!servicePathParts[0] || !servicePathParts[1])
				throw 'Error in serviceGetter. \'servicePath\' should be as \'serviceBean/method\'';

			var url = legacyGwURL + servicePath,
				postData = {}
				;
			serviceArgs = serviceArgs || [];

			for (var i = 0; i < serviceArgs.length; i++)
				postData['arg' + i] = serviceArgs[i];

			this.Get(url, {'data': postData}).complete(function (result) {
				var isDataEmpty = result.data.constructor === ({}).constructor;
				var s = result.success && !(isDataEmpty && 'errors' in result.data);
				callback(
					s,
					isDataEmpty && ('errors' in result.data) ? result.data : result.data.result
				);
			});
		},

		getFile: function (filePath, callback, timeout, type) {
			var url = portalUrl + filePath;
			this.Get(url, {'accept': type || 'svg', 'timeout': timeout})
				.complete(function (result) {
					callback(result.success, result.data);
				});
		},

		getFileFullPath: function (filePath, callback, timeout, type) {
			this.Get(filePath, {'accept': type || 'text', 'timeout': timeout})
				.complete(function (result) {
					callback(result.success, result.data);
				});
		},

		getScript: function (url, callback, timeout) {
			var dfr = q.defer();
			callback = callback || function () {
			};
			BS.logger.debug('Script getter: ' + url);

			var scripts = document.getElementById('scripts') || document.documentElement,
				newScript = document.createElementNS(NS.svg, 'script');

			newScript.addEventListener('load', function () {
				if (timeout) {
					clearTimeout(timeout);
					timeout = null;
				}
				dfr.resolve();
				callback(true);
			}, false);

			if (timeout && typeof timeout === 'number') {
				timeout = setTimeout(function () {
					callback(false);
					dfr.reject('Script load `%s` timeouted!'.sprintf(url));
				}, timeout);
			} else
				timeout = false;

			newScript.setAttributeNS(NS.xlink, 'href', url);
			scripts.appendChild(newScript);
			return dfr.promise;
		},


		_accessPair: null,
		_consumerPair: null,
		_userPair: null,
		getAccessPair: function () {
			return this._accessPair;
		},
		sign: function (consumerPair, userToken) {
			this._accessPair = new REST.AccessPairs(consumerPair, userToken);
			this._consumerPair = consumerPair;
		},

		unsignPrivate: function () {
			if (!this._consumerPair) {
				return;
			}
			this._accessPair = REST.AccessPairs(this._consumerPair, null);
		},

		unsign: function () {
			this._accessPair = null;
			this._consumerPair = null;
		},
		translate: function (url) {
			return BS.portal.isEmbedded
				? this.translateToEmbedded(url)
				: url;
		},
		translateToEmbedded: function (url) {
			return ('' + this.locationHref).replace(
				/\/(:?index|colibry)\.svg/,
				'/data/' + url.replace(/\//g, '.').substring(1)
			);
		},
		locationHref: null,
		Result: Result
	};


	var toString = Object.prototype.toString;
	var hasOwn = Object.prototype.hasOwnProperty;
	var class2type = [];
	var r20 = /%20/g, rbracket = /\[\]$/, rdigit = /\d/;


	var jQueries = {
		type: function (obj) {
			return obj === null ? String(obj) : class2type[toString.call(obj)] || 'object';
		},
		isArray: Array.isArray || function (obj) {
			return jQueries.type(obj) === 'array';
		},
		isWindow: function (obj) {
			return obj && typeof obj === 'object' && 'setInterval' in obj;
		},
		isNumeric: function (obj) {
			return obj !== null && rdigit.test(obj) && !isNaN(obj);
		},
		isPlainObject: function (obj) {
			if (!obj || jQueries.type(obj) !== 'object' || obj.nodeType || jQueries.isWindow(obj)) {
				return false;
			}
			try {
				if (obj.constructor && !hasOwn.call(obj,
					'constructor') && !hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
					return false;
				}
			} catch (e) {
				return false;
			}

			var key;
			for (key in obj) {
			}

			return key === undefined || hasOwn.call(obj, key);
		},
		each: function (object, callback, args) {
			var name, i = 0,
				length = object.length,
				isObj = length === undefined || jQueries.isFunction(object);

			if (args) {
				if (isObj) {
					for (name in object) {
						if (callback.apply(object[name], args) === false) {
							break;
						}
					}
				} else {
					for (; i < length;) {
						if (callback.apply(object[i++], args) === false) {
							break;
						}
					}
				}

			} else {
				if (isObj) {
					for (name in object) {
						if (callback.call(object[name], name, object[name]) === false) {
							break;
						}
					}
				} else {
					for (; i < length;) {
						if (callback.call(object[i], i, object[i++]) === false) {
							break;
						}
					}
				}
			}

			return object;
		},
		isFunction: function (obj) {
			return jQueries.type(obj) === 'function';
		}
	};

	jQueries.extend = function () {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[0] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		if (typeof target === 'boolean') {
			deep = target;
			target = arguments[1] || {};
			i = 2;
		}

		if (typeof target !== 'object' && !jQueries.isFunction(target)) {
			target = {};
		}

		if (length === i) {
			target = this;
			--i;
		}

		for (; i < length; i++) {
			if ((options = arguments[i]) !== null) {
				for (name in options) {
					src = target[name];
					copy = options[name];

					if (target === copy) {
						continue;
					}

					if (deep && copy && (jQueries.isPlainObject(copy)
						|| (copyIsArray = jQueries.isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && jQueries.isArray(src) ? src : [];

						} else {
							clone = src && jQueries.isPlainObject(src) ? src : {};
						}

						target[name] = jQueries.extend(deep, clone, copy);

					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		return target;
	};

	jQueries.each('Boolean Number String Function Array Date RegExp Object'.split(' '),
		function (i, name) {
			class2type['[object ' + name + ']'] = name.toLowerCase();
		});


	jQueries.param = function (a, traditional) {
		var s = [],
			add = function (key, value) {
				value = jQueries.isFunction(value) ? value() : value;
				s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value);
			};
		if (jQueries.isArray(a) || (a.jQueries && !jQueries.isPlainObject(a))) {
			jQueries.each(a, function () {
				add(this.name, this.value);
			});
		} else {
			for (var prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}
		return s.join('&');
	};


	function buildParams(prefix, obj, traditional, add) {
		if (jQueries.isArray(obj)) {
			jQueries.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {
					add(prefix, v);
				} else {
					buildParams(prefix + '[' + (typeof v === 'object'
							|| jQueries.isArray(v) ? i : '') + ']',
						v, traditional, add);
				}
			});

		} else if (!traditional && obj !== null && typeof obj === 'object') {
			for (var name in obj) {
				buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
			}
		} else {
			add(prefix, obj);
		}
	}

	function Result(data, status, statusText, httpHeaders, url, forceMime) {
		if (200 === status || 201 === status || 204 === status || 304 === status || 0 === status)
			this.success = true;

		if (304 === status) {
			this.type = 'text';
		} else if (data !== null && data !== '') {
			this.plainData = data;
			this.type = forceMime || (httpHeaders ? this.guessContentType(httpHeaders) : 'text');
			switch (this.type) {
			case 'json':
				if (data.length === 4 && data === 'null')
					throw 'invalid-json-null';
				data = JSON.parse(data);
				break;
			case 'svg':
				data = $._parseSvg(data);
				break;
			default:
				break;
			}
		}

		this.status = ~~status;
		this.statusText = statusText;
		this.data = data;
		this.url = url;
		this.headers = httpHeaders;
		var importantHeaders = ['date', 'content-type', 'cache-control', 'last-modified', 'etag'];
		if (typeof this.headers === 'object') {
			Object.eachKey(this.headers, function (key) {
				if (importantHeaders.indexOf(key.toLowerCase()) === -1)
					delete this[key];
				if (key === 'content-type' || key === 'cache-control')
					this[key] = this[key].cache().toString();
			});
		}
	}
	Result.prototype = {
		'success': false,
		'status': 0,
		'statusText': '',
		'data': '',
		'plainData': '',
		'type': '',
		'url': '',
		'cacheKey': null,
		'cacheExpires': null,
		get lastModified() {
			return new Date(new Date(this.headers['last-modified']).getTime()).getTime();
		},
		get id () {
			return this.cacheKey;
		},
		isStatusDisconnected: function () { return [408, 502, 503].indexOf(this.status) !== -1; },
		'headers': null,
		'acceptedMimes': {
			'json': [
				undefined,
				'application/json',
				'application/vnd.beesmart+json',
				'application/vnd.beesmart+json;version=6',
				'application/vnd.beesmart+json;version=7'
			],
			'svg': ['image/svg+xml'],
			'text': ['text/plain']
		},
		guessContentType: function (httpHeaders) {
			var contType;
			var that = this;
			var cType = 'text';
			contType = (that.extractHeader.call({headers: httpHeaders}, 'Content-Type') || '')
				.toLowerCase().replace(/\s*;?\s*charset=[a-z0-9-]+/i, '');
			if (!contType)
				return cType;

			for (var type in that.acceptedMimes)
				if (that.acceptedMimes[type].indexOf(contType) !== -1)
					cType = type;

			return cType;
		},
		extractHeader: function (headerName) {
			return this.headers[headerName.toLocaleLowerCase()];
		},
		serialize: function () {
			return {
				'data': (this.plainData || '').replace(/[(){}]{1}/g, function (a) {
					var m = {'(': '\u2000', ')': '\u2001', '{': '\u2003', '}': '\u2004'};
					return m[a];
				}),
				'type': this.type,
				'status': this.status,
				'statusText': this.statusText,
				'url': this.url,
				'headers': this.headers
			};
		},
		deserialize: function (dto, noCachedData) {
			var result = new Result(
					noCachedData === true ? '' :
					dto.data.replace(/[\u2000\u2001\u2003\u2004]{1}/g, function (a) {
						var m = {'\u2000': '(', '\u2001': ')', '\u2003': '{', '\u2004': '}'};
						return m[a];
					}),
				dto.status,
				dto.statusText,
				dto.headers,
				dto.url,
				dto.type
			);
			result.cacheKey = REST.makeCacheKey(result.url);
			return result;
		},
		toString: function (verbose) {
			return 'Result|HTTP%d@%s [%s] (size %d)%s'.sprintf(
				this.status,
				this.url,
				this.type,
				this.plainData ? this.plainData.length : 0,
				verbose ? '\n' + JSON.stringify(this.data, undefined, '\t') : ''
			);
		}
	};


	var httpMethods = ['get', 'post', 'delete', 'put'];
	var RESTReqOptions = {
		'method': 'GET',
		'data': null,
		'accept': null,
		'cache': null,
		'fsOnly': null,
		'location': {protocol: null, host: null, href: null},
		'headers': {},
		'timeout': 20e3,
		'access': null,
		'streamed': false,
		'retry': false,
		'retryInfinite': false,
		'retrySeries': [Math.round(60 * Math.random()) * 1e3, 2 * 60e3, 5 * 60e3, 30 * 60e3,
				60 * 60e3
		],
		'retryIteration': 0,
		'preventEvent': null,
		'_inRetryLoop': true,
		'_delays': null,
		'_callbacks': null,
		'_dfr': null,
		'noCachedData': false
	};

	var urlCacheKeyMap = {};
	var REST = {
		MAC: null,
		makeCacheKey: function makeCacheKey(url) {
			if (url in urlCacheKeyMap)
				return urlCacheKeyMap[url];
			var urqlquery = url.split('?')[1];
			if (!urqlquery)
				return url;

			var cacheKey = url.replace(/(\?.*)$/, '?') + urqlquery
				.match(/([^?=&]+)(=([^&]*))?/g).sort(function (a, b) {
					return a > b ? 1 : (a < b ? -1 : 0);
				}).join('&');

			urlCacheKeyMap[url] = cacheKey;
			return cacheKey;
		},
		isRequestSuccessfull: function isRequestSuccessfull(status) {
			return [200, 201, 202, 204, 304].indexOf(status) !== -1;
		},
		parseHeaders: function parseHeaders(headers) {
			if (typeof headers !== 'string' && !(headers instanceof String)){
				return {
					date: new Date().toString()
				};
			}

			var m;
			var rx = /^([^:]*): *(.*)$/gm;
			var parsedHeaders = {};
			while (m = rx.exec(headers)) {
				var key = m[1].toLowerCase().replace('\u000a', '');
				var val = m[2];
				switch (key) {
				default :
					parsedHeaders[key] = val;
					break;
				}
			}

			return parsedHeaders;
		},
		parseCacheControl: function (field) {
			if (!field) {
				return null;
			}
			var regex = /(?:^|(?:\s*\,\s*))([^\x00-\x20\(\)<>@\,;\:\\"\/\[\]\?\=\{\}\x7F]+)(?:\=(?:([^\x00-\x20\(\)<>@\,;\:\\"\/\[\]\?\=\{\}\x7F]+)|(?:\"((?:[^"\\]|\\.)*)\")))?/g;
			var header = {};
			var err = field.replace(regex, function ($0, $1, $2, $3) {
				var value = $2 || $3;
				header[$1] = value ? value.toLowerCase().cache().toString() : true;
				return '';
			});
			if (header['max-age']) {
				var maxAge = parseInt(header['max-age'], 10);
				if (isNaN(maxAge)) {
					return null;
				}
				header['max-age'] = maxAge;
			}
			return err ? null : header;
		},
		Get: function (url, settings) {
			settings = settings || {};
			settings.method = 'get';
			if (settings.accept === 'svg')
				settings.access = false;
			return REST.rest.call(this, url, settings);
		},
		Post: function (url, settings) {
			settings = settings || {data:{}};
			settings.method = 'post';
			this._addDeviceUid(settings.data);
			return REST.rest.call(this, url, settings);
		},
		Put: function (url, settings) {
			settings = settings || {data:{}};
			settings.method = 'put';
			this._addDeviceUid(settings.data);
			return REST.rest.call(this, url, settings);
		},
		Delete: function (url, settings) {
			settings = settings || {data:{}};
			settings.method = 'delete';
			this._addDeviceUid(settings.data);
			return REST.rest.call(this, url, settings);
		},
		_addDeviceUid: function(params) {
			if (params) params['device_uid'] = this.MAC || (this.MAC = BS.device.MAC);
		},
		AccessPairs: function AccessPairs(consumer, userCredentials) {
			if (!(consumer instanceof BS.RequestManager.ConsumerApp))
				throw 'invalid-consumer-object';
			if (userCredentials !== undefined && consumer === undefined)
				throw 'user-credentials-only-not-allowed';

			userCredentials = userCredentials || {token: '', secret: ''};

			this.consumerKey = consumer.key;
			this.consumerSecret = consumer.secret;
			this.token = userCredentials.token;
			this.secret = userCredentials.secret;
		},
		forceLocation: function forceLocation(loc) {
			var parts = loc.match(/(\w+):\/\/([^\/]+)\/?/);
			if (parts.length < 3)
				throw new Error('Must set valid url instead of ' + loc);
			RESTReqOptions.location = {
				host: parts[2],
				href: loc,
				protocol: parts[1]
			};
		},
		forceFsOnly: function () {
			RESTReqOptions.fsOnly = true;
		},
		OPTIONS: RESTReqOptions,
		Result: Result
	};

	REST.rest = function (url, settings) {
		var i, cacheKey, fallbackContentType = 'json';
		var dfr = settings._dfr || q.defer();
		var fsRequest = -1 !== url.indexOf('file://');
		var cachedResponse = null;

		function eventDispatcherTask(response) {
			if (
				null === settings.preventEvent ||
				('error' === settings.preventEvent && response.success)
				) {
				BS.evMgr.dispatch(new RequestEvent(response));
			} else if (true === settings.preventEvent) {
				(function () {} ());
			} else if ('error' !== settings.preventEvent && !response.success)
				BS.evMgr.dispatch(new RequestEvent(response));

			if (response.success)
				return q(response);
			throw response;
		}

		var responsePromise = dfr.promise.then(eventDispatcherTask, eventDispatcherTask);
		responsePromise.abort = abort;
		responsePromise.__proto__.success = function requestSuccessHandler(onSuccess) {
			return this.then(function (response) {
				onSuccess.call(restRequester, response);
				return q(response);
			});
		};
		responsePromise.__proto__.error = function requestErrorHandler(onReject) {
			return this.catch(function (response) {
				onReject.call(restRequester, response);
				throw response;
			});
		};
		responsePromise.__proto__.complete = function requestCompleteHandler(onComplete) {
			function Finally(response) {
				onComplete.call(restRequester, response);
			}
			return this.then(Finally, Finally).done();
		};

		settings.method = settings.method || 'get';
		settings.location = {};
		settings.data = settings.data || null;

		var locProtocol = RESTReqOptions.location.protocol || location.protocol;
		var locHost = RESTReqOptions.location.host || location.host;
		var locHref = RESTReqOptions.location.href || location.href;

		var httpMethod = settings.method.toUpperCase();
		var ccItem = null;
		var tmpUrl = url;
		var isUrlParamMethod = settings.method !== 'post' ;

		if (!fsRequest) {
			if (settings.data !== null && isUrlParamMethod) {
				var qParam = jQueries.param(settings.data);
				tmpUrl += (tmpUrl.indexOf('?') === -1 ? '?' + qParam : '&' + qParam);
			}
			if (!tmpUrl.match(/^http[s]?:\/\//)) {
				tmpUrl = tmpUrl.substring(0, 1) === '/' ?
					locProtocol + (locProtocol.match(/:$/) ? '' : ':') + '//' + locHost + tmpUrl :
					locHref.replace(/\/[^\/]+$/, '/' + tmpUrl);
			}
		}

		if (
			!fsRequest
			&& 'GET' === httpMethod
			&& 'NONE' !== settings.cache
			) {
			cacheKey = REST.makeCacheKey(tmpUrl);
			ccItem = ccRepo.findById(cacheKey);

			if (ccItem && !ccItem.isValid)
				ccRepo.delete(cacheKey);
			if (settings.noCachedData && ccItem && ccItem.isValid) {
				debug('XHR->get|CACHE-HIT-A|%s', cacheKey);
				debug('XHR->get|Expires by %s', new Date(ccItem.expires));
				settings.preventEvent = true;
				var response = new Result(null, 200, '', ccItem.headers, tmpUrl);
				response.cacheExpires = ccItem.expires;
				dfr.resolve(response);
				resetTimeoutTmr();
				resetPollTmr();
				return responsePromise;
			} else if (
				(!settings.noCachedData || BS.portal.isDisconnected) &&
				(cachedResponse = responseRepo.findById(cacheKey))
				) {
				debug('XHR->get|CACHE-HIT-B|%s', cacheKey);

				ccItem = cacheControlItemFactory(cachedResponse.headers);

				if (ccItem && !ccItem.cacheControl){
					trace('XHR->get|%s Cached result. Not by CC.', cacheKey);
				}
				if (('CARD' === settings.cache && BS.portal.isDisconnected) || ccItem.isValid) {
					trace('XHR->get|%s %s Returning cached result', url, ccItem.isValid ?
						'Headers valid' : 'Client disconnected');
					settings.preventEvent = true;
					cachedResponse.cacheExpires = ccItem.expires;
					dfr.resolve(cachedResponse);
					resetTimeoutTmr();
					resetPollTmr();
					return responsePromise;
				}
			}
		}

		settings = jQueries.extend(true, {}, RESTReqOptions, settings || {});
		settings.access = settings.access === false ? null :
			(settings.access || BS.request._accessPair);
		settings.method = settings.method.toLowerCase();
		settings._delays = settings._delays || new DelaysSeries(settings.retrySeries);
		settings.streamed = settings.streamed || false;

		if (
			!fsRequest
			&& 'GET' === httpMethod
			&& 'NONE' !== settings.cache
			&& (ccItem && cachedResponse || ccItem && settings.noCachedData)
			) {
			if (ccItem.headers.etag) {
				trace(url + ' setting tentative header etag: ' + ccItem.headers.etag);
				settings.headers['If-None-Match'] = ccItem.headers.etag;
			}

			if (ccItem.headers['last-modified']) {
				trace(url + ' setting tentative header last-modified: %s',
					ccItem.headers['last-modified']);
				settings.headers['If-Modified-Since'] = ccItem.headers['last-modified'];
			}
		}


		if (!(settings.accept in Result.prototype.acceptedMimes) && settings.accept !== null)
			throw 'unknown-accept-mime';
		if (httpMethods.indexOf(settings.method) === -1)
			throw 'unknown-http-method';

		var restRequester = jQueries.extend({
			'httpCallSuccess': true,
			'retrier': {
				start: function () {
					var dly;
					if (settings.retryInfinite === true)
						dly = settings._delays.getNextDelay();
					else
						dly = settings._delays.getNextDelayFinite();
					if (dly === false) {
						settings._inRetryLoop = false;
						return;
					}
					trace('Retrier\'s delay is %d ms', dly);
					settings._retryTID = setTimeout(function () {
						settings._dfr = dfr;
						REST.rest(url, settings);
					}, dly);
				},
				abort: function () {
					trace('Retrier aborted for ');
					settings.retry = false;
					settings._inRetryLoop = false;
				},
				reset: function () {
					trace('Retrier\'s delay reset for ');
					settings._delays.reset();
				}
			},
			'abort': abort
		}, settings);


		var xhr = new XMLHttpRequest(),
			timeoutTimerId = null,
			pollTmrId = null,
			xhrResponseLengthLimit = 250e3,
			ekiohHNMB = BS.CompatibilityManager.prototype.hasHttpNotModifiedBug(),
			skipCondition = ekiohHNMB ?
				function () {
					return xhr.readyState === 4 || (xhr.readyState === 2 && xhr.status === 304);
				} :
				function (readyState) {
					return readyState === 4;
				}
			;

		xhr._timeouted = false;
		xhr.onreadystatechange = function () {
			var status = xhr.status;
			if (4 === xhr.readyState)
				trace('XHR->%s|%s (%d/%d)', settings.method.toLocaleLowerCase(), url,
					xhr.readyState, status);
			if (skipCondition(xhr.readyState, status) === false)
				return;

			if (xhr._timeouted)
				status = 408;
			var statusText = xhr.statusText;

			if (!fsRequest && 0 === xhr.status) {
				statusText = 'service-unavailable';
				status = 503;

			} else if (fsRequest && 0 === xhr.responseText.length) {
				status = 404;
			}

			if (
				cachedResponse
				&& REST.isRequestSuccessfull(status)
				&& (settings.headers['If-None-Match'] || settings.headers['If-Modified-Since'])
				) {
				trace('Response 304 and the request had tentative headers, '
					+ 'set success and call onHttpResponse');
				onHttpResponse(true, status, statusText, xhr.responseText,
					status !== null ? xhr.getAllResponseHeaders() : {}, url);
				resetTimeoutTmr();
				resetPollTmr();
				return;
			}

			if (
				status !== 0
				&& !REST.isRequestSuccessfull(status)
				) {
				onHttpResponse(false, status, statusText || 'error', xhr.responseText,
					status !== null ? xhr.getAllResponseHeaders() : {}, url);
				resetTimeoutTmr();
				resetPollTmr();
				return;
			}

			if (ekiohHNMB && xhr.readyState === 2 && status === 304) {
				abort();
				return;
			}

			resetTimeoutTmr();
			resetPollTmr();

			onHttpResponse(
				fsRequest ?
					xhr.responseText.length > 0 :
					xhr.status !== 0,
				status, statusText, xhr.responseText, status !== null ? xhr.getAllResponseHeaders() : {}, tmpUrl
			);
		};

		if (!settings.streamed){
			timeoutTimerId = setTimeout(function () {
				xhr._timeouted = true;
				xhr.abort();
			}, settings.timeout);
		}

		var oauthMsgParams = {'url': tmpUrl, 'method': settings.method,
			'parameters': {}};
		var accessor = settings.access;

		if (accessor) {
			oauthMsgParams.consumerKey = accessor.consumerKey;
			oauthMsgParams.consumerSecret = accessor.consumerSecret;
		}

		if (accessor && accessor.token) {
			oauthMsgParams.tokenSecret = accessor.secret;

			alert("**********************************************************");
			alert("TOKEN A");
			alert("***************************************");
			oauthMsgParams.parameters['oauth_token'] = accessor.token;
		}

		if (!isUrlParamMethod && settings.data !== null) {
			for (i in settings.data){
				oauthMsgParams.parameters[i] = settings.data[i];
			}
		}

		var oauthMsg = 'consumerKey' in oauthMsgParams ?
			OAuth.generateOauthMessage(oauthMsgParams) : null;
		var authHeader = oauthMsg ?
			OAuth.getAuthorizationHeader('www.beesmart.tv', oauthMsg) : null;

		try {
			debug('XHR->%s|%s %s', httpMethod, url, settings.data ?
				Object.serialize(settings.data) : '');
			if (!fsRequest && null !== settings.fsOnly) throw 'no-ip-no-http';
			xhr.open(httpMethod, tmpUrl, true);
			if (!fsRequest) {
				for (i in settings.headers)
					xhr.setRequestHeader(i, settings.headers[i]);
				if (authHeader)
					xhr.setRequestHeader('Authorization', authHeader);
				var acceptHeaderValues = Result.prototype.acceptedMimes[settings.accept ||
					fallbackContentType];
				xhr.setRequestHeader('Accept', acceptHeaderValues[acceptHeaderValues.length - 1]);

				if (
					settings.data !== null
					&& (settings.method === 'post' || settings.method === 'put')
					) xhr.setRequestHeader('Content-Type',
					'application/x-www-form-urlencoded; charset=utf-8');
			}
			var body = !isUrlParamMethod && settings.data !== null ?
				jQueries.param(settings.data) : '';
			xhr.send(body);


			var lastReadMarker = 0;
			if (settings.streamed) pollResponseText(dfr);

		} catch (x) {
			BS.logger.log(x);
			dfr.reject(new Result(false, 'xhr-parameters-error', '' + x, '', tmpUrl));
		}

		function pollResponseText(dfr) {
			try {
				resetPollTmr();
				var respLen = xhr.responseText.length;
				if (respLen && lastReadMarker !== respLen) {
					var received = xhr.responseText.substring(lastReadMarker);
					lastReadMarker = xhr.responseText.length;
					dfr.notify(new Result(received, '200', '', null, ''));
					if (lastReadMarker > xhrResponseLengthLimit) {
						BS.logger.info('XHR: Stream response length limit reached (%d > %d)'
							.sprintf(lastReadMarker, xhrResponseLengthLimit));
						dfr.reject(new Result('', 413, 'stream-end-reached', null, ''));
						return;
					}
					BS.logger.trace('XHR: Stream response length: ' + lastReadMarker);
				}
				pollTmrId = setTimeout(pollResponseText.bind(null, dfr), 1000);
			} catch (x) {
				BS.logger.info('Requester.stream error:');
				BS.logger.log(x);
			}
		}

		function onHttpResponse (isCallSuccess, status, statusText, data, httpHeaders, url) {
			var res, i, retryOnStatuses = [503, 501, 502, 500, 429, 408, 404, 0];
			httpHeaders = REST.parseHeaders(httpHeaders);
			for (i in restRequester)
				if (i.substring(0, 1) === '_') delete restRequester[i];
			if (isCallSuccess === false) {
				restRequester.httpCallSuccess = false;
				try {
					res = new Result(data, status, statusText, httpHeaders, url);
				} catch (x) {
					res = new Result(data, status, '' + x, null, url);
				}

				var isStatusRetriable = retryOnStatuses.indexOf(res.status) !== -1;
				if (settings.retry === true && isStatusRetriable) {
					settings.retryIteration++;
					restRequester.retrier.start();
				}
				if (true === settings._inRetryLoop) {
					if (settings.retry === false || isStatusRetriable === false)
						dfr.reject(res);
					return;
				}
				if (true === settings.retry && false === settings._inRetryLoop)
					dfr.reject(res);
			}

			if (!res) {
				try {
					res = new Result(data, status, statusText, httpHeaders, url, settings.accept);
				} catch (x) {
					res = new Result(data, 400, 'data-parsing-error', '' + x, null, url);
					dfr.reject(res);
					return;
				}
			}

			if (isCallSuccess) {
				if (status === 304) {
					trace('XHR->get|%s Tentative req. returned 304, return cached result', url);
					if (res.headers && res.headers.date && cachedResponse) {
						cachedResponse.headers.date = res.headers.date;
						trace('XHR->get|%s Response contains date and was previously cached, ' +
							'update cache', url);
						res = cachedResponse;
					} else if (settings.noCachedData === true) {
						res.data = null;
						ccItem.headers.date = res.headers.date;
						res.headers = ccItem.headers;
						if (!ccItem.isValid) {
							ccItem = cacheControlItemFactory(ccItem.headers);
							ccRepo.put(cacheKey, ccItem);
						}
					}
					res.url = url;
				} else if (httpMethod === 'GET') {
					ccItem = cacheControlItemFactory(res.headers);
					trace('XHR->get|%s %s', url, ccItem && ccItem.cacheControl ?
						'Response has CC headers' : 'No CC suggested');
				}

				if (ccItem) res.cacheExpires = ccItem.expires;
				dfr.resolve(res);

				if (
					'NONE' !== settings.cache
					&& cacheKey
					&& (settings.cache === 'CARD')
					) {
					res.cacheKey = cacheKey;
					if (status !== 304) responseRepo.put(res);
					ccItem = cacheControlItemFactory(res.headers);
					ccRepo.put(cacheKey, ccItem);
					trace('XHR->get|%s STORE ls=%d', cacheKey, responseRepo.length);
				} else if (
					BS.logger.getLogLevel() === 'trace'
					&& (settings.cache === 'CARD')
					) {
					trace('XHR->get|%s Response not cached: %s', url, 'NONE' !== settings.cache ?
						'' : 'settings.cache == NONE');
				}

			}
		}
		function abort() {
			if (xhr) {
				BS.logger.trace('XHR.abort');
				resetTimeoutTmr();
				resetPollTmr();
				settings.retry = false;
				xhr.abort();
			}
			dfr.reject('aborted');
		}
		function resetTimeoutTmr() {
			if (timeoutTimerId !== null) {
				clearTimeout(timeoutTimerId);
				timeoutTimerId = null;
			}
		}
		function resetPollTmr() {
			if (pollTmrId !== null) {
				clearTimeout(pollTmrId);
				pollTmrId = null;
			}
		}

		return responsePromise;
	};

	REST.pageItemsAggregator = function() {
		var items = [];
		return function processNewPage(response) {
			if (response.data === null)
				return null;
			var nextCall = response.data['nextPageLink'];
			items = items.concat(response.data.list);
			return nextCall !== null ?
				BS.request.Get(nextCall, {accept: 'json'}).then(processNewPage) : items;
		};
	};

	BS.RequestManager = RequestManager;
	BS.RequestManager.instance = function (locationHref, consumerApp) {
		var req = new RequestManager(locationHref);
		jQueries.extend(req, REST);
		req.sign(consumerApp);
		return req;
	};
	BS.RequestManager.ConsumerApp = function (name, consumerKey, consumerSecret) {
		this.name = name;
		this.key = consumerKey;
		this.secret = consumerSecret;
	};

	BS.consumerApp = new BS.RequestManager.ConsumerApp(
		'BS-STB-APP',
		BS.config.get('Core.Client.CONSUMER_KEY'),
		BS.config.get('Core.Client.CONSUMER_SECRET')
	);
	BS.request = RequestManager.instance(location.href, BS.consumerApp);

	function cacheControlItemFactory(headers) {
		if (!headers)
			return null;
		var cacheControl = REST.parseCacheControl(headers['cache-control']);
		var ccItem = new CacheControlItem(
			new Date(new Date(headers.date).getTime()).getTime(),
			cacheControl,
			headers
		);
		Object.freeze(ccItem);
		return ccItem;
	}

	function CacheControlItem(date, cacheControl, headers) {
		this.date = date;
		this.cacheControl = cacheControl;
		this.headers = headers;
	}
	CacheControlItem.prototype = {
		date: null,
		cacheControl: null,
		headers: null,
		get expires () {
			if (!this.cacheControl) return this.date;
			return this.date + this.cacheControl['max-age'] * 1000;
		},
		get isValid () {
			return this.date &&
				this.cacheControl &&
				this.cacheControl['max-age'] &&
				Date.now() <= this.expires;
		}
	};

	function CCRepository() {}
	CCRepository.prototype = {
		idMap: {},
		findById: function (key) {
			return this.idMap[key];
		},
		put: function (key, ccItem) {
			this.idMap[key] = ccItem;
		},
		'delete': function (key) {
			delete this.idMap[key];
		},
		clear: function() {
			this.idMap = {};
		}
	};
	var ccRepo = new CCRepository();

	function ResponseRepository(storageObject, factory, cachePolicy) {
		this.storage = storageObject;
		this.objectFactory = factory;
		this.cachePolicy = cachePolicy;
		this.cachePolicy.onRemove = this._remove.bind(this);
	}
	ResponseRepository.prototype = {
		idMap: {},
		MONTH_IN_MS: 27e8,
		_insert: function (itemObject) {
			var rawItem = itemObject.serialize();
			try {
				this.storage.setItem(itemObject.id, JSON.stringify(rawItem));
				this.idMap[itemObject.id] = rawItem.data.length;
				this.cachePolicy.put(itemObject.id, this.idMap[itemObject.id],
					Date.now() + this.MONTH_IN_MS);
			} catch (x) {
				if (x === x['QUOTA_EXCEEDED_ERR']) {
					this.cachePolicy.clear();
					this.dump();
					info('Quota exceeded! Clearing request cache repository');
				} else {
					for (var i in x) {
						if (x[i] === x) info('Storage thrown following %s', i);
					}
				}
			}
		},
		_remove: function(key) {
			this.delete({id: key});
		},
		put: function (itemObject) {
			var item = this.findById(itemObject.id);
			if (item) this.update(itemObject);
			else this._insert(itemObject);
		},
		'delete': function (itemObject) {
			delete this.idMap[itemObject.id];
			localStorage.removeItem(itemObject.id);
		},
		update: function (itemObj) {
			this._insert(itemObj);
		},
		hasId: function (id) {
			var lruObj = this.cachePolicy.get(id);
			return lruObj && lruObj.key in this.idMap;
		},
		findById: function (id, noCachedData) {
			var rawItem;
			if (this.hasId(id) && (rawItem = this.storage.getItem(id))) {
				try {
					return this.objectFactory(JSON.parse(rawItem), noCachedData);
				} catch (ex) {
					return this.objectFactory(rawItem, noCachedData);
				}
			}
		},
		get length () {
			return this.cachePolicy.size;
		},
		dump: function () {
			this.idMap = {};
			this.cachePolicy.clear();
		},
		clean: function() {
			this.cachePolicy.clean();
		},
		init: function () {
			for (var index = 0, len = this.storage.length; index < len; index++) {
				var id = this.storage.key(index);
				var item = this.storage.getItem(id);
				if (item && item.data) {
					if (!item.data) continue;
					this.idMap[id] = item.data.length;
					this.cachePolicy.put(id, this.idMap[id], Date.now() + this.MONTH_IN_MS);
				}
			}
			info('Repository populated from localStorage (Object #%d)', this.length);
		},
		debug: function() {
			BS.logger.debug('REQUEST REPOSITORY :: Repository size %d/%d (%d%%) :: Storage size %d',
				this.cachePolicy.size, this.cachePolicy.capacity,
				parseInt(100 * this.cachePolicy.size / this.cachePolicy.capacity),
				this.storage.length
			);
		}
	};

	var responseRepoEmptyMock = {
		put: BS.F, 'delete': BS.F, update: BS.F,
		hasId: function () { return false; },
		findById: BS.F, get length() { return 0; },
		dump: BS.F, clean: BS.F, init: BS.F, debug: BS.F
	};

	var responseRepo = BS.CompatibilityManager.prototype.hasWebLocalStorageApi() ?
		new ResponseRepository(localStorage,
			Result.prototype.deserialize,
			new BS.repositorySupertypes.LRUCache(2000e3)
		) : responseRepoEmptyMock;

	BS.evMgr.bind('onSystemTimeReady', function () {
		responseRepo.init();
	});



	setTimeout(function responseRepoCleanWorker() {
		var t = Date.now();
		trace('RESPONSE REPO :: Clean started');
		responseRepo.debug();
		responseRepo.clean();
		trace('RESPONSE REPO :: Clean complete in %d ms', Date.now() - t);
		responseRepo.debug();
		setTimeout(responseRepoCleanWorker, 600e3);
	}, 600e3);

	BS.evMgr.bind('onInvalidateCache', function () {
		urlCacheKeyMap = {};
		ccRepo.clear();
	});

})(BeeSmart, BeeSmart.Utils.DelaysSeries, Q, OAuth, setTimeout, clearTimeout, BeeSmart.portal);



(function BeeSmartMessaging(BS) {

	var requestThrottleDelays;


	var scsRetrySeries = [];
	for (var i = 0; i < 25; i++) {
		var prevVal = (Math.round(Math.pow((i + 2) / 4, 4)) * 1e3);
		var newVal = (Math.round(Math.pow((i + 3) / 4, 4)) * 1e3);
		scsRetrySeries.push(prevVal + Math.round(Math.random() * (newVal - prevVal)));
	}

	requestThrottleDelays = new BeeSmart.Utils.DelaysSeries(scsRetrySeries);
	var MessageEvent = function MessageEvent(handlerType, message) {
		var ev = this,
			supportedTypes = BS.msgMgr.getMessageTypes();

		if (supportedTypes.indexOf(handlerType) === -1) {
			BS.logger.info('Message ' + handlerType + ' not supported !!! Message ignored ...');
			return;
		}
		ev.type = 'MessageEvent';
		ev.data = message;
		ev.handler = 'msg:on' + handlerType;
		ev.description = 'New BeeSmart message delivered';
	};
	MessageEvent.prototype = new BS.Event();

	BS.evMgr.registerEvent('MessageEvent', MessageEvent);

	function MessageManager() {
		var listeners = [];
		var lastMsgsQueue = [];
		var that = this;
		var running = false;
		this.commChannelType = null;
		this.gateway = null;

		this.getMode = function () {
			return this.commChannelType;
		};

		this.each = function (filter) {
			for (var i = 0, len = listeners.length; i < len; i++)
				filter(listeners[i]);
		};

		this.onMessageArrival = function (msgObj) {
			if (lastMsgsQueue.indexOf(msgObj.id) !== -1){
				BS.logger.info('WARNING: MESSAGING: message arrived again, ignoring last one: ' +
					'(%s) !?', msgObj);
				return false;
			}
			lastMsgsQueue.push(msgObj.id);
			if (lastMsgsQueue.length > 10)
				lastMsgsQueue.shift();

			BS.evMgr.dispatch(new MessageEvent(msgObj.type, msgObj));
		};

		this.start = function start() {
			var that = this;
			BS.request.Get(
				'/pn/options',
				{
					'accept': 'json',
					retry: true,
					retryInfinite: true,
					retrySeries: requestThrottleDelays.series,
					preventEvent: 'error'
				}
			).then(function (response) {
				var MAX_DELAY = BS.config.get('Msgpush.Client.MESSAGING_RESTART_MAX_DELAY');
				var delay = Math.round(MAX_DELAY * 1000 * Math.random());
				var filteredModes = response.data.filter(function (el) {
					return el.type === 'nginxstream';
				});

				if (filteredModes.length === 0) {
					BS.logger.info('MESSAGING: preferred messaging mode %s not available, ' +
						'messaging not started!', 'nginxstream');
					that.restart(delay);
					return;
				}
				that.commChannelType = 'nginxstream';
				NginxChannel.getSingletonInstance().start(filteredModes[0].address);
				BS.logger.info('MESSAGING: trying to start `%s` messaging mode',
					that.commChannelType);
				running = true;
			})
			.catch(function (x) {
				BS.logger.info('MESSAGING: no modes defined, cannot start due to: '+ x);
			}).done();
		};

		this.stop = function destroyMessagingListeners() {
			running = false;
			this._clearStartTimer();
			switch (that.commChannelType) {
			case 'nginxstream':
			case 'stream':
				NginxChannel.getSingletonInstance().abort();
				break;
			default:
				break;
			}
		};

		this._startTimerRef = null;
		this._clearStartTimer = function () {
			if (this._startTimerRef)
				clearTimeout(this._startTimerRef);
			this._startTimerRef = null;
		};

		this.restart = function restartMessageManager(startWithDelay) {
			startWithDelay = startWithDelay || 0;
			BS.logger.trace('Restart messaging: stop now and start again after %s ms delay...',
				startWithDelay);
			this._clearStartTimer();
			that.stop();
			that._startTimerRef = setTimeout(function () {
				that.start();
			}, startWithDelay);
		};

		this.__defineGetter__('state', function () {
			return running ? 'running' : 'stopped';
		});

		var supportedTypes = [];

		this.registerMsgType = function (newType) {
			if (supportedTypes.indexOf(newType) !== -1)
				return;
			supportedTypes.push(newType);
		};

		this.getMessageTypes = function () {
			return supportedTypes;
		};
	}

	BS.msgMgr = new MessageManager();

	function InstantMessage(msgData) {
		if (
			typeof msgData !== 'object'
				|| typeof msgData.senderId !== 'string'
				|| (msgData.id && !(('' + msgData.id).match(/^\d+$/)))
				|| (msgData.type && !(('' + msgData.type).match(/^[a-z0-9]+$/i)))
			) {
			throw 'instant-message-deserialization-error';
		}

		this.id = msgData.id;
		this.type = msgData.type;
		this.from = msgData.senderId;
		this.body = msgData.body;
		this.recieved = Date.now();
	}

	InstantMessage.prototype = {
		id: null,
		type: null,
		from: null,
		body: null,
		recieved: null,
		toString: function () {
			return 'InstantMessage#%s : %s  @ %s (body:%s) <- `%s`'
				.sprintf(
					this.id,
					this.type,
					(new Date(this.recieved)).toFormattedString('yyyMMdd HH:mm:s', false),
					Object.serialize(this.body),
					this.from
				);
		}
	};
	BS.msgMgr.InstantMessage = InstantMessage;



	function NginxChannel() {}
	NginxChannel.prototype = {
		delay: null,
		listenerList: null,
		session: null,
		requestObject: null,
		running: false,
		lastMsgReceivedTs: 0,
		maxPingTimeoutTmrRef: null,
		_abortedByUs: false,
		_clearMaxPingTimeoutTmr: function () {
			if (this.maxPingTimeoutTmrRef !== null){
				clearTimeout(this.maxPingTimeoutTmrRef);
			}
			this.maxPingTimeoutTmrRef = null;
		},
		_setMaxPingTimeoutTmr: function () {
			var that = this;
			that._clearMaxPingTimeoutTmr();
			var PING_INTERVAL = BS.config.get('Msgpush.Nginxstream.Client.PING_INTERVAL');
			var dly = Math.round(PING_INTERVAL + 10) * 1000;
			that.maxPingTimeoutTmrRef = setTimeout(function () {
				BS.logger.info('MSG PUSH: Ping timeout occurred');
				that._onException(1000);
			}, dly);
		},
		_onException: function (delay) {
			var MAX_DELAY = BS.config.get('Msgpush.Client.MESSAGING_RESTART_MAX_DELAY');
			delay = delay || Math.round(MAX_DELAY * 1000 * Math.random());
			BS.logger.trace('MSGPUSH: Exception handler - restart messaging in ' + delay + ' ms');
			this.abort();
			BS.msgMgr.restart(delay);
		},
		doStartStream: function doStartStream(gw) {
			BS.logger.trace('MSGPUSH: starting...');

			var that = this,
				pollReqArgs = {
					data: {
						type: 'nginxstream',
						channel: BS.portal.user.token
					},
					streamed: true,
					preventEvent: true
				};

			if (that.running === false)
				return;

			that.lastPolledTs = Date.now();
			that.lastScsPollTs = Date.now();

			that._setMaxPingTimeoutTmr();
			that._abortedByUs = false;
			this.requestObject = BS.request.Get(gw, pollReqArgs);
			this.requestObject.then(
					function () {
						BS.logger.info('MSGPUSH: received success response it shouldn`t');
						that._onException();
					},
					function (result) {
						if (result.status === 413) {
							that._onException(1000);
						} else {
							BS.logger.info('MSGPUSH: some error returned (%s)'.sprintf(Object
								.serialize(result)));
							if (!that._abortedByUs) that._onException();
						}
					},
					function (result) {
						that.lastMsgReceivedTs = Date.now();
						that._setMaxPingTimeoutTmr();
						requestThrottleDelays.reset();
						result.data
							.replace(/%p%/g, '')
							.replace(/(](\r?\n)?\[)/g, ']\u2003[')
							.split(/\u2003/g)
							.filter(function (v) {
								return v.trim() !== '';
							})
							.forEach(function (msgTxt) {
								try {
									var jsonMsgs = JSON.parse(msgTxt);
									BS.logger.debug('MSGPUSH: actual msg received');
									jsonMsgs.forEach(function (actualMsg) {
										BS.msgMgr.onMessageArrival(new InstantMessage(actualMsg));
									});
								} catch (e) {
									BS.logger.debug('MSGPUSH: %s occurred for message `%s`', e,
										msgTxt);
								}
							});
					}
				)
				.finally(that._clearMaxPingTimeoutTmr.bind(that));
		},


		abort: function () {
			if (!this.running) return;
			this._abortedByUs = true;
			if (this.requestObject) this.requestObject.abort();
			this.requestObject = null;
			this.running = false;
			this._clearMaxPingTimeoutTmr();
		},

		start: function (gateway) {
			var that = this;
			if (that.running) {
				BS.logger.debug('Nginx channel should be instatiated only once, aborting this' +
					' start request!');
				return;
			}
			that.running = true;
			that.gateway = gateway;
			that.doStartStream(gateway);
		}
	};

	NginxChannel.getSingletonInstance = function () {
		var result = 'instance' in this ? this.instance : new this();
		this.instance = result;
		return result;
	};



})(BeeSmart);

(function (BS, q) {

	function DeviceManager() {
		var _beeSmartPlugin = document.getElementById('plugin_beesmart');
		var info = function () { BS.logger.info.apply(BS.logger, arguments); };
		var lpvrEnabled = false;
		var hpvrEnabled = false;
		var deviceInfo;
		var PERFORMANCE_INDEX_MIN = 0;
		var PERFORMANCE_INDEX_MID = 3;
		var PERFORMANCE_INDEX_MAX = 6;
		var performanceIndex = PERFORMANCE_INDEX_MAX;

		this.dfrAvailable = q.defer();
		this.beeSmartPlugin = _beeSmartPlugin && 'msg_listenerPort' in _beeSmartPlugin;

		try {
			if (this.beeSmartPlugin) info('PLUGIN DETECTED !!!');
			else info('NO PLUGIN DETECTED !!!');
		} catch (e) {
		}

		this.consts = {};
		this.consts.performance = {};
		this.consts.performance.MIN = PERFORMANCE_INDEX_MIN;
		this.consts.performance.MID = PERFORMANCE_INDEX_MID;
		this.consts.performance.MAX = PERFORMANCE_INDEX_MAX;

		this.__defineGetter__('performanceIndex', function () {
			switch (performanceIndex) {
			case PERFORMANCE_INDEX_MIN:
				return 'MIN';
			case PERFORMANCE_INDEX_MID:
				return 'MID';
			case PERFORMANCE_INDEX_MAX:
				return 'MAX';
			default:
				return 'UNKNOWN';
			}
		});

		this.__defineSetter__('performanceIndex', function (idx) {
			var found = false;
			Object.eachKey(this.consts.performance, function (key) {
				if (idx === this[key])
					found = true;
			});
			if (!found) {
				BS.logger.info('ERROR - Cannot set performance index!!! (must set to one of consts'
					+ ' found in BS.device.consts.performance');
			} else {
				if (idx !== performanceIndex) {
					var prev = BS.device.performanceIndex;
					performanceIndex = idx;
					BS.logger.info('Device performance index changed from %s to %s to ',
						prev, BS.device.performanceIndex);
				}
			}
		});

		this.checkPerformanceIndex = function (toCompareWith) {
			if (toCompareWith > 100)
				toCompareWith = 100;
			else if (toCompareWith < 0)
				toCompareWith = 0;
			return performanceIndex >= toCompareWith;
		};

		BS.evMgr.bind('onBeeSmartReady', function () {
			BS.logger.info('Device performance index is set to: ' + BS.device.performanceIndex);
		});

		this.getMAC = function () {
			var mac;
			try {
				mac = EkiohPlatformInfo.networkInterfaces[0].macAddress
					.replace(/:/g, '').toLowerCase();
			} catch (ex) {
				info('DeviceManager::MAC > EkiohPlatformInfo not present!');
			}
			return (mac ? mac : BS.config.get('Core.Client.DEFAULT_MAC').replace(/:/g, '')
				.toLowerCase());
		};
		this.__defineSetter__('lpvrEnabled', function (status) {
			lpvrEnabled = status;
		});
		this.__defineGetter__('lpvrEnabled', function () {
			return lpvrEnabled;
		});
		this.__defineSetter__('hpvrEnabled', function (status) {
			hpvrEnabled = status;
		});
		this.__defineGetter__('hpvrEnabled', function () {
			return hpvrEnabled;
		});

		this.__defineGetter__('info', function () {
			return deviceInfo;
		});
		this.__defineSetter__('info', function (info) {
			deviceInfo = info;
		});

		this.__defineGetter__('MAC', this.getMAC);
		this.__defineSetter__('MAC', function () {});


		this.getIP = function () {
			var val = null;
			try {
				val = EkiohPlatformInfo.networkInterfaces[0].ipv4Address;
			} catch (ex) {
				info('DeviceManager::IP > getModelEkiohPlatformInfo not present!');
			}
			return val;
		};
		this.__defineGetter__('IP', this.getIP);
		this.__defineSetter__('IP', function () {});

		this.getGateway = function () {};

		this.getModel = function () {
			var val = null;
			try {
				val = EkiohPlatformInfo.getVendorProperty('config.productdisplayname');
			} catch (ex) {
				info('DeviceManager::getModel > EkiohPlatformInfo not present!');
			}
			return val;
		};

		this.getSwVer = function () {
			var val = null;
			try {
				val = EkiohPlatformInfo.getVendorProperty('config.build.version');
			} catch (ex) {
				info('DeviceManager::getSwVer > EkiohPlatformInfo not present!');
			}
			return val;
		};

		this.getFirmware = function () {
			var val = null;
			try {
				val = EkiohPlatformInfo.getVendorProperty('config.firmwareversion');
			} catch (ex) {
				info('DeviceManager::getSwVer > EkiohPlatformInfo not present!');
			}
			return val;
		};

		this.getInfCast = function () {
			var val = null;
			try {
				val = EkiohPlatformInfo.getVendorProperty('config.metachannel');
			} catch (ex) {
				info('DeviceManager::getInfCast > EkiohPlatformInfo not present!');
			}
			return val;
		};

		this.getPluginVersion = function () {
			var val = null;
			try {
				val = _beeSmartPlugin.plugin_getVersion();
			} catch (ex) {
				info('NOTE: DeviceManager::getVersion > Failed');
				BS.logger.log(ex);
			}
			return val;
		};

		this.reboot = function () {
			setTimeout(function () {
				try {
					info('Initialize stb reboot via plugin');
					_beeSmartPlugin.stb_reboot();
					info('Finished stb reboot via plugin');
				} catch (e) {
					info('ERROR: DeviceManager::reboot > Stb reboot failed');
					BS.logger.log(e);
					window.location.reload();
				}
			}, 500);
		};

		this.restart = function () {
			try {
				info('Initialize browser restart via plugin');
				_beeSmartPlugin.stb_browserRestart();
				info('Finished browser restart via plugin');

			} catch (e) {
				info('NOTE: DeviceManager::restart > Stb browser restart failed');
				BS.logger.log(e);
				window.location.reload();
			}
		};

		this.__defineGetter__('clientEngineVersion', function () {
			var parts = BS.CompatibilityManager.prototype.ekVersion;
			return '%s / r%s'.sprintf(parts[1], parts[4] ? parts[4] + ' ' : '');
		});

		var _lastVideoVolume = '0.3';
		var _powerMode = null;
		try {

			if (EkiohPlatformInfo.powerState !== undefined) {
				switch (EkiohPlatformInfo.powerState) {
				case EkiohPlatformInfo.POWERSTATE_ON:
					_powerMode = 'on';
					break;
				case EkiohPlatformInfo.POWERSTATE_OFF:
				case EkiohPlatformInfo.POWERSTATE_STANDBY:
					_powerMode = 'standby';
					break;
				}
			}
		} catch (e) {
			_powerMode = null;
		}

		if (!_powerMode) {
			_powerMode = 'on';
			BS.logger.info('Error retrieving current power state of STB, leaving it on default ' +
				'value (' + _powerMode + ')');
		} else {
			BS.logger.info('STB returned its current power state : ' + _powerMode);
		}
		this.__defineGetter__('power', function () {
			return _powerMode;
		});
		this._setPowerMode = function (eventPassedValue) {
			if (eventPassedValue === 0)
				_powerMode = 'standby';
			else
				_powerMode = 'on';
		};
		this.__defineSetter__('power', function (modeName) {
			var video = getElementById('video') || document.createElement('video');
			BS.logger.info('trying to set power to ' + modeName);
			try {
				switch (modeName) {
				case 'on':
					video.setAttribute('audio-level', _lastVideoVolume);
					EkiohPlatformInfo.powerState = EkiohPlatformInfo.POWERSTATE_ON;
					break;
				case 'standby':
					_lastVideoVolume = video.getAttribute('audio-level');
					EkiohPlatformInfo.powerState = EkiohPlatformInfo.POWERSTATE_STANDBY;
					break;
				default:
					BS.logger.info('INVALID POWER STATE SET !!');
					return;
				}
			} catch (ex) {
				BS.logger.print('EkiohPlatformInfo does not exist!');
			}
		});

		this.videoCapable = navigator.platform.match(/(win)/i) === null;
		this.ottTrickPlayCapable = false;

		this.getInstanceAvailabilityPromise = function () {
			return this.dfrAvailable.promise;
		};
	}

	BS.DeviceManager = DeviceManager;
	BS.device = new DeviceManager();

})(BeeSmart, Q);

(function (BS) {


	var mrIdIndex = 0;
	var NO_VTV = null;

	function MediaResources(resources) {
		this.id = 'mr-' + (++mrIdIndex);

		try {
			this.NO_VTV = BS.config.get('content_providers.CONVOY_PROVIDER.DEV_NO_WTW') || null;

		} catch (x) {
			NO_VTV = false;
		}


		var dev = BS.device.info;
		this.protocolToDevMap = {
			'hls': dev.ott_enabled,
			'http,hls': dev.ott_enabled,
			'http': dev.ott_enabled,
			'mcast': dev.mcast_enabled,
			'rtsp': dev.mcast_enabled,
			'rtp': dev.rtp_enabled,
			'dvb,cable': dev.dvbc_enabled,
			'dvb,terestrial': dev.dvbc_enabled,
			'dvb,satelite': dev.dvbc_enabled,
			'dvbc': dev.dvbc_enabled,
			'dvbt': dev.dvbc_enabled,
			'dvbs': dev.dvbc_enabled,
			'http,dynamic-image': true
		};

		if (typeof resources === 'undefined')
			return;

		var filteredSortedResouces = this.filterFunction(resources).map(function (r) {
			r.protocolStack = r.protocolStack || '';
			if (r.signOauth) {
				r.oauthSrc = r.src;
			}
			return r;
		});

		filteredSortedResouces.sort(MediaResources.prototype.sortFunction.bind(this));

		this.resources = filteredSortedResouces;
	}

	MediaResources.applyOrchestrationRule = function (resourcesList, contentRule) {
		var mroRules = BS.media.mrOrchestrationRules;
		if (mroRules[contentRule] === null)
			return resourcesList;
		var mroRule = mroRules[contentRule];
		var w = Object.clone(mroRule['prefer-order']).reverse();
		if (!mroRule['orchestration-enabled'])
			return resourcesList;
		resourcesList = resourcesList.filter(function (el) {
			return mroRule.ignore.indexOf(el.oTag) === -1;
		}).sort(function (a, b) {
			return (w.indexOf(b['oTag']) || 0) - (w.indexOf(a['oTag']) || 0);
		});
		return resourcesList;
	};

	MediaResources.isOtt = function (resource) {
		return !!resource.protocolStack.match(/http|hls|rtmp/g);
	};

	MediaResources.prototype = {
		id: null,
		vendorKeyword: 'Generic',
		resources: [],
		NO_VTV: null,
		anyPlayables: function () {
			return this.resources.length !== 0;
		},
		protocolWeights: {
			'http,hls': 1,
			'http': 3,
			'hls': 2,
			'mcast': 10,
			'rtsp': 10,
			'dvb,cable': 20,
			'dvb,terestrial': 20,
			'dvb,satelite': 20,
			'dvbc': 20,
			'dvbt': 20,
			'dvbs': 20,
			'http,dynamic-image': 100,
			'local-recording': 100
		},
		protocolToDevMap: {},
		sortFunction: function (a, b) {
			return this.protocolWeights[b.protocolStack.toLowerCase()]
				- this.protocolWeights[a.protocolStack.toLowerCase()];
		},
		filterFunction: function (resources) {

			return resources
				.filter(isValidResource)
				.filter(isProtocolSupported.bind(this))
				.filter(isMeantForSTBDevice);

			function isValidResource(resource) {
				var reason = invalidReason(resource);

				if (reason !== null) {
					var resourceInvalidMsg = 'Resource invalid: "%s" (%s) [Ignoring it]';
					BS.logger.info(resourceInvalidMsg, reason, JSON.stringify(resource));
				}
				return reason === null;

				function invalidReason(resource) {
					if (!resource.src) return 'empty src';
					if (!resource.protocolStack) return 'empty protocolStack';
					return null;
				}
			}

			function isProtocolSupported(resource) {
				var isSupported = this.protocolToDevMap[resource.protocolStack] === true;
				if (!isSupported) {
					BS.logger.info(
						'Resource invalid: "device unsupported protocol": (%s) [Ignoring it].',
						JSON.stringify(resource)
					);
				}
				return isSupported;
			}

			function isMeantForSTBDevice(resource) {
				return !resource.profiles || resource.profiles.indexOf('stb') !== -1;
			}
		},
		getResources: function (callback) {
			(callback || function () {})(this.resources);
			return this;
		},
		getResourcesByProtocol: function (callback, protocolStackName) {
			(callback || function () {})(this.resources.filter(function (el, index, arr) {
				return arr[index].protocolStack.indexOf(protocolStackName) !== -1;
			}));
			return this;
		},
		getTrickplaySpeeds: function (mr) {
			var tpSpeeds = [4, 16, 32];
			try {
				var speedMatches = mr.capabilities.match(/trickplay_speeds=([,.\d]+)/);
				if (speedMatches.length === 2) {
					tpSpeeds = speedMatches[1].split(',').map(function (el) {
						return Math.round(parseFloat(el));
					});
				}
			} catch (x) {
				tpSpeeds = [4, 16, 32];
			}
			return tpSpeeds;
		},
		toString: function () {
			var links = this.resources.map(function (mr) {
				var pStack = mr.protocolStack.split(',');
				return ''.concat(pStack.length ? pStack[pStack.length - 1] : '-')
					.concat('>')
					.concat(mr.src.substring(mr.src.length - 20));
			}).join(', ');
			return 'MR|%s#%s (%s)'.sprintf(this.vendorKeyword, this.id, links);
		}
	};

	function MediaManagerError(keyword, message) {
		this.name = 'MediaManagerError';
		this.keyword = keyword;
		this.message = message || 'Default Message';
		this.stack = (new Error()).stack;
	}
	MediaManagerError.prototype = Object.create(Error.prototype);
	MediaManagerError.prototype.constructor = MediaManagerError;

	function VideoEvent(handler) {
		var veTypes = {
			'play': 'onVideoPlay',
			'pause': 'onVideoPause',
			'ended': 'onVideoEnded',
			'error': 'onVideoError'
		};
		this.type = 'VideoEvent';
		this.handler = veTypes[handler];
		this.description = 'Event triggered by <video> "' + veTypes[handler] + '"';
	}
	Object.extend(VideoEvent, BS.Event);


	function VideoPositionChangedEvent() {
		this.type = 'VideoPositionChangedEvent';
		this.description = 'Play video from position';
		this.handler = 'onVideoPositionChangedEvent';
	}
	Object.extend(VideoPositionChangedEvent, BS.Event);

	function VideoResumePlaybackEvent() {
		this.type = 'VideoResumePlaybackEvent';
		this.description = 'resume video playback';
		this.handler = 'onVideoResumePlaybackEvent';
	}

	Object.extend(VideoResumePlaybackEvent, BS.Event);

	function VideoSpeedChangeEvent(previousSpeed, newSpeed) {
		this.type = 'VideoSpeedChangeEvent';
		this.description = 'video playback speed';
		this.handler = 'onVideoSpeedChangeEvent';
		this.data = { previous: previousSpeed, current: newSpeed };
	}

	Object.extend(VideoSpeedChangeEvent, BS.Event);

	function AudioEvent(originalEvent) {
		this.type = 'AudioEvent';
		this.description = 'Event triggered by <video> "ekiohStreamChange"';
		this.handler = 'onAudioStream';
		this.data = BS.media.audios;
		this.originalEvent = originalEvent;
	}

	Object.extend(AudioEvent, BS.Event);

	function SubtitleEvent(originalEvent) {
		this.type = 'SubtitleEvent';
		this.description = 'Event triggered by <video> "ekiohStreamChange"';
		this.handler = 'onSubtitleStream';
		this.data = BS.media.subtitles;
		this.originalEvent = originalEvent;
	}

	Object.extend(SubtitleEvent, BS.Event);

	function Stream(id, title, type, nativeObj) {
		this.id = id;
		this.title = title || 'unknown';
		this.type = type;
		this.nativeObject = nativeObj;
	}

	Stream.prototype.toString = function () {
		return 'String for SubStream "' + this.title + '" (' + this.id + ')';
	};
	Stream.prototype.valueOf = function () {
		return 'SubStream "' + this.title + '" (' + this.id + ')';
	};
	BS.Stream = Stream;

	function StreamsList(list) {
		list.forEach(function (item, i) {
			this[i] = item;
		}.bind(this));
		this.length = list.length;

		this.get = function (value, byWhat) {
			var filtered = [];
			for (var i = 0, len = list.length; i < len; i++)
				if (list[i][byWhat === 'id' ? 'id' : 'title'] === value)
					filtered.push(list[i]);

			return filtered;
		};
	}
	StreamsList.prototype.valueOf = function () {
		var msg = '\n';
		for (var i = 0; i < this.length; i++)
			msg += this[i] + '\n';
		return msg === '\n' ? '> Empty stream list <' : msg;
	};


	function VideoAspectRatioChangeEvent(ratio) {
		var ev = this;
		ev.type = 'VideoAspectRatioChange';
		ev.value = ratio;
		ev.handler = 'onVideoAspectRatioChange';
		ev.description = 'When video aspect ratio changes';
	}
	Object.extend(VideoAspectRatioChangeEvent, BS.Event);


	var aspects43 = {
		svg: {viewBox: '85 0 1280 720', transform: 'scale(1.15,1)'},
		leftSide: {transform: 'translate(130,0)'},
		rightSide: {transform: 'translate(1175,0)'},
		video: {x: '88', width: '1104'}
	};

	function MediaManager() {
		var that = this;

		this._player = document.getElementsByTagName('video')[0];

		document.documentElement.addEventListener('SVGLoad', function () {
			var player = this.player;
			player.addEventListener('play', function (ev) {that.eventDispatcher(ev); }, false);
			player.addEventListener('error', function (ev) {that.eventDispatcher(ev); }, false);
			player.addEventListener('ended', function (ev) {that.eventDispatcher(ev); }, false);
			player.addEventListener('pause', function (ev) {that.eventDispatcher(ev); }, false);
			player.addEventListener('ekiohStreamChange', function (ev) {
				that._resetSubStreamProps();
				that._subsArrived();
				BS.evMgr.dispatch(new SubtitleEvent(ev));
				that._audioArrived();
				BS.evMgr.dispatch(new AudioEvent(ev));
			}, false);
		}.bind(this), false);

		var DAR = BS.Device.prototype.DisplayAspectRatio;
		this._videoBoxRatio = DAR.Fit43;
		this._displayFormat = DAR.Preserve169;
		this.playerPositionAnimations = {
			x: $(this._player).find('.xAnimation'),
			y: $(this._player).find('.yAnimation'),
			width: $(this._player).find('.widthAnimation'),
			height: $(this._player).find('.heightAnimation')
		};
		this.playerPosition = {x: 0, y: 0, width: 1280, height: 720};
	}

	MediaManager.extendWith = function (VendorsMM) {
		var vendorsMM = new VendorsMM();
		Object.eachKey(VendorsMM.prototype, function (property) {
			BS.media[property] = vendorsMM[property];
		});
	};
	MediaManager.prototype = {
		iAm: 'Generic',
		nextTrickplayIndex: 0,
		positionTime: 0,
		lastTS: 0,
		currSpeed: 1,
		_cMediaResource: null,
		_ttxMode: false,
		vodPlaybackSpeeds: [],
		playStartOffset: null,
		_videoBoxRatio: 'auto',
		_playMode: null,
		ctAtPaused: 0,
		_player: null,
		currentMediaresourceObj: null,
		printIndex: 0,
		mediaResourceIndex: 0,
		streamException: null,
		streamPlay: null,
		channelChange: null,

		VideoEvent: VideoEvent,
		SubtitleEvent: SubtitleEvent,
		AudioEvent: AudioEvent,

		mrOrchestrationRules: {'live': null, 'on-demand': null},
		_previousPlayRate: null,

		eventDispatcher: function (nativeEvent) {
			BS.logger.debug('Video event (type "' + nativeEvent.type + '") triggered!');
			BS.evMgr.dispatch(
				new VideoEvent(nativeEvent.type)
			);
		},

		registerVendorMediaResources: function (type) {
			this.currentMediaresourceObj = type;
		},

		get VendorMediaResources () {
			return this.currentMediaresourceObj;
		},

		applyMrOrchestrationRules: function (rules) {
			var rule;
			if ('on-demand' in rules) {
				rule = rules['on-demand'];
				this.mrOrchestrationRules['on-demand'] = rule;
				BS.logger.info('MEDIA-RES: On demand content rules ignores "%s" and regards "%s"',
					rule['ignore'].join(','), rule['prefer-order'].join(',')
				);
			}
			if ('live' in rules) {
				rule = rules['live'];
				this.mrOrchestrationRules['live'] = rules['live'];
				BS.logger.info('MEDIA-RES: Live content rules ignores "%s" and regards "%s"',
					rule['ignore'].join(','), rule['prefer-order'].join(',')
				);
			}
		},

		get player() {
			if (this._player)
				return this._player;
			else {
				var message = 'Note: <video/> not loaded yet.';
				BS.logger.info(message);
				throw message;
			}
		},

		get playMode() {
			return this._playMode;
		},

		get position() {
			var n = Date.now();
			this.positionTime += (n - this.lastTS) * this.currSpeed + 0.01;
			this.lastTS = n;
			if (this.printIndex++ % 5 === 0) {
				BS.logger.trace('Get video position SW: ' + this.positionTime.toNiceSeconds());
			}
			var pr = BS.device.videoCapable ? this.player.playbackRate : this.currSpeed;
			if (this._playMode === 'pause') {
				pr = 0;
			}
			this.currSpeed = pr;

			if (this._previousPlayRate !== null && this._previousPlayRate !== pr) {
				BS.logger.debug('MM: SPEED CHANGE %d -> %d', this._previousPlayRate, pr);
				this._onSpeedChange(this._previousPlayRate, pr, this.speed);
				BS.evMgr.dispatch(new VideoSpeedChangeEvent(this._previousPlayRate, pr));
				this.logHardwarePosition();
				this.syncWithHardwarePosition();
			}
			this._previousPlayRate = pr;
			return this.positionTime;
		},

		logHardwarePosition: function logHardwarePosition() {
			if (BS.logger.isGreaterThanDebug()) {
				BS.logger.trace('Video position HW: ' + this.player.currentTime);
			}
		},

		set position(absoluteVideoOffset) {
			this.lastTS = Date.now();
			this.positionTime = 0;
			this.player.currentTime = absoluteVideoOffset / 1000;
			BS.logger.info('Set video position HW: ' + absoluteVideoOffset.toNiceSeconds() + ' s');
		},

		get length() {
			try {
				return this.player.duration;
			} catch (ex) {
				BS.logger.info('Unable to get an asset length, reason' + ex.message);
				return null;
			}
		},

		get mediaResource() {
			return this._cMediaResource;
		},

		get isStreaming() {
			return this._isStreaming();
		},

		get subtitles() {
			if (!this._subsArriveSuccess)
				throw new MediaManagerError('no-subs-yet', 'Subtitles have not arrived yet!');
			return new StreamsList(this._subs);
		},

		set subtitle(subtitlesObj) {
			try {
				BS.logger.debug('Setting SUBTITLES stream to id: ' + subtitlesObj.id
					+ '(title: ' + subtitlesObj.title + ')');
				if (this._cSubtitle && this._cSubtitle !== subtitlesObj)
					this.player.ekiohControl.subtitleStream = subtitlesObj.nativeObject;
				this._cSubtitle = subtitlesObj;
			} catch (ex) {
				BS.logger.debug('Unable to change SUBTITLES stream, reason: ' + ex.message);
			}
			BS.logger.trace(subtitlesObj);
		},


		get subtitle() {
			if (!this._subsArriveSuccess)
				throw new MediaManagerError('no-subs-yet', 'Subtitles have not arrived yet!');
			try {
				if (!this._cSubtitle) {
					var el = this.player.ekiohControl.subtitleStream;
					this._cSubtitle = new Stream(el.id, el.title, el.type, el);
				}
			} catch (ex) {
				return this._NoSubs;
			}
			BS.logger.trace(this._cSubtitle);
			return this._cSubtitle;
		},

		get audios() {
			if (this._audioArrivedSuccess === false)
				throw new MediaManagerError('no-audios-yet', 'Audios have not arrived yet!');

			var audios = new StreamsList(this._audios);
			BS.logger.trace(audios);
			return audios;
		},


		get audio() {
			if (this._audioArrivedSuccess === false)
				throw new MediaManagerError('no-audios-yet', 'Audios have not arrived yet!');
			try {
				if (!this._cAudio) {
					var el = this.player.ekiohControl.audioStream;
					this._cAudio = new Stream(el.pid, el.language, el.type, el);
				}
			} catch (ex) {
				BS.logger.debug('Unable to get current AUDIO stream, reason: ' + ex.message);
			}
			return this._cAudio;
		},

		set audio(audioObj) {
			try {
				BS.logger.debug('Setting AUDIO stream to id: ' + audioObj.id
					+ '(title: ' + audioObj.title + ')');
				if (this._cAudio && this._cAudio !== audioObj)
					this.player.ekiohControl.audioStream = audioObj.nativeObject;
				this._cAudio = audioObj;
			} catch (ex) {
				BS.logger.debug('Unable to change AUDIO stream, reason: ' + ex.message);
			}
			BS.logger.trace(audioObj);
		},

		set videoAspectRatio(ratio) {
			var DAR = BS.Device.prototype.DisplayAspectRatio;
			var playerPAR;
			switch (ratio) {
			case DAR.Fit43:
				playerPAR = 'none';
				break;
			case DAR.Preserve43:
				playerPAR = 'xMidYMid meet';
				break;
			case DAR.Fit169:
				playerPAR = 'none';
				break;
			case DAR.Preserve169:
				playerPAR = 'xMidYMid meet';
				break;
			default:
				throw new Error('invalid-video-aspect-ratio');
			}
			$(this.player).attr('preserveAspectRatio', playerPAR);
			this.displayFormat = ratio;
			BS.evMgr.dispatch(new VideoAspectRatioChangeEvent(ratio));
			this._videoBoxRatio = ratio;
		},

		get videoAspectRatio() {
			return this._videoBoxRatio;
		},

		set displayFormat(type) {
			var svgRoot = $('#svg');
			var leftSide = $('#leftSide');
			var rightSide = $('#rightSide');
			var DAR = BS.Device.prototype.DisplayAspectRatio;
			switch (type) {
			case DAR.Fit43:
			case DAR.Preserve43:
				svgRoot.attr('viewBox', aspects43.svg.viewBox).attr('transform',
					aspects43.svg.transform);
				leftSide.attr('transform', aspects43.leftSide.transform);
				rightSide.attr('transform', aspects43.rightSide.transform);
				break;
			case DAR.Fit169:
			case DAR.Preserve169:
				svgRoot.attr('viewBox', '0 0 1280 720').attr('transform', '');
				leftSide.attr('transform', 'translate(40,0)');
				rightSide.attr('transform', 'translate(1250,0)');
				break;
			default:
				throw new Error('invalid-video-display-format');
			}
			this._displayFormat = type;
			this.resetPlayerPosition();
			BS.logger.debug('NOTE: interface display format CHANGED to ' + type);
		},
		get displayFormat() {
			return this._displayFormat;
		},
		get displayMargins() {
			var DAR = BS.Device.prototype.DisplayAspectRatio;
			return (this._displayFormat === DAR.Fit169 || this._displayFormat === DAR.Preserve169)
				? {
					ideal: {x: 0, y: 0, width: 1280, height: 720},
					safe: {x: 70, y: 20, width: 1140, height: 670}
				}
				: {
					ideal: {x: aspects43.video.x, y: 0, width: aspects43.video.width, height: 720},
					safe: {x: 160, y: 10, width: 970, height: 660}
				};
		},
		movePlayerTo: function movePlayerTo(x, y, width, height, durationInMs) {
			durationInMs = durationInMs || 0;
			this.playerPositionAnimations.x.attr('to', x).attr('dur', durationInMs + 'ms').begin();
			this.playerPositionAnimations.y.attr('to', y).attr('dur', durationInMs + 'ms').begin();
			this.playerPositionAnimations.width.attr('to', width).attr('dur', durationInMs + 'ms').begin();
			this.playerPositionAnimations.height.attr('to', height).attr('dur', durationInMs + 'ms').begin();
			this.playerPosition = { x: x, y: y, width: width, height: height };
		},
		resetPlayerPosition: function resetPlayerPosition() {
			var DAR = BS.Device.prototype.DisplayAspectRatio;
			if (this._displayFormat === DAR.Fit169 || this._displayFormat === DAR.Preserve169) {
				this.movePlayerTo(0, 0, 1280, 720);
			} else {
				this.movePlayerTo(aspects43.video.x, 0, aspects43.video.width, 720);
			}
		},

		_isStreaming: function () {
			return !(this.player['width'] === 0 && this.player['height'] === 0);
		},

		isTrickPlayAllowed: function () {
			var that = this;
			var res = that._cMediaResource;
			return res && MediaResources.isOtt(res) ? BS.device.ottTrickPlayCapable : true;
		},
		selectMediaResource: function (resources, context, cback) {
			var that = this;
			cback = cback || function () {};
			if (!(resources instanceof MediaResources)) {
				throw new MediaManagerError(
					'invalid-object',
					'cannot play resource that is not instance of MediaResources'
				);
			}
			resources.getResources(function (res) {
				if (context !== 'livetv' && context !== 'vod') {
					throw new MediaManagerError('not-supported', 'Not supported yet');
				}

				var contentRule = context === 'livetv' ? 'live' : 'on-demand';
				res = MediaResources.applyOrchestrationRule(res, contentRule);
				var index = that.mediaResourceIndex;
				var resource = res[index];
				if (!resource) {
					cback(null);
					return;
				}
				if (BS.tokenManager.isTokenizedResource(resource)) {
					if (BS.tokenManager.isResourceValid(resource)) {
						BS.logger.info(
							'MR TOKEN Resource still valid. Till: %s', new Date(resource.expiresAt)
						);
						cback(resource);
					} else {
						BS.tokenManager.refreshToken(resource)
							.then(cback)
							.catch(function (ex) {
								BS.logger.log(ex);
								cback(null);
							})
							.done();
					}
				} else {
					BS.logger.info('MR: Can play resource directly');
					cback(resource);
				}
			});
		},
		_currentMediaResource: null,
		_setCurrentMediaResource: function _setCurrentMediaResource(res) {
			var that = this;
			if (that._currentMediaResource &&
				BS.tokenManager.isTokenizedResource(that._currentMediaResource)
			) {
				BS.tokenManager.clearExpireCallback();
			}

			that._currentMediaResource = res;

			if (res === null) return;
			if (!BS.tokenManager.isTokenizedResource(res)) return;

			BS.tokenManager.setResource(res, function tokenRefresh(resource) {
				if (that._playMode !== 'live') {
					BS.logger.info(
						'MR TOKEN Refresh token, other than livetv resource has expired. Will not' +
						'refresh it till trying to play it again.'
					);
					return;
				}
				BS.tokenManager.refreshToken(resource).then(function (resource) {
					BS.logger.info(
						'MR TOKEN Refresh token, playing new url: %s, valid till: %s',
						resource.src,
						new Date(resource.expiresAt)
					);
					that._playUrl(resource.src);
					that._setCurrentMediaResource(resource);
				}).catch(function (ex) {
					BS.logger.info(
						'MR TOKEN Refresh token, ' +
						'could not get valid token (stopping current stream)'
					);
					BS.logger.log(ex);
					that.stop();
				}).done();
			});
		},
		playMediaResource: function (resources, context, onBeforePlay, resourceUnfinished, position) {
			var that = this;
			var fallbackEnabled = BS.config.get('Core.Client.STREAM_FALLBACK_ENABLED');
			onBeforePlay = onBeforePlay || function () {};
			that._cMediaResource = null;
			that.selectMediaResource(resources, context, function (res) {
				that._cMediaResource = res;
				if (!res) {
					that.mediaResourceIndex = 0;
					that._playUrl(null);
					onBeforePlay(null);
					return;
				}

				if (fallbackEnabled) {
					if (that.streamException) that.streamException.unbind();
					if (that.streamPlay) that.streamPlay.unbind();
					if (that.channelChange) that.channelChange.unbind();

					that.streamException = BS.evMgr.bind('onVideoError', function () {
						that.mediaResourceIndex++;
						BS.media.playMediaResource(
							resources, context, onBeforePlay, resourceUnfinished, position
						);
					});
					that.streamPlay = BS.evMgr.bind('onVideoPlay', function () {
						that.mediaResourceIndex = 0;
					});
					if (context === 'livetv') {
						that.channelChange = BS.evMgr.bind('onChannelChange', function () {
							that.mediaResourceIndex = 0;
						});
					}
				}

				switch (context) {
				case 'livetv':
					that._setCurrentMediaResource(res);
					that._playUrl(res.src);
					break;
				case 'vod':
					var playbackSpeeds = [];
					try {
						that._playAsset(res.src, res.offset,
							resources.getTrickplaySpeeds(res) || playbackSpeeds, position);
						that._setCurrentMediaResource(res);
					} catch (x) {
						that._playAsset(null, 0, []);
						that._setCurrentMediaResource(null);
					}
					break;
				}
				onBeforePlay(res);
			});

		},
		cPlayingUrl: null,
		_playUrl: function (url) {
			if (!url) {
				BS.logger.info('No url given, so i\'m stopping video');
				this.stop();
				return;
			}
			if (url === this.cPlayingUrl) {
				BS.logger.info(
					'Url already set, skipping url change (' + url + ', ' + this.cPlayingUrl + ')'
				);
				return;
			}
			this.cPlayingUrl = url;
			try {
				var r = this.player;
				r.endElement();
				BS.logger.info('Setting video URL to: ' + url);
				r.setAttributeNS(NS.xlink, 'href', url);
				r.start = 0;
				r.beginElement();
				this._playMode = 'live';
				this.cPlayingUrl = url;

			} catch (e) {
				BS.logger.info('Unable to set the channel. Exception: ');
				BS.logger.log(e);
			}
		},


		_playAsset: function (url, startOffset, speeds, startPosition) {
			startOffset = startOffset || 0;
			this.playStartOffset = Math.round(startOffset / 1000);
			BS.logger.info('PlayAsset (%s), VoD start offset: %ss, Start position: %ss'
				.sprintf(url, this.playStartOffset, startPosition / 1000));
			this.vodPlaybackSpeeds = speeds || [];
			this.positionTime = startPosition;
			this.currSpeed = 1;
			this.ctAtPaused = 0;
			this.nextTrickplayIndex = 0;

			try {
				var r = this.player;
				r.endElement();
				r.start = this.playStartOffset + (startPosition / 1000);
				r.setAttributeNS(NS.xlink, 'href', url);
				this.cPlayingUrl = url;
				r.beginElement();
				this.syncWithHardwarePosition();
				this._playMode = 'play';
				this.lastTS = Date.now();

			} catch (ex) {
				BS.logger.debug('Unable to play asset, reason: ' + ex.message);
			}
		},

		syncWithHardwarePosition: function () {
			var position = 1000 * (this.player.currentTime - this.playStartOffset);
			if (this._playMode === 'pause' && position <= 0){
				return;
			}
			if (position < 0) {
				this.positionTime = 0;
			} else {
				this.positionTime = position;
			}
		},

		stop: function () {
			if ('stop' === this._playMode) {
				BS.logger.debug('Unable to stop mcast/unicast stream. Player already stopped.');
			}
			try {
				BS.logger.info('beesmart stop');

				this.positionTime = 0;
				this.ctAtPaused = 0;
				this._playMode = 'stop';
				this.player.endElement();

				this.cPlayingUrl = null;

			} catch (e) {
				BS.logger.debug('Unable to stop mcast/unicast stream. Reason: ' + e.message);
			}
		},

		pause: function () {
			try {
				this.currSpeed = 0;
				this.nextTrickplayIndex = 0;
				this.ctAtPaused = this.player.currentTime;

				BS.logger.info('Paused on ' + this.ctAtPaused);

				this.player.pauseElement();
				this._playMode = 'pause';
				this.logHardwarePosition();
				this.syncWithHardwarePosition();
			} catch (e) {
				BS.logger.debug('Unable to pause mcast/unicast stream. Reason: ' + e.message);
			}
		},
		play: function (startOffset) {
			var r = this.player;
			var msg = 'Play content at effective offset %ds (%ds rel. offset + %ds start offset ' +
				'+ %ds currentTime@pause)';
			this._playMode = 'play';
			try {
				if (typeof startOffset === 'undefined') {
					BS.logger.info('Resume playback');
					r.resumeElement();
					this.logHardwarePosition();
					this.syncWithHardwarePosition();
					BS.evMgr.dispatch(new VideoResumePlaybackEvent());
				} else {
					startOffset = startOffset / 1000;
					var effectiveOffset = this.playStartOffset + this.ctAtPaused + startOffset;
					BS.logger.info(msg, effectiveOffset, startOffset, this.playStartOffset,
						this.ctAtPaused);
					r.currentTime = effectiveOffset;
					r.resumeElement();
					this.lastTS = Date.now();
					this.positionTime = startOffset * 1000;
					this.logHardwarePosition();
					this.syncWithHardwarePosition();
					BS.evMgr.dispatch(new VideoPositionChangedEvent());
				}
			} catch (ex) {
				BS.logger.debug('Play error, reason: ' + ex);
			}

			this.ctAtPaused = 0;
			this.currSpeed = 0;
			this.nextTrickplayIndex = 0;
		},

		_onSpeedChange: function () {},
		playSpeedIncrement: function (mode, whenChanged) {
			var pace;
			if (!(pace = this.vodPlaybackSpeeds[this.nextTrickplayIndex])) {
				throw 'no-trickplay-possible';
			}
			var factor = mode === 'backward' ? -1 : 1;
			this._onSpeedChange = whenChanged || this._onSpeedChange;
			if (this.currSpeed * factor < 0) {
				this.nextTrickplayIndex = 0;
				pace = this.vodPlaybackSpeeds[this.nextTrickplayIndex];
			}
			this.currentTrickplayIndex = this.nextTrickplayIndex;
			this.nextTrickplayIndex = this.nextTrickplayIndex + 1 >= this.vodPlaybackSpeeds.length ?
				0 : this.nextTrickplayIndex + 1;

			this.currSpeed = pace * factor;
			this.player.setSpeed(this.currSpeed);

			BS.logger.debug('Set current speed HW: ' + this.currSpeed + 'X');
			this._trickplayDirection = factor;
			this._playMode = 'trickplay';
		},
		ff: function (cb) {
			this.playSpeedIncrement('forward', cb);
		},
		rew: function (cb) {
			this.playSpeedIncrement('backward', cb);
		},

		isTrickplayActive: function () {
			return this._playMode === 'trickplay';
		},

		get trickplayDirection() {
			return this._playMode !== 'trickplay' ? 0 : this._trickplayDirection;
		},

		get speed() {
			return this.vodPlaybackSpeeds[this.currentTrickplayIndex] ||
				this.vodPlaybackSpeeds[this.currentTrickplayIndex];
		},

		get teletext() {
			return this._ttxMode;
		},

		set teletext(onOrOff) {
			try {
				BS.logger.debug('Reading TTX streams...');
				var ec = this.player.ekiohControl;
				var streams = ec.teletextStreams;

				if (!streams) {
					BS.logger.debug('no TTX streams present, TTX streams is :', streams);
					return this._ttxMode;
				}
				this._ttxMode = onOrOff;

				if (this._ttxMode) {
					BS.logger.debug('TTX stream present, opening TTX screen...');
					ec.teletextStream = streams[0];

				} else {
					BS.logger.debug('Closing TTX screen...');
					ec.teletextStream = null;
				}

				ec.displayTeletext = this._ttxMode;

			} catch (e) {
				BS.logger.debug('Unable to set the teletext. Reason: ' + e.message);
			}

		return this._ttxMode;
	},
	isTeletextShown: function () {
		try {
			return this._player.ekiohControl.displayTeletext;
		} catch (e) {}
		return false;
	},


		_subs: [],
		_subsArriveSuccess: false,
		_cSubtitle: null,
		_NoSubs: new Stream(-1, 'noSubs', null, null),
		_audios: [],
		_audioArrivedSuccess: false,
		_cAudio: null,
		trace: BS.logger.trace,


		NoSubs: this._NoSubs,
		NoAudios: new Stream(-1, 'noAudios', null, {pid: -1}),


		_subsArrived: function () {
			try {
				var sStreams = this.player.ekiohControl.subtitleStreams;
				this._subs = [];
				this._subs.push(this._NoSubs);
				for (var i in sStreams) {
					var el = sStreams[i];
					if (el.pid === 8192 && el.language === 'und') continue;
					this._subs.push(new Stream(el.pid, el.language, el.type, el));
				}
				this._subsArriveSuccess = true;
			} catch (ex) {
				BS.logger.debug('Unable to read SUBTITLE streams list. Reason: ' + ex.message);
			}
			this._cSubtitle = this.subtitle;
			return new StreamsList(this._subs);
		},

		_readSubs: function () {
			return this._subsArrived();
		},

		_resetSubStreamProps: function () {
			this._subs = [];
			this._subsArriveSuccess = false;
			this._cSubtitle = false;
			this._audios = [];
			this._audioArrivedSuccess = false;
			this._cAudio = false;
		},

		_audioArrived: function () {
			try {
				var aStreams = this.player.ekiohControl.audioStreams;
				this._audios = [];
				for (var i in aStreams) {
					var el = aStreams[i];
					this._audios.push(new Stream(el.pid, el.language, el.type, el));
				}
				this._audioArrivedSuccess = true;
			} catch (ex) {
				BS.logger.debug('Unable to read AUDIO streams list. Reason: ' + ex.message);
			}
			this._cAudio = this.audio;
			return new StreamsList(this._audios);
		},

		_readAudios: function () {
			return this._audioArrived();
		},

		toString: function () {
			return 'MediaManger(' + this.iAm + ')';
		}
	};


	MediaManager.prototype.convertHlsProfileToQuality = function (noProfiles, chosenProfileNumber) {

		if (noProfiles > 0 && noProfiles <= 12) {

			var profilesMatrix = [
				[0],
				[0, 5],
				[0, 1, 5],
				[0, 1, 2, 5],
				[0, 1, 2, 4, 5],
				[0, 1, 2, 3, 4, 5],
				[0, 1, 2, 3, 3, 4, 5],
				[0, 1, 2, 2, 3, 4, 4, 5],
				[0, 1, 2, 2, 3, 3, 4, 4, 5],
				[0, 1, 2, 2, 3, 3, 3, 4, 4, 5],
				[0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5],
				[0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5],
				[0, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5]
			];

			return profilesMatrix[noProfiles][chosenProfileNumber];
		}

		return 0;

	};


	function StreamInfoEvent(position, duration, quality) {
		this.data = {
			position: position || null,
			duration: duration || null,
			quality: quality || 0
		};
	}

	StreamInfoEvent.prototype = {
		type: 'StreamInfoEvent',
		handler: 'onStreamInfo',
		data: null
	};

	Object.extend(StreamInfoEvent, BS.Event);
	MediaManager.StreamInfoEvent = StreamInfoEvent;

	BS.MediaManager = MediaManager;
	BS.media = new MediaManager();

	BS.media.registerVendorMediaResources(MediaResources);

})(BeeSmart);

(function (BS, q, mm) {

	function StatisticsService(options) {
		this.maxEventsBeforeSend = options.maxEventsBeforeSend;
		this.minTvWatch = options.minTvWatch;
		this._interval = options.interval;
		this._enabled = options.enabled;
		this.events = [];
		this.pendingEvent = null;
		if (this.enabled)
			this.startBackgroundTask();
	}

	StatisticsService.prototype = {
		maxEventsBeforeSend: 0,
		minTvWatch: 0,
		backgroundTask: null,
		events: [],
		pendingEvent: null,
		_interval: 0,
		get interval() {
			return this._interval;
		},
		set interval(value) {
			if (this._interval !== value) {
				this._interval = value;
				if (this.enabled)
					this.backgroundTask.interval = value;
			}
		},
		_enabled: true,
		set enabled(value) {
			if (value === false && this._enabled === true) {
				this.endBackgroundTask();
			} else if (value === true && this._enabled === false) {
				this.startBackgroundTask();
			}
			this._enabled = value;
		},
		get enabled() {
			return this._enabled;
		},
		startBackgroundTask: function () {
			var that = this;
			that.backgroundTask = BS.backgroundService.addTask(function () {
				if (BS.portal.isOnline) that.send(false, false);
			}, {
				name: 'Statistics sender',
				interval: that.interval
			});
		},
		endBackgroundTask: function () {
			BS.backgroundService.removeTask(this.backgroundTask);
			this.backgroundTask = null;
		},
		write: function (eventData) {
			if (!this.enabled) return;
			if (!eventData || !('eventId' in eventData))
				return;
			BS.logger.debug('STAT: write: writing event ' + Object.serialize(eventData));
			this.events.push(eventData);
			if (this.maxEventsBeforeSend <= this.events.length) {
				BS.backgroundService.runTask(this.backgroundTask);
			}
		},
		send: function (callback, noRetries) {
			if (!this.enabled) {
				setTimeout(callback || BS.F, 0);
				return;
			}
			var that = this;
			BS.logger.debug('STAT: send: periodic send invoked');

			try {
				var ch = mm.getApp('liveTv').getCurrentChannel();
				if (ch && ch.id && BeeSmart.device.power === 'on') {
					BS.logger.debug('Statistics - appending currently watched livetv ' +
						'channel id');
					that.events.push({
						eventId: StatisticsService.eventIds.currentlyWatchingLiveTv,
						uid: ch.uid
					});
				} else {
					BS.logger.debug('Statistics - Wont append currently watched livetv ' +
						'channel id because' + (BeeSmart.device.power === 'on' ?
							'no channel is set' : 'STB is in standby'));
				}
			} catch (e) {
				BS.logger.log(e);
			}
			if (that.events.length === 0) {
				if (callback)
					setTimeout(callback, 0);
				BS.logger.debug('STAT: send: nothing to send');
				return;
			}
			var sendEvents = that.events;
			that.events = [];

			BS.logger.debug('STAT: send: sending ');
			BS.request.Post('/restapi/rest/%d/%d/statistics'.sprintf(
				BS.portal.user.regionId, BS.portal.user.userId), {
				accept: 'json',
				data: {
					'json_stat': '{"dataList":' + JSON.stringify(sendEvents) + '}'
				}
			}).complete(function (response) {
				if (response.success) {
					BS.logger.debug('STAT: send::processReply: sending was successful');
					sendEvents = false;
					if (callback)
						callback();
				} else {
					BS.logger.debug('STAT: send::processReply: sending was not successful');
					if (noRetries || response.status === 400) {
						sendEvents = false;
						if (callback)
							callback();
					} else {
						that.events = sendEvents.concat(that.events);
						sendEvents = false;
						setTimeout(function () {
							that.send(callback, false);
						}, 900000);
					}
				}
			});
		},
		beginEvent: function (partialEventData, when) {
			if (!this.enabled) return;
			try {
				if (!when || isNaN(when) || (when && typeof(when) !== 'number')) {
					BS.logger.debug('STAT: beginEvent: correcting WHEN parameter to ' +
						'current time, since current WHEN typeof is ' + typeof(when));
					when = Date.now();
				}

			} catch (e) {
				BS.logger.debug(e);
			}
			BS.logger.debug('STAT: beginEvent: invoked ' + partialEventData + ',' + when);
			this.endEvent(when);
			this.pendingEvent = {
				data: partialEventData,
				start: when
			};
		},
		endEvent: function (when, rating) {
			if (!this.enabled) return;
			try {
				if (!when || isNaN(when) || (when && typeof(when) !== 'number')) {
					BS.logger.debug('STAT: endEvent: correcting WHEN parameter to ' +
						'current time, since current WHEN typeof is ' + typeof(when));
					when = Date.now();
				}
			} catch (e) {
				BS.logger.debug(e);
			}
			BS.logger.debug('STAT: endEvent: invoked ' + when + ',' + rating);
			if (this.pendingEvent) {
				var duration = parseInt((when - this.pendingEvent.start) / 1000);
				if ((duration < 1) ||
					((this.pendingEvent.data.eventId === StatisticsService.eventIds.liveTvWatch
					|| this.pendingEvent.data.eventId === StatisticsService.eventIds.radioPlay)
					&& (duration < this.minTvWatch))
				) {
					this.pendingEvent = null;
					BS.logger.debug('STAT: endEvent: not ending too short TV watching, ' +
						'duration=%s', duration);
					return;
				}
				var eventData = this.pendingEvent.data;
				eventData.duration = duration;

				this.pendingEvent = null;

				if (rating !== undefined && rating !== null)
					eventData.rating = rating;

				BS.logger.debug('STAT: endEvent: writing: %s', eventData);
				this.write(eventData);
			} else
				BS.logger.debug('STAT: endEvent: nothing to end');
		}
	};

	StatisticsService.eventIds = {
		liveTvWatch: '1',
		vodWatch: '2',
		programRecordingWatch: '3',
		instantRecordingWatch: '4',
		epgSwitchedOn: '5',
		epgSwitchedOff: '6',
		vodBookmarkCreated: '7',
		programRecordingBookmarkCreated: '8',
		instantRecordingBookmarkCreated: '9',
		programRecordingScheduled: '10',
		programRecordingDeleted: '11',
		instantRecordingDeleted: '12',
		pauseAndResume: '13',
		vodTrailerWatch: '14',
		beeStoreAppLaunched: '15',
		radioPlay: '16',
		taLiveTv: '17',
		taVod: '18',
		lpvrProgramRecordingScheduled: '21',
		lpvrProgramRecordingWatched: '22',
		lpvrProgramRecordingDeleted: '23',
		lpvrInstantRecordingStarted: '24',
		lpvrInstantRecordingWatched: '25',
		lpvrInstantRecordingDeleted: '26',
		lpvrPauseAndResumeOperation: '27',
		lpvrDiskFull: '28',
		lpvrRecordingConflict: '29',
		lpvrReplayOperation: '30',
		mosaicSelectionConfirmed: '31',
		catchUpTvProgramStarted: '32',
		startOverStarted: '33',
		currentlyWatchingLiveTv: '101'
	};

	BS.StatisticsModel = {};
	BS.StatisticsModel.StatisticsService = StatisticsService;

})(
	BeeSmart,
	Q,
	BeeSmart.modMgr
);

(function (BS, mm, am, em, q) {
	var recMgr = {
		recordersByPriority: [],
		recordingListGetters: [],
		PRIORITY_LOW: 10,
		PRIORITY_LOW_MEDIUM: 15,
		PRIORITY_MEDIUM: 20,
		PRIORITY_MEDIUM_HIGH: 25,
		PRIORITY_HIGH: 30
	};
	BS.recMgr = recMgr;

	var bMisc;
	var bsRegionId = null;
	var bsUserId = null;
	var MODULE_NAME = 'RECORDER';

	function niceTime(s) {
		return '%02d:%02d:%02d'.sprintf(s.getHours(), s.getMinutes(), s.getSeconds());
	}


	var PVR = {
		StorageLocation: { Network: 0, Device: 1},
		TimeFrameBase: { TvShow: 0, UserDecision: 1},
		StorageProcess: { UpfrontReservation: 0, CircularBuffer: 1 },
		ServiceNames: {
			NpvrInstant: 'instantpvr',
			NpvrProgram: 'epgpvr',
			NpvrPNR: 'tvinterrupt',
			NpvrCatchUp: 'timeshifting',
			NpvrStartOver: 'startovertv',
			LpvrInstant: 'lpvr-instant-recording',
			LpvrProgram: 'lpvr-program-recording',
			LpvrPNR: 'lpvr-pause-resume',
			SeriesRecording: 'recordseries',
			NpvrAdopt: 'recordings_adoption',
			NpvrAdoptEpisode: 'adopt_episode'
		},
		RecordingFeatures: {
			Instant: 'instant',
			Program: 'program',
			PNR: 'pauseAndResume',
			CatchUp: 'catchUp',
			StartOver: 'startOver',
			Replay: 'replay',
			Adopt: 'adopt',
			AdoptEpisode: 'adoptEpisode',
			Series: 'series',
			LocallyPersisted: 'locallyPersisted',
			NetworkPersisted: 'networkPersisted',
			Recording: 'recording'
		}
	};


	var evHandler = BS.evMgr.bind('onTvLibraryUpdate', function (e) {
		if (e.data.type !== 'channel-video')
			return;
		bsRegionId = BS.portal.user.regionId;
		bsUserId = BS.portal.user.userId;
		bMisc = mm.getApp('Misc');
		try {
			BS.recMgr.initializeRecorder();
			BS.recorder.list(BS.F, true);

		} catch (x) {
			BS.logger.info('%s: ERROR: Specific recorder initialization process failed (%s)',
				MODULE_NAME, x);
		}

		setTimeout(function () {
			evHandler.unbind();
		}, 100);
	});
	recMgr.Recorder = Class.extend(new function () {
		var that = this;
		that._recordingSeries = {};
		that.listRecordings = {};
		that._lgLock = false;

		that.startMargin = 0;
		that.endMargin = 0;

		this.init = function (options) {
			var dStart = options.startMargin;
			var dEnd = options.endMargin;
			var m1 = 'RECORDER: Invalid recording margin configured (start %dms, end %dms)';
			var m2 = 'RECORDER: Recording margins apply (start %dmin, end %dmin)';
			if (typeof dStart !== 'number' || typeof dEnd !== 'number') {
				BS.logger.debug(m1.sprintf(dStart), dEnd);
				dEnd = dStart = 0;

			} else if (dStart < 0 || dEnd < 0) {
				BS.logger.debug(m1.sprintf(dStart, dEnd));
				dEnd = dStart = 0;
			}

			BS.logger.debug(m2.sprintf(Number(dStart / 6e4).toFixed(1), Number(dEnd / 6e4)
				.toFixed(1)));
			this.startMargin = dStart || this.startMargin;
			this.endMargin = dEnd || this.endMargin;
		};
		this.list = function (callback, forceRefresh) {
			if (that._lgLock)
				throw 'recorder-list-in-progress';

			that._lgLock = true;
			callback = callback || BS.F;

			var listGetters = recMgr.recordingListGetters,
				syncI = listGetters.length;

			if (forceRefresh) {
				that._dispatchRemovedEvents();
				that.listRecordings = {};
				that._recordingSeries = {};

				for (var i = 0, len = syncI; i < len; i++) {
					var obj = listGetters[i];

					obj.listGetter(function (newRecsList) {
						var j;
						var len = newRecsList.length;
						for (j = 0; j < len; j++) {
							var item = newRecsList[j];
							if (item instanceof recMgr.Recording) {
								that.addNewRecording(item);
							} else if (item instanceof recMgr.SeriesRecord) {
								that._recordingSeries[that.getSeriesInternalId(item)] = item;
							} else {
								throw 'recorder-list-invalid-recording-supplied';
							}
						}

						if (--syncI === 0) {
							completeCall(that.listRecordings);
						}
					});
				}
			} else {
				completeCall(that.listRecordings);
			}

			return this;

			function completeCall(listRecordings) {
				var retObj = toArray(listRecordings);
				that._lgLock = false;
				retObj.sort(byStartTime);
				callback(retObj);
			}

			function toArray(obj) {
				var arr = [];
				for (var j in obj) {
					if (obj.hasOwnProperty(j))
						arr.push(obj[j]);
				}
				return arr;
			}

			function byStartTime(a, b) {
				a = a.start;
				b = b.start;
				if (typeof a !== 'number')
					a = a.getTime();
				if (typeof b !== 'number')
					b = b.getTime();
				return b - a;
			}
		};
		this.getList = function () {
			var retObj = [];
			for (var j in that.listRecordings)
				retObj.push(that.listRecordings[j]);
			return retObj;
		};
		this.getRecording = function (field, value) {
			if (field === 'recordId' && that.listRecordings[value])
				return that.listRecordings[value];
			else if (field !== 'recordId') {
				for (var j in that.listRecordings) {
					var cRec = that.listRecordings[j];
					if (cRec[field] && cRec[field] === value)
						return cRec;
				}
			}
			return null;
		};
		this.getRecordingsToFinalize = function () {
			return [];
		};
		this.start = function (options, callback) {};
		this.addNewRecording = function (recordingObj) {
			if (!(recordingObj instanceof recMgr.Recording))
				throw 'add-recording-invalid-recording-supplied';

			that.listRecordings[recordingObj.recordId] = recordingObj;
			em.dispatch(new that.RecordingListChangeEvent('Added', recordingObj));
			return recordingObj;
		};
		this.getSeriesInternalId = function(recObj) {
			return recObj.seriesUid ?
				recObj.seriesUid.toLowerCase() + '-' + recObj.channelId :
				recObj.partOfSeries.toLowerCase() + '-' + recObj.channelId;
		};
		this.addSeriesRecord = function(recObj) {
			if (!(recObj instanceof recMgr.SeriesRecord))
				throw 'add-series-record-invalid-recording-supplied';
			that._recordingSeries[that.getSeriesInternalId(recObj)] = recObj;
			BS.evMgr.dispatch(new that.SeriesListChangeEvent('Added', recObj));
			return recObj;
		};
		this._adoptEpisode = function(recObj){
			if (!(recObj instanceof recMgr.Recording))
				throw 'adopt-episode-invalid-recording-supplied';

			var sr = that._recordingSeries[that.getSeriesInternalId(recObj)];
			recObj.partOfSeries = null;
			if (sr.episodes.indexOf(recObj.recordId) !== -1){
				sr.episodes.splice(sr.episodes.indexOf(recObj.recordId),1);
			}
		};
		this._dispatchSeriesRemovedEvents = function () {
			var that = this;
			Object.eachKey(this._recordingSeries, function (key) {
				var episodes = this[key].episodes;
				episodes.forEach(function (id) {
					if (id && id in that.listRecordings) {
						BS.evMgr.dispatch(
							new that.RecordingListChangeEvent('Removed', that.listRecordings[id]));
					}
				});
				BS.evMgr.dispatch(new that.SeriesListChangeEvent('Removed', this));
			});
		};
		this._dispatchRemovedEvents = function () {
			this._dispatchSeriesRemovedEvents();
			Object.eachKey(this.listRecordings, function (id) {
				var recordingObj = this[id];
				em.dispatch(new that.RecordingListChangeEvent('Removed', recordingObj));
			});
		};
		this._remove = function (recordingObj) {
			var id = recordingObj.recordId;

			if (recordingObj instanceof recMgr.SeriesRecord){
				var internalId = that.getSeriesInternalId(recordingObj);
				var episodes = that._recordingSeries[internalId].episodes;

				for (var i in episodes) {
					if (!episodes.hasOwnProperty(i))
						continue;
					id = episodes[i];
					if (id && id in that.listRecordings) {
						BS.evMgr.dispatch(
							new this.RecordingListChangeEvent('Removed', that.listRecordings[id]));
						delete that.listRecordings[id];
					}
				}
				that._recordingSeries[internalId] = null;
				delete that._recordingSeries[internalId];
				BS.evMgr.dispatch(new this.SeriesListChangeEvent('Removed', recordingObj));
				return true;
			}

			if (id && that.listRecordings[id]) {
				var isLocal = recordingObj instanceof recMgr.LocalRecording;
				var isScheduled = recordingObj.isScheduled();
				var event = {
					start : Date.now()
				};
				delete that.listRecordings[id];
				em.dispatch(new that.RecordingListChangeEvent('Removed', recordingObj));

				if (isLocal) {
					event.eventId = isScheduled ? bMisc.eventIds.lpvrProgramRecordingDeleted :
						bMisc.eventIds.lpvrInstantRecordingDeleted;
				} else {
					event.eventId = isScheduled ? bMisc.eventIds.programRecordingDeleted :
						bMisc.eventIds.instantRecordingDeleted;
					event.id = recordingObj.recordId;
					event.uid = recordingObj.recordId;
				}
				bMisc.event.write(event);

				return true;
			}
			throw 'remove-recording-failed';
		};
		this.quota = function (callback) {
			callback(['no quota on basic recorder']);
		};
		this.recordingSeriesList = function () {
			var list = [];
			for (var i in that._recordingSeries){
				list.push(that._recordingSeries[i]);
			}
			return list;
		};

		this.isSeriesScheduled = function(uid, channelId) {
			return (uid + '-' + channelId) in that._recordingSeries;
		};

		this.getSeries = function(uid, channelId) {
			return that._recordingSeries[uid.toLowerCase() + '-' + channelId];
		};

		this.RecordingListChangeEvent = function (changeType, recordingObj) {
			var ev = this;
			ev.type = 'RecordingListChangeEvent';
			ev.handler = 'onRecording' + changeType;
			ev.data = recordingObj || null;
			ev.cancelable = false;
		};
		this.RecordingListChangeEvent.prototype = new BS.Event();
		this.SeriesListChangeEvent = function (changeType, seriesUid) {
			var ev = this;
			ev.type = 'RecordingListChangeEvent';
			ev.handler = 'onSeries' + changeType;
			ev.data = seriesUid || null;
			ev.cancelable = false;
		};
		this.SeriesListChangeEvent.prototype = new BS.Event();

		function InstantRecEvent(eventType, chId, msg) {
			var ev = this;
			var map = {
				'Start': 'onInstantRecStart', 'Stop': 'onInstantRecStop',
				'Failed': 'onInstantRecFailed'
			};
			ev.type = 'InstantRecEvent';
			ev.handler = map[eventType];
			if (!ev.handler)
				throw new Error('invalid-argument-event-type');
			ev.data = chId;
			ev.msg = msg;
			ev.cancelable = false;
		}

		InstantRecEvent.prototype = new BS.Event();
		this.InstantRecEvent = InstantRecEvent;
	});
	recMgr.Recorder.registerListGetter = function (listGetter) {
		for (var i = 0; i < recMgr.length; i++) {
			var cGetter = recMgr.recordingListGetters[i];
			if (cGetter.listGetter === listGetter) {
				return;
			}
		}
		recMgr.recordingListGetters.push({'listGetter': listGetter});
	};

	recMgr.initializeRecorder = function () {
		BS.recMgr.recordersByPriority.sort(function (a, b) {
			return b.priority - a.priority;
		});
		if (BS.recMgr.recordersByPriority.length === 0)
			throw 'no-proper-recorder-found';

		var cRecorderIndex = 0;
		var availableRecs = BS.recMgr.recordersByPriority;
		var maxRecorderIndex = availableRecs.length;

		while (cRecorderIndex < maxRecorderIndex) {
			if (
				!availableRecs[cRecorderIndex].checkCondition ||
				!availableRecs[cRecorderIndex].checkCondition()
			) {
				BS.logger.info('Recorder ' + availableRecs[cRecorderIndex].ClassName +
					' cannot be used!');
				cRecorderIndex++;
			} else {
				BS.logger.info('Recorder ' + availableRecs[cRecorderIndex].ClassName +
					' will be used!');
				BS.recorder = new recMgr[availableRecs[cRecorderIndex].ClassName]({
					'startMargin': Number(BS.config.get('Core.Client.lpvr.RECORDING_START_DELTA'))
						.valueOf() * 1000,
					'endMargin': Number(BS.config.get('Core.Client.lpvr.RECORDING_END_DELTA'))
						.valueOf() * 1000
				});
				break;
			}
		}

		if (cRecorderIndex === maxRecorderIndex)
			throw 'no-valid-recorder-found';
	};


	recMgr.Recording = Class.extend({
		device: '',
		recordId: null,
		channelId: null,
		title: null,
		assetId: null,
		start: null,
		end: null,
		description: null,
		userName: null,
		rating: null,
		resourceLink: null,
		type: null,
		state: null,
		earlyAvailDelay: 15,
		startOffset: null,
		shared: null,
		clipId: null,
		sharingData: null,
		partOfSeries: null,
		persistenceReference: null,
		startMargin: null,
		endMargin: null,
		RT_MARGIN: 2e3,
		irTmrId: null,
		indefiniteDuration: 4 * 3600e3,
		maxPauseAndResumeDuration: 2 * 3600e3,

		init: function (options) {
			this.recordId = options.recordId || null;
			this.persistenceReference = options.persistenceReference || null;
			this.channelId = options.channelId || null;
			this.title = options.title || null;
			this.assetId = options.assetId || null;
			this.start = options.start || (options.start === 0 ? 0 : null);
			this.end = options.end || (options.end === 0 ? 0 : null);
			this.originalTimes = options.originalTimes || {start: this.start, end: this.end};
			this.description = options.description || null;
			this.userName = options.userName || null;
			this.rating = options.rating || 0;
			this.resourceLink = options.resourceLink || null;
			this.type = options.type || null;
			this.state = options.state || null;
			this.earlyAvailDelay = options.earlyAvailDelay || this.earlyAvailDelay;
			this.startOffset = options.startOffset || null;
			this.shared = options.shared || recMgr.Recording.SHARESTATUS_NOTSHARED;
			this.clipId = options.clipId;
			this.partOfSeries = options.partOfSeries;
			this.startMargin = options.startMargin || BS.recorder.startMargin;
			this.endMargin = options.endMargin || BS.recorder.endMargin;
		},
		invoke: function (cbk) {
			return function (success, msg, reason) {
				if (success && (this.isPnr() || this.isInstant())) {
					if (this.start && this.start > 0 && this.end && this.end > 0) {
						this.scheduleAbortTimer(this.end - this.start);
					} else {
						this.scheduleAbortTimer(this.isPnr() ?
							this.maxPauseAndResumeDuration : this.indefiniteDuration);
					}
					em.dispatch(new BS.recorder.InstantRecEvent('Start', this.channelId));
				}
				cbk(success, msg, reason);
			}.bind(this);
		},
		abort: function () {
			if (this.isPnr() || this.isInstant()) {
				if (this.irTmrId) {
					clearTimeout(this.irTmrId);
					this.irTmrId = null;
				}
				em.dispatch(new BS.recorder.InstantRecEvent('Stop'));
			}
			return q(true);
		},
		scheduleAbortTimer: function (afterTime) {
			BS.logger.debug('RECORDER: recording will stop after %ss in for %s'
				.sprintf(Math.round(afterTime / 1e3), this.toString()));
			this.irTmrId = setTimeout(this.abort.bind(this), afterTime);
		},
		remove: function () {
			if (this.irTmrId)
				clearTimeout(this.irTmrId);
			if (!this.isPnr())
				BS.recorder._remove(this);


		},
		isInstant: function () {
			return this.type === recMgr.Recording.TYPE_INSTANT;
		},
		isScheduled: function () {
			return this.type === recMgr.Recording.TYPE_SCHEDULED;
		},
		isPnr: function () {
			return this.type === recMgr.Recording.TYPE_PAUSE_RESUME;
		},
		isInProgress: function () {
			var now = Date.now();
			return this.state === recMgr.Recording.STATE_INPROGRESS ||
				(this.isScheduled() && this.start <= now && this.end > now);
		},
		isShared: function () {
			return this.shared === recMgr.Recording.SHARESTATUS_SHARED;
		},
		setShared: function (isShared) {
			if (isShared)
				this.shared = recMgr.Recording.SHARESTATUS_SHARED;
			else
				this.shared = recMgr.Recording.SHARESTATUS_NOTSHARED;
		},
		toString: function (verbose) {
			var e = new Date(this.end);
			var s = new Date(this.start);
			return 'Rec%s#%s/%s [%s] %s->%s (%sh|margin[min] %s,%s) %s'.sprintf(
				this.device,
				this.recordId || 'NO-ID-YET',
				this.type === recMgr.Recording.TYPE_SCHEDULED ? 'S' :
					this.type === recMgr.Recording.TYPE_INSTANT ? 'I' : 'PnR',
				this.rating ? 'R' + this.rating : '',
				verbose ? s.toISOString() : '%02d:%02d:%02d'.sprintf(s.getHours(), s.getMinutes(),
					s.getSeconds()),
				verbose ? e.toISOString() : '%02d:%02d:%02d'.sprintf(e.getHours(), e.getMinutes(),
					e.getSeconds()),
				((this.end - this.start) / 36e5).toFixed(3),
				Number(this.startMargin / 6e4).toFixed(0),
				Number(this.endMargin / 6e4).toFixed(0),
				this.title || ''
			);
		},
		isOverlapping: function (rec) {
			var result = (
				(this.start > rec.start && this.start < rec.end) ||
				(this.end > rec.start && this.end < rec.end) ||
				(this.start <= rec.start && this.end >= rec.end) ||
				(this.start > rec.start && this.end < rec.end)
			);
			BS.logger.trace('this.isOverlapping(other) = %s\nthis : %s > %s %s\nother: %s > %s %s'
				.sprintf(
				result,
				niceTime(new Date(this.start)),
				niceTime(new Date(this.end)),
				this.title,
				niceTime(new Date(rec.start)),
				niceTime(new Date(rec.end)),
				rec.title
			));
			return result;
		},
		isNettOverlapping: function (rec) {
			BS.logger.trace('this.isNettOverlapping(other)\nthis : %s > %s %s\nother: %s > %s %s'
				.sprintf(
				niceTime(new Date(this.originalTimes.start)),
				niceTime(new Date(this.originalTimes.end)),
				this.title,
				niceTime(new Date(rec.originalTimes.start)),
				niceTime(new Date(rec.originalTimes.end)),
				rec.title
			));
			return this.isOverlapping.call(
				{start: this.originalTimes.start, end: this.originalTimes.end, title: this.title},
				{start: rec.originalTimes.start, end: rec.originalTimes.end, title: rec.title}
			);
		},
		isOverlappingAfter: function (rec, afterTime) {
			rec = {start: rec.start - afterTime, end: rec.end - afterTime, title: rec.title};
			return this.isOverlapping(rec);
		},
		alignEdgesTo: function (otherRec) {
			BS.logger.debug('RECORDER .alignEdgesTo: ' + otherRec.toString());
			if (this.start > otherRec.end)
				throw 'cant-align-start-edge-to';
			if (this.end < otherRec.start)
				throw 'cant-align-end-edge-to';
			if (this.start < otherRec.end && this.end > otherRec.end)
				this.start = otherRec.end + this.RT_MARGIN;
			if (this.end > otherRec.start && this.start < otherRec.start)
				this.end = otherRec.start - this.RT_MARGIN;
		},
		restoreMarginsFacing: function (otherRec) {
			if (this.getSideOfNeighbor(otherRec) === 'left') {
				BS.logger.trace('Start restored');
				this.start = this.originalTimes.start - this.startMargin;
			}
			if (this.getSideOfNeighbor(otherRec) === 'right') {
				BS.logger.trace('End restored');
				this.end = this.originalTimes.end + this.endMargin;
			}
			BS.logger.debug('RECORDER .restoreMarginsFacing from %s > '.sprintf(this.toString()));
		},
		restoreOriginalTimes: function (atSide) {
			atSide = atSide || 'both';
			if ('both' === atSide || 'start' === atSide)
				this.start = this.originalTimes.start + this.RT_MARGIN;
			if ('both' === atSide || 'end' === atSide)
				this.end = this.originalTimes.end - this.RT_MARGIN;
			BS.logger.debug('RECORDER .restoreOriginalTimes called, times are now %s'
				.sprintf(this.toString()));
		},
		isTimingUpdateable: function () {
			if (!this.isScheduled())
				return false;
			return this.isInFuture();
		},
		updateTimings: function () {
			if (!this.isTimingUpdateable())
				throw 'recording-timing-cant-be-updated';
		},
		isCollidableTypeWith: function (rec) {
			return (
				this.isPnr() && rec.isPnr()) ||
				(this.isInstant() && (rec.isInstant() || rec.isScheduled())) ||
				(this.isScheduled() && (rec.isScheduled() || rec.isInstant())
				);
		},
		isInFuture: function () {
			return this.start > Date.now();
		},
		isInPast: function () {
			return this.end < Date.now();
		},
		isInConsecutiveConflictWith: function (cRec) {
			return cRec.isScheduled() &&
				!cRec.isInPast() &&
				this.isOverlapping(cRec);
		},
		isInNeighborOf: function (cRec) {
			return this !== cRec &&
				cRec.isScheduled() &&
				(
					this.isOverlappingAfter(cRec, -2 * this.RT_MARGIN) ||
					this.isOverlappingAfter(cRec, 2 * this.RT_MARGIN)
				);
		},
		getSideOfNeighbor: function (rec) {
			var side = null;
			if (this.start < rec.start && (rec.start - this.end) <= this.RT_MARGIN)
				side = 'right';
			if (this.end > rec.end && (this.start - rec.end) <= this.RT_MARGIN)
				side = 'left';
			return side;
		},
		isConsecutiveTo: function (otherRec) {
			return this.end >= otherRec.end;
		}
	});

	recMgr.Recording.STATE_IDLE = 10;
	recMgr.Recording.STATE_INPROGRESS = 11;
	recMgr.Recording.STATE_READY = 12;
	recMgr.Recording.STATE_FAILED = 13;
	recMgr.Recording.TYPE_INSTANT = 20;
	recMgr.Recording.TYPE_SCHEDULED = 21;
	recMgr.Recording.TYPE_PAUSE_RESUME = 22;
	recMgr.Recording.SHARESTATUS_SHARED = 1;
	recMgr.Recording.SHARESTATUS_NOTSHARED = 0;


	BS.PVR = PVR;

	function RecordingFeaturePolicy(compatibilityManager) {
		this.CompatibilityManager = compatibilityManager;
	}
	RecordingFeaturePolicy.prototype = {
		CompatibilityManager: null,
		get hasLocalPvrApi () {
			return !!this.CompatibilityManager &&
				this.CompatibilityManager.prototype.hasLocalPvrApi();
		},
		enableUserServices: function (userServices) {
			var serviceNamesList = [];
			for (var serviceKey in this.PVRSN)
				serviceNamesList.push(this.PVRSN[serviceKey]);

			this.services = userServices.reduce(function (cList, sName) {
				if (serviceNamesList.indexOf(sName) !== -1)
					cList[sName] = true;
				return cList;
			}.bind(this), {});
		},
		PVRSN: PVR.ServiceNames,
		services: null,
		instant: function () {
			return (this.PVRSN.NpvrInstant in this.services) ||
				((this.PVRSN.LpvrInstant in this.services) && this.hasLocalPvrApi);
		},
		program: function () {
			return (this.PVRSN.NpvrProgram in this.services) ||
				((this.PVRSN.LpvrProgram in this.services) && this.hasLocalPvrApi);
		},
		pauseAndResume: function () {
			return (this.PVRSN.NpvrPNR in this.services) ||
				((this.PVRSN.LpvrPNR in this.services) && this.hasLocalPvrApi);
		},
		adopt: function () {
			return this.PVRSN.NpvrAdopt in this.services && !this.locallyPersisted();
		},
		adoptEpisode: function () { return this.PVRSN.NpvrAdoptEpisode in this.services; },
		series: function () {
			return this.PVRSN.SeriesRecording in this.services && !this.locallyPersisted();
		},
		catchUp: function () { return this.PVRSN.NpvrCatchUp in this.services; },
		startOver: function () { return this.PVRSN.NpvrStartOver in this.services; },
		recording: function () { return !!Object.keys(this.services).length; },
		locallyPersisted: function () {
			return this.hasLocalPvrApi && (
					(this.PVRSN.LpvrPNR in this.services) ||
					(this.PVRSN.LpvrInstant in this.services) ||
					(this.PVRSN.LpvrProgram in this.services)
				);
		},
		isFeatureAvailable: function (feature) {
			return this[feature]();
		}
	};
	PVR.featurePolicy = new RecordingFeaturePolicy(BS.CompatibilityManager);


})(
	BeeSmart,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.evMgr,
	Q
);

(function (BS, q, recMgr) {
	var bsRegionId;
	var bsUserId;
	var em = BS.evMgr;
	var mm = BS.modMgr;
	var am = BS.appMgr;
	var tvLib;

	BS.evMgr.bind('onBeeSmartLoginSuccess', function (e) {
		bsRegionId = BS.portal.user.regionId;
		bsUserId = BS.portal.user.userId;
	});


	recMgr.NetworkRecorder = recMgr.Recorder.extend(new function () {
		recMgr.recordersByPriority.push({
			ClassName: 'NetworkRecorder',
			priority: recMgr.PRIORITY_MEDIUM,
			checkCondition: function () {
				return true;
			}
		});
		this.init = function (options) {
			BS.device.lpvrEnabled = false;

			em.bind('onCommandInvokeMessage', function (ev) {
				if (ev.data.command === 'recording-playout') {
					var recordId = parseInt(ev.data.arguments[0], 10);
					var jumpToTime = ev.data.arguments[1] ?
					parseInt(ev.data.arguments[1], 10) * 1000 : null;
					var recModule = mm.getApp('myRecDetails');

					BS.recorder.list(function (result) {
						var foundRec = null;
						for (var i = 0; i < result.length; i++) {
							if (result[i].recordId === recordId) {
								foundRec = result[i];
								break;
							}
						}

						if (foundRec) {
							am.cutOff('liveTv');
							recModule.playContent(foundRec, jumpToTime);
						} else {
							BS.logger.info(
								'Recording with ID %s not found in my recordings list, ' +
								'cannot play it!', recordId
							);
						}
					}, true);
				}
			});

			recMgr.Recorder.registerListGetter(function (callback) {
				var recList = [];
				(function getRecs(url) {
					var args = {accept: 'json', data: {}};
					BS.request.Get(url, args).then(function (response) {
						recList = processList(response.data.list, recList);
						if (response.data.nextPageLink !== null) {
							getRecs(response.data.nextPageLink);
						} else {
							callback(recList);
						}
					}).catch(function() {
						processList([], recList);
						callback(recList);
					}).done();
				})('/restapi/rest/%s/%s/recordings'.sprintf(bsRegionId, bsUserId));

				function processList(list, recList) {
					for (var i = 0, len = list.length; i < len; i++) {
						var cData = list[i];
						var rec = new recMgr.NetworkRecording({
							recordId: cData.idRecording,
							channelId: cData.idChannel,
							mediaResources: cData.mediaResources,
							clipId: cData.idProgram,
							title: cData.title,
							rating: cData.parentalRating,
							start: cData.startAsLong,
							end: cData.endAsLong,
							partOfSeries: null
						});
						var type = cData.recordingType && cData.recordingType.toUpperCase() || 'IN';

						switch (type) {
						case 'SERIES':
							rec.partOfSeries = cData.seriesUid;
							rec.type = recMgr.Recording.TYPE_SCHEDULED;
							break;
						case 'EPG':
							rec.type = recMgr.Recording.TYPE_SCHEDULED;
							break;
						case 'PR':
							rec.type = recMgr.Recording.TYPE_PAUSE_RESUME;
							break;
						case 'IN':
						case 'RECORDING':
							rec.type = recMgr.Recording.TYPE_INSTANT;
							try {
								tvLib = tvLib || BS.modMgr.getModule('BeeSmartMain').tvLibrary;
								rec.title = tvLib.getChannelById(rec.channelId).name;
								var now = Date.now();
								rec.state = rec.start < now && rec.end >= now ?
									recMgr.Recording.STATE_INPROGRESS :
									recMgr.Recording.STATE_READY;
							} catch (e) {
								BS.logger.info('RECORDINGS: problem resolving channel id: %d',
									rec.channelId);
								rec.title = tr('Unknown channel');
							}
							break;
						default:
							rec.type = null;
							break;
						}
						recList.push(rec);
					}
					return recList;
				}
			});

			recMgr.Recorder.registerListGetter(function (callback) {
				var recList = [];
				callback = callback || BS.F;
				(function getSeries(url) {
					var args = {accept: 'json', data: {}};
					BS.request.Get(url, args).then(function (response) {
						recList = processSeries(response.data.list, recList);
						if (response.data.nextPageLink !== null) {
							getSeries(response.data.nextPageLink);
						} else {
							callback(recList);
						}
					}).catch(function() {
						callback([]);
					}).done();
				})('/restapi/rest/%s/%s/recordings/series'.sprintf(bsRegionId, bsUserId));

				function processSeries(list, recList) {
					var len = list.length;
					for (var i = 0; i < len; i++) {
						try {
							var series = list[i];
							var recordingIds = series.episodes.map(function(e) {
								return e.idRecording;
							});

							var seriesRec = new recMgr.SeriesNetworkRecord({
								seriesUid: series.seriesUid,
								channelId: parseInt(series.channelId, 10),
								userId: series.userId,
								windowSize: series.windowSize,
								episodes: recordingIds
							});

							recList.push(seriesRec);
						} catch (e) {
							BS.logger.info(e);
						}
					}
					return recList;
				}
			});

			this._super(options);
		};
		this.start = function (options, callback) {
			var rec;
			if (!!options.partOfSeries) {
				rec = new recMgr.SeriesNetworkRecord(options);
				rec.invoke(options.clipId, options.channelId, function(success) {
					if (success)
						callback(options);
					else
						callback(null, tr('scheduleSeriesRecFailed'));
				});

			} else {
				rec = new recMgr.NetworkRecording(options);
				rec.invoke(function (s, d) {
					if (!s) {
						callback(null);
						return;
					}
					if (rec.isScheduled()) {
						rec.recordId = d.recordId;
						BS.recorder.addNewRecording(rec);

					} else if (rec.isInstant() || rec.isPnr()) {
						if (rec.isInstant()) {
							rec.earlyAvailDelay = d.earlyAvailDelay;
							BS.recorder.addNewRecording(rec);
						} else {
							rec.earlyAvailDelay = parseInt(BS.config
									.get('Content.Recording.EARLY_AVAILABILITY_DELAY'), 10);
						}
					}
					callback(rec);
				});
			}
		};
		this.quota = function (callback) {
			BS.request.Get(
				'/restapi/rest/%d/%d/recordings/quota'.sprintf(bsRegionId, bsUserId), {
					accept: 'json'
				}).then(function (result) {
					callback({
						'freeCapacity': result.data.permanent.free,
						'fullCapacity': result.data.permanent.limit,
						'unit': 'seconds',
						'location': 'network',
						'seriesFree': result.data.series ? result.data.series.free : null,
						'seriesCapacity': result.data.series ? result.data.series.limit : null
					});
				}, function () {
					callback(null);
				}).done();
		};
		this.getName = function () {
			return 'NetworkRecorder';
		};
		this.adoptEpisode = function (recordId, callback) {
			var rec = BS.recorder.getRecording('recordId', recordId);
			callback = callback || BS.F;
			if (!rec) {
				BS.logger.info('ADOPT EPISODE :: Recording with recordId=%s not found!', recordId);
				setTimeout(callback, 0);
				return;
			}
			BS.request.Post('/restapi/rest/%d/%d/recordings/series/adopt-episode'
				.sprintf(bsRegionId, bsUserId), {
				accept: 'json',
				data: {
					recording_id: recordId
				}
			}).then(function () {
				BS.recorder._adoptEpisode(rec);
				setTimeout(function () {
					callback(rec);
				}, 0);
			}).catch(function(ex) {
				BS.logger.info('ADOPT EPISODE :: Failed with %s', ex);
				setTimeout(function () {
					callback(false, tr('adoptEpisodeFailed'));
				}, 0);
			}).done();
		};
	});


	recMgr.NetworkRecording = recMgr.Recording.extend({
		cbEnabled: false,
		cbData: false,
		residesOn: 'network',
		init: function (data) {
			this._super(data);
		},
		invoke: function (callback) {
			var callback = this._super(callback);
			var dataToSend = {},
				that = this;

			if (this.isScheduled()) {
				if (!this.clipId) {
					BS.logger.debug('cannot schedule program rec !!! no clipId present!!');
					callback(null);
					return;
				}
				dataToSend.recording_type = 'epg';
				dataToSend.program_id = this.clipId;

			} else if (this.isPnr())
				dataToSend.recording_type = 'pr';
			else if (this.isInstant())
				dataToSend.recording_type = 'in';

			var requestUrl = '/restapi/rest/%d/%d/recordings'.sprintf(bsRegionId, bsUserId);

			dataToSend.channel_id = this.channelId;
			BS.request.Post(requestUrl, {accept: 'json', data: dataToSend})
				.then(function (result) {
					return BS.request.Get(requestUrl, {
						accept: 'json', data: {recording_id: result.data.idRecording}
					});
				}.bind(this))
				.then(function (result) {
					if (!result.data.list[0]){
						throw('fetching recording failed');
					}
					var rec = result.data.list[0];
					that.userName = BS.portal.user.userName;
					that.start = rec.start;
					that.end = rec.end;
					that.rating = parseInt(rec.rating, 10) || 0;
					that.recordId = rec.idRecording;

					callback(result.success, that);
				}.bind(this))
				.catch(function (ex) {
					var msg = ex.data ? Object.serialize(ex.data) : ex;
					BS.logger.info('%s failed to invoke with message with reason(s): %s'
						.sprintf(this.toString(), msg));
					if (ex.data && ex.data.errors[0].errorCode === 159) {
						if (!this.isPnr()) {
							BS.ShowModel.showService.notifyUserOfInsufficientQuotaSpace(
								tr('overNpvrQuota'));
						}
					} else {
						BS.ui.generalAlert(tr('recordingFailed'));
					}
					that.recordId = null;

					callback(false, that);
				}.bind(this));
		},
		abort: function () {
			var dfr = q.defer();
			if (!this.isInstant()) {
				dfr.reject('abort only possible on instant rec!');
				return dfr.promise;
			}
			var requestUrl = '/restapi/rest/%d/%d/recordings/id-%s/stop'
				.sprintf(bsRegionId, bsUserId, this.recordId);

			this.end = Date.now();
			this._super();

			return BS.request.Put(requestUrl, {accept: 'json'}).then(function (result) {
				return result.success ? this : false;
			}.bind(this));
		},
		remove: function (callback) {
			var requestUrl = '/restapi/rest/%d/%d/recordings/id-%s'
				.sprintf(bsRegionId, bsUserId, this.recordId);
			BS.request.Delete(requestUrl, {accept: 'json'}).complete(
				function (result) {
					callback(result.success);
				}
			);

			try {
				this._super();
			} catch (x) {
				if (x === 'remove-recording-failed' && this.isPnr()) {
				}
			}
		},
		updateVodPlayerOptions: function (options) {
			options.streamStartOffset = this.startOffset;
			options.streamMaxOffset = this.startOffset + options.duration * 1000;
		}
	});
	recMgr.SeriesRecord = Class.extend({
		channelId: null,
		userId: null,
		windowSize: null,
		seriesUid: null,
		title: null,
		episodes: null,
		init: function (options) {
			this.channelId = options.channelId || null;
			this.title = options.title || '';
			this.userId = options.userId || null;
			this.windowSize = options.windowSize || null;
			this.seriesUid = options.seriesUid || null;
			this.episodes = [];
			if (options.episodes) {
				options.episodes.forEach(function (ep) {
					if (this.episodes.indexOf(ep) === -1)
						this.episodes.push(ep);
				}.bind(this));
			}
		},
		remove: function () {
			BS.recorder._remove(this);
		},
		invoke: function (programId, channelId) {
			BS.recorder.addSeriesRecord(this);
		}
	});
	recMgr.SeriesNetworkRecord = recMgr.SeriesRecord.extend({
		init: function (options) {
			return this._super(options);
		},
		remove: function (cback) {
			var that = this;
			cback = cback || function () {
				};
			var url = '/restapi/rest/%d/%d/recordings/series'.sprintf(bsRegionId, bsUserId);
			BS.request.Delete(url, {
				accept: 'json',
				data: {
					'series_uid': that.seriesUid,
					'channel_id': that.channelId
				}
			}).then(function () {
				BS.recorder._remove(that);
				cback(true);
			}).catch(function (ex) {
				BS.logger.info('SERIES-N-REC: Problem removing series from server: %s', ex);
				cback(false);
			});
		},
		invoke: function (programId, channelId, cback) {
			var that = this;
			cback = cback || BS.F;
			BS.request.Post('/restapi/rest/%d/%d/recordings/series'.sprintf(bsRegionId, bsUserId), {
				accept: 'json',
				data: {
					'program_id': programId,
					'channel_id': channelId
				}
			}).then(function (result) {
				var d = result.data;
				that.seriesUid = d.seriesUid;
				that.channelId = parseInt(d.channelId, 10);
				that.windowSize = d.windowSize;
				that.userId = d.userId;
				that.episodes = [];
				d.episodes.forEach(function (ep) {
					var rec = new recMgr.NetworkRecording({
						recordId: ep.idRecording,
						channelId: parseInt(ep.idChannel, 10),
						mediaResources: ep.mediaResources,
						clipId: ep.idProgram,
						title: ep.title,
						rating: ep.parentalRating,
						start: ep.startAsLong,
						end: ep.endAsLong,
						partOfSeries: ep.seriesUid,
						type: recMgr.Recording.TYPE_SCHEDULED
					});
					BS.recorder.addNewRecording(rec);
					that.episodes.push(rec.recordId);
				});
				BS.recorder.addSeriesRecord(that);
				cback(result.success);
			}).catch(function (ex) {
				BS.logger.info('SERIES-N-REC:S Post failed: ' + ex);
				if (ex.data && ex.data.errors[0].errorCode === 159) {
					BS.ShowModel.showService.notifyUserOfInsufficientQuotaSpace(
						tr('overSeriesNpvrQuota'));
				}
				cback();
			});
		}
	});


})(
	BeeSmart,
	Q,
	BeeSmart.recMgr
);

(function (BS, q, recMgr) {
	var bsRegionId;
	var bsUserId;

	BS.evMgr.bind('onBeeSmartLoginSuccess', function (e) {
		bsRegionId = BS.portal.user.regionId;
		bsUserId = BS.portal.user.userId;
	});


	recMgr.SharedNetworkRecording = recMgr.Recording.extend({
		residesOn: 'network',
		init: function (data) {
			data.content.type = recMgr.SharedNetworkRecording.mapContentType2Type(data.contentType);
			this._super(data.content);

			this.sharingData = data;

			this.shareId = data.shareId;
			this.shareStatus = data.shareStatus;

			if (data.sender && data.sender.prop_messaging_profile_nickname)
				this.sharedBy = data.sender.prop_messaging_profile_nickname;
			else
				this.sharedBy = '';
		},
		invoke: function (callback) {
		},
		abort: function (callback) {
		},
		remove: function (callback) {
			BS.request.get('ContentSharingService/deleteShare', callback, [this.shareId]);
		},
		updateStatus: function (callback, newStatus) {
			BS.request.get('ContentSharingService/changeShareStatus',
				callback,
				[this.shareId, newStatus]);
		},
		getShareStatusImage: function () {
			var imageLink;
			switch (this.shareStatus) {
			case recMgr.SharedNetworkRecording.SHARESTATUS_UNREAD:
				imageLink = '#shareUnread';
				break;
			case recMgr.SharedNetworkRecording.SHARESTATUS_READ:
				imageLink = '#shareRead';
				break;
			case recMgr.SharedNetworkRecording.SHARESTATUS_ACCEPTED:
				imageLink = '#shareAccepted';
				break;
			case recMgr.SharedNetworkRecording.SHARESTATUS_REJECTED:
				imageLink = '#shareRejected';
				break;
			}

			return imageLink;
		},
		isUnread: function () {
			return this.shareStatus === recMgr.SharedNetworkRecording.SHARESTATUS_UNREAD;
		},
		isAccepted: function () {
			return this.shareStatus === recMgr.SharedNetworkRecording.SHARESTATUS_ACCEPTED;
		},
		isRejected: function () {
			return this.shareStatus === recMgr.SharedNetworkRecording.SHARESTATUS_REJECTED;
		},
		toString: function (verbose) {
			return 'SharedNetworkRecording %s'.sprintf(this._super(verbose));
		},
		updateVodPlayerOptions: function (options) {
			options.streamStartOffset = this.startOffset;
			options.streamMaxOffset = this.startOffset + options.duration * 1000;
			var contentType = this.sharingData.content.contentType;
			if (contentType === recMgr.SharedNetworkRecording.CONTENTTYPE_PVR_INSTANT)
				options.id = this.sharingData.content.recordId;
			else
				options.id = this.sharingData.content.id;
		},
		valueOf: this.toString
	});

	recMgr.SharedNetworkRecording.SHARESTATUS_UNREAD = 'UNREAD';
	recMgr.SharedNetworkRecording.SHARESTATUS_READ = 'READ';
	recMgr.SharedNetworkRecording.SHARESTATUS_REJECTED = 'REJECTED';
	recMgr.SharedNetworkRecording.SHARESTATUS_ACCEPTED = 'ACCEPTED';
	recMgr.SharedNetworkRecording.CONTENTTYPE_UNDEFINED = 'UNDEFINED';
	recMgr.SharedNetworkRecording.CONTENTTYPE_PVR = 'PVR';
	recMgr.SharedNetworkRecording.CONTENTTYPE_PVR_INSTANT = 'PVR_INSTANT';
	recMgr.SharedNetworkRecording.CONTENTTYPE_PVR_PROGRAM = 'PVR_PROGRAM';


	recMgr.SharedNetworkRecording.mapContentType2Type = function (type) {
		if (type === recMgr.SharedNetworkRecording.CONTENTTYPE_PVR_INSTANT)
			return recMgr.Recording.TYPE_INSTANT;
		else if (type === recMgr.SharedNetworkRecording.CONTENTTYPE_PVR_PROGRAM)
			return recMgr.Recording.TYPE_SCHEDULED;
	};
	recMgr.SharedNetworkRecording.mapType2ContentType = function (type) {
		if (type === recMgr.Recording.TYPE_INSTANT)
			return recMgr.SharedNetworkRecording.CONTENTTYPE_PVR_INSTANT;
		else if (type === recMgr.Recording.TYPE_SCHEDULED)
			return recMgr.SharedNetworkRecording.CONTENTTYPE_PVR_PROGRAM;
	};



})(
	BeeSmart,
	Q,
	BeeSmart.recMgr
);

(function (BS, q, recMgr, bMisc) {
	var bsRegionId;
	var bsUserId;
	var em = BS.evMgr;
	var mm = BS.modMgr;
	var am = BS.appMgr;
	var tvLib;

	BS.evMgr.bind('onBeeSmartLoginSuccess', function (e) {
		bsRegionId = BS.portal.user.regionId;
		bsUserId = BS.portal.user.userId;
		bMisc = mm.appExists('Misc') ? mm.getApp('Misc') : null;
	});


	recMgr.LocalRecorder = recMgr.Recorder.extend(recMgr.localRecorder = new function () {
		this._lastCollisionEvent = null;
		this.getName = function () {
			return 'LocalRecorder';
		};
		this.init = function (options) {
			var that = this;
			BS.device.lpvrEnabled = true;
			var SIX_MIN_MS = 360e3;
			var ONE_MIN_MS = 60e3;
			var currentFreeSpace = 0;
			var previousFreeSpace = 0;
			var sizes = [20480, 10240, 5120, 3072];
			var delta = 60000;
			that.alert = new BS.ui.Alert({autoHide: 5000});
			that.lastPnr = null;

			try {
				var bsMain = mm.getModule('BeeSmartMain');
				var fullDiskDialog = new bsMain.InfoDialog(
					'fullDiskDialog',
					{
						onBeforeExit: function () {
						},
						buttons: [
							['confirm', 'ok']
						]
					}
				);
				bsMain.register(fullDiskDialog);
			} catch (e) {
				BS.logger.debug('RECORDER: Error registering fullDiskDialog:' + e);
			}


			function diskChecker (that, recordingList) {
				if (that.hasEnoughFreeSpace()) {
					currentFreeSpace = that.ekRecorder.discInfo.free;
					sizes.forEach(function (size) {
						if (previousFreeSpace >= size && currentFreeSpace < size) {
							that.alert.show(tr('diskAlmostFull'));
							BS.logger.info('RECORDER: Free space is getting low, crossed limit of '
								+ size + ' MB');
						}
					});
					previousFreeSpace = currentFreeSpace;
				} else {
					if (that.lastPnr !== null && recordingList.indexOf(that.lastPnr) === -1) {
						recordingList.push(that.lastPnr);
					}
					var abortedRecCount = 0;

					recordingList.forEach(function (recording) {
						if (recording.isInProgress()) {
							BS.logger.info('RECORDER: Aborting recording which is in progress: ' +
								recording);

							recording.abort().then(function () {
								if (recording.isScheduled() || recording.isInstant()) {
									that.alert.show(tr('recordingStoppedDiskFull'));
								} else if (recording.isPnr()) {
									that.alert.show(tr('recordingNotPossibleDiskFull'));
									that.lastPnr = null;
								}
								abortedRecCount++;
								BS.logger.info('RECORDER: Successfully aborted recording ' +
									'due to low space.');
							}).catch(function (e) {
								BS.logger.info('RECORDER: Aborting recording failed: ' + e);
							});
						} else {
							if (recording.end > Date.now() &&
								(recording.start - Date.now()) <= delta) {
								BS.logger.info('RECORDER: Removing scheduled recording: ' +
									recording);

								try {
									tvLib = tvLib || mm.getModule('BeeSmartMain').tvLibrary;
									recording.remove();
									abortedRecCount++;
									BS.logger.info('RECORDER: Successfully removed scheduled ' +
										'recording due to low space.');
									if (am.lastLoaded('fullDiskDialog')) {
										am.pop();
									}
									am.push(mm.getApp('fullDiskDialog'), tr('fullDisk'),
										tr('programRecordingCancelledDiskFull').
											sprintf(recording.title,
											tvLib.getChannelById(recording.channelId).name));

								} catch (e) {
									BS.logger.info('RECORDER: Removing recording failed: ' + e);
								}
							}
						}
					});

					if (abortedRecCount > 0)
						bMisc.event.write({eventId: bMisc.eventIds.lpvrDiskFull,
							start: Date.now()});
				}
			}

			(function collisionAndDiskChecker(that) {
				setTimeout(function () {
					collisionAndDiskChecker(that);
					var recordingList = this.getList();
					var instRecList = recordingList.filter(function (rec) {
						return rec.isInstant() && rec.isInProgress();
					});

					diskChecker(that, recordingList);

					if (!instRecList.length)
						return;

					var now = Date.now();
					var instRec = instRecList[0];

					var collidableSchRec = recordingList.filter(function isCollidableWithRules(rec) {
						if (rec.isScheduled() &&
							rec.isOverlappingAfter(
								{'start': instRec.start, 'end': Date.now()}, -1 * SIX_MIN_MS
							)
						) return rec;
					});
					collidableSchRec.sort(function (a, b) {
						return a.start - b.start;
					});

					if (collidableSchRec.length) {
						var clRec = collidableSchRec[0];
						if (now + ONE_MIN_MS > clRec.start) {
							if (!that.canDispatchCollisionEvent(instRec.recordId, 'near-current'))
								return;

							em.dispatch(new that.LocalRecorderCollisionEvent({
								collision: 'near-current',
								firstCollisionAt: clRec.start - now,
								recording: instRec,
								collidesWith: [clRec],
								message: tr('InstantRecordingStoppedDueToProgram')
							}));

						} else {
							if (!that.canDispatchCollisionEvent(instRec.recordId, 'near-future'))
								return;

							em.dispatch(new that.LocalRecorderCollisionEvent({
								collision: 'near-future',
								firstCollisionAt: clRec.start - now - ONE_MIN_MS,
								recording: instRec,
								collidesWith: [clRec],
								message: tr('InstantRecordingWillAbort').sprintf(
									Number((clRec.start - now - ONE_MIN_MS) / ONE_MIN_MS).toFixed(),
									clRec.title)
							}));
						}
					}
				}.bind(that), 30e3);
			})(this);

			return this._super(options);
		};
		this.hasEnoughFreeSpace = function () {
			return this.ekRecorder.discInfo.free > 2048 ||
				window.navigator.platform.toLowerCase().indexOf('win') !== -1;
		};
		this.start = function (recObj) {
			var eventId;
			if (recObj.isPnr()) {
				eventId = bMisc.eventIds.lpvrPauseAndResumeOperation;
				this.lastPnr = recObj;
			} else if (recObj.isScheduled()) {
				eventId = bMisc.eventIds.lpvrProgramRecordingScheduled;
			} else if (recObj.isInstant()) {
				eventId = bMisc.eventIds.lpvrInstantRecordingStarted;
			}

			bMisc.event.write({eventId: eventId, start: Date.now()});
		};
		this.quota = function (callback) {
			this._super(callback);
		};
		this.getRecordingsToFinalize = function () {
			return this.getList().filter(function (rec) {
				return rec.isInProgress();
			});
		};
		this.canDispatchCollisionEvent = function (activeInstRecId, eventHandler) {
			var lastEv = this._lastCollisionEvent;
			return !(
				lastEv && eventHandler === lastEv.data.collision &&
				activeInstRecId === lastEv.data.recording.recordId
			);
		};
		this.generateUniqueId = function generateUniqueId() {
			return 'BSLR-' + (Date.now().toString()).substring(4);
		};
		this.LocalRecorderCollisionEvent = function (data) {
			var handlerType = null;

			switch (data.collision) {
			case 'near-future':
				handlerType = 'onLocalRecorderNearFeatureCollision';
				break;
			case 'near-current':
				handlerType = 'onLocalRecorderNearCurrentCollision';
				break;
			}

			var ev = this;
			ev.type = 'LocalRecorderCollision';
			ev.handler = handlerType;
			ev.data = data || null;
			ev.cancelable = false;
		};
		this.LocalRecorderCollisionEvent.prototype = new BS.Event();

		this.ekRecorder = null;
		try {
			this.ekRecorder = window.oipfObjectFactory.createRecordingSchedulerObject();
		} catch (e) {
			BS.logger.debug('EKIOH-RECORDER: LPVR not supported: ' +
				'oipfObjectFactory does not exist.');
		}
	});
	em.bind('onLocalRecorderNearCurrentCollision', function (ev) {
		BS.recorder._lastCollisionEvent = ev;

		bMisc.event.write({eventId: bMisc.eventIds.lpvrRecordingConflict, start: Date.now()});

		var recCollisionDialog = mm.getApp('recCollisionDialog');
		if (recCollisionDialog.id === am.lastLoaded())
			am.pop();

		setTimeout(function () {
			am.push(recCollisionDialog, tr('collisionDialogTitle'), ev.data.message);
		}, 500);
	});
	em.bind('onLocalRecorderNearFeatureCollision', function (ev) {
		BS.recorder._lastCollisionEvent = ev;

		bMisc.event.write({eventId: bMisc.eventIds.lpvrRecordingConflict, start: Date.now()});

		var recCollisionDialog = mm.getApp('recCollisionDialog');
		if (recCollisionDialog.id === am.lastLoaded())
			am.pop();

		setTimeout(function () {
			am.push(recCollisionDialog, tr('collisionDialogTitle'), ev.data.message);
		}, 500);
	});




	recMgr.LocalRecording = recMgr.Recording.extend({
		residesOn: 'local-device',
		init: function (options) {
			this._super(options);
			this.channelResource = null;
		},
		applyMargins: function () {
			if (this.isScheduled()) {
				this.start -= this.startMargin;
				this.end += this.endMargin;
			} else {
				this.startMargin = 0;
				this.endMargin = 0;
			}
			return this;
		},
		invoke: function (cbk) {
			var now = Date.now();
			var callback = this._super(cbk);
			this.applyMargins();
			if (this.isScheduled() && this.start < (now + this.RT_MARGIN)) {
				var dT = now + this.RT_MARGIN - this.start;
				this.startMargin = dT;
				this.start = now + this.RT_MARGIN;
				BS.logger.debug('RECORDER: recording was trimmed to present moment ' +
					'(overlapped for %dms)'.sprintf(Math.abs(dT)));
			}
			return callback;
		},
		abort: function () {
			return this._super();
		},
		remove: function () {
			this._super();
		},
		updateVodPlayerOptions: function (options) {
			options.assetURLs = [
				{'src': 'file:/' + this.resourceLink,
					'protocolStack': 'local-recording'}
			];
			options.playbackSpeeds = ['2', '4', '8', '16'];
			options.streamMaxOffset = options.duration * 1000;
			options.recType = this.type;
		}
	});



})(
	BeeSmart,
	Q,
	BeeSmart.recMgr
);


(function (BS, q, recMgr, mm, em, media, PVR) {
	var SIX_MIN_MS = 6 * 60e3;
	var ONE_MIN_MS = 60e3;

	var tvLib;
	var lpvr;
	var isEmulator;
	try {
		isEmulator = navigator.platform.match(/(win)/i) !== null;
	} catch (e) {
		isEmulator = false;
	}

	function AssetObject(props) {
		try {
			this._setProps(props);
		} catch (e) {
			BS.logger.info(e);
		}
	}
	AssetObject.prototype = {
		recordId: null,
		channelId: null,
		title: null,
		assetId: null,
		start: null,
		end: null,
		description: null,
		userName: null,
		rating: null,
		resourceLink: '',
		type: null,
		state: null,
		earlyAvailDelay: null,
		startOffset: null,
		shared: null,
		clipId: null,
		sharingData: null,
		originalTimes: null,
		startMargin: null,
		endMargin: null,
		bookmarks: null,
		_setProps: function (p) {
			p = p || {};
			var ld;
			var tmpState = p.state || 1;

			if (p.longDescription !== '') {
				try {
					ld = JSON.parse(p.longDescription);
					if (typeof ld === 'object') {
						for(var i in ld) {
							if (i in this && ld.hasOwnProperty(i)) {
								this[i] = ld[i];
							}
						}
						if ('margins' in ld) {
							this.startMargin = ld.margins.start;
							this.endMargin = ld.margins.end;
						}
						if ('recordId' in ld)
							this.recordId = ld.recordId;
						if ('bookmarks' in ld)
							this.bookmarks = ld.bookmarks;
					}
				} catch (e) {
					tmpState = 11;
					BS.logger.info('EKIOH-RECORDER AssetObject: error parsing long description, ' +
						'forcing state to failed! Id: %s', p.id);
				}
			}

			if ('id' in p) {
				this.persistenceReference = p.id;
				this.recordId = this.recordId || p.id;
			}

			if ('recordingURI' in p) {
				this.resourceLink = p.recordingURI;
			}

			if (this.resourceLink && this.resourceLink.indexOf('file://') === -1) {
				BS.logger.debug('EKIOH-RECORDER AssetObject: recordingURI does not contain ' +
					'file:// prefix, added');
				this.resourceLink = 'file://' + this.resourceLink;
			}

			if ('startTime' in p) {
				this.start = parseInt(p.startTime, 10) * 1000;
			}
			if (parseInt(p.recordingStartTime, 10) && !isEmulator) {
				this.start = parseInt(p.recordingStartTime, 10) * 1000;
			}

			if ('duration' in p) {
				this.end = this.start + (parseInt(p.duration, 10) * 1000);
			}
			if (parseInt(p.recordingDuration, 10) && !isEmulator) {
				this.end = this.start + (parseInt(p.recordingDuration, 10) * 1000);
			}

			if (isEmulator && ld && ld._emulator_duration) {
				this.end = this.start + ld._emulator_duration * 1000;
			}

			this.state = getState(tmpState);

			function getState(state) {
				var n = Date.now();
				switch (parseInt(state, 10)) {
				case 1:
					state = (n / 1000 > p.startTime) ?
						recMgr.Recording.STATE_INPROGRESS : recMgr.Recording.STATE_IDLE;
					break;
				case 5:
					state = isEmulator ?
						(n / 1000 > p.startTime - 2 ?
							recMgr.Recording.STATE_INPROGRESS : recMgr.Recording.STATE_IDLE) :
						recMgr.Recording.STATE_INPROGRESS;
					break;
				case 7:
				case 8:
					state = recMgr.Recording.STATE_READY;
					break;
				default:
					state = recMgr.Recording.STATE_FAILED;
					break;
				}
				return state;
			}
		}
	};
	recMgr.UniversalLocalRecording = recMgr.LocalRecording.extend({
		device: 'Universal',
		init: function (options) {
			try {
				this._super(options);
				this.earlyAvailDelay = 3;
				this.recordId = options.recordId || BS.recorder.generateUniqueId();
				this.bookmarks = options.bookmarks;

				BS.logger.debug('EKIOH-RECORDER: UniversalLocalRecording.init DONE ' +
					this.toString());
			} catch (e) {
				BS.logger.printStackTrace();
			}
		},
		invoke: function (cbk) {
			cbk = this._super(cbk);
			BS.logger.debug('UniversalLocalRecording.invoke ' + this.toString());
			var dev = BS.device.info;
			var urls = [];
			var recList = BS.recorder.getList();
			var currentColliders = [];
			var nearCurrentColliers = [];
			var nearFuturesColliers = [];
			var instantsToStopLater = [];
			var instantsToStopNow = [];
			var alignSuccess = true;

			var callback = function (success, msg, reason) {
				cbk(success, msg, reason);
				if (this.isScheduled() || success) {
					return;
				}
				em.dispatch(new BS.recorder.InstantRecEvent('Failed', this.channelId, msg));
			}.bind(this);

			function forLogReducer(prev, curr, index) {
				return prev + index + ' ' + curr.toString() + ',\n ';
			}

			try {
				tvLib = tvLib || mm.getModule('BeeSmartMain').tvLibrary;
				var channel = tvLib.getChannelById(this.channelId);
				if (dev.mcast_enabled && channel.mediaResources) {
					urls = channel.mediaResources.resources.filter(function(r) {
						return r.protocolStack === 'mcast';
					}).map(function(r) { return r.src; });
				}
				this.channelResource = urls[0];
			} catch (e) {
				BS.logger.debug(e);
			}

			if (!this.channelResource) {
				BS.logger.debug('EKIOH-RECORDER .invoke: NO MULTICAST SRC PRESENT, CANNOT RECORD!');
				callback(false);
				return this;
			}

			if (this.isInstant() || this.isPnr()) {
				this.start = Date.now();
				this.end = this.start;
			}

			BS.logger.debug('EKIOH-RECORDER .invoke: THIS.' + this.toString());
			BS.logger.trace('EKIOH-RECORDER .invoke: COLLISION CHECK LIST without THIS \n' +
			recList.reduce(forLogReducer, ''));

			recList.forEach(function (cRec) {
				if (cRec === this) {
					return;
				}
				if (!this.isCollidableTypeWith(cRec)) {
					return;
				}

				if (
					this.isNettOverlapping(cRec) &&
					!cRec.isInstant()
				) {
					currentColliders.push(cRec);
				}

				if (this.isInstant() && cRec.isOverlapping(this)) {
					currentColliders.push(cRec);
				}

				if (this.isInstant() && this.isOverlappingAfter(cRec, ONE_MIN_MS * 2)) {
					nearCurrentColliers.push(cRec);
				}

				if (this.isInstant() && this.isOverlappingAfter(cRec, SIX_MIN_MS)) {
					nearFuturesColliers.push(cRec);
				}

				if (
					this.isScheduled() && cRec.isInstant() && cRec.isInProgress() &&
					this.isOverlappingAfter({'start': cRec.start, 'end': Date.now()}, -1 * SIX_MIN_MS)
				) {
					if (ONE_MIN_MS < (this.start - Date.now())) {
						instantsToStopLater.push(cRec);
					} else {
						instantsToStopNow.push(cRec);
					}
				}
			}, this);

			if (currentColliders.length) {
				BS.logger.debug('EKIOH-RECORDER .invoke A: Collision detected! ' +
					'Colliding recordings:\n ' + currentColliders.reduce(forLogReducer, ''));
				callback(false, tr('RECORDING_LIMIT_MSG').sprintf(1));
				return this;
			}

			if (this.isScheduled()) {
				BS.logger.debug('EKIOH-RECORDER .invoke SCHEDULE RECORDING TO RESOLVE:');
				recList
					.filter(this.isInConsecutiveConflictWith, this)
					.forEach(function (cRec) {
						BS.logger.debug(cRec.toString());
						try {
							if (this.isConsecutiveTo(cRec)) {
								if (cRec.isInProgress()) {
									this.alignEdgesTo(cRec);
								} else {
									this.restoreOriginalTimes('start');
									cRec.alignEdgesTo(this);
									cRec.updateTimings();
								}
							}

							if (cRec.isConsecutiveTo(this)) {
								this.restoreOriginalTimes('end');
								cRec.alignEdgesTo(this);
								cRec.updateTimings();
							}

						} catch (x) {

							BS.logger.debug('EKIOH-RECORDER .invoke: ERROR %s while aligning ' +
								'%s -> %s'.sprintf(x, this.toString(), cRec.toString()));
							alignSuccess = false;
						} finally {
							BS.logger.debug('EKIOH-RECORDER .invoke: new aligned me is ' +
								this.toString());
						}
					}, this);

				if (!alignSuccess) {
					callback(false, tr('recordingFailed'));
					return this;
				}
			}

			if (nearCurrentColliers.length) {
				BS.logger.debug('EKIOH-RECORDER .invoke B: Almost current collision detected! ' +
					'Colliding recordings:\n ' + nearCurrentColliers.reduce(forLogReducer, ''));
				callback(
					false, tr('InstantRecordingIsAborted').sprintf(nearCurrentColliers[0].title)
				);
				return this;
			}

			if (this.isInstant() || this.isPnr()) {
				this.end = this.start + (this.isPnr() ?
					this.maxPauseAndResumeDuration : this.indefiniteDuration);
			}

			try {
				this.schedulePhysical();

				var clRec;
				var dTs;

				if (nearFuturesColliers.length) {
					clRec = nearFuturesColliers[0];
					dTs = Number((clRec.start - this.start) / 60e3).toFixed();

					BS.logger.debug('EKIOH-RECORDER .invoke C: Near future collision detected! ' +
						'Colliding recordings:\n ' + nearFuturesColliers.reduce(forLogReducer, ''));

					BS.logger.debug(('EKIOH-RECORDER .invoke C: Instant recording ' +
						'will stop after %d ' +
						'minutes because ' + 'program `%s` will start recording at that time!')
						.sprintf(dTs, clRec.title));

					em.dispatch(new BS.recorder.LocalRecorderCollisionEvent({
						collision: 'near-future',
						recording: this,
						collidesWith: nearFuturesColliers,
						firstCollisionAt: clRec.start,
						message: tr('InstantRecordingWillAbort').sprintf(dTs, clRec.title)
					}));
				}

				if (instantsToStopLater.length) {
					clRec = instantsToStopLater[0];
					dTs = Number((this.start - Date.now() - 60e3) / 60e3).toFixed();

					BS.logger.debug('EKIOH-RECORDER .invoke D: Near future collision detected! ' +
						'Colliding recordings:\n ' + instantsToStopLater.reduce(forLogReducer, ''));

					BS.logger.debug(('EKIOH-RECORDER .invoke D: Instant recording ' +
						'will stop after %d ' +
						'minutes because ' + 'program `%s` will start recording at that time!')
						.sprintf(dTs, this.title));

					em.dispatch(new BS.recorder.LocalRecorderCollisionEvent({
						collision: 'near-future',
						recording: clRec,
						collidesWith: [this],
						firstCollisionAt: this.start - 60e3,
						message: tr('InstantRecordingWillAbort').sprintf(dTs, this.title)
					}));
				}

				if (instantsToStopNow.length) {
					clRec = instantsToStopNow[0];
					dTs = this.start - Date.now();
					BS.logger.debug('EKIOH-RECORDER .invoke D: Near future collision detected! ' +
						'Colliding recordings:\n ' + instantsToStopLater.reduce(forLogReducer, ''));

					BS.logger.debug('EKIOH-RECORDER .invoke E: ' +
						'Instant recording has been stopped due to an upcoming ' +
						'Program recording. ');

					em.dispatch(new BS.recorder.LocalRecorderCollisionEvent({
						collision: 'near-current',
						recording: clRec,
						collidesWith: [this],
						firstCollisionAt: dTs,
						message: tr('InstantRecordingStoppedDueToProgram')
					}));
					clRec.abort();
				}

				callback(true);
			} catch (x) {
				BS.logger.info('EKIOH-RECORDER recording start failed because: ' + x);
				if (x === 'not-enough-space') {
					callback(false, tr('recordingNotPossibleDiskFull'), x);
				} else {
					callback(false, tr('recordingFailed'), x);
				}
			}
			return this;
		},
		abort: function () {
			var success = false;
			var dfr = q.defer();
			BS.logger.info('EKIOH-RECORDER .abort: UniversalLocalRecording aborting record ' +
				'with ID ' + this.toString());

			try {
				var nativeRec = lpvr.get(this.persistenceReference);
				this.state = recMgr.Recording.STATE_READY;
				this.end = Date.now();
				lpvr.cancel(nativeRec);
				if (!this.isPnr()) {
					BS.recorder.addNewRecording(this);
				}
				try {
					if (isEmulator) {
						var ld = JSON.parse(nativeRec.longDescription);
						ld._emulator_duration = Math.round((this.end - this.start) / 1e3);
						nativeRec.longDescription = JSON.stringify(ld);
					}
				} catch (x) {
					BS.logger.debug(x);
				}
				success = true;
				dfr.resolve(this);
			} catch (e) {
				BS.logger.info('EKIOH-RECORDER .abort: recording stop fail, recording not added ' +
					'to rec list');
				BS.logger.info(e);
				dfr.reject(e);
			}
			this._super();

			BS.logger.info('EKIOH-RECORDER .abort: ' + (success ? 'SUCCEEDED' : 'FAILED'));
			return dfr.promise;
		},
		remove: function (callback) {
			var removeSuccess = true;
			callback = callback || BS.F;
			BS.logger.info('EKIOH-RECORDER: UniversalLocalRecording removing ' + this.toString());

			try {
				var nativeRec = lpvr.get(this.persistenceReference);
				if (this.isInProgress()) {
					lpvr.cancel(nativeRec);
				}
				lpvr.remove(nativeRec);
				this._super();

				if (BS.recorder.hasEnoughFreeSpace()) {
					BS.logger.debug('RECORDER .remove: fix neighbors of removed recording');
					BS.recorder
						.getList()
						.filter(this.isInNeighborOf, this)
						.forEach(function (cRec) {
							cRec.restoreMarginsFacing(this);
							if (cRec.isTimingUpdateable()) {
								cRec.updateTimings();
							}
						}, this);
				}

			} catch (x) {
				removeSuccess = false;
				if (x === 'remove-recording-failed' && this.isPnr()) { }
				if (x === 'timings-update-failed') {
					removeSuccess = true;
				}
				BS.logger.debug('RECORDER-EKIOH .remove: non fatal exception caught: ' + x);
			}
			callback(removeSuccess);
		},
		updateVodPlayerOptions: function (options) {
			options.assetURLs = [{'src':  this.resourceLink, 'protocolStack': 'local-recording'}];
			options.playbackSpeeds = ['4', '8', '16'];
			options.streamMaxOffset = options.duration;
			options.recType = this.type;
		},
		updateTimings: function () {
			this._super();
			BS.logger.debug('EKIOH-RECORDER .updateTimings: updated rec. is ' + this.toString());

			try {
				lpvr.remove(lpvr.get(this.persistenceReference));
				return this.schedulePhysical();
			} catch (x) {
				switch (x) {
				case 'not-enough-space':
					throw x;
				default:
					throw 'timings-update-failed';
				}
			}
		},
		schedulePhysical: function () {
			if (!BS.recorder.hasEnoughFreeSpace()) {
				throw 'not-enough-space';
			}

			var recObj = this;
			var nativeRec;
			var ex = 'schedule-recording-failed';

			if (recObj.isPnr()) {
				BS.logger.debug('EKIOH-RECORDER .schedulePhysical: schedule for PnR');
				nativeRec = lpvr.schedule(
					Date.now(), this.maxPauseAndResumeDuration, 0, recObj.channelResource
				);

			} else if (recObj.isInstant()) {
				BS.logger.debug('EKIOH-RECORDER .schedulePhysical: schedule for IR');
				nativeRec = lpvr.schedule(
					Date.now(), this.indefiniteDuration, 0, recObj.channelResource
				);

			} else if (recObj.isScheduled()) {
				BS.logger.debug('EKIOH-RECORDER .schedulePhysical: schedule for future PR');
				nativeRec = lpvr.schedule(
					recObj.start, recObj.end - recObj.start, 0, recObj.channelResource
				);

			} else {
				throw ex;
			}

			if (!nativeRec) {
				throw ex;
			}

			nativeRec.longDescription = JSON.stringify({
				'title': recObj.title ? recObj.title : 0,
				'description': recObj.description || 0,
				'userName': recObj.userName || BS.portal.user.userName,
				'type': parseInt(recObj.type, 10) || 0,
				'channelId': parseInt(recObj.channelId, 10) || 0,
				'rating': parseInt(recObj.rating, 10) || 0,
				'clipId': parseInt(recObj.clipId, 10) || 0,
				'margins': {start: recObj.startMargin, end: recObj.endMargin},
				'originalTimes': recObj.originalTimes,
				'recordId': recObj.recordId
			});

			var adaptedProps = new AssetObject(nativeRec);
			recObj.state = adaptedProps.state;
			recObj.resourceLink = adaptedProps.resourceLink;
			recObj.persistenceReference = adaptedProps.persistenceReference;

			BS.logger.debug('EKIOH-RECORDER .schedulePhysical: SUCCESS with rec object:');
			BS.logger.debug(nativeRec);
			return nativeRec;
		},
		persistMeta: function (properties) {
			var nativeRec = lpvr.get(this.persistenceReference);
			var ld = JSON.parse(nativeRec.longDescription);
			for (var i in properties) {
				if (-1 === ['rating', 'bookmarks'].indexOf(i))
					continue;
				ld[i] = properties[i];
			}
			BS.logger.info('EKIOH-RECORDER .persistMeta');
			BS.logger.trace('%s', Object.serialize(ld));
			nativeRec.longDescription = JSON.stringify(ld);
		}
	});
	recMgr.UniversalLocalRecorder = recMgr.LocalRecorder.extend(new function () {
		recMgr.recordersByPriority.push({
			ClassName: 'UniversalLocalRecorder',
			priority: recMgr.PRIORITY_HIGH,
			checkCondition: function () {
				return PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.LocallyPersisted);
			}
		});
		this.init = function (a) {
			lpvr = new MediaRecorderObject(this.ekRecorder);

			recMgr.Recorder.registerListGetter(function (callback) {
				var list = lpvr.recordings;
				BS.logger.info(
					'EKIOH-RECORDER: Ekioh recording api reports %d recordings'.sprintf(list.length)
				);

				if (!list || !list.length) {
					BS.logger.info('EKIOH-RECORDER: No local recordings');
					callback([]);
					return;
				}

				var result = [];
				list.forEach(function (rec) {
					var tmp = new recMgr.UniversalLocalRecording(new AssetObject(rec));
					BS.logger.debug(tmp.toString());
					try {
						if (tmp.state === recMgr.Recording.STATE_FAILED) {
							BS.logger.info('EKIOH-RECORDER: deleting failed rec from 2nd cond ' +
								'(state = failed)' + rec.id);

							if (tmp.isInProgress())
								lpvr.cancel(rec);

							lpvr.remove(rec);
							return;
						}
						if (tmp.isPnr()) {
							BS.logger.info('EKIOH-RECORDER .init: deleting PnR ' + rec.toString());
							lpvr.cancel(rec);
							lpvr.remove(rec);
							return;
						}
						if (tmp.isInstant() && tmp.isInProgress() && tmp.end > Date.now())
							tmp.scheduleAbortTimer(tmp.end - Date.now());

					} catch (x) {
						BS.logger.info('EKIOH-RECORDER .init: failed deleting ' + rec.toString());
					}

					result.push(tmp);
				});
				callback(result);
			});

			this._super(a);
		};
		this.start = function (options, callback) {
			var that = this;
			callback = callback || BS.F;
			try {
				var rec = new recMgr.UniversalLocalRecording(options);
				rec.invoke(function (success, msg, reason) {
					BS.logger.debug('EKIOH-RECORDER: Recorder invoke success: %s', success ?
						'OK' : 'FAIL');

					if (!success) {
						var bMisc = BS.modMgr.getApp('Misc');
						if (reason === 'not-enough-space')
							bMisc.event.write({eventId: bMisc.eventIds.lpvrDiskFull, start:
								Date.now()});

						callback(false, msg);
						return;
					}

					if (rec.isInstant() || rec.isPnr()) {
						var dT = Date.now() - rec.start;
						BS.logger.debug('EKIOH-RECORDER .start: HW recording delay is %d ms, ' +
							'fixing .start'
							.sprintf(dT));
						rec.start = Date.now();
					}

					if (rec.isScheduled() || rec.isInstant()) {
						BS.recorder.addNewRecording(rec);
					}

					callback(rec, msg || '');

					that._super(rec);
				});
			} catch (e) {
				BS.logger.debug(e);
			}
		};
		this.quota = function (callback) {
			var result = [];
			try {
				result = {
					'freeCapacity': lpvr.freeSpace,
					'fullCapacity': lpvr.totalSpace,
					'unit': 'MB',
					'location': 'local'
				};
			} catch (e) {
				BS.logger.debug(e);
			}
			callback(result);
		};
		this.getName = function () {
			return 'UniversalLocalRecorder';
		};
	});
	function MediaRecorderObject(ekRecorder) {
		this.ekRecorder = ekRecorder;
	}
	MediaRecorderObject.prototype = {
		ekRecorder: null,
		get discInfo () {
			try {
				return this.ekRecorder.discInfo;
			} catch (e) {
				BS.logger.debug(e);
			}
		},
		get freeSpace () {
			try {
				return this.ekRecorder.discInfo.free;
			} catch (e) {
				BS.logger.debug(e);
			}
		},
		get totalSpace () {
			try {
				return this.ekRecorder.discInfo.total;
			} catch (e) {
				BS.logger.debug(e);
			}
		},
		get recordings() {
			try {
				return this.ekRecorder.recordings;
			} catch (e) {
				BS.logger.debug(e);
			}
		},
		schedule: function schedule(when, duration, repeatDays, url) {
			BS.logger.debug('EKIOH-RECORDER .schedule -> ' +
				Array.processArguments(arguments).join(', '));
			when = Math.round(when / 1e3);
			duration = Math.round(duration / 1e3);
			var uniquenessPrefix = (isEmulator ? Date.now() + '_' : '');
			return this.ekRecorder.recordAt(when, duration, repeatDays, uniquenessPrefix + url);
		},
		cancel: function (recording) {
			try {
				BS.logger.debug('EKIOH-RECORDER .cancel -> ' + recording.recordingURI);
				return this.ekRecorder.stop(recording);
			} catch (e) {
				BS.logger.debug(e);
			}
		},
		remove: function (recording) {
			try {
				BS.logger.debug('EKIOH-RECORDER .remove -> ' + recording.recordingURI);
				return this.ekRecorder.remove(recording);
			} catch (e) {
				BS.logger.debug(e);
			}
		},
		get: function (id) {
			try {
				BS.logger.debug('EKIOH-RECORDER .get -> ' +
					Array.processArguments(arguments).join(', '));
				return this.ekRecorder.getRecording(id);
			} catch (e) {
				BS.logger.debug(e);
			}
		}
	};

})(
	BeeSmart,
	Q,
	BeeSmart.recMgr,
	BeeSmart.modMgr,
	BeeSmart.evMgr,
	BeeSmart.media,
	BeeSmart.PVR
);

(function (BS) {

	var cache = {};
	var containsNonWordChars = /[^A-Za-z0-9_\-]/;

	BS.ui.clearTemplateCache = function () {
		cache = {};
		BS.logger.debug('Template CACHE cleared');
	};

	BS.ui.template = function (str, data) {
		if ((str === null) || (str === undefined) || (str.constructor !== String))
			return null;

		var fn;
		try {
			if (!containsNonWordChars.test(str)) {
				if (str in cache)
					fn = cache[str];
				else
					fn = cache[str] = BS.ui.template(getElementById(str).textContent);
			} else {
				fn = new Function('obj',
					'var p = [];' +
					'with (obj) {' +
					str.replace(/[\r\t\n]/g, ' ')
						.replace(/<%/g, '\t')
						.replace(/%>/g, '\r')
						.replace(/((^|\r)[^\t]*)'/g, '$1\\\'')
						.replace(/(?:^|\r)(.*)(?:\t|$)/g, '\r\'$1\'\t')
						.replace(/\t=([^\r]*)\r/g, ',$1,')
						.replace(/\t/g, ');')
						.replace(/\r/g, 'p.push(') +
					'}' +
					'return p.join(\'\');');
			}

		} catch (x) {
			alert(str, '' + x);
		}
		return data === undefined ? fn : fn(data);
	};

})(BeeSmart, Q);

(function (BS) {
	BS.ui.ShelfManager = function (holderDomReference) {
		var shelves = [];
		var lastShown = null;

		if (!holderDomReference)
			throw 'ShelfManager constructor expects 1. argument';

		this.holderDomReference = holderDomReference;


		this._add = function (shelfInstance) {
			shelves.push(shelfInstance);
		};

		this._remove = function(shelfInstance) {
			shelves = shelves.filter(function(s) { return s !== shelfInstance; });
		};

		this.show = function () {
			if (lastShown)
				lastShown.show();
			holderDomReference.setTrait('display', 'inline');
		};

		this.hide = function () {
			for (var i = 0; i < shelves.length; i++) {
				lastShown = shelves[i].visible;
				shelves[i].hide();
			}
			holderDomReference.setTrait('display', 'none');
		};


		this.destroy = function () {
			for (var i = 0; i < shelves.length; i++)
				lastShown = shelves[i].destroy();

			lastShown = null;
			shelves = null;
			holderDomReference = null;
		};
	};

})(BeeSmart);

(function (BS) {

	BS.ui.ShelfMenu = function ShelfMenu(holderOrManager) {
		if (typeof holderOrManager === 'undefined') {
			throw 'ShelfMenu constructor expects 1. argument';
		}
		var manager = null,
			holderDOMReference = holderOrManager;
		if (holderOrManager instanceof BS.ui.ShelfManager) {
			holderDOMReference = holderOrManager.holderDomReference;
			holderOrManager._add(this);
			manager = holderOrManager;
		} else
			holderDOMReference = holderOrManager;

		var menuItems = [];
		var currentIndex = -1;
		var currentX = 0;
		var currentY = 0;
		var lastRow = 0;
		var lastRowMaxX = -1;
		var columnCount = parseInt(holderDOMReference.getAttributeNS(NS.bee, 'columns') || 5, 10);
		var lastColumn = columnCount - 1;
		var tilingStepX = (holderDOMReference.getAttributeNS(NS.bee, 'titleStepX') || 100)
			* (BS.portal.direction === 'ltr' ? 1 : -1);
		var continousRow = holderDOMReference.getAttributeNS(NS.bee, 'continousRow') || false;
		var continousColumn = holderDOMReference.getAttributeNS(NS.bee, 'continousColumn') || false;
		var shelfHeight = holderDOMReference.getAttributeNS(NS.bee, 'shelfHeight') || 0;
		var shownItem = null;
		var dom = {
			'container': null,
			'selector-ani': null,
			'footer': null,
			'slider-ani': null,
			'slider': null,
			'setItemAtIndex': null,
			'container-ani-up': null,
			'container-ani-down': null,
			'toggleMarkItemAtIndex': null,
			'up-down-arrows': null
		};
		var requiredDom = ['container', 'selector-ani', 'setItemAtIndex'];
		var sliderRange;
		var scrollLock = false;
		var isShelfShown = false;
		var _actionSlider = function () { setTimeout(endScrollCallbackWrapper, 0); };
		var _actionFooter = function () {};
		var showDescription = function () {};
		var shelfEndScroll = null;
		var i, len;
		var domElements = holderDOMReference.getElementsByTagName('*');
		for (i = 0, len = domElements.length; i < len; i++) {
			var cElement = domElements[i];
			if (cElement.nodeType !== 1)
				continue;

			var cClass = cElement.getAttribute('class') ||
				cElement.getAttributeNS(NS.ekioh, 'class');

			if (!cClass || dom[cClass] !== null)
				continue;
			dom[cClass] = cElement;
		}

		for (i in requiredDom) {
			if (dom[requiredDom[i]] === null)
				throw 'Shelf menu requires element with class ' + requiredDom[i] + ' defined';
		}

		var changeItemTrigger = $(dom['setItemAtIndex']);


		function endScrollCallbackWrapper() {
			scrollLock = false;
			if (typeof shelfEndScroll === 'function')
				shelfEndScroll();
		}

		function markCurrentItem() {
			if (dom['toggleMarkItemAtIndex'])
				$(dom['toggleMarkItemAtIndex']).trigger('mark',
					{'index': currentIndex % columnCount});

		}

		function unmarkCurrentItem() {
			if (dom['toggleMarkItemAtIndex'])
				$(dom['toggleMarkItemAtIndex']).trigger('unmark',
					{'index': currentIndex % columnCount});

		}

		if (dom['slider-ani']) {
			dom['slider'] = dom['slider-ani'].parentNode;
			if (!shelfHeight) {
				BS.logger.debug('bee:shelfHeight isnt present on shelf!!!');
				sliderRange = 0;
			} else
				sliderRange = parseInt(shelfHeight, 10) - dom['slider'].getBBox().height;

			if (dom['slider-ani'].nodeName !== 'animateTransform')
				return;

			_actionSlider = function (y, dontAnimate, forceRefresh) {
				var sla = dom['slider-ani'],
					newSliderY = lastRow ? y * sliderRange / lastRow : 0,
					lastSliderY = lastRow ? currentY * sliderRange / lastRow : 0;

				if (!forceRefresh && lastSliderY === newSliderY) {
					scrollLock = false;
					return;
				}

				if (sla) {
					sla.setAttribute('values',
						'0,' + (dontAnimate ? newSliderY : lastSliderY) + ';0,' + newSliderY);
					sla.beginElement();
				} else {
					var ctm = dom['slider'].getMatrixTrait('transform');
					ctm.f = newSliderY;
					dom['slider'].setMatrixTrait('transform', ctm);
				}
				if (dontAnimate) scrollLock = false;
			};
		}

		if (dom['footer']) {
			_actionFooter = function (y) {
				$(dom['footer']).svg(
					tr('pageCountPre') + ' ' +
					(y + 1).toLocaleString(BS.portal.user.language.label) + ' ' +
					tr('pageCountMiddle') + ' ' +
					(lastRow + 1).toLocaleString(BS.portal.user.language.label)
				);
			};
		}



		this.__defineGetter__('visible', function () {
			return isShelfShown;
		});

		this.__defineSetter__('items', function (list) {
			if (!(list instanceof Array))
				throw 'ShelfMenu.items expects Array of menu items';
			menuItems = list;
			if (list.length > 0) {
				currentIndex = 0;
				shownItem = list[currentIndex];
				currentX = 0;
				currentY = 0;
				lastRow = Math.floor((list.length ? list.length - 1 : 0) / columnCount);
				lastRowMaxX = columnCount - (((lastRow + 1) * columnCount) - list.length) - 1;
			}
			_actionFooter(0);

			if (dom['slider']) {
				if (list.length <= columnCount) dom['slider'].setTrait('display', 'none');
				else {
					dom['slider'].setTrait('display', 'inline');
					_jump(0, 0, 1, 1);
				}
			}
			if (!manager) this.show();
			return list;
		});

		this.__defineGetter__('items', function () {
			return menuItems;
		});

		this.__defineSetter__('item', function (val) {
			this.changeItemAtIndex(this.index, val);
			return val;
		});

		this.__defineGetter__('item', function () {
			return shownItem;
		});

		this.changeItemAtIndex = function (index, menuItem) {
			changeItemTrigger.trigger('setItem', {'index': index, 'item': menuItem});
			return this;
		};
		var _changeItemAtIndex = this.changeItemAtIndex;

		this.numberOfColumns = function () {
			return columnCount;
		};

		this.show = function () {
			if (isShelfShown) return;
			if (manager) manager.hide();
			var menuItemsToShowStart = currentY * columnCount;
			for (var i = menuItemsToShowStart; i < (menuItemsToShowStart + columnCount); i++) {
				_changeItemAtIndex(i - menuItemsToShowStart, menuItems[i]);
			}
			if (currentIndex !== null) {
				_jumpIndex(currentIndex, true, true);
				showDescription();
			}
			dom['selector-ani'].addEventListener('endEvent', markCurrentItem, true);
			dom['selector-ani'].addEventListener('beginEvent', unmarkCurrentItem, true);
			markCurrentItem();
			if (dom['slider-ani'])
				dom['slider-ani'].addEventListener('endEvent', endScrollCallbackWrapper, false);
			else setTimeout(endScrollCallbackWrapper, 0);
			holderDOMReference.setTrait('display', 'inline');
			isShelfShown = true;
			return this;
		};

		this.hide = function () {
			if (!isShelfShown) return;
			unmarkCurrentItem();
			dom['selector-ani'].removeEventListener('endEvent', markCurrentItem, true);
			dom['selector-ani'].removeEventListener('beginEvent', unmarkCurrentItem, true);
			if (dom['slider-ani'])
				dom['slider-ani'].removeEventListener('endEvent', endScrollCallbackWrapper, false);
			else setTimeout(endScrollCallbackWrapper, 0);
			holderDOMReference.setTrait('display', 'none');
			isShelfShown = false;
			return this;
		};

		this.nextRow = function (callback) {
			if (menuItems.length === 0 || menuItems.length < columnCount)
				return this;

			shelfEndScroll = callback;
			if (currentY === lastRow) _jump(currentX, 0);
			else if ((currentY === (lastRow - 1)) && (currentX > lastRowMaxX)) {
				if (continousRow) _jump(lastRowMaxX, currentY + 1);
				else _jump(currentX, 0);
			} else _jump(currentX, currentY + 1);

			return this;
		};

		this.previousRow = function (callback) {
			if (menuItems.length === 0 || menuItems.length < columnCount) return this;
			shelfEndScroll = callback;
			if (currentY === 0) {
				if (currentX > lastRowMaxX) {
					if (continousRow) _jump(lastRowMaxX, lastRow);
					else _jump(currentX, lastRow - 1);
				} else _jump(currentX, lastRow);
			} else _jump(currentX, currentY - 1);
			return this;
		};


		this.nextColumn = function (callback) {
			if (menuItems.length === 0) return this;
			shelfEndScroll = callback;

			if (continousColumn) {
				if (currentX === lastColumn && currentY < lastRow) {
					_jump(0, currentY + 1);
					return this;
				}
				if (currentX === lastRowMaxX && currentY === lastRow) {
					_jump(0, 0);
					return this;
				}
			}
			if (currentY === lastRow) {
				if (currentX === lastRowMaxX) _jump(0, currentY);
				else _jump(currentX + 1, currentY);
			} else if (currentX === lastColumn) _jump(0, currentY);
			else _jump(currentX + 1, currentY);
			return this;
		};

		this.previousColumn = function (callback) {
			if (menuItems.length === 0) return this;
			shelfEndScroll = callback;
			if (continousColumn) {
				if (currentX === 0 && currentY > 0) {
					_jump(lastColumn, currentY - 1);
					return this;
				}
				if (currentX === 0 && currentY === 0) {
					_jump(lastRowMaxX, lastRow);
					return this;
				}
			}
			if (currentX !== 0) _jump(currentX - 1, currentY);
			else {
				if (currentY === lastRow) _jump(lastRowMaxX, currentY);
				else _jump(lastColumn, currentY);
			}
			return this;
		};

		var _drawCurrentItems = function () {
			for (var i = 0; i < columnCount; i++) {
				_changeItemAtIndex(i, menuItems[(currentY * columnCount) + i]);
			}
			if (!dom['slider-ani']) setTimeout(endScrollCallbackWrapper, 0);
		};

		var _updateUpDownArrows = function updateUpDownArrows() {
			var upArrow = $(dom['up-down-arrows']).find('.up');
			var downArrow = $(dom['up-down-arrows']).find('.down');
			if (currentY !== 0) upArrow.show();
			else upArrow.hide();
			if (currentY === lastRow) downArrow.hide();
			else downArrow.show();
		};

		var _jump = function (x, y, dontAnimate, forceRefresh) {
			var newIndex = (y * columnCount) + x;
			var sa = dom['selector-ani'];
			var newX = x * tilingStepX;
			var lastX = currentX * tilingStepX;

			if (scrollLock && !forceRefresh) return;
			if (newIndex === currentIndex && !forceRefresh) return this;

			scrollLock = true;

			if (dontAnimate) sa.setAttribute('values', newX + ',' + 0 + ';' + newX + ',' + 0);
			else sa.setAttribute('values', lastX + ',' + 0 + ';' + newX + ',' + 0);

			sa.beginElement();

			if (currentY !== y || forceRefresh) {
				_actionSlider(y, dontAnimate, forceRefresh);
				_actionFooter(y);
			} else scrollLock = false;


			var previousY = currentY;
			currentX = x;
			currentY = y;
			shownItem = menuItems[(currentIndex = newIndex)];

			if (previousY !== currentY) {
				if (dontAnimate) {
					_drawCurrentItems();
				} else {
					var direction = currentY > previousY ? 'down' : 'up';
					if (direction === 'up') {
						if (dom['container-ani-up']) $(dom['container-ani-up'])
							.begin(_drawCurrentItems);
						else _drawCurrentItems();
					} else {
						if (dom['container-ani-down']) $(dom['container-ani-down'])
							.begin(_drawCurrentItems);
						else _drawCurrentItems();
					}
				}
			}
			_updateUpDownArrows();
			return this;
		};

		this.jumpXY = function (x, y) {
			_jump(x, y, true, false);
		};
		this.forceJumpToIndex = function (index) {
			_jumpIndex(index, true, true);
		};

		var _jumpIndex = function (index, dontAnimate, forceRefresh) {
			if (menuItems.length === 0)return;
			if (index < 0) throw 'Shelf menu index should not be negative!';
			shelfEndScroll = null;
			if (index >= menuItems.length) index = menuItems.length - 1;
			var y = Math.floor(index / columnCount);
			var x = index % columnCount;
			_jump(x, y, dontAnimate, forceRefresh);
		};

		this.__defineSetter__('index', function (newIndex) {
			_jumpIndex(newIndex, true, false);
			return newIndex;
		});

		this.__defineGetter__('index', function () {
			return currentIndex;
		});

		this.destroy = function () {
			this.hide();
			for (var i = 0; i < columnCount; i++)
				_changeItemAtIndex(i, null);
			dom = null;
			menuItems = null;
			shownItem = null;
			if (manager)
				manager._remove(this);
			manager = null;
			setTimeout(gc, 500);
		};
	};

})(BeeSmart);

(function (BS) {

	const argumentError = 'PasswordField constructor accepts only BsJqueryObj as first argument';
	const holderEmptyError = 'holder argument is empty';

	BS.ui.PasswordField = function (holder, props) {
		if (typeof holder === 'string' || !('beeSmart' in holder))
			throw new TypeError(argumentError);

		if (holder.length === 0)
			throw new TypeError(holderEmptyError);

		props = props || {};
		this.holder = holder;
		var temp = $('#password-input-field');

		props.dotSpacing = parseInt(holder.attr('dot-spacing', null, NS.bee))
			|| parseInt(temp.attr('dot-spacing', null, NS.bee));
		props.dotHref = holder.attr('dot-href', null, NS.bee)
			|| temp.attr('dot-href', null, NS.bee);
		props.direction = holder.attr('direction', null, NS.bee)
			|| temp.attr('direction', null, NS.bee);
		props.holderWidth = parseInt(holder.attr('width', null, NS.bee))
			|| parseInt(temp.attr('width', null, NS.bee));

		this._setProps(props);
		this.length = 0;
	};

	BS.ui.PasswordField.prototype = {
		holder: null,
		length: 0,
		dotSpacing: null,
		dotHref: '',
		holderWidth: null,
		maxFieldEntries: 50,
		direction: 'ltr',
		_setProps: function (p) {
			p = p || {};
			if ('dotSpacing' in p) this.dotSpacing = p.dotSpacing;
			if ('direction' in p) this.direction = p.direction;
			if ('dotHref' in p) this.dotHref = p.dotHref;
			if ('holderWidth' in p) this.holderWidth = p.holderWidth;
			if ('maxFieldEntries' in p) this.maxFieldEntries = p.maxFieldEntries;
		},
		push: function () {
			var audit = 'PasswordField .push() ';
			if (this.length >= this.maxFieldEntries) {
				BS.logger.info(audit + 'Length is larger than ' + this.maxFieldEntries);
				return;
			}
			this.length++;

			var bbox = this.holder[0].getBBox();
			if (bbox !== null && bbox.width > this.holderWidth) {
				BS.logger.info(audit + 'Text is wider than ' + this.holderWidth);
				return;
			}

			var spacing = this.direction === 'ltr' ? this.dotSpacing : -this.dotSpacing;
			this.holder.append('<use x="%d" xlink:href="%s" />'
				.sprintf(this.length * spacing, this.dotHref));
		},
		clear: function () {
			this.holder.text('');
			this.length = 0;
		},
		place: function (length) {
			var that = this;
			for (var i = 0; i < length; i++) {
				that.push();
			}
		}
	};

})(BeeSmart);

(function (BS) {

	BS.ui.ActionBar = function (holderElement) {
		if (typeof holderElement === 'string' || !('beeSmart' in holderElement)){
			throw new TypeError('widget-wrong-arguments');
		}

		var ab = holderElement;
		var bt = ab.attr('button-type', null, NS.bee).split(/\s*,\s*/);
		var bc = ab.attr('button-captions', null, NS.bee).split(/\s*,\s*/);
		var width = parseInt(ab.attr('width', null, NS.bee), 10);
		var defaultBottomVector = [];
		var dom = ab.find('*');
		var aniShow = dom.filter('.show');
		var aniHide = dom.filter('.hide');
		var container = dom.filter('.container');
		var currentButtonVect = [];

		if (container.length !== 1) throw new TypeError('widget-improper-svg-structure');

		if (bt.length !== bc.length) {
			BS.logger.info('Item of type != captions, ' + bt.length + '!=' + bc.length);
			throw new TypeError('widget-config-ambigious');
		}

		for (var i = 0, len = bt.length; i < len; i++) {
			var bcTemp = bc[i];
			if (bcTemp === 'null') bcTemp = null;
			defaultBottomVector.push([bt[i], bcTemp]);
		}

		setButtons(defaultBottomVector);

		this.show = function (skipAnimation) {
			if (aniShow.length && skipAnimation !== true) aniShow.begin();
			else ab.show();
			return this;
		};

		this.hide = function (skipAnimation) {
			if (aniHide.length && skipAnimation !== true) aniHide.begin();
			else ab.hide();
			return this;
		};

		this.set = function (buttonVector) {
			setButtons(buttonVector);
			return this;
		};

		this.reset = function () {
			setButtons(defaultBottomVector);
			return this;
		};

		this.clear = function () {
			dom = aniShow = aniHide = container = undefined;
			ab.remove();
			ab = null;
		};

		this.hideButton = function (buttonId) {
			var buttonVect = [];
			for (var i = 0, len = bt.length; i < len; i++) {
				if (buttonId && bt[i] === buttonId)
					continue;
				var bcTemp = bc[i];
				if (bcTemp === 'null') bcTemp = null;
				buttonVect.push([bt[i], bcTemp]);
			}

			setButtons(buttonVect);
		};
		this.recalculatePositions = function () {
			width = parseInt(ab.attr('width', null, NS.bee), 10);
			setButtons(currentButtonVect);
		};
		function setButtons(buttonVector) {
			currentButtonVect = buttonVector;
			container.text(' ');
			container.append(BS.ui.template('templateActionBar', {
				'defaultBottomVector': buttonVector,
				'offset': width / buttonVector.length
			}));
		}
	};

})(BeeSmart);

(function (BS) {

	BS.ui.StatusIcons = function (holderElement, iconIdArray, padding) {
		padding = padding || 7;
		var $holderElement = $(holderElement);
		var svgCodeBuffer = '<g>';
		var x = 0;
		var that = this;
		var i;
		for (i = 0; i < iconIdArray.length; i++) {
			svgCodeBuffer = svgCodeBuffer.concat('<use xlink:href="#');
			svgCodeBuffer = svgCodeBuffer.concat(iconIdArray[i]);
			svgCodeBuffer = svgCodeBuffer.concat('" x="');
			svgCodeBuffer = svgCodeBuffer.concat(x.toString());
			svgCodeBuffer = svgCodeBuffer.concat('">');
			svgCodeBuffer = svgCodeBuffer.concat('<animate attributeType="CSS" attributeName="opacity" dur="0" calcMode="spline" fill="freeze"/></use>');
			x += 16 + padding;
		}
		svgCodeBuffer = svgCodeBuffer.concat('</g>');
		var $svgElements = $(svgCodeBuffer).first();
		$holderElement.append($svgElements);
		this.element = $svgElements;
		i = 0;
		var element = $svgElements.first();
		var iconAnimators = [];

		while (i < iconIdArray.length) {
			var animation = element.first();
			var animator = {
				show: function () {
					animate(this.dom, '1.0');
				}.bind({dom: animation}),
				hide: function () {
					animate(this.dom, '0.2');
				}.bind({dom: animation})
			};
			that[iconIdArray[i]] = animator;
			iconAnimators.push(animator);
			i++;
			element = element.next();
		}

		this.showIcons = function (boolArray) {
			var i = 0;
			var element = $svgElements.first();
			while ((i < boolArray.length) && element) {
				if (boolArray[i])
					iconAnimators[i].show();
				else
					iconAnimators[i].hide();
				i++;
				element = element.next();
			}
		};

		this.destroy = function () {
			$svgElements.remove();
			$svgElements = undefined;
			iconAnimators = [];
			for (var i in that) delete that[i];
		};

		function animate(el, toValue) {
			el.attr('from', el.attr('to'));
			el.attr('to', toValue);
			el[0].beginElement();
		}
	};

})(BeeSmart);

(function (BS, q) {

	BS.ui.Alert = function Alert(alertProperties, message) {
		alertProperties = alertProperties || {};
		var myAlertBox = document.getElementById('uiAlert').cloneNode(true);
		var $contentElement = $(myAlertBox).find('textArea');
		var animationHide = $(myAlertBox).find('animate')[1];
		var animationShow = $(myAlertBox).find('animate')[0];
		var props = Object.assign({
			autoHide: 0,
			callback: function () {}
		}, alertProperties);
		var timer = null;
		var r = {};
		var hidden = true;
		message = message || '';
		myAlertBox.removeAttributeNS(NS.xml, 'id');
		myAlertBox.setAttribute('display', 'none');
		$contentElement.svg(message);
		document.getElementById('dialogs_layer3').appendChild(myAlertBox);
		r.domRef = $(myAlertBox);

		r.show = function (message, forceAutohideProp) {
			if (message) $contentElement.svg(message);
			if (timer !== null) {
				clearTimeout(timer);
				timer = null;
			}
			if (props.autoHide && forceAutohideProp !== false) {
				timer = setTimeout(
					function () {
						r.hide();
						props.callback.apply(r);
					},
					props.autoHide
				);
			}

			myAlertBox.setAttribute('display', '');
			var textPadding = 20;
			var height = ($contentElement[0].getBBox() && $contentElement[0].getBBox().height > 20)
				? $contentElement[0].getBBox().height
				: 20;
			r.domRef.first().attr('height', height + textPadding);
			r.domRef.first().next().attr('height', height + textPadding - 4);
			myAlertBox.setAttribute('display', '');

			if (hidden === false) return;
			hidden = false;
			animationShow.beginElement();
		};

		r.hide = function () {
			var dfr = q.defer();
			if (hidden) return;
			hidden = true;
			$(animationHide).begin(function endHidingAnimation() {
				myAlertBox.setAttribute('display', 'none');
				dfr.resolve();
			});
			if (timer) {
				clearTimeout(timer);
				timer = false;
			}
			return dfr.promise;
		};

		r.destroy = function () {
			myAlertBox.parentNode.removeChild(myAlertBox);
		};

		r.updateMessage = function (msg) {
			msg = msg || '';
			$contentElement.svg(msg);
		};

		r.isHidden = function () {
			return hidden;
		};

		return r;
	};

	BS.ui.generalAlert = function generalAlert(message, autoHideTime) {
		autoHideTime = autoHideTime || 2000;
		if (BS.ui.generalAlert.ref === null || BS.ui.generalAlert.autohideTime !== autoHideTime) {
			BS.ui.generalAlert.destroy();
			BS.ui.generalAlert.ref = new BS.ui.Alert({autoHide: autoHideTime});
			BS.ui.generalAlert.autohideTime = autoHideTime;
		}
		BS.ui.generalAlert.ref.show(message);
	};
	BS.ui.generalAlert.ref = null;
	BS.ui.generalAlert.autohideTime = 0;
	BS.ui.generalAlert.destroy = function () {
		if (BS.ui.generalAlert.ref) BS.ui.generalAlert.ref.destroy();
		BS.ui.generalAlert.autohideTime = 0;
	};

})(BeeSmart, Q);


(function (BS) {
	var loaderShowDelayTimerRef = null;
	var currentState = false;
	var clearLoaderShowDelay = function () {
		if (loaderShowDelayTimerRef !== null) {
			clearTimeout(loaderShowDelayTimerRef);
			loaderShowDelayTimerRef = null;
		}
	};

	BS.ui.toggleLoader = function (display, doAnimation) {
		var loadingAni = $('#loadingAnimation');
		var loaderTimeout = parseInt(loadingAni.attr('timeout', null, NS.bee)) || 250;
		var loadingAnimation = loadingAni.find('animateTransform');
		var isDisplayed = !currentState;
		doAnimation = doAnimation === undefined ? true : doAnimation;
		if (display === false || display === true)
			isDisplayed = display;

		clearLoaderShowDelay();

		if (!isDisplayed) {
			loadingAnimation.end();
			loadingAni.hide();
			currentState = false;

		} else {
			currentState = true;
			loaderShowDelayTimerRef = setTimeout(function () {
				loadingAni.show();
				if (doAnimation) loadingAnimation.begin();
			}, loaderTimeout);
		}

		return currentState;
	};
})(BeeSmart);


(function (BS) {

	BS.ui.ProgramDescription = function ProgramDescription(
		titleElement, contentElement, contentTextElement,
		scrollerElement, upDownArrowsElement, programIconsElement, programDateElement,
		channelIconsContainer, imageContentTypeElement, imageContentType
	) {
		var mm = BS.modMgr;
		var panel = new BS.ui.ScrollingPanel(
			contentElement, null, scrollerElement, null, upDownArrowsElement);
		var timer = null;
		var channelNameElement = false;
		var statusIcons = false;
		var iconsBBox = false;
		var PVR = BeeSmart.PVR;
		var tvShowRec = PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.Program);
		var catchUpRec = PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.CatchUp);

		if (channelIconsContainer) {
			channelNameElement = channelIconsContainer.firstElementChild;
			if (!channelNameElement || (channelNameElement.nodeName !== 'text'))
				channelNameElement = false;
			statusIcons = new BS.ui.StatusIcons(channelIconsContainer, ['iconChannelRecordable',
				'iconChannelTimeshift', 'iconChannelPauseResume', 'iconChannelInstantRecording',
				'iconChannelLock', 'iconChannelHD'
			]);

			iconsBBox = statusIcons.element.dimensions();
		}

		this.destroy = function () {
			if (timer !== null) {
				clearTimeout(timer);
				timer = null;
			}
			if (statusIcons) {
				statusIcons.destroy();
				statusIcons = false;
				iconsBBox = false;
			}
			for (var i in this)
				delete this[i];
			panel.destroy();
			panel = undefined;
		};

		this.moveUp = function () {
			if (!panel || !panel.verticalOverflow) return;
			if (panel.currentY === panel.minY) panel.jumpVertical(panel.maxY);
			else panel.moveUp();
		};
		this.moveDown = function () {
			if (!panel || !panel.verticalOverflow)
				return;
			if (panel.currentY >= panel.maxY) panel.jumpVertical(panel.minY);
			else panel.moveDown();
		};
		this.setProgram = function (progObj, durText) {
			var mmPvr = !mm.appExists('pvr') || mm.getApp('pvr');
			var liveTv = mm.getApp('liveTv');
			var title, iconsStatus, channel, dateString;

			if (!progObj) {
				title = ' ';
				iconsStatus = [[false, ''], [false, ''], [false, ''], [false, ''], [false, ''],
					[false, '']
				];
				channel = false;
				dateString = '';

			} else {
				try {
					channel = progObj.channel();
				} catch (x) {
					channel = {
						chEnc: false, chEncAndPlayable: false, name: '', recordable: true,
						autoRecord: false, id: 0
					};
				}
				try {
					if (progObj.channel().name && progObj.title) {
						title = progObj.channel().name + ', ' + progObj.title;
					} else {
						title = progObj.title || progObj.channel().name;
					}
				} catch (x) {
				}
				var programStart = new Date(parseInt(progObj.start, 10));
				var unRecordable = !progObj.isRecordable() || !channel.isPlayable();
				var recorded = mmPvr && mmPvr.recordedClips && mmPvr.recordedClips[progObj.id];
				var now = new Date().valueOf();
				var startInFuture = (progObj.start.valueOf() - 1000) > now;
				var endInPast = (progObj.end.valueOf() + 1000) < now;
				var aRecTime = mmPvr && mmPvr.autoRecordable && mmPvr.autoRecordable[channel.id];
				var aRecCond = aRecTime
				!== true ? aRecTime : BS.config.get('Epg.Client.MAX_DAYS_OFFSET')
					* 86400000;
				var aRecClip = aRecTime && progObj.isRecordable() && progObj.start < now
					&& progObj.start > (now - aRecCond);
				var channelLocked = !channel.isPlayable();
				iconsStatus = [
					['#iconTvShowDuration', (progObj.duration * 60).toString().secondsToTime()],
					['#iconTvShowStart',
						programStart.toFormatedString(BeeSmart.portal.local.formats.date)
						+ ' '
						+ programStart.toFormatedString(BeeSmart.portal.local.formats.time)
					],
					['#iconTvShowEnd', new Date(parseInt(progObj.end,
						10)).toFormatedString(BeeSmart.portal.local.formats.date) + ' '
					+ new Date(parseInt(progObj.end,
						10)).toFormatedString(BeeSmart.portal.local.formats.time)
					],
					[!isNaN(parseInt(progObj.rating)) && parseInt(progObj.rating) !== 0
					&& progObj.rating !== null ? '#iconTvShowRating' : false,
						(parseInt(progObj.rating) > 21 ? '21' : progObj.rating) + ' '
						+ tr('yearLimit')
					],
					[startInFuture && !recorded && tvShowRec && !unRecordable && channel.recordable
					&& (channel.autoRecord && catchUpRec || !channel.autoRecord) ?
						'#iconTvShowRecordable' : false,
						tr('pRecordable')
					],
					[recorded && endInPast && !unRecordable ||
					aRecClip && !channelLocked ||
					channel.autoRecord && !unRecordable && catchUpRec && !(endInPast
					&& recorded) && !(startInFuture &&
					(recorded || !channel.recordable || channel.recordable && tvShowRec))
					&& aRecClip ||
					channel.recordable && !channel.autoRecord && !unRecordable && tvShowRec
					&& recorded && endInPast ? '#iconTvShowPlayable' : false, tr('pPlayable')
					],
					[
						progObj.recommendedBy !== undefined ? '#recordingRecommend' : false,
						progObj.recommendedBy
					],
					[
						progObj.sharedBy !== undefined ? '#contentSharedImage' : false,
						progObj.sharedBy
					]
				];
				dateString = programStart.toFormatedString(BS.portal.local.formats.time);
			}

			$(titleElement).svg(title.encodeEntities());
			$(contentTextElement).text('');

			if (progObj) {
				progObj
					.getDescription().then(function (txt) {
					$(contentTextElement).svg(txt);
				})
					.done(panel.reinit.bind(panel));
			} else {
				panel.reinit();
			}

			if (programDateElement)
				programDateElement.textContent = dateString;

			if (imageContentType) {
				imageContentTypeElement.setAttributeNS(NS.xlink, 'href', imageContentType);
			}

			if (programIconsElement) {
				var i = 0,
					iconGroup = programIconsElement.firstElementChild,
					noOfGroupsShown = 0;

				while (i < iconsStatus.length && !!iconGroup) {
					if (iconsStatus[i][0]) {
						$.setSvgContent(iconGroup.firstElementChild, iconsStatus[i][1]);

						iconGroup.firstElementChild.nextElementSibling.setAttributeNS(NS.xlink,
							'href', iconsStatus[i][0]);

						iconGroup.setAttribute('display', '');
						iconGroup = iconGroup.nextElementSibling;
						noOfGroupsShown++;
					}
					i++;
				}
				while (noOfGroupsShown < iconsStatus.length && !!iconGroup) {
					iconGroup.setAttribute('display', 'none');
					iconGroup = iconGroup.nextElementSibling;
					noOfGroupsShown++;
				}
			}

			if (statusIcons) {
				statusIcons.showIcons(channel ? liveTv.channelStatusIcons(channel) :
					[false, false, false, false, false, false]);

				var bbox = false;
				if (channelNameElement) {
					$.setSvgContent(channelNameElement, channel ? channel.name : null);
					bbox = channelNameElement.getBBox();
				}

				if (!bbox) {
					bbox = {
						x: iconsBBox.x + iconsBBox.width,
						y: iconsBBox.y,
						width: 0,
						height: iconsBBox.height
					};
				}

				var newX = iconsBBox.x - iconsBBox.width - 5,
					newY = bbox.y + ((bbox.height - iconsBBox.height) / 2) + 30;

				if (channelNameElement && channelNameElement.getAttribute('text-anchor') !== 'end')
					newX = 0;

				statusIcons.element.attr('transform', 'translate(' + newX + ',' + newY + ')',
					NS.svg);
			}
		};
	};

})(BeeSmart);


(function (BS) {

	BS.ui.InplaceFeedback = function InplaceFeedback(containerGId, props) {
		if (!containerGId) {
			throw new TypeError('InplaceFeedback: `containerGId` not defined or invalid');
		}
		var that = this;
		var cont = {};
		var tId = null;
		var newAlert;
		var myAlertBox = $('#InplaceFeedback');
		if (!myAlertBox || myAlertBox.length === 0) {
			throw new TypeError('InplaceFeedback: #InplaceFeedback DOM element does not exits!');
		}

		myAlertBox = myAlertBox.clone(true);
		that.status = 'hidden';

		this.setProperties = function _setProps(p) {
			props = p || {autoHide: false};
			if (tId) {
				clearTimeout(tId);
				tId = null;
			}
			return that;
		};
		this.setProperties(props);

		myAlertBox.attr('id', '', NS.xml);

		if (typeof containerGId === 'string') $('#'.concat(containerGId)).append(myAlertBox);
		else containerGId.append(myAlertBox);

		newAlert = myAlertBox.parent();

		cont.use = myAlertBox.first();
		cont.txt = cont.use.next();
		cont.aniShow = cont.txt.next();
		cont.aniHide = cont.aniShow.next();

		cont.use.bind('SVGPostload', function () {
			var imgBBox = cont.use[0].getBBox();
			var maxHeight = newAlert.attr('max-height', null, NS.bee);
			var maxWidth = newAlert.attr('max-width', null, NS.bee);

			if (maxHeight !== '') cont.txt.attr('height', parseInt(maxHeight));
			if (maxWidth !== '') cont.txt.attr('width', parseInt(maxWidth) - imgBBox.width - 10);

			cont.txt.attr('x', imgBBox.width + 10);
		});


		this.show = function (icon, text) {
			if (typeof icon === 'string')
				cont.use.attr('href', '#' + icon, NS.xlink);
			that.status = 'visible';
			this.updateText(text);
			cont.aniShow.begin();

			if (tId) {
				clearTimeout(tId);
				tId = null;
			}
			if (props.autoHide) tId = setTimeout(that.hide, props.autoHide);
		};
		this.hide = function () {
			if (tId) {
				clearTimeout(tId);
				tId = null;
			}
			if (that.status !== 'hidden') {
				that.status = 'hidden';
				cont.aniHide.begin();
			}
		};

		this.updateText = function (text) {
			cont.txt.text(text.toLocaleString(BS.portal.language.label));
		};
		this.reinit = function () {
			if (this.status === 'hidden') {
				cont.aniShow.end();
			} else {
				cont.aniShow.begin();
			}
		};

		return that;
	};

})(BeeSmart);

(function (BS) {

	BS.ui.LoaderProgress = function LoaderProgress(containerId) {
		var cont = {};
		var myloader = document.getElementById('LoaderProgress').cloneNode(true);
		var _length = 1;
		var _currentIndex = 0;

		myloader.removeAttributeNS(NS.xml, 'id');
		document.getElementById(containerId).appendChild(myloader);

		var anis = myloader.getElementsByTagName('animate');
		cont.ani1 = $(anis[0]);
		cont.ani2 = $(anis[1]);
		cont.boxW = parseInt(myloader.getAttributeNS(NS.bee, 'width')) || myloader.getBBox().width;

		this.show = function () {
			cont.ani2.attr('values', '0;1');
			cont.ani2.begin();
		};
		this.hide = function (onEnd) {
			cont.ani2.attr('values', '1;0');
			cont.ani2.begin(onEnd);
		};
		this.increment = function () {
			var oldW = (cont.boxW * _currentIndex / _length);
			_currentIndex++;
			var newW = (cont.boxW * _currentIndex / _length);
			cont.ani1.attr('values', Number(oldW).toFixed(0) + ';' + Number(newW).toFixed(0));
			cont.ani1.begin();
		};
		this.setTaskLength = function (len) {
			_length = len;
		};
	};

})(BeeSmart);


(function (BS) {

	var svgNS = 'http://www.w3.org/2000/svg';
	var beeNS = 'http://www.beesmart.biz/2008/beesmart';
	var ekiohNS = 'http://www.ekioh.com/2007/ekioh';

	var defaultOptions = {
		paddingTop: 0,
		paddingLeft: 0,
		paddingBottom: 0,
		paddingRight: 0,
		alwaysEnableSlider: false
	};
	var emptyBBox = {x: 0, y: 0, width: 0, height: 0};

	function ScrollableGroupScroller(contentElement, animationElementX, animationElementY) {
		this.scrollX = function (oldX, newX) {
			if (animationElementX) {
				animationElementX.setAttribute('from', oldX);
				animationElementX.setAttribute('to', newX);
				animationElementX.beginElement();
			}
			else contentElement.setAttributeNS(ekiohNS, 'scrollX', newX);
		};

		this.scrollY = function (oldY, newY) {
			if (animationElementY) {
				animationElementY.setAttribute('from', oldY);
				animationElementY.setAttribute('to', newY);
				animationElementY.beginElement();
			}
			else contentElement.setAttributeNS(ekiohNS, 'scrollY', newY);
		};

		this.resetPosition = function () {
			this.scrollX(0, 0, 0);
			this.scrollY(0, 0, 0);
		};
	}

	function GScroller(contentElement, animationElement) {
		this.scrollX = function (oldX, newX, y) {
			oldX = -oldX;
			newX = -newX;
			y = -y;

			if (animationElement) {
				animationElement.setAttribute('values', oldX + ',' + y + ';' + newX + ',' + y);
				animationElement.beginElement();
			}
			else contentElement.setAttributeNS(NS.svg, 'transform',
				'translate(' + newX + ',' + y + ')');
		};

		this.scrollY = function (oldY, newY, x) {
			oldY = -oldY;
			newY = -newY;
			x = -x;

			if (animationElement) {
				animationElement.setAttribute('values', x + ',' + oldY + ';' + x + ',' + newY);
				animationElement.beginElement();
			}
			else contentElement.setAttributeNS(NS.svg, 'transform',
				'translate(' + x + ',' + newY + ')');
		};

		this.resetPosition = function () {
			this.scrollX(0, 0, 0);
			this.scrollY(0, 0, 0);
		};
	}

	function PositionIndicatorScroller(contentElement) {
		this.displayPrevIndicator = function (show) {
			var el = contentElement.firstElementChild;
			el.setAttributeNS(NS.svg, 'display', show ? 'true' : 'none');
		};

		this.displayNextIndicator = function (show) {
			var el = contentElement.firstElementChild.nextElementSibling;
			el.setAttributeNS(NS.svg, 'display', show ? 'true' : 'none');
		};
	}

	BS.ui.ScrollingPanel = function ScrollingPanel(
		groupElement, horizontalSliderElement, verticalSliderElement, options,
		positionIndicatorSliderEl
	) {
		options = options || {};
		var option, i;
		for (i in defaultOptions) {
			if (!(i in options)) {
				option = groupElement.getAttributeNS(beeNS, i);
				if (option !== null && option.length > 0) {
					options[i] = parseInt(option);
				} else {
					options[i] = defaultOptions[i];
				}
			}
		}

		var content = null;
		var elt;
		var animation;
		var bbox;

		if (groupElement.nodeName === 'scrollableGroup') {
			content = {
				clipWidth: parseInt(groupElement.getAttributeNS(svgNS, 'width')),
				clipHeight: parseInt(groupElement.getAttributeNS(svgNS, 'height'))
			};

			elt = groupElement.firstElementChild;
			var animationX = false;
			var animationY = false;

			while (elt) {
				if (elt.nodeName === 'animate') {
					var direction = elt.getAttribute('attributeName');
					if (direction === 'ekioh:scrollX') animationX = elt;
					else if (direction === 'ekioh:scrollY') animationY = elt;
				}
				elt = elt.nextElementSibling;
			}

			content.contentScroller = new ScrollableGroupScroller(groupElement, animationX,
				animationY);
		} else if (groupElement.nodeName === 'clippedGroup') {
			content = {
				clipWidth: parseInt(groupElement.getAttributeNS(svgNS, 'width')),
				clipHeight: parseInt(groupElement.getAttributeNS(svgNS, 'height'))
			};

			elt = groupElement.firstElementChild.firstElementChild;
			animation = false;
			while (elt) {
				if (elt.nodeName === 'animateTransform') {
					animation = elt;
					break;
				}
				elt = elt.nextElementSibling;
			}
			content.contentScroller = new GScroller(groupElement.firstElementChild, animation);
		} else if (groupElement.nodeName === 'g') {
			var clipRef = groupElement.getAttribute('clip-path');
			if (!clipRef) {
				BS.logger.debug('ScrollingPanel: clip-path not set on the group element');
				return;
			}

			var m = /url\(#(.*)\)/.exec(clipRef);
			if (!m) {
				BS.logger.debug('ScrollingPanel: clip-path on the group element is not '
					+ 'correctly formed');
				return;
			}

			var clipElement = document.getElementById(m[1]);
			if (!clipElement) {
				BS.logger.debug('ScrollingPanel: the clip-path element defined on the group '
					+ 'element does not exist');
				return;
			}

			var clipBBox = clipElement.getBBox();
			content = {
				clipWidth: clipBBox.width,
				clipHeight: clipBBox.height
			};

			elt = groupElement.firstElementChild.firstElementChild;
			animation = false;
			while (elt) {
				if (elt.nodeName === 'animateTransform') {
					animation = elt;
					break;
				}
				elt = elt.nextElementSibling;
			}
			content.contentScroller = new GScroller(groupElement.firstElementChild, animation);
		} else {
			BS.logger.debug('ScrollingPanel: unable to handle content element of type '
				+ groupElement.nodeName);
			return;
		}

		this.stepVertical = parseInt(content.clipHeight / 2);

		if (horizontalSliderElement) {
			bbox = horizontalSliderElement.getBBox();
			content.sliderXmin = bbox.x;
			content.sliderXmax = parseInt(horizontalSliderElement.getAttributeNS(NS.bee,
						'scrollWidth') || horizontalSliderElement.getAttributeNS(svgNS,
						'width')) - bbox.width;
			content.sliderXrange = content.sliderXmax - content.sliderXmin;
			content.sliderXcurrent = -content.sliderXmin;

			elt = horizontalSliderElement.firstElementChild;
			animation = false;
			if (horizontalSliderElement.nodeName === 'scrollableGroup') {
				while (elt) {
					if ((elt.nodeName === 'animate') && (elt.getAttribute('attributeName')
						=== 'ekioh:scrollX')) {
						animation = elt;
						break;
					}
					elt = elt.nextElementSibling;
				}
				content.sliderXscroller = new ScrollableGroupScroller(horizontalSliderElement,
					animation, null);
			}
			else {
				while (elt) {
					if (elt.nodeName === 'animateTransform') {
						animation = elt;
						break;
					}
					elt = elt.nextElementSibling;
				}
				content.sliderXscroller = new GScroller(horizontalSliderElement, animation);
			}
		}
		else content.sliderXscroller = false;

		if (verticalSliderElement) {
			bbox = verticalSliderElement.getBBox();
			content.sliderYmin = bbox.y;
			content.sliderYmax = parseInt(verticalSliderElement.getAttributeNS(NS.bee,
						'scrollHeight') || verticalSliderElement.getAttributeNS(svgNS,
						'height')) - bbox.height;
			content.sliderYrange = content.sliderYmax - content.sliderYmin;
			content.sliderYcurrent = -content.sliderYmin;
			elt = verticalSliderElement.firstElementChild;

			if (verticalSliderElement.nodeName === 'scrollableGroup') {
				while (elt) {
					if ((elt.nodeName === 'animate') && (elt.getAttribute('attributeName')
						=== 'ekioh:scrollY')) {
						animation = elt;
						break;
					}
					elt = elt.nextElementSibling;
				}
				content.sliderYscroller = new ScrollableGroupScroller(verticalSliderElement,
					null, animation);
			}
			else {
				while (elt) {
					if (elt.nodeName === 'animateTransform') {
						animation = elt;
						break;
					}
					elt = elt.nextElementSibling;
				}
				content.sliderYscroller = new GScroller(verticalSliderElement, animation);
			}
		}
		else content.sliderYscroller = false;

		if (positionIndicatorSliderEl) {
			content.sliderYmin = 0;
			content.sliderYmax = parseInt(
				positionIndicatorSliderEl.getAttributeNS(NS.bee, 'scrollHeight'));
			content.sliderYrange = content.sliderYmax - content.sliderYmin;
			content.sliderYcurrent = -content.sliderYmin;

			content.sliderPositionIndicator =
				new PositionIndicatorScroller(positionIndicatorSliderEl);
		} else content.positionIndicatorSliderEl = false;


		this.destroy = function () {
			var i;
			for (i in content) delete content[i];
			for (i in this) delete this[i];
			content = void 0;
			options = void 0;
			groupElement = void 0;
			horizontalSliderElement = void 0;
			verticalSliderElement = void 0;
			positionIndicatorSliderEl = void 0;
		};

		this.jumpVertical = function (y, dontAnimate) {
			if (!this.verticalOverflow) return;
			if (y < this.minY) y = this.minY;
			else if (y > this.maxY) y = this.maxY;
			if (y === this.currentY) return;
			content.contentScroller.scrollY(dontAnimate ? y : this.currentY, y, this.currentX);
			this.currentY = y;
			if (content.sliderYscroller) {
				var newY = -parseInt((y - this.minY) * content.sliderYk) - content.sliderYmin;
				content.sliderYscroller.scrollY(dontAnimate ? newY : content.sliderYcurrent,
					newY, 0);
				content.sliderYcurrent = newY;
			}
			if (content.sliderPositionIndicator) {
				content.sliderPositionIndicator.displayPrevIndicator(
					this.minY !== this.currentY);

				content.sliderPositionIndicator.displayNextIndicator(
					this.maxY !== this.currentY);

			}
		};

		this.moveUp = function (dontAnimate) {
			this.jumpVertical(this.currentY - this.stepVertical, dontAnimate);
		};

		this.moveDown = function (dontAnimate) {
			this.jumpVertical(this.currentY + this.stepVertical, dontAnimate);
		};

		this.reinit = function () {
			content.contentScroller.resetPosition();
			content.bbox = groupElement.getBBox() || emptyBBox;
			this.minX = content.bbox.x - options.paddingLeft;
			this.minY = content.bbox.y - options.paddingTop;
			this.maxX = content.bbox.x + content.bbox.width + options.paddingRight
				- content.clipWidth;
			this.maxY = content.bbox.y + content.bbox.height + options.paddingBottom
				- content.clipHeight;
			this.horizontalOverflow = this.maxX > this.minX;
			this.verticalOverflow = this.maxY > this.minY;

			if (horizontalSliderElement) {
				content.sliderXk = content.sliderXrange / (this.maxX - this.minX);
				if (!this.horizontalOverflow
					&& !options.alwaysEnableSlider) horizontalSliderElement.setAttributeNS(NS.svg,
					'visibility', 'hidden');
				else horizontalSliderElement.setAttributeNS(NS.svg, 'visibility', 'inherit');
			}

			if (verticalSliderElement) {
				content.sliderYk = content.sliderYrange / (this.maxY - this.minY);
				if (!this.verticalOverflow
					&& !options.alwaysEnableSlider) verticalSliderElement.setAttributeNS(NS.svg,
					'visibility', 'hidden');
				else verticalSliderElement.setAttributeNS(NS.svg, 'visibility', 'inherit');
			}

			if (!this.horizontalOverflow && horizontalSliderElement) {
				horizontalSliderElement.setAttributeNS(NS.svg, 'visibility', 'hidden');
			} else if (horizontalSliderElement) {
				horizontalSliderElement.setAttributeNS(NS.svg, 'visibility', 'inherit');
			}

			if (!this.verticalOverflow && verticalSliderElement) {
				verticalSliderElement.setAttributeNS(NS.svg, 'visibility', 'hidden');
			} else if (verticalSliderElement) {
				verticalSliderElement.setAttributeNS(NS.svg, 'visibility', 'inherit');
			}

			if (!this.verticalOverflow && positionIndicatorSliderEl) {
				positionIndicatorSliderEl.setAttributeNS(NS.svg, 'visibility', 'hidden');
			} else if (positionIndicatorSliderEl) {
				positionIndicatorSliderEl.setAttributeNS(NS.svg, 'visibility', 'inherit');
			}

			this.currentX = this.minX;
			this.currentY = this.minY;
			content.contentScroller.scrollX(this.currentX, this.currentX, this.currentY);
			content.contentScroller.scrollY(this.currentY, this.currentY, this.currentX);
			if (content.sliderXscroller) content.sliderXscroller.scrollX(-content.sliderXmin,
				-content.sliderXmin, 0);
			if (content.sliderYscroller) content.sliderYscroller.scrollY(-content.sliderYmin,
				-content.sliderYmin, 0);

			if (content.sliderPositionIndicator) {
				content.sliderPositionIndicator.displayPrevIndicator(
					this.minY !== this.currentY);
				content.sliderPositionIndicator.displayNextIndicator(
					this.maxY !== this.currentY);
			}
		};
		this.reinit();
	};

})(BeeSmart);


(function (BS) {

	BS.ui.Dialog = function (id, appProperties, dlgProperties) {
		if (appProperties)
			appProperties.type = 'popup';
		else
			appProperties = {
				type: 'popup'
			};

		BS.App.call(this, id, appProperties);
		this._dom = {};
		this._actionsBar = {};
		this._setProps(dlgProperties);
	};
	BS.ui.Dialog.prototype = {
		oldProps: {},
		props: {
			x: 440, y: 210,
			width: 400, height: 300,
			layer: '#dialogs_layer1',
			title: 'Dialog`s title',
			modal: false,
			exitKeys: ['back', 'back'],
			buttons: [['back', 'back'], ['confirm', 'confirm']],
			onBeforeExit: function () {
				return true;
			}
		},
		_initialized: false,
		_isShown: false,
		init: function () {
			var that = this;
			that._initialized = that._initialized || that._construct();
			that.lock = false;
			that.show();
		},
		_construct: function () {
			var that = this;
			var svgDomId = 'dlgTpl';
			var uSvgDomId = this.id;
			var dialogRef = $('#' + svgDomId);
			if (!dialogRef.length) {
				var errorMsg = 'Dialog: #' + svgDomId + ' template DOM element does not exits!';
				throw new TypeError(errorMsg);
			}

			that._dom.dialogRef = dialogRef
				.clone(true)
				.attr('id', svgDomId + '-' + uSvgDomId);

			var uniques = that._dom.dialogRef
				.find('.unique')
				.each(function () {
					var attrs = this.attributes, val = '', i = attrs.length;
					while (i--) {
						val = attrs[i].value;
						var name = attrs[i].name;
						if (val.indexOf(svgDomId) !== -1) {
							if (name.indexOf(':') === -1) {
								this.setAttribute(
									name, val.replace(svgDomId, uSvgDomId)
								);
							} else {
								var parts = name.split(':');
								var ns = parts.length === 2
									? NS[parts[0]]
									: parts[0] + ':' + parts[1];
								name = parts[parts.length - 1];
								this.setAttributeNS(ns, name, val.replace(svgDomId, uSvgDomId));
							}
						}
					}
				});

			that._dom.content = that._dom.dialogRef
				.find('.content-holder, .content, .outline, .background, .title, '
					+ '.actions-bar, .blur, .actions-bar-background');

			that._dom.container = $(this.props.layer);
			that._dom.blur = $('#bs-blur');
			that._dom.cdSwitch = uniques.filter('.switch');
			that._dom.beginAni = uniques.filter('.show');
			that._dom.endAni = uniques.filter('.hide');
			that._dom.background = that._dom.content.filter('.background');

			if (this._doReplace) {
				this._doReplace.call(this);
				this._doReplace = null;
			}
			return true;
		},
		onInputEvent: function (key) {
			if (this.lock)
				return;
			var that = this;
			var p = that.props;
			var oieArgs = Array.processArguments(arguments);
			var closeDialog = p.onBeforeExit.apply(that, oieArgs);

			that.lock = true;
			var commitCall = (function (exitKeys, oieArgs) {
				var that = this;
				return function commitCallClosure(closeDialog) {
					var key = oieArgs[0];
					var onCallback = oieArgs[3] || BS.F;
					if (
						(
							exitKeys === null ||
							(
								exitKeys instanceof Array &&
								exitKeys.indexOf(key) !== -1
							)
						)
						&& closeDialog !== false
					) {
						that.lock = false;
						BS.appMgr.inContextOf(that).pop.apply(BS.appMgr, oieArgs);
						try {
							onCallback();
						} catch (ex) {
							BS.logger.log(ex);
						}
					} else {
						that.lock = false;
					}

				};
			}).call(that, p.exitKeys, oieArgs);

			commitCall(closeDialog);
		},
		show: function (cbk) {
			var that = this, p = that.props, dom = that._dom;
			if (that._isShown)
				return that;
			dom.container.append(dom.dialogRef);
			that._place(p.x, p.y, p.width, p.height, p.title, p.buttons, p.layer, p.modal);
			dom.cdSwitch.begin();
			var evHandler = that._dom.beginAni.bind('endEvent', function onEnd() {
				(cbk || BS.F)();
				evHandler.unbind();
			});
			that._isShown = true;
			return that;
		},

		hide: function (cbk) {
			var that = this, dom = that._dom;
			if (!that._isShown)
				return that;
			dom.cdSwitch.end();
			var evHandler = that._dom.endAni.bind('endEvent', function onEnd() {
				(cbk || BS.F)();
				evHandler.unbind();
				dom.dialogRef = dom.dialogRef.remove();
			});
			that._isShown = false;
			return that;
		},

		_setProps: function _setProps(p) {
			p = p || {};
			var props = {
				x: typeof p.x === 'undefined' || p.x === null ? this.props.x : p.x,
				y: typeof p.y === 'undefined' || p.y === null ? this.props.y : p.y,
				width: typeof p.width === 'undefined' || p.width === null ?
					this.props.width : p.width,
				height: typeof p.height === 'undefined' || p.height === null ?
					this.props.height : p.height,
				layer: typeof p.layer === 'undefined' ? this.props.layer : p.layer,
				modal: typeof p.modal === 'undefined' ? this.props.modal : p.modal,
				title: typeof p.title === 'undefined' ? this.props.title + ' ' : p.title,
				onBeforeExit: typeof p.onBeforeExit !== 'function' ?
					this.props.onBeforeExit : p.onBeforeExit,
				buttons: typeof p.buttons === 'undefined' ? this.props.buttons : p.buttons,
				exitKeys: p.exitKeys instanceof Array ? p.exitKeys : this.props.exitKeys
			};
			this.oldProps = Object.clone(this.props);
			this.props = props;
		},

		_place: function (x, y, w, h, title, buttons, layer, modal) {
			var dom = this._dom;
			var op = this.oldProps;
			var layers = [
				'#dialogs_layer0', '#dialogs_layer1', '#dialogs_layer2', '#dialogs_layer3', '#svg'
			];
			if (!dom.dlgContent) {
				dom.dlgContent = dom.content.filterByClass('.content');
				dom.outline = dom.content.filterByClass('.outline');
				dom.title = dom.content.filterByClass('.title');
				dom.ab = dom.content.filterByClass('.actions-bar');
				dom.blurAni = dom.content.filterByClass('.blur');
				dom['ab_bg'] = dom.content.filterByClass('.actions-bar-background');
				dom['title_bg'] = dom.content.filterByClass('.title-background');
			}

			if ((x || x === 0) || (y || y === 0)) {
				dom.dialogRef.attr('transform',
					'translate(' + (x === null ? op.x : x) + ',' +
					(y === null ? op.y : y) + ')'
				);
			}
			var overOutline;
			if (w && w !== op.width) {
				dom.background.attr('width', w);
				overOutline = parseInt(dom.outline.attr('over-outline', null, NS.bee), 10);
				dom.outline.attr('width', w + (isNaN(overOutline) ? 5 : overOutline));
				dom['title_bg'].attr('width', w);
				dom.title.attr('width', w - 20);
				dom.ab.attr('width', w - 5, NS.bee);
				dom['ab_bg'].attr('width', w);
				if (
					(this._actionsBar instanceof BS.ui.ActionBar)
					&& this._actionsBar.recalculatePositions
				) this._actionsBar.recalculatePositions();
			}

			if (h && h !== op.height) {
				dom.background.attr('height', h);
				overOutline = parseInt(dom.outline.attr('over-outline', null, NS.bee), 10);
				dom.outline.attr('height', h + (isNaN(overOutline) ? 5 : overOutline));
				dom['title_bg'].attr('height', dom['title_bg'].attr('height', null, NS.bee), 10);
				var abHeight = parseInt(dom.ab.attr('height', null, NS.bee), 10);
				dom.ab.attr('transform', 'translate(5, ' + (h - abHeight) + ')');
				dom['ab_bg'].attr('height', abHeight + 5);
			}

			if ((title || title === '') && title !== op.title) {
				dom.title.text(title);
			}

			if (BS.portal.direction === 'rtl') {
				dom.title.attr('x', dom.title.attr('width') - 10);
			}

			if (buttons && (
					!Array.equals(buttons, op.buttons)
					|| !(this._actionsBar instanceof BS.ui.ActionBar)
				)) {
				this._actionsBar = new BS.ui.ActionBar(dom.ab).set(buttons);
			}

			if ((layer && layers.indexOf(layer) !== -1) && layer !== op.layer && this._initialized
			) {
				this._dom.container = $(layer);
				if (!this._isShown)
					this._dom.container.append(dom.dialogRef.remove());
			}

			if ((modal || modal === false) && modal !== op.modal) {
				dom.blurAni.attr('href', modal ? '#bs-blur' : '#doesnt-exist', NS.xlink);
			}
		},
		_readSvgAttributes: function (onSvgElement) {
			var width = parseInt(onSvgElement.attr('dialog-width', null, NS.bee), 10) || null;
			var height = parseInt(onSvgElement.attr('dialog-height', null, NS.bee), 10) || null;
			var domCenter = onSvgElement.attr('dialog-center', null, NS.bee) || null;
			var x = null;
			var y = null;
			var maxWidth = 1280;
			var maxHeight = 720;

			if (domCenter && domCenter === 'true') {
				var usedWidth = width ? width : parseInt(this._dom.background.attr('width'));
				var usedHeight = height ? height : parseInt(this._dom.background.attr('height'));
				x = (maxWidth - usedWidth) / 2;
				y = (maxHeight - usedHeight) / 2;
			}
			return {x: x, y: y, width: width, height: height};
		},
		replaceContentWith: function (clonedDomObject) {
			var doReplace = (function (that) {
				return function () {
					var np = that._readSvgAttributes(clonedDomObject);
					that._dom.content
						.filterByClass('.content')
						.text('')
						.append(clonedDomObject);
					that._place(np.x, np.y, np.width, np.height, that.props.title,
						that.props.buttons, that.props.layer, that.props.modal);
					that._setProps(np);
				};
			})(this);

			if (!('content' in this._dom)) this._doReplace = doReplace;
			else doReplace();
		},
		update: function (p, center) {
			if (center) {
				var maxWidth = 1280;
				var maxHeight = 720;
				var usedWidth = p.width ? p.width : parseInt(this._dom.background.attr('width'));
				var usedHeight = p.height ? p.height :
					parseInt(this._dom.background.attr('height'));
				p.x = (maxWidth - usedWidth) / 2;
				p.y = (maxHeight - usedHeight) / 2;
			}
			this._setProps(p);
			if (this._initialized) {
				this._place(p.x, p.y, p.width, p.height, p.title, p.buttons, p.layer, p.modal);
			}
		},
		unregister: function () {
			this._actionsBar.clear();
			delete this._actionsBar;
			BS.App.prototype.unregister.call(this);
		},
		destroy: function () {
			if (this.hide)
				this.hide();
		}
	};
	Object.extend(BS.ui.Dialog, BS.App);

})(BeeSmart);

(function (BS) {

	BS.ui.Image = function(bsJQueryRef) {
		this.domRef = bsJQueryRef;
	};

	BS.ui.Image.possibleWidths = [32, 64, 96, 128, 192, 256, 320, 384, 512, 720, 1920];
	BS.ui.Image.possibleHeights = [32, 64, 96, 128, 192, 256, 320, 384, 512, 720, 1080];
	BS.ui.Image.getUrlParam = function(value, type) {
		var r = '';
		if (!value)
			return r;
		var possibleValues = [];
		switch(type) {
		case 'width':
			r += 'w';
			possibleValues = BS.ui.Image.possibleWidths;
			break;
		case 'height':
			r += 'h';
			possibleValues = BS.ui.Image.possibleHeights;
			break;
		}
		return r + Array.getFirstHigherThan(possibleValues, value);
	};

	BS.ui.Image.addImageSizeParamToUrl = function(url, width, height) {
		if (!url)
			return BS.ui.Image.blankUrl;
		if (!BS.ui.Image.isRestImageUrl(url))
			return url;
		var value = width > height ? width : height;
		var type = width > height ? 'width' : 'height';
		var startChar = url.indexOf('?') === -1 ? '?' : '&';
		var param = BS.ui.Image.getUrlParam(value, type);
		return url + (param ? (startChar + param) : '');
	};

	BS.ui.Image.isRestImageUrl = function isRestImageUrl(url) {
		return url.indexOf('restapi/rest') !== -1 || url.indexOf('stb/images') !== -1;
	};

	BS.ui.Image.blankUrl = '-';
	BS.ui.Image.prototype = {
		domRef: null,
		get width() {
			return parseInt(this.domRef.attr('width'), 10);
		},
		get height() {
			return parseInt(this.domRef.attr('height'), 10);
		},
		get href() {
			return this.domRef.attr('href', null, NS.xlink);
		},
		set href(newUrl) {
			if (!newUrl) {
				this.domRef.attr('href', BS.ui.Image.blankUrl, NS.xlink);
				return;
			}
			newUrl = BS.ui.Image.addImageSizeParamToUrl(newUrl, this.width, this.height);
			if (newUrl !== this.href)
				this.domRef.attr('href', newUrl, NS.xlink);
		},
		bind: function (eventName, callback) {
			return this.domRef.bind(eventName, callback);
		},
		show: function() {
			this.domRef.show();
		},
		hide: function() {
			this.domRef.hide();
		},
		destroy: function() {
			this.href = void 0;
			this.domRef = null;
		},
		toString: function() {
			return 'ui.Image (%dx%d) %s'.sprintf(this.width, this.height, this.href);
		}
	};

	BS.ui.currentUserAvatar = new BS.ui.Image($('#currentUsersAvatar'));

})(BeeSmart, Q);


(function (BS, q) {

	BS.ui.StaticMenuHandler = function ($selector) {
		$selector = $selector instanceof $.BsJqueryObject ? $selector : $($selector);

		var that = this;
		var $contentPlane = $selector.next();
		var step, $sliderAni, $slider, $selectorAni, planeHeight, height, planeWidth, width;
		var onSelectCbk = function () {};
		var previousSelectorY = 0;
		var sliderPositionX = '0';
		var sliderPositionY = 0;
		var sliderStep = 0;
		var previousSliderY = 0;
		var sliderRange = 0;
		var currentStructure = false;
		var sliderShown = true;
		var selectorOffsetX = 0;
		var selectorOffsetY = 0;
		var afterEveryMove = false;
		var afterEveryMoveLagDelay = 350;
		var moveLagTimer = false;
		var itemsDisplayed = null;
		var xyCoords2 = '%0.3f,%0.3f;%0.3f,%0.3f';
		var horizontalView = $selector.attr('orientation', null, NS.bee).trim() === 'horizontal';

		try {
			if (!($contentPlane.get(0).nodeName in {'clippedGroup': 0, 'g': 0})) {
				throw 'no-content-el';
			}
		} catch (x) {
			throw new Error('The next sibling of the %s is not a <clippedGroup> or <g>: '
				.sprintf($selector));
		}

		if (!(planeHeight = $contentPlane.attr('height'))){
			throw new Error('No @height defined at $contentPlane element: %s'
				.sprintf($contentPlane));
		}
		if (!(planeWidth = $contentPlane.attr('width')) && horizontalView){
			throw new Error('No @width defined at $contentPlane element: %s'
				.sprintf($contentPlane));
		} else
			width = parseInt(planeWidth, 10);

		height = parseInt(planeHeight, 10);

		planeHeight = $selector.attr('selectorStep', void 0, NS.bee);
		step = planeHeight ? parseInt(planeHeight, 10) : $selector.dimensions().height;

		if (!step) throw new Error('No height items was obtained from %s'
			.sptintf($selector));

		$slider = $contentPlane.next();
		var isIndicatorInsteadOfSlider = $slider.attr('class')
				.match(/(position-indicator)/) !== null;
		var domIndicators = null;

		if ($slider.length && !isIndicatorInsteadOfSlider) {
			sliderPositionX = $slider.ctm().e;
			sliderPositionY = $slider.ctm().f;
			if ($slider.first() && $slider.first().get(0) &&
				($slider.first().get(0).nodeName === 'animateTransform')) {
				$sliderAni = $slider.first();
			}
		}


		if (isIndicatorInsteadOfSlider) {
			domIndicators = {
				'prev': $slider.find('.prev'),
				'next': $slider.find('.next')
			};
		}

		function updateIndicators(structure, dom) {
			if (structure.positions.topIndex !== 0) dom.prev.show();
			else dom.prev.hide();
			if (structure.positions.bottomIndex < structure.menuElements.length - 1){
				dom.next.show();
			} else dom.next.hide();
		}

		if ($contentPlane.tag === 'clippedGroup') {
			var $pl = $('<g/>').first();
			try {
				BS.logger.trace('WARNING: Deprecated usage of %s for as content holder. '
					+ 'Use <g> instead. Support for <clippedGroup> will be removed in next '
					+ 'version.', $contentPlane);
				$pl.ctm($contentPlane.ctm());
				$pl.attr('height', $contentPlane.attr('height'));
				$contentPlane.parent().get(0).replaceChild($pl.get(0),
					$contentPlane.get(0));
				$contentPlane = $pl;
			} catch (e) {
				BS.logger.log(e);
			}
		}
		var selectorAniSet = $selector.find('.menu-trans').toArray.reduce(function (aniSet, ani) {
			var aniName = ani.getAttribute('class').split(/\s+/g).filter(irrelevantClassNames)[0];
			if (!aniName) return aniSet;
			aniSet[aniName] = ani;
			aniSet.length += 1;
			return aniSet;
			function irrelevantClassNames(cls) {
				return cls !== '' && cls.match(/menu-/);
			}
		}, {length: 0});


		if ($selector.first() && ($selector.first().tag === 'animateTransform')) {
			$selectorAni = $selector.first();
		}

		selectorOffsetX = $selector.ctm().e;
		selectorOffsetY = $selector.ctm().f;

		if (horizontalView && BS.portal.direction === 'rtl') {
			step = -step;
			selectorOffsetX += width + step;
		}

		this.hideSelector = function () {
			$selector.hide();
			internalUnselect.call(currentStructure);
		};
		this.showSelector = function () {
			$selector.show();
			internalSelect.call(currentStructure);
		};
		this.jump = function (structure, newItemIndex, newTopIndex, dontAnimate) {
			if (moveLagTimer !== false) {
				clearTimeout(moveLagTimer);
				moveLagTimer = false;
			}
			if (!structure.menuElements || (structure.menuElements.length <= 0)) return;

			var positions = structure.positions,
				itemCount = structure.originalItems.length,
				previousPosition = positions.itemIndex;

			if (newItemIndex < 0) {
				newItemIndex = 0;
				positions.itemIndex = 0;
			}
			else if (newItemIndex >= itemCount) positions.itemIndex = itemCount - 1;
			else positions.itemIndex = newItemIndex;

			if (Math.abs(previousPosition - newItemIndex) === 1) {
				if (previousPosition > newItemIndex &&
					newItemIndex <= positions.topIndex &&
					newItemIndex !== 0
				) {
					positions.topIndex = decreaseNumber(positions.topIndex, 1);
					positions.bottomIndex = decreaseNumber(positions.bottomIndex, 1);
					updateStaticItems(structure, 'up');

				} else if (
					previousPosition < newItemIndex &&
					newItemIndex >= positions.bottomIndex  &&
					newItemIndex !== structure.originalItems.length - 1
				) {
					positions.topIndex = increaseNumber(positions.topIndex, 1,
						structure.originalItems.length - 1);
					positions.bottomIndex = increaseNumber(positions.bottomIndex, 1,
						structure.originalItems.length - 1);
					updateStaticItems(structure, 'down');
				}
			} else {
				if (newItemIndex <= positions.bottomIndex &&
					newItemIndex >= positions.topIndex &&
					!(
						newItemIndex === positions.bottomIndex &&
						newItemIndex !== structure.originalItems.length - 1
					)
				) {
				} else {
					var maxIndex = structure.originalItems.length - 1;
					var botIndex = newItemIndex + Math.round(itemsDisplayed / 2);
					botIndex = botIndex > maxIndex ? maxIndex : botIndex;
					var topIndex = botIndex - itemsDisplayed;
					if (topIndex < 0) {
						topIndex = 0;
						botIndex = itemsDisplayed - 1;
					}

					if (topIndex === 0 && botIndex === maxIndex) {
						updateStaticItems(structure, void 0, topIndex + 1, botIndex + 1);
					} else if (topIndex === 0) {
						updateStaticItems(structure, void 0, topIndex, botIndex + 1);
					} else {
						updateStaticItems(structure, void 0, topIndex + 1, botIndex + 1);
					}
				}
			}

			var selectorY = (positions.itemIndex - positions.topIndex) * step;
			if (domIndicators) updateIndicators(structure, domIndicators);

			unselectCurrent(structure);

			if (previousSelectorY !== selectorY) {
				if ($selectorAni) {
					if (dontAnimate){
						$selectorAni.attr('values', horizontalView ?
							xyCoords2.sprintf(
									(selectorOffsetX + selectorY), selectorOffsetY ,
									(selectorOffsetX + selectorY), selectorOffsetY)
							:
							xyCoords2.sprintf(
									selectorOffsetX, (selectorOffsetY + selectorY), selectorOffsetX,
									(selectorOffsetY + selectorY))
						);
					} else {
						$selectorAni.attr('values',  horizontalView ?
							xyCoords2.sprintf(
								(selectorOffsetX + previousSelectorY), selectorOffsetY,
								(selectorOffsetX + selectorY) , selectorOffsetY)
							:
							xyCoords2.sprintf(
								selectorOffsetX, (selectorOffsetY + previousSelectorY),
								selectorOffsetX , (selectorOffsetY + selectorY))
						);
					}
					$selectorAni.begin();
				} else {
					$selector.ctm({
						e: horizontalView ? (selectorOffsetX + selectorY) : selectorOffsetX,
						f: horizontalView ? selectorOffsetY : (selectorOffsetY + selectorY)
					});
				}

				previousSelectorY = selectorY;
			}

			switchSelected(structure);

			if (sliderShown && $slider.length) {
				var pos = itemCount > 1 ? positions.itemIndex * sliderStep +
					(positions.itemIndex * sliderRange / (itemCount - 1)) : 0;

				if ($sliderAni) {
					$sliderAni.attr('values', xyCoords2.sprintf(
						sliderPositionX, (sliderPositionY + (dontAnimate ? pos : previousSliderY)),
						sliderPositionX, sliderPositionY + pos))
							.begin();
				} else if (!isIndicatorInsteadOfSlider) {
					$slider.ctm({e: sliderPositionX, f: sliderPositionY + pos});
				}
				previousSliderY = pos;
			}
		};
		this.next = function (structure, dontAnimate) {
			var newPos;
			if (structure.positions.itemIndex === (structure.originalItems.length - 1)) newPos = 0;
			else newPos = structure.positions.itemIndex + 1;
			this.jump(structure, newPos, undefined, dontAnimate);
		};
		this.previous = function (structure, dontAnimate) {
			var newPos;
			if (structure.positions.itemIndex === 0) newPos = structure.originalItems.length - 1;
			else newPos = structure.positions.itemIndex - 1;
			this.jump(structure, newPos, undefined, dontAnimate);
		};
		this.showFocus = function (cbk) {
			var dfr = q.defer();
			if ('menu-sel-reset' in selectorAniSet) {
				$(selectorAniSet['menu-sel-focus']).begin(dfr.resolve);
			} else dfr.resolve();
			return cbk ? dfr.promise.then(cbk) : dfr.promise;
		};
		this.select = function (callback) {
			return this.showFocus(callback);
		};
		this.onFinish = function (callback, lag) {
			afterEveryMove = callback;
			afterEveryMoveLagDelay = lag === undefined ? 350 : lag;
		};
		this.selectorIndex = function (structure) {
			return structure.positions.itemIndex - structure.positions.topIndex;
		};
		this.destroy = function () {
			if (switchSelected.tmrId) clearTimeout(switchSelected.tmrId);
			currentStructure = undefined;
			$selector = undefined;
			$selectorAni = undefined;
			$slider = undefined;
			$sliderAni = undefined;
			$contentPlane = undefined;

			for (var i in this) delete this[i];
		};
		this.selectCurrent = function (structure) {
			internalSelect.call(structure);
		};
		this.initItemsStructure = function (structure) {
			if (!structure.positions)
				structure.positions = {};
			structure.positions.itemIndex = 0;
			structure.positions.topIndex = 0;
			structure.positions.bottomIndex = itemsDisplayed - 1;
			structure.positions.previousIndex = 0;
			if ($selectorAni) {
				$selectorAni.attr('values', xyCoords2.sprintf(selectorOffsetX, selectorOffsetY,
					selectorOffsetX, selectorOffsetY));
				$selectorAni.begin(onSelectCbk);
			} else {
				$selector.ctm({e: selectorOffsetX, f: selectorOffsetY});
			}
			previousSelectorY = 0;
		};
		this.showItemsStructure = function (newStructure) {
			if (currentStructure && $contentPlane && $contentPlane.first().length){
				$contentPlane.first().remove();
			}
			currentStructure = newStructure;
			if (currentStructure) $contentPlane.append(currentStructure.planeElement);

			if ($slider.length && !isIndicatorInsteadOfSlider) {
				sliderStep = height / currentStructure.originalItems.length;
				sliderRange = sliderStep - $slider.dimensions().height;
			}

			if (!currentStructure ||
				!currentStructure.menuElements ||
				(currentStructure.menuElements.length === 0)
			) {
				$selector.hide();
				$slider.hide();
				sliderShown = false;

			} else {
				$selector.show();
				previousSelectorY = -1;
				if ($selectorAni) {
					previousSelectorY = $selectorAni.attr('values');
					previousSelectorY = parseFloat(previousSelectorY.split(';')[1].split(',')[1]);
				}

				previousSliderY = null;
				if ($sliderAni) {
					previousSliderY = $sliderAni.attr('values');
					previousSliderY = parseFloat(previousSliderY.split(';')[1].split(',')[1]);
				}

				this.jump(currentStructure, currentStructure.positions.itemIndex, undefined, true);

				sliderShown = false;
				if (currentStructure.originalItems.length > itemsDisplayed) {
					if ($slider) {
						$slider.show();
						sliderShown = true;
					}
				} else $slider.hide();
			}
		};
		this.getCurrentStructure = function () {
			return currentStructure;
		};
		this.setMenuHeight = function (newHeight) {
			height = newHeight;
		};

		this.makeStaticItems = function (svgItems) {
			itemsDisplayed = Math.round((horizontalView ? width : height) / Math.abs(step));
			var domItems = $(svgItems).children().toArray;
			var plane = $('<g class="menuItems"></g>').first();
			var displayCount = domItems.length > itemsDisplayed ? itemsDisplayed : domItems.length;
			for (var i = 0; i < displayCount; i++) plane.append(domItems[i]);
			return {plane: plane.get(0), items: domItems, top: 0, bottom: displayCount};
		};
		this.computeItemPositions = function (structure) {
			structure.positions.elements = [];
			var y = 0;
			for (var len = structure.planeElement.childElementCount, i = 0; i < len; i++) {
				var pos = horizontalView
					? BS.portal.direction === 'rtl'
						? { e: width + y + step }
						: { e: y }
					: { f: y };
				$(structure.planeElement.childNodes[i]).ctm(pos);
				structure.positions.elements.push(y);
				y += step;
			}
		};
		this.unselectCurrent = unselectCurrent;


		function unselectCurrent(structure) {
			internalUnselect.call(structure);
		}
		function internalUnselect() {
			if (selectorAniSet.length) {
				$(selectorAniSet['menu-sel-reset']).begin();
				$(selectorAniSet['menu-sel-reset1']).begin();
				return;
			}
			var childCount = this && this.planeElement ? this.planeElement.childElementCount :
				false;
			if (childCount) {
				for (var i = 0; i < childCount; i++) {
					var el = this.planeElement.childNodes[i];
					var cClass = el.getAttributeNS(NS.svg, 'class') || '';
					if (cClass.indexOf('selected') !== -1) {
						cClass = cClass.replace('selected', '');
						while (cClass.indexOf('  ') !== -1)
							cClass = cClass.replace('  ', ' ');
						el.setAttributeNS(NS.svg, 'class', cClass);
					}
				}
			}
		}
		function internalSelect() {
			if (selectorAniSet.length) {
				$(selectorAniSet['menu-sel-settle']).begin();
				$(selectorAniSet['menu-sel-settle1']).begin();
				return;
			}
			var itemIdx = this.positions
				? this.positions.itemIndex - this.positions.topIndex
				: null;
			if (
				itemIdx !== null &&
				this && this.planeElement &&
				this.planeElement.childNodes[itemIdx]
			) {
				var el = this.planeElement.childNodes[itemIdx];
				if (!el) return;
				var newClass = el.getAttributeNS(NS.svg, 'class') || '';
				if (newClass.match(/(^(?:\s*\S+)*)\s*\bselected\b\s*((?:\S+\s*)*)$/) === null) {
					if (newClass && (newClass.length > 0)) newClass = newClass + ' selected';
					else newClass = 'selected';
					el.setAttributeNS(NS.svg, 'class', newClass);
				}
			}
		}

		function switchSelected(structure) {
			if (moveLagTimer !== false) {
				clearTimeout(moveLagTimer);
				moveLagTimer = false;
			}
			if (afterEveryMoveLagDelay <= 0) afterMoveLag();
			else moveLagTimer = setTimeout(afterMoveLag, afterEveryMoveLagDelay);

			if (!structure || !structure.positions) return;

			if (switchSelected.tmrId) {
				switchSelected.tmrId = clearTimeout(switchSelected.tmrId);
				switchSelected.tmrId = null;
			}
			switchSelected.tmrId = setTimeout(internalSelect.bind(structure), 300);

			structure.positions.previousItemIndex = structure.positions.itemIndex;

			function afterMoveLag() {
				if (afterEveryMove && currentStructure) {
					afterEveryMove(currentStructure.positions.itemIndex, currentStructure
						.menuInfos[currentStructure.positions.itemIndex]);
				}
			}
		}
		function updateStaticItems(structure, direction, from, to) {
			var $el, i;
			direction = direction || null;
			from = from === undefined ? structure.positions.bottomIndex : from;
			to = to === undefined ? structure.positions.topIndex : to;

			if (from >= to) {
				var tmp = to;
				to = from;
				from = tmp;
			}

			var childCount = structure.planeElement.childElementCount;
			var items = structure.originalItems.slice(from, to);
			var moveYBy = null;
			var childToRemove = null;
			var insertPosition = false;
			var xPos = 0;
			var yPos = 0;


			if (direction) {
				if (direction === 'up') {
					moveYBy = horizontalView ? -1 * step : step;
					childToRemove = structure.planeElement.childNodes[childCount - 1];
					insertPosition = 'start';
				} else {
					moveYBy = horizontalView ? step : -1 * step;
					childToRemove = structure.planeElement.childNodes[0];
					insertPosition = 'end';
				}
				structure.planeElement.removeChild(childToRemove);
				childCount--;

				for (i = 0; i < childCount; i++) {
					$el = $(structure.planeElement.childNodes[i]);
					$el.ctm({
						e: (xPos = horizontalView ? $el.ctm().e - moveYBy : $el.ctm().e),
						f: horizontalView ? (yPos = $el.ctm().f) : (yPos = $el.ctm().f) + moveYBy
					});
				}

				if (insertPosition === 'start') {
					$el = $(structure.originalItems[from]);
					structure.planeElement.insertBefore($el.get(0), structure.planeElement
							.childNodes[0]);
					$el.ctm({
						e: horizontalView
							? BS.portal.direction === 'rtl'
								? width - moveYBy
								: 0
							: xPos,
						f: horizontalView ? yPos : 0
					});

				} else {
					$el = $(structure.originalItems[to]);
					$(structure.planeElement).append($el);
					$el.ctm({
						e: horizontalView ? xPos + moveYBy : xPos, f: yPos
					});
				}

			} else {
				while (structure.planeElement.childElementCount > 0) {
					structure.planeElement.removeChild(structure.planeElement.childNodes[0]);
				}
				for (i = 0; i < items.length; i++) {
					$el = $(structure.originalItems[i + from]);
					$(structure.planeElement).append($el);
					structure.positions.bottomIndex = from + i;
				}
				that.computeItemPositions(structure);
			}

			structure.positions.topIndex = from;
			switchSelected(structure);
		}
		function decreaseNumber(number, by) {
			number -= by;
			if (number < 0) number = 0;
			return number;
		}
		function increaseNumber(number, by, limit) {
			number += by;
			if (number > limit) number = limit;
			return number;
		}

	};


	var menuCounter = 0;

	BS.ui.Menu = function (selectorElement) {
		return new BS.ui.StaticMenu(selectorElement);
	};
	BS.ui.StaticMenu = function (selectorElement) {
		var savedMenuStructures = {};
		var menuHandler = new BS.ui.StaticMenuHandler(selectorElement);
		function destroyMenuStructure(structure, removeFromSavedStructures) {
			var i;
			if (structure.destroying) return;
			if (structure.menuElements) {
				structure.menuElements.length = 0;
				delete structure.menuElements;
			}
			if (structure.menuInfos) {
				structure.menuInfos.length = 0;
				delete structure.menuInfos;
			}
			if (structure.planeElement) {
				if (structure.planeElement.parentNode) {
					structure.planeElement.parentNode.removeChild(structure.planeElement);
				}
				delete structure.planeElement;
			}
			for (i in structure.positions) {
				delete structure.positions[i];
			}
			if (removeFromSavedStructures) {
				structure.destroying = true;
				structure.menuItems.destroy();
				if (savedMenuStructures[structure.id]) {
					delete savedMenuStructures[structure.id];
				}
				for (i in structure) delete structure[i];
			} else {
				menuHandler.initItemsStructure(structure);
			}
		}
		function ItemsStructure(items) {
			this.id = menuCounter++;
			this.menuItems = items;
			this.planeElement = false;
			this.menuElements = false;
			this.menuInfos = false;
			this.positions = {};
			menuHandler.initItemsStructure(this);
			this.destroying = false;
			savedMenuStructures[this.id] = this;
		}
		ItemsStructure.prototype = {
			setItems: function (items, newInfos) {
				if (!items || (newInfos && (newInfos.constructor !== Array))){
					throw new Error('invalid-arguments');
				}
				items = (items.constructor === Array ? items.join('') : items).trim();
				var isShowing = menuHandler.getCurrentStructure() === this;
				var itemsDigest = menuHandler.makeStaticItems(items);
				this.positions.topIndex = itemsDigest.top;
				this.positions.bottomIndex = itemsDigest.bottom;
				this.originalItems = itemsDigest.items;
				menuHandler.unselectCurrent(this);
				destroyMenuStructure(this, false);
				this.planeElement = itemsDigest.plane;
				this.menuElements = this.originalItems;
				this.menuInfos = newInfos.slice(0, newInfos.length);
				menuHandler.computeItemPositions(this);
				if (isShowing) menuHandler.showItemsStructure(this);
				menuHandler.selectCurrent(this);
			},
			show: function () { menuHandler.showItemsStructure(this); },
			next: function (dontAnimate) { menuHandler.next(this, dontAnimate); },
			previous: function (dontAnimate) { menuHandler.previous(this, dontAnimate); },
			showFocus: function () { return menuHandler.showFocus(); },
			selectorIndex: function () { return menuHandler.selectorIndex(this); },
			jump: function (newIndex, dontAnimate, newTopIndex) {
				menuHandler.jump(this, newIndex, newTopIndex, dontAnimate);
			},
			hideSelector: function () { menuHandler.hideSelector(); },
			showSelector: function () { menuHandler.showSelector(); },
			currentIndex: function () { return this.positions.itemIndex; },
			topIndex: function () { return this.positions.topIndex; },
			bottomIndex: function () { return this.positions.bottomIndex; },
			currentInfo: function (newInfo) {
				if (newInfo) this.menuInfos[this.positions.itemIndex] = newInfo;
				return this.menuInfos[this.positions.itemIndex];
			},
			destroy: function () { destroyMenuStructure(this, true); }
		};
		this.destroy = function () {
			if (menuHandler) {
				menuHandler.destroy();
				menuHandler = undefined;
			}
			var i;
			selectorElement = undefined;
			for (i in savedMenuStructures) savedMenuStructures[i].destroy();
			for (i in this) delete this[i];
		};
		function MenuItems() {
			var struct = new ItemsStructure(this);
			var destroying = false;
			this.setItems = function (items, newInfos) {
				struct.setItems(items, newInfos);
				return this;
			};
			this.show = function () {
				struct.show();
				return this;
			};
			this.next = function (dontAnimate) {
				struct.next(dontAnimate);
				return this;
			};
			this.showFocus = function () {
				return struct.showFocus();
			};
			this.previous = function (dontAnimate) {
				struct.previous(dontAnimate);
				return this;
			};
			this.selectorIndex = function () {
				return struct.selectorIndex(struct);
			};
			this.jump = function (newIndex, dontAnimate, newTopIndex) {
				struct.jump(newIndex, dontAnimate, newTopIndex);
				return this;
			};
			this.showSelector = function () {
				struct.showSelector();
				return this;
			};
			this.hideSelector = function () {
				struct.hideSelector();
				return this;
			};
			this.currentIndex = function () {
				return struct.currentIndex();
			};
			this.topIndex = function () {
				return struct.topIndex();
			};
			this.bottomIndex = function () {
				return struct.bottomIndex();
			};
			this.currentInfo = function (newInfo) {
				return struct.currentInfo(newInfo);
			};
			this.itemElement = function (itemIndex) {
				return struct.originalItems[itemIndex];
			};
			this.size = function () {
				return struct.menuInfos ? struct.menuInfos.length : 0;
			};
			this.info = function (itemIndex) {
				return struct.menuInfos[itemIndex];
			};
			this.infoList = function () {
				return struct.menuInfos;
			};
			this.indexOfInfo = function (info) {
				return struct.menuInfos.indexOf(info);
			};
			this.destroy = function () {
				if (destroying) return;
				destroying = true;
				struct.destroy();
				for (var i in this) delete this[i];
				struct = undefined;
			};
			this.select = function (callback) {
				menuHandler.select(callback);
				return this;
			};
			this.onFinish = function (callback, lag) {
				menuHandler.onFinish(callback, lag);
				return this;
			};
		}
		this.newMenuItems = function () {
			return new MenuItems();
		};
		this.currentMenuItems = function () {
			var current = menuHandler.getCurrentStructure();
			return current ? current.menuItems : null;
		};
		this.setMenuHeight = function (newHeight) {
			menuHandler.setMenuHeight(newHeight);
		};
	};

})(BeeSmart, Q);


;(function (BS, q, ui) {

	var BeeSmartLockDialog = function (caller, properties) {
		var appDetails = {
			type: 'popup',
			listenTo: [BS.InputManager.keyGroups.shortcuts],
			inputMapper: BS.App.portalDirectionKeyMapper,
			memberList: {'init': 'function'}
		};

		properties = properties || {};
		properties.x = 390;
		properties.y = 235;
		properties.width = 500;
		properties.height = 250;
		properties.layer = '#dialogs_layer2';
		properties.buttons = [
			['back', 'RestartPortal'],
			['right', 'clear'],
			['confirm', 'confirm']
		];
		properties.exitKeys = ['back', 'left', 'ok'];

		var newargs = [];
		newargs[0] = arguments[0];
		newargs[1] = appDetails;
		newargs[2] = properties;
		BS.ui.Dialog.apply(this, newargs);
	};

	BeeSmartLockDialog.prototype = {
		reshowUpdateDialogTimerRef: null,
		reshowUpdateDialogDelay: 600000,
		pin: '',
		dom: {
			clearInputFields: function () {
				this.beeSmartLockDialogPinInput.clear();
			},
			hide: function (callback) {
				this.beeSmartLockDialogHide.begin(function () {
					this.beeSmartLockDialog.hide();
					if (callback) callback();
				});
			}
		},
		isInitialized: null,
		restoreExtraCib: false,
		clearInputFields: function clearInputFields() {
			this.dom.beeSmartLockDialogPinInput.clear();
			this.pin = '';
		},
		init: function (caller, _callback) {
			var that = this;
			BS.ui.Dialog.prototype.init.apply(that, arguments);

			if (!that.isInitialized) {
				var cntSvg = $('#beeSmartLockDialog').remove().show();
				that.replaceContentWith(cntSvg);
				that.isInitialized = true;
				that.dom.rootDom = cntSvg;
				that.dom.beeSmartLockDialogEvents = cntSvg.find('#beeSmartLockDialogEvents');
				that.dom.beeSmartLockDialogUserName = cntSvg.find('.beeSmartLockDialogUserName');
				that.dom.beeSmartLockDialogPinInput = cntSvg.find('.beeSmartLockDialogPinInput');
				that.dom.beeSmartLockDialogPinInput = new ui.PasswordField(
					that.dom.beeSmartLockDialogPinInput,
					{'maxFieldEntries': BS.config.get('User.MAX_PIN_SIZE')});
				that.dom.beeSmartLockDialogAvatar = new ui.Image(
					cntSvg.find('.beeSmartLockDialogAvatar')
				);
				that.accessGuard = new BS.BeeSmartMain.AccessGuard();
			}
			BS.media.stop();


			BS.modMgr.getModule('Tv').getApp('liveTv').dom.hideChannelBackground();

			that.restoreExtraCib = false;
			if (BS.appMgr.isLoaded('extraCIB')) {
				that.restoreExtraCib = true;
				BS.modMgr.getModule('Tv').getApp('liveTv').dom.hideChannelName();
				BS.modMgr.getModule('Tv').getApp('extraCIB').dom.clearShowChNameTimer();
				BS.modMgr.getModule('Tv').getApp('extraCIB').dom.stopPip();
			}

			$('#leftSide, #rightSide').hide();

			that.callback = _callback || BS.F;
			that.clearInputFields();

			var user = BS.portal.user;
			that.dom.beeSmartLockDialogUserName.text(user.userName);
			that.dom.beeSmartLockDialogAvatar.href = BS.portal.isOnline ? user.avatarLink :
				'skin/%s/img/icons/default_buddy_alt.png'.sprintf(BS.portal.user.skin.keyword);
			that.update({title: tr('InterfaceIsLocked')});
			that.dom.beeSmartLockDialogEvents.trigger('init', {rootDom: that.dom.rootDom});
		},
		onInputEvent: function (key) {
			var that = this;
			var dialogOnInputEvent = BS.ui.Dialog.prototype.onInputEvent.bind(this);
			var acsGrd = that.accessGuard;

			switch (key) {
			case 'right':
				this.clearInputFields();

				break;
			case 'back':
			case 'left':
				BS.device.restart();

				break;
			case 'ok':
				var thePin = that.pin;
				if (acsGrd.isFalseGuessing())
					return;

				that.clearInputFields();
				that.lock = true;

				BS.makeValidPinSynchronization(thePin, 'system')
					.then(function (isMatching) {
						if (isMatching) {
							var dfr = q.defer();
							acsGrd.resetProperties();
							that.lock = false;
							dialogOnInputEvent(key, null, null, dfr.resolve);
							return dfr.promise;
						}
						if (acsGrd.recordWrongAttempt().isFalseGuessing()) {
							var alert = new ui.Alert({autoHide: acsGrd.lockoutTime * 1000});
							alert.show(makeMessage(acsGrd.lockoutTime));
							acsGrd.resetPropertiesAfter();
							acsGrd.startLock(function () {
								alert.updateMessage(makeMessage(acsGrd.lockoutTime));
							});
						} else {
							BS.ui.generalAlert(tr('pinInvalid'));
						}
						throw 'invalid-pin';
					})
					.done(that.callback);

				break;
			default:
				if (acsGrd.isFalseGuessing())
					return;
				if ((key === '0' || parseInt(key))
					&& this.pin.length < BS.config.get('User.MAX_PIN_SIZE')) {
					this.pin += key;
					this.dom.beeSmartLockDialogPinInput.push(this.pin.length);
				}
				break;
			}

			function makeMessage(value) {
				return '%s %s %s'.sprintf(tr('LockedWait'), value, tr('s'));
			}
		},
		destroy: function () {
			this.dom.beeSmartLockDialogEvents.trigger('destroy', {rootDom: this.dom.rootDom});
			BS.ui.Dialog.prototype.destroy.apply(this, arguments);
			if (this.restoreExtraCib) {
				BS.modMgr.getModule('Tv').getApp('liveTv').dom.showChannelName();
				BS.modMgr.getModule('Tv').getApp('extraCIB').dom.playPip();
			}
			$('#leftSide, #rightSide').show();
		}
	};
	Object.extend(BeeSmartLockDialog, BS.ui.Dialog);

	BS.BeeSmartLockDialog = BeeSmartLockDialog;

})(BeeSmart, Q, BeeSmart.ui);


(function (BS) {


	function createMessageDisplay() {
		var messageDisplay = new BS.App('messageDisplay', {
			listenTo: [BS.InputManager.keyGroups.shortcuts]
		});
		messageDisplay.msgs = [];
		messageDisplay.onInputEvent = function (key) {
			switch (key) {
			case 'up':
			case 'down':
				if (!this.dom.panel)
					break;

				if (key === 'up')
					this.dom.panel.moveUp();
				else
					this.dom.panel.moveDown();
				break;
			case 'ok':
				if (this._onConfirmCallback() === true)
					BS.appMgr.pop();
				break;
			}
		};
		messageDisplay.init = function (caller, msgEvent, onConfirmCallback) {
			var msg = msgEvent ? msgEvent.data : this.msgs.shift();
			onConfirmCallback = onConfirmCallback || function () {};
			this._onConfirmCallback = function () {
				var hasMessages = this.msgs.length > 0;
				var msg;
				onConfirmCallback();
				if (hasMessages) {
					msg = this.msgs.shift();
					this.dom.setText(msg.body.bodyString.encodeEntities(), msg.from);
				} else return true;
			}.bind(this);
			this.dom.setText(msg.body.bodyString.encodeEntities(), msg.from);
			this.dom.showMenu();
		};

		messageDisplay.startup = function () {
			this.dom = new $.ModuleDom(
				[
					'messageDisplayText', 'messageDisplayHolder', 'messageDisplay_content_holder',
					'messageDisplay_scroller', 'messageDisplayHolderShow',
					'messageDisplayHolderHide', 'messageDisplayActionBar', 'messageDisplayTitle',
					'messageDisplay_upDownArrows'
				],
				{
					panel: null,
					showMenu: function () {
						this.messageDisplayHolder.show();
						this.messageDisplayHolderShow.begin();
					},
					hideMenu: function () {
						this.messageDisplayHolderHide.begin(function () {
							messageDisplay.dom.messageDisplayHolder.hide();
						});
					},
					setText: function (txt, clientId) {
						if (this.panel) this.panel.destroy();

						txt = txt.replace(/\n/g, '<tbreak/>');
						this.messageDisplayText.svg('<tspan>' + txt + '</tspan>');
						var msgTitle = clientId === '' ? '' : tr('MESSAGE_FROM') + ' ' + clientId;
						this.messageDisplayTitle.svg(msgTitle);

						setTimeout(function() {
							this.panel = new BS.ui.ScrollingPanel(
								this['messageDisplay_content_holder'][0],
								null,
								this['messageDisplay_scroller'][0],
								null,
								this['messageDisplay_upDownArrows'][0]
							);
						}.bind(this), 0);
					}
				}
			);
			this.actionBar = new BS.ui.ActionBar(this.dom.messageDisplayActionBar);
		};

		messageDisplay.destroy = function () {
			this.dom.hideMenu();
			this.msgs = [];
		};
		messageDisplay.enqueue = function (instantMsg) {
			this.msgs.push(instantMsg);
		};
		return messageDisplay;
	}

	BS.MessageDisplay = { create: createMessageDisplay };

})(BeeSmart);


(function (q, BS, em) {

	BS.DvlUtil = {
		contentRefresher: function (prevTimestamps, data) {
			var log = '';
			log += this.compareChannels(prevTimestamps, data);
			log += this.compareConfiguration(prevTimestamps, data);
			log += this.comparePrograms(prevTimestamps, data);
			var readIndex = 0;
			var chunk = 1024;
			if (log.length){
				BS.logger.trace('DVL:');
				do {
					var subStr1 = log.substring(readIndex * chunk, ++readIndex * chunk + 1);
					BS.logger.trace(subStr1);
				} while (readIndex < Math.ceil(log.length / chunk));
			}
			return q(true);
		},
		compareChannels: function (prevTimestamps, data) {
			var log = '';
			var changed = [];
			var changedUsrChanges = [];
			var changedTimeshift = [];

			if (prevTimestamps.channels) {
				changed = this.getChangedIds(prevTimestamps.channels, data.channels);
			}
			if (prevTimestamps.usrChs) {
				changedUsrChanges = this.getChangedIds(prevTimestamps.usrChs, data.usrChs);
			}
			if (prevTimestamps.timeshiftChs) {
				changedTimeshift = this.getChangedIds(prevTimestamps.timeshiftChs,
					data.timeshiftChs);
			}
			if (
				(prevTimestamps.anyChannel && prevTimestamps.anyChannel !== data.anyChannel)
				|| (changed.length > 0)
				|| (changedUsrChanges.length > 0)
				|| (changedTimeshift.length > 0)
			) {
				if (prevTimestamps.anyChannel !== data.anyChannel) {
					log = log.concat(this.makeLogLine1('anyChannel', data.anyChannel));
				}
				if (changed.length > 0) {
					log = log.concat(this.makeLogLineN('channels', changed));
				}
				if (changedUsrChanges.length > 0) {
					log = log.concat(this.makeLogLineN('user-changed-channels',
						changedUsrChanges));
				}
				if (changedTimeshift.length > 0) {
					log = log.concat(this.makeLogLineN('user-timeshift-channels',
						changedTimeshift));
				}
				em.dispatch(new BS.FreshContentEvent('channels'));
			}
			prevTimestamps.anyChannel = data.anyChannel;
			prevTimestamps.channels = data.channels;
			prevTimestamps.usrChs = data.usrChs;
			prevTimestamps.timeshiftChs = data.timeshiftChs;
			delete data.anyChannel;
			delete data.channels;
			delete data.usrChs;
			delete data.timeshiftChs;
			return log;
		},
		compareConfiguration: function (prevTimestamps, data) {
			var log = '';
			if (
				prevTimestamps.configuration &&
				prevTimestamps.configuration !== data.configuration
			) {
				log = this.makeLogLine1('anyChannel', data.configuration);
				em.dispatch(new BS.FreshContentEvent('configuration', data.configuration));
			}
			prevTimestamps.configuration = data.configuration;
			delete data.configuration;
			return log;
		},
		comparePrograms: function (prevTimestamps, data) {
			var log = '';
			if (prevTimestamps.epgChannels) {
				var changed = this.getChangedIds(prevTimestamps.epgChannels, data.epgChannels);
				if (changed.length > 0) {
					log = this.makeLogLineN('epgChannels', changed);
					em.dispatch(new BS.FreshContentEvent('epg', changed));
				}
			}
			prevTimestamps.epgChannels = data.epgChannels;
			delete data.epgChannels;
			return log;
		},


		toValues: function (usrChanges) {
			var map = {};
			for (var id in usrChanges) map[id] = usrChanges[id].hash;
			return map;
		},

		userChangesReducer: function (p, usrChange) {
			p[usrChange.id] = usrChange;
			return p;
		},


		getChangedIds: function (oldMap, newMap) {
			var newIds = [];
			for (var newId in newMap) {
				if (newId in oldMap && newMap[newId] !== oldMap[newId] || !(newId in oldMap)) {
					newIds.push(parseInt(newId, 10));
				}
			}
			return newIds;
		},
		makeLogLineN: function (type, ids) {
			return '\n* %s changes on %d ids: %s'.sprintf(type, ids.length,
				ids.join(','));
		},
		makeLogLine1: function (type, newTimestamp) {
			return '\n* %s changed (fresh from %s)'.sprintf(type, newTimestamp);
		}
	};

})(Q, BeeSmart, BeeSmart.evMgr);


(function (BS, q, NiceException, PVR, DvlUtil) {

	if (CLIENT_VERSION && CLIENT_VERSION.match(/(.*GA$)|(.*RC\d+)/))
		q.stopUnhandledRejectionTracking();

	q.longStackSupport = true;
	var progress, uia, bsRegionId, bsUserId, mainmenu;
	var dev = BS.device;
	var bsMedia = BS.media;
	var bsPortal = BS.portal;

	var cUser = null;
	var progressBar = null;
	var languageCode = null;

	var fnPreparedBaseDocument = preparedBaseDocument();

	var uiAlertSvg =
		'<g><g id="uiAlert" transform="translate(590, 350)" class="a">\
			<rect x="-152.5" y="-72.5" width="405" height="145" rx="12" ry="12" class="b" />\
			<rect x="-150" y="-70" width="400" height="140" rx="10" ry="10" \
			fill="url(#uiAlertGradient)"/>\
			<textArea x="-140" y="-60" width="380" text-align="center" class="c a"/>\
			<animate from="0" to="1" attributeName="opacity" dur="150ms" begin="indefinite" \
			fill="freeze"/><animate from="1" to="0" attributeName="opacity" dur="150ms" \
			begin="indefinite" fill="freeze"/>\
			<style>.a { font-size: 25;} .b { fill: none; stroke: white; stroke-width: 5; }\
			.c { fill: #444; }</style>\
			<linearGradient id="uiAlertGradient" x1="0" y1="1" x2="0" y2="0">\
				<stop style="stop-color:#828387;stop-opacity:.9" offset="0" />\
				<stop style="stop-color:#d0d0d0;stop-opacity:.9" offset="1" />\
			</linearGradient>\
		</g></g>';

	var systemOverloadWaitUISvg = '<g xmlns:xlink="http://www.w3.org/1999/xlink"><g id="systemOverload" transform="translate(390, 210)" class="a">\
			<rect x="0" y="0" width="500" height="260" rx="12" ry="12" class="b" />\
			<rect x="2.5" y="2.5" width="495" height="255" rx="10" ry="10" \
			fill="url(#uiAlertGradient)"/>\
			<textArea x="10" y="90" width="480" text-align="center" class="c a"/>\
			<style>.a { font-size: 25;} .b { fill: none; stroke: white; stroke-width: 5; }\
			.c { fill: #444; }</style>\
			<linearGradient id="uiAlertGradient" x1="0" y1="1" x2="0" y2="0">\
				<stop style="stop-color:#828387;stop-opacity:.9" offset="0" />\
				<stop style="stop-color:#d0d0d0;stop-opacity:.9" offset="1" />\
			</linearGradient>\
		</g></g>';

	BS.resourceDataVersions = {};

	BS.idle = true;
	var bsIdleTimer = null;
	BS.evMgr.bind('onKeypress', function () {
		if (bsIdleTimer) {
			clearTimeout(bsIdleTimer);
		}
		BS.idle = false;
		bsIdleTimer = setTimeout(function () {
			BS.idle = true;
			bsIdleTimer = null;
		}, 1e4);
	});

	BS.backgroundService = new BS.BackgroundService(function () {
		return BS.idle && BeeSmartMain.portalReady;
	}, 2e3);

	var requestParams = {
		common: {
			data: {},
			cache: 'CARD',
			accept: 'json'
		},
		connected: {
			timeout: 20e3,
			retry: true,
			retrySeries: [18e3, 54e3]
		},
		disconnected: {
			timeout: 2e3
		},
		offline: {
			fsOnly: true
		}
	};

	function makeOpts(connectivity, opts) {
		var otherParams = requestParams.connected;
		if (BS.portal.isDisconnected)
			otherParams = requestParams.disconnected;
		var options = {};
		Object.eachKey(requestParams.common, addToOptions);
		Object.eachKey(otherParams, addToOptions);
		Object.eachKey(opts || {}, addToOptions);
		return options;

		function addToOptions(key) {
			options[key] = this[key];
		}
	}


	BS.domElementsCollections = {ui: null};
	BS.templateProvider = new BS.TemplateService(
		'albert',
		location.href,
		'/skin/{skin-name}',
		'/skin/{skin-name}'
	);
	BS.template = BS.templateProvider;
	BS.i18n = new BS.I18N();
	window.tr = BS.i18n.translate.bind(BS.i18n);
	BS.registerGlobalVariable('tr');
	bsPortal.setOnlineConnected();

	function makeBootProcessReport(stage) {
		var BTR = makeBootProcessReport;
		var mac = BS.device.getMAC();
		var prms;
		switch (stage) {
		case BTR.stages.BootInit:
			var dfr = q.defer();
			(function postProgress() {
				var retry = false;
				BS.request.Post('/restapi/boot/' + mac, {preventEvent: true})
					.catch(function (response) {
						if (!(response instanceof BS.request.Result)) return q(true);
						retry = true;
						if (response.status === 429) {
							return fnPreparedBaseDocument.then(function () {
								return showSystemOverloadWaitUi(
									response.data);
							});
						} else retry = false;
					})
					.then(function () {
						if (retry) return postProgress();
						else dfr.resolve();
					})
					.done();
			})();
			return dfr.promise;

		case BTR.stages.BootDone:
			prms = BS.request.Delete('/restapi/boot/' + mac);
			break;
		}
		return prms;
	}

	makeBootProcessReport.stages = {
		BootInit: 'boot-init',
		BootDone: 'boot-done'
	};

	function showSystemOverloadWaitUi(bootlMessage) {
		var dfr = q.defer();
		var startTime = Date.now();
		var intervalRef = null;
		var dom = null;
		prepareSystemOverloadWaitUi();
		init();
		updateMessage(bootlMessage.retryAfter);
		start();
		return dfr.promise;

		function init() {
			dom = $('#systemOverload');
			document.getElementById('dialogs_layer3').appendChild(dom[0]);
			dom.msg = dom.find('textArea');
		}

		function start() {
			dom.show();
			intervalRef = setInterval(function intervalTick() {
				var timeLeftInMillis = (startTime + bootlMessage.retryAfter * 1000) - Date.now();
				if (timeLeftInMillis < 0) {
					destroy();
					return;
				}
				updateMessage(Math.floor(timeLeftInMillis / 1000));
			}, 1000);
		}

		function updateMessage(secondsLeft) {
			dom.msg.svg(bootlMessage.message.sprintf(secondsLeft));
		}

		function destroy() {
			clearInterval(intervalRef);
			dom.msg = null;
			dom.remove();
			dom = null;
			dfr.resolve();
		}

		function prepareSystemOverloadWaitUi() {
			$.parseAndAppendModuleSVG(systemOverloadWaitUISvg);
		}
	}

	q
		.try(function () {
			BS.perf.start('boot');
			return (-1 === location.href.indexOf('file://')) ?
				preparedRemoteClient() :
				preparedLocalClient().then(function () {
					return fnPreparedBaseDocument
						.then(function () {
							BS.compatibilityManager = new BS.CompatibilityManager();
							if (BS.compatibilityManager.isTimevalid()) return;
							return q.try(preparedEmbeddedTranslations)
								.then(preparedEmbeddedSystemCheckUi)
								.then(function () {
									return BS.compatibilityManager.getAcquireSystemTimeTask();
								});
						}).finally(function () {
							$('#systemTimeScanDialog').remove();
						});
				});
		})
		.then(function () {
			em.dispatch(new OnSystemTimeReadyEvent());
			return makeBootProcessReport(makeBootProcessReport.stages.BootInit);
		})
		.then(function () {
			var hash1234 = '1234'.md5();
			return q.allSettled([
				preparedDisplayFormat(), bsPortal.isEmbedded ?
					q({regionId: 1, tokens: [{homeGroupUserId: 1000, sPin: hash1234,
						pPin: hash1234, token: hash1234}]}) :
					preparedTokens()
			]);
		})
		.spread(function (pSysConf, pTokens) {
			if (!pSysConf.value)
				throw pSysConf.reason;

			if (!pTokens.value && (pTokens.reason instanceof NiceException ||
				pTokens.reason instanceof BS.request.Result)
			) throw pTokens.reason;

			if ('provisioning-pending' === pTokens.value) {
				return preparedTranslations()
					.then(preparedDefaultUi)
					.then(fnPreparedBaseDocument.then(preparedDevice))
					.then(preparedLateProvisioning);
			} else return q(pTokens.value);
		})
		.then(function (regionAndTokens) {
			var tasks = [];
			BS.regionId = regionAndTokens.regionId;
			bsRegionId = BS.regionId;
			BS.request.sign(BS.consumerApp, regionAndTokens.tokens[0]);
			bsUserId = regionAndTokens.tokens[0].homeGroupUserId;
			if (!BS.compatibilityManager) tasks.push(fnPreparedBaseDocument.then(preparedDevice));
			else tasks.push(fnPreparedBaseDocument);
			BS.users = new BS.UserModel.UserRepository();
			return q
				.all([
					preparedSkins(bsRegionId),
					preparedLanguages(bsRegionId),
					preparedAvatars(bsRegionId)
				])
				.spread(function (skins, languages, avatars) {
					BS.languages = new BS.LanguageModel.LanguageRepository(languages);
					BS.skins = new BS.SkinModel.SkinRepository(skins);
					BS.avatars = new BS.UserModel.AvatarRepository(avatars);
				})
				.then(function () {
					tasks.push(preparedUsers(regionAndTokens.tokens).then(function (users) {
						BS.users.addMany(users);
						BS.request.sign(BS.consumerApp, BS.users.defaultUser);
						return q(true);
					}));
					return q.all(tasks);
				});
		})
		.spread(function () {
			var dUser = BS.users.defaultUser;
			bsPortal.language = dUser.language;
			bsPortal.skin = dUser.skin;
			bsPortal.user = dUser;
			BS.template.skin = dUser.skin.keyword;
			return preparedAndConfiguredFromSkinManifest(BS.device.info, dUser.skin)
				.then(function () {
					bsPortal.updateFormatsFromLanguage(bsPortal.language);
				});
		})
		.then(function () {
			return q.all([
				preparedTranslations(bsPortal.user.language.label),
				preparedSystemConfiguration(BS.regionId)
			]);
		})
		.spread(function () {
			return preparedDefaultUi();
		})
		.then(function () {
			var dUser = BS.users.defaultUser;
			var pinExpired = dUser.pinValidTill < new Date();
			var dfr = q.defer();

			if (!dUser.isAutoLoginEnabled || (dUser.isAutoLoginEnabled && pinExpired)) {
				return BS.template.get('svg/login.svg').then(function () {
					makeBootProcessReport(makeBootProcessReport.stages.BootDone);
					if (dUser.isAutoLoginEnabled && pinExpired) {
						var pinExpiredDialog = new PinExpiredDialog('PinExpired',
							dUser.isAutoLoginEnabled);
						BeeSmartMain.register(pinExpiredDialog);
						am.push(pinExpiredDialog, resolver, dUser);
					} else {
						am.push(mm.getApp('OperatorSignonScreen'), resolver);
					}
					return dfr.promise.then(function () {
						return makeBootProcessReport(makeBootProcessReport.stages.BootInit);
					});
				});
			} else {
				return q(true);
			}
			function resolver() {
				$('#login').remove();
				dfr.resolve();
			}
		})
		.then(function () {
			return q.all([
				preparedAllowedServices(bsPortal.user.regionId, bsPortal.user.userId),
				preparedUserSettings().then(preparedMediaResourceOrchestration)
			]);
		})
		.spread(function (services) {
			PVR.featurePolicy.enableUserServices(services);
			if (0 === services.length) {
				throw new Error('Subscriber has no services enabled or' +
					' BeeSmart license not valid!');
			}
			mm.services = services;
			return em.dispatch(new BeeSmartLoginSuccess());
		})
		.then(function () {
			BS.resourceDataVersions = {};
			if (!BS.portal.isEmbedded) {
				return preparedRefreshersEndlessOperation().then(
					function (dvlResRef) {
						BS.resourceDataVersions = dvlResRef;
					},
					function (e) {
						BS.logger.info('NOTE: BOOT DVL Task failed with reason: %s', e);
						BS.logger.log(e);
					}
				);
			}
		})
		.then(function () {
			var cUser = bsPortal.user;
			languageCode = cUser.language.label;
			if (bsPortal.language.label !== cUser.language.label){
				return preparedTranslations(cUser.language.label).then(function () {
					bsPortal.updateFormatsFromLanguage(cUser.language);
					bsPortal.language = cUser.language;
				});
			}
		})
		.then(function () {
			var userSkinName = bsPortal.user.skin.keyword;
			if (userSkinName !== BS.template.skin) {
				BS.template.skin = userSkinName;
				return q.all([
					preparedAndConfiguredFromSkinManifest(BS.device.info, bsPortal.user.skin),
					preparedUiDom(BS.domElementsCollections.ui).then(function () {
						return preparedDefaultUi(true);
					})
				]);
			}
		})
		.then(preparedProgress)
		.then(function (progress) {
			return BeeSmartMain.storeService.initialize().then(function () {
				progress.increment();
				return progress;
			}).catch(function (ex) {
				progress.hide();
				throw ex;
			});
		})
		.then(function (progress) {
			progressBar = progress;
			var tasks = [];
			tasks.push(preparedInterfaceUi());

			mm.startupTasks.forEach(function (task) {
				var taskFn = function () {
					var dfrd = q.defer();
					try {
						task.payload({}, function (data, status) {
							if (false === status) {
								dfrd.reject('Task `%s` failed!%s'.sprintf(this.name, data.stack ?
								' Reason:\n' + data.message + '\n' + data.stack : ''));
							} else dfrd.resolve(data);
							progress.increment();
						});
					} catch (x) {
						progress.increment();
						dfrd.reject(x);
						BS.logger.log(x);
					}
					if (task.isCrucial) return dfrd.promise;
					return dfrd.promise.catch(function (ex) {
						BS.logger.info('NOTE: %s', ex);
						return q(true);
					});
				};
				tasks.push(taskFn);
			});
			return tasks
				.reduce(function (soFar, f) {
					return soFar.then(f);
				}, q())
				.catch(function (x) {
					progress.hide();
					throw x;
				});
		})
		.then(function () {
			bsRegionId = bsPortal.user.regionId;
			bsUserId = bsPortal.user.userId;

			am.push(mm.getModule('BeeSmartMain').getApp('Misc'));

			BS.msgMgr.start();
			return em.dispatch(new BeeSmartReady());
		})
		.then(function () {
			if (['MIN'].indexOf(BS.device.performanceIndex) !== -1) {
				BS.logger.info('NOTE: Wait for background tasks to stop!');
				return q.delay(1500);
			}
		})
		.then(function () {
			BS.evMgr.unbind('onSystemTimeReady');
			BS.evMgr.unbind('onBeeSmartLoaded');
			BS.evMgr.unbind('onBeeSmartReady');
			BS.evMgr.unbind('onBeeSmartLoginSuccess');
		})
		.then(function () {
			progressBar.increment();
			return hideProgressBar();
		})
		.then(function () {
			BeeSmartMain.portalReady = true;
			var dModule = mm.defaultModule;
			var dApp;
			try {
				dApp = dModule.defaultApp;
			} catch (e) {
				BS.logger.debug('No default App found in default Module (' + dModule +
					') to show, reason:\n' + e.message);
				BS.logger.log(e);
				return;
			}
			am.inContextOf(misc).push(dApp);
			makeBootProcessReport(makeBootProcessReport.stages.BootDone);
		})
		.catch(function (ex) {
			var p = q();
			if (!BS.i18n.available)
				p = preparedTranslations();
			return p.finally(function () {
				hideProgressBar();
				var msgErrGui = BS.i18n.available ? tr('ServiceUnavailableContactOperator') :
					'Contact your operator for help. Service is unavailable due to:';
				msgErrGui += ' ';
				if (ex instanceof BS.request.Result)
					msgErrGui += tr('NetworkProblem').sprintf(ex.status || '0',
						ex.statusText || '');
				else if (ex instanceof NiceException)
					msgErrGui += '' + ex.toNiceString();
				else
					msgErrGui += tr('SoftwareProblem');

				BS.logger.info('\nBOOT ERROR');
				BS.logger.log(ex instanceof BS.request.Result ? ex.toString(true) : ex);

				try {
					if (null !== BS.domElementsCollections.ui)
						ui.Alert({}, msgErrGui).show();
					else
						throw null;
				} catch (x) {
					fnPreparedBaseDocument.then(function () {
						BS.template.get('svg/ui.svg')
							.then(function (response) {
								return response.data;
							})
							.catch(function () {
								$.parseAndAppendModuleSVG(uiAlertSvg);
								return q(true);
							})
							.done(function () {
								ui.Alert({}, msgErrGui).show();
							});
					});
				}
				em.bind('onKeypress', function (ev) {
					if ('reload' === ev.data)
						BS.device.restart();
				});
			});
		})
		.finally(function () {
			BS.perf.stop('boot', 'fromLoad=%s ms', Date.now() - LOAD_TIME);
		})
		.done();

	function hideProgressBar() {
		if (progressBar) {
			var dfr = q.defer();
			progressBar.hide(function () {
				$('#loginProgress').remove();
				progressBar = null;
				dfr.resolve();
			});
			return dfr.promise;
		}
	}


	function preparedUiDom(domNodes) {
		var i = domNodes.length;
		while (1 + --i) {
			var r = domNodes[i].domRef;
			r.parentNode.removeChild(r);
			delete domNodes[i];
		}
		BS.domElementsCollections.ui = null;
		BS.domElementsCollections = null;
		ui.clearTemplateCache();
		return q(true);
	}

	function preparedProgress() {
		$('#loginProgress').show();
		progress = new ui.LoaderProgress('loginProgress');
		progress.setTaskLength(mm.startupTasks.length + 3);
		progress.show();
		return q(progress);
	}

	function preparedUserSettings() {
		cUser = bsPortal.user;
		return q(true);
	}

	function preparedAllowedServices(bsRegionId, bsUserId) {
		var url = BS.request
			.translate('/restapi/rest/%d/%d/access/features'.sprintf(bsRegionId, bsUserId));
		var opts = makeOpts(bsPortal.connectivity, {retry: false});
		var args = arguments;
		var that = this;
		return BS.request
			.Get(url, opts)
			.then(function (response) {
				var sKeys = Object.keys(response.data).filter(function (service) {
					return response.data[service] === true;
				});
				return q(sKeys);
			}, function (x) {
				if (
					x instanceof BS.request.Result &&
					x.isStatusDisconnected() &&
					bsPortal.isOnline
				) {
					bsPortal.setOnlineDisconnected();
					BS.request.forceFsOnly();
					return preparedAllowedServices.apply(that, args);
				}
				throw 'Allowed services call failed. Inspect backend for problems. Details:\n' +
				x.toString(true);
			});
	}

	function preparedMediaResourceOrchestration() {
		var url = BS.request.translate('/restapi/rest/%d/%d/content/mr-orchestration');
		return BS.request
			.Get(url.sprintf(cUser.regionId, cUser.userId), makeOpts(bsPortal.connectivity))
			.then(function (response) {
				BS.media.applyMrOrchestrationRules(response.data);
				return q(true);
			});
	}

	function preparedInterfaceUi() {
		BS.template.skin = bsPortal.user.skin.keyword;
		return BS.template.get('svg/interface.svg').then(function () {
			BS.ui.currentUserAvatar.destroy();
			BS.ui.currentUserAvatar = new BS.ui.Image($('#currentUsersAvatar'));
			BS.ui.currentUserAvatar.href = BS.portal.isOnline ? bsPortal.user.avatarLink :
				'skin/%s/img/icons/default_buddy_alt.png'.sprintf(bsPortal.user.skin.keyword);
		});
	}

	function preparedSkins(bsRegionId) {
		var url = BS.request.translate('/restapi/rest/%d/skins');
		return BS.request.Get(url.sprintf(bsRegionId),
			makeOpts(bsPortal.connectivity))
			.then(function (response) {
				return response.data;
			});
	}

	function preparedAvatars(bsRegionId) {
		if (bsPortal.isEmbedded) return q([]);
		return BS.request.Get('/restapi/rest/%d/avatars'.sprintf(bsRegionId),
			makeOpts(bsPortal.connectivity)).then(function (response) {
			return response.data;
		});
	}

	function preparedLanguages(bsRegionId) {
		var url = BS.request.translate('/restapi/rest/%d/languages');
		return BS.request.Get(url.sprintf(bsRegionId),
			makeOpts(bsPortal.connectivity)).then(function (response) {
			return response.data;
		});
	}

	function preparedUsers(tokens) {
		var url = BS.request.translate('/restapi/rest/%d/%d/profiles');
		return BS.request
			.Get(url.sprintf(bsRegionId, bsUserId), makeOpts(bsPortal.connectivity))
			.then(function (response) {
				var i = 0, users = [];
				var sortedUsers = response.data.list.sort(function (user1, user2) {
					if (user1.isDefault) return -1;
					if (user2.isDefault) return 1;
				});
				sortedUsers.forEach(function (userObj) {
					userObj.defaultPosition = parseInt(i++);
					var user = new BS.UserModel.User(userObj);
					var idProfile = parseInt(userObj.idProfile, 10);
					var tknPair = tokens.filter(function (tknPair) {
						return tknPair.homeGroupUserId === idProfile && tknPair.token;
					})[0];

					if (tknPair) {
						BS.logger.debug('Have access token for user id %s (%s)'
							.sprintf(idProfile, userObj.name));
						user.token = tknPair.token;
						user.secret = tknPair.secret;
						user.pin = tknPair.sPin;
						user.parentalPin = tknPair.pPin;

					} else if (!bsPortal.isEmbedded) {
						throw new Error('Have NO access token for user id %s (%s)'.sprintf(
							idProfile, userObj.name));
					}

					users.push(user);
				});

				return q(users);
			});
	}

	function preparedLateProvisioning() {
		return BS.template
			.get('svg/lateProvisioning.svg')
			.then(function () {
				var dfr = q.defer();
				am.push(BS.modMgr.getApp('LateProvisioning'));
				return dfr.promise;
			});
	}

	function preparedDefaultUi(skipDefaultAction) {
		return BS.template.get('svg/ui.svg').then(function (domNodes) {
			bsPortal.direction = $('#gui-direction').attr('direction', null, NS.bee) === 'rtl'
				? 'rtl' : 'ltr';
			if (skipDefaultAction === true) return q(domNodes);
			$('#svg').addClass('svg');
			if (BS.config.isLoaded === false){
				throw new Error('ERROR: device ID %s does not exist in the system!'
					.sprintf(dev.getMAC()));
			}
			BS.domElementsCollections.ui = domNodes;
			uia = new BS.ui.Alert({autoHide: 5000});
			return q(domNodes);
		}).catch(function () {
			throw new Error('ERROR: desired skin `%s` does not exist (try different \
subscriber)!'.sprintf(BS.users.defaultUser.skin.keyword));
		});
	}

	function preparedEmbeddedSystemCheckUi() {
		var opts = { fsOnly: true, accept: 'json' };
		var url = BS.request.translateToEmbedded('/restapi/rest/1/skins');
		return BS.request.Get(url, opts).then(function (response) {
			BS.template.skin = response.data[0].label;
			return BS.template.get('svg/la_system_time.svg');
		});
	}

	function preparedEmbeddedTranslations() {
		var opts = { fsOnly: true, accept: 'json' };
		var url = BS.request.translateToEmbedded('/restapi/rest/system/translations');
		return BS.request.Get(url, opts)
			.then(function (response) {
				return BS.i18n.loadTranslations(response.data);
			});
	}
	function preparedTranslations(lanShortLabel) {
		var urlParams = lanShortLabel ? {language: lanShortLabel} : {};
		var url = BS.request.translate('/restapi/rest/system/translations');
		var opts = makeOpts(bsPortal.connectivity);
		opts.data = urlParams;
		return BS.request
			.Get(url, opts)
			.then(function (response) {
				BS.i18n.loadTranslations(response.data);
				BS.config.setFromClient('MONTHS', BS.i18n.getMonthNames(), false);
				BS.config.setFromClient('DAY_NAMES', BS.i18n.getDayNames(), false);
			}, function (ex) {
				throw ex;
			});
	}

	function preparedTokens() {
		return BS.request
			.Get('/restapi/oauth/get_tokens_for_device', {
				timeout: 20000,
				data: {'device_uid': dev.getMAC()},
				cache: 'CARD'
			})
			.then(function (response) {
				BS.logger.trace('BOOT: users access parameters for this device %s',
					Object.serialize(response.data));
				response.data.tokens = response.data.tokens.sort(function (a, b) {
					return a.homeGroupUserId > b.homeGroupUserId ? 1 : -1;
				});
				return q(response.data);
			})
			.catch(function (xRes) {
				var err = {};
				try {
					err = xRes.data.errors[0];
				} catch (x) {
				}
				if ('timestamp_refused' === err.exceptionMessage) {
					throw new NiceException(
						'BOOT: Time is not correctly configured (%s) %s'.sprintf(err
							.exceptionMessage, dev.getMAC()),
						tr('DeviceTimeIncorrectlyConfigured')
					);
				}
				if (15 === err.errorCode) {
					throw new NiceException(
						'BOOT: Subscription is INACTIVE for owner of device %s'
							.sprintf(dev.getMAC()),
						tr('SubscriptionInactive')
					);
				}
				if (65 === err.errorCode || 75 === err.errorCode) {
					throw new NiceException(
						'BOOT: Unknown pre-entered device with UID %s'.sprintf(dev.getMAC()),
						tr('UnknownPreEnteredDevice')
					);
				}
				if (212 === err.errorCode) {
					throw new NiceException(
						'BOOT: Device is provisioned to another home group.'.sprintf(dev.getMAC()),
						tr('DeviceIsProvisionedToAnotherHomeGroup')
					);
				}
				if (66 === err.errorCode || 72 === err.errorCode || 73 === err.errorCode || 74
					=== err.errorCode)
					return 'provisioning-pending';

				throw xRes;
			});
	}

	function preparedDevice() {
		return BS.request.Get(
			BS.request.translate('/stb/legacy-gateway/app.common.UtilService/getDeviceInfo'),
			makeOpts(bsPortal.connectivity, {data: {arg0: dev.getMAC()}})
		).then(function (response) {
			BS.compatibilityManager = new BS.CompatibilityManager(response.data.result);
		});
	}

	function preparedRefreshersEndlessOperation() {
		var prevTimestamps = {};

		var dvlBackgroundTask = BS.backgroundService.addTask(function () {
			return refreshGetterFunction().catch(function (x) {
				BS.logger.info('DVL: Problem at update process encountered: ' + x);
				BS.logger.log(x);
			});
		}, {
			name: 'DVL Update',
			startInterval: [1e4, BS.config.get('Core.Client.FRESH_CONTENT_START')],
			interval: BS.config.get('Core.Client.FRESH_CONTENT_INTERVAL')
		});

		em.bind('onConfigChange', function (ev) {
			if (ev.updated('Core.Client.FRESH_CONTENT_INTERVAL') === false) return;
			BS.logger.info('DVL: Configuration change: resetting content update procedure!');
			dvlBackgroundTask.interval = BS.config.get('Core.Client.FRESH_CONTENT_INTERVAL');
		});

		function refreshGetterFunction() {

			function updateSubscriptionsAndProducts() {
				return BeeSmartMain.portalReady
					? BeeSmartMain.subscriptionRepository.initialize().then(function () {
						BS.PurchaseModel.PriceItemFactory.itemCache = {};
						return q.all([
							BeeSmartMain.productRepository.updateAllProductsOfType('live'),
							BeeSmartMain.productRepository.updatePurchasedProducts()
						]);
					})
					: q();
			}
			var dvlResponse = null;
			return BS.request.Get(
				'/stb/legacy-gateway/app.common.UtilService/getDataVersionList',
				{preventEvent: 'error', cache: 'CARD', data: {arg0: BS.portal.user.regionId}}
			).then(function (response) {
				dvlResponse = response;
			}).finally(function () {
				return updateSubscriptionsAndProducts().then(function () {
					return dvlResponse === null
						? q()
						: q.allSettled([
							BeeSmartMain.tvLibrary.prmsUserChannelCustomizationsFetch(),
							BeeSmartMain.tvLibrary.prmsTimehiftsFetch()
						]).spread(function (pUsrChs, pTsChs) {
							var data = dvlResponse.data.result;
							data.timeshiftChs = 'fulfilled' === pTsChs.state ? pTsChs.value : {};
							prevTimestamps.usrChsResource = 'fulfilled' === pUsrChs.state ?
								pUsrChs.value : {};
							data.usrChs = DvlUtil.toValues(prevTimestamps.usrChsResource);
							return DvlUtil.contentRefresher(prevTimestamps, data);
						});
				});
			}).then(function () {
				return prevTimestamps;
			});
		}

		return refreshGetterFunction();
	}

	function preparedDisplayFormat() {
		var DAR = BS.Device.prototype.DisplayAspectRatio;
		try {
			var primaryDisplay = EkiohPlatformInfo.displays[0];
			bsMedia.displayFormat = primaryDisplay.standard < 1 ?
				DAR.Preserve43 : DAR.Preserve169;
		} catch (ex) {
			BS.logger.info('NOTE: couldn\'t determine ekioh output');
			if (navigator.platform.indexOf('Motorola') !== -1)
				bsMedia.displayFormat = navigator.platform.indexOf('Motorola') !== -1 ?
					DAR.Preserve43 : DAR.Preserve169;
		}
		return q(true);
	}

	function preparedBaseDocument() {
		var dfr = q.defer();
		document.documentElement.addEventListener(
			'SVGLoad',
			function () {
				dfr.resolve();
			},
			false
		);
		return dfr.promise;
	}

	function preparedSystemConfiguration(regionId) {
		var url = BS.request.translate('/restapi/rest/%d/system/configuration');
		return BS.request.Get(url.sprintf(regionId), makeOpts(bsPortal.connectivity))
			.then(function (response) {
				BS.config.processConfigObject(response.data);
				return q(true);
			});
	}

	function preparedAndConfiguredFromSkinManifest(aDevice, aSkin) {
		return BS.template.getSkinManifest().then(function (response) {
			BS.skinConfiguration = new BS.SkinModel.SkinConfiguration(response.configs);
			var manifestSkin = BS.skins.factory1(new BS.SkinModel.SkinMeta(response.meta));
			if (!manifestSkin.isDeviceDisplayRatioSupported(aDevice)) {
				var supportedOne = aDevice.is169() ?
					aDevice.DisplayAspectRatio.Preserve43 :
					aDevice.DisplayAspectRatio.Preserve169;
				aDevice.displayAspectRatio = supportedOne;
				BS.media.videoAspectRatio = supportedOne;
			}
			aSkin.uiRatio = manifestSkin.uiRatio;
			em.dispatch(new SkinManifestLoaded());
			return q(true);
		});
	}

	function SkinManifestLoaded() {
		this.type = 'SkinManifestLoaded';
		this.value = new Date();
		this.handler = 'onSkinManifestLoaded';
		this.description = 'Skin manifest initialization finished';
		this.promiseOnDispatch = true;
	}

	SkinManifestLoaded.prototype = new BS.Event();

	function preparedLocalClient() {
		var url = location.href.replace(/(:?index|colibry)\.svg/, '') + 'app-start.conf';
		var msgNoLs = 'LocalStorage not enabled, offline mode not possible!';
		var msgNoLsApi = 'LocalStorage not present when required!';
		return BS.request
			.Get(url, {'accept': 'json'})
			.then(function (response) {
				BS.request.forceLocation(response.data.url);
				BS.portal.connectivityEndpoint = response.data.url;
				try {
					BS.config.setFromClient('Core.Client.DEFAULT_MAC',
						response.data.parameters.DEFAULT_MAC.replace(/:/, ''));
				} catch (x) {}
				try {
					var logLevel = response.data.parameters.LOG_LEVEL;
					BS.config.setFromClient('Core.Client.LOG_LEVEL', logLevel, true);
					BS.logger.changeLogLevel(logLevel);
				} catch (x) {}
				BS.imageUrlProvider.setBasePath(response.data.url);
				return q(response.data.url);
			})
			.then(function (mothershipUrl) {
				return BS.request.Get(mothershipUrl, {'timeout': 5000}).then(function () {
					return mothershipUrl;
				});
			})
			.catch(function (ex) {
				var hasLS = 'localStorage' in window;
				if (!hasLS) throw new Error(msgNoLsApi);
				if (
					hasLS &&
					(ex instanceof BS.request.Result) && (
						503 === ex.status ||
						502 === ex.status
					)
				) {
					if (0 === localStorage.length) {
						bsPortal.setOfflineStandalone();
						BS.request.forceFsOnly();
					} else {
						bsPortal.setOnlineDisconnected();
					}
					return q(true);
				}
				BS.logger.log(ex);
				throw 0 === ex.status ? new Error('%s, %s %s'.sprintf(msgNoLs, ex.url || '', ex)) :
					ex;
			});
	}

	function preparedRemoteClient() {
		BS.imageUrlProvider.setBasePath(location.href);
		return q(true);
	}

	var k = BS.InputManager.keyGroups;
	var minPinLen;
	var maxPinLen;
	var mm = BS.modMgr;
	var am = BS.appMgr;
	var ui = BS.ui;
	var media = BS.media;
	var em = BS.evMgr;

	BS.config.getInstanceAvailabilityPromise().then(function (cfgMgr) {
		minPinLen = cfgMgr.get('User.MIN_PIN_SIZE');
		maxPinLen = BS.config.get('User.MAX_PIN_SIZE');
	});

	function BeeSmartReady() {
		this.type = 'BeeSmartReady';
		this.value = new Date();
		this.handler = 'onBeeSmartReady';
		this.description = 'BeeSmart initialization finished';
		this.promiseOnDispatch = true;
	}

	BeeSmartReady.prototype = new BS.Event();

	function OnSystemTimeReadyEvent() {
		this.type = 'OnSystemTimeReady';
		this.handler = 'onSystemTimeReady';
	}
	OnSystemTimeReadyEvent.prototype = new BS.Event();

	function BeeSmartLoaded() {
		this.type = 'BeeSmartLoaded';
		this.value = new Date();
		this.handler = 'onBeeSmartLoaded';
		this.description = 'BeeSmart code loaded';
	}

	BeeSmartLoaded.prototype = new BS.Event();

	function BeeSmartLoginSuccess() {
		this.type = 'BeeSmartLoginSuccess';
		this.value = new Date();
		this.handler = 'onBeeSmartLoginSuccess';
		this.description = 'BeeSmart initialization started';
		this.synced = true;
	}

	BeeSmartLoginSuccess.prototype = new BS.Event();

	BS.debugGlobalVariables();
	BS.logger.info('######################## BeeSmart loaded !');
	BS.evMgr.dispatch(new BeeSmartLoaded());

	var BSlp = new BS.App(
		'LateProvisioning',
		{helpId: 'LateProvisioning', listenTo: [k.shortcuts]}
	);
	BSlp.onInputEvent = function (keyPressedName) {
		if (this.lock)
			return;
		switch (keyPressedName) {
		case 'ok':
			if (!this.setupData.aPin) {
				this.lpAlert.show(tr('LateProvisionMissingPin'));
				break;
			}
			ui.toggleLoader(true);
			this.prepareOauthDance();
			break;
		case 'left':
			this.dom.filter('#provisioning_auth_pin').text(' ');
			this.setupData.aPin = '';
			break;
		default:
		case 'keyboard':
			am.push(mm.getModule('BeeSmartMain').getApp('keyboard'));
			break;
		}
	};
	BSlp.prepareOauthDance = function () {
		this.lock = true;
		var dev = BS.device, that = this;
		q.try(function () {

				alert("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
				alert("TOKEN B");
				alert("++++++++++++++++++++++++++++++++++++++++++");

				var OT = 'oauth_token=';
				var OTS = 'oauth_token_secret=';
				BS.request.sign(
					BS.consumerApp
				);
				return BS.request.Get('/restapi/oauth/request_token',
					{data: {'device_uid': dev.getMAC()}}
				).then(function (response) {
					var a = response.data.split('&');
					var token = a[0].substring(a.indexOf(OT) + OT.length + 1);
					var secret = a[1].substring(a.indexOf(OTS) + OTS.length + 1);
					return q({'token': token, 'secret': secret}, true);
				});
			})
			.then(function (auth) {
				BS.request.sign(
					BS.consumerApp,
					new BS.UserModel.User({skin: {}, token: auth.token, secret: auth.secret})
				);
				return BS.request.Get('/restapi/oauth/authorize',
					{data: {'auth_pin': that.setupData.aPin}});
			})
			.then(function () {
				return BS.request.Get('/restapi/oauth/access_token',
					{data: {'auth_pin': that.setupData.aPin}, accept: 'text'});
			})
			.finally(function (result) {
				ui.toggleLoader(false);
				return q(result);
			})
			.done(
				function () {
					var alrt = new ui.Alert({
						autoHide: 2500,
						callback: function () {
							BS.device.restart();
						}
					});
					alrt.show(tr('LateProvisionSuccessfull'));
				},
				function (resError) {
					that.lock = false;
					if (resError && resError.data && resError.data.errors[0]) {
						switch (resError.data.errors[0].errorCode) {
						case 8:
							that.lpAlert.show(tr('LateProvisionNotMatching'));
							break;
						case 15:
							that.lpAlert.show(tr('SubscriptionInactive'));
							break;
						case 65:
							that.lpAlert.show(tr('LateProvisionDeviceNotFound'));
							break;
						case 187:
							that.lpAlert.show(tr('LateProvisioningEnterSubscriberAuthPin'));
							break;
						case 210:
							that.lpAlert.show(tr('LateProvisionDeviceQuotaExceeded'));
							break;
						default:
							that.lpAlert.show(tr('LateProvisionNotMatching'));
							break;
						}
					} else
						that.lpAlert.show(tr('LateProvisionNotMatching'));
					BS.logger.info('BOOT Error: Provisioning failed');
					BS.logger.log(resError.toString(true));
					BS.request.unsign();
				}
			);
	};
	BSlp.init = function () {
		this.setupData = {aPin: '', requestToken: {}};
		this.dom = $('#interfacesHolder, #lateProvisioning, #provisioning_auth_pin,' +
			'#lateProvisioning g.actions-bar');
		this.dom.filter('#interfacesHolder').show();
		this.dom.filter('#lateProvisioning').show();
		this.lpAlert = new ui.Alert({autoHide: 5000});
		var tmp = new ui.ActionBar(this.dom.filter('.actions-bar'));
		tmp = undefined;
	};
	BSlp.destroy = function () {
	};
	BSlp.focus = function (appIdReturnedFrom, value) {
		if (appIdReturnedFrom !== 'keyboard')
			return;
		this.setupData.aPin = value ? value : null;
		this.dom.filter('#provisioning_auth_pin').text(value);
		this.prepareOauthDance();
	};


	var so = new BS.App(
		'OperatorSignonScreen',
		{
			helpId: 'signon',
			listenTo: ['power'],
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	so.pin = '';
	so.dialogPinEnterHiden = true;
	so.accessGuard = null;
	so.onInputEvent = function (keyPressedName) {
		var clear = function () {
			so.passwordField.clear();
			so.pin = '';
		};
		if (this.lock)
			return;
		uia.hide();

		switch (keyPressedName) {
		case 'up':
		case 'down':
			if (!so.dialogPinEnterHiden)
				so.dialogEnterPassword(false);
			so.m.currentMenuItems()[keyPressedName === 'up' ? 'previous' : 'next']();
			clear();
			so.adjustPinInputMargin();

			break;
		case 'ok':
			if (!so.dialogPinEnterHiden) so.dialogEnterPassword(false);
			if (so.pin.length < minPinLen) break;
			var uid = so.m.currentMenuItems().currentInfo().userId;
			var user;
			var that = this;
			bsPortal.user = cUser = user = BS.users.getById(uid);

			function verifyUsersPin() {
				so.m.currentMenuItems().select(function () {
					if (user.comparePinTo(so.pin)) {
						so.accessGuard.resetProperties();
						BS.request.sign(BS.consumerApp, BS.portal.user);
						if ((user.pinValidTill || 0) < Date.now()) {
							if (!that.pinExpiredDialog) {
								that.pinExpiredDialog = new PinExpiredDialog('PinExpired',
									user.isAutoLoginEnabled);
								BeeSmartMain.register(that.pinExpiredDialog);
							}
							am.push(that.pinExpiredDialog, function () {
								so.continueLogin({uid: uid, pin: user.pin}, true);
							}, user);
						} else so.continueLogin();
					} else so.promptLoginError('incorrect-pin');
				});
			}
			if (-1 !== location.href.indexOf('file://') && !user.isDefault) {
				so.lock = true;
				ui.toggleLoader(true);
				BS.request.Get(BS.portal.connectivityEndpoint).then(verifyUsersPin, function (x) {
					$('#signon-offline-msg').show();
					if (
						x instanceof BS.request.Result && x.isStatusDisconnected()
						&& bsPortal.isOnline
					) {
						BS.portal.setOnlineDisconnected();
					}
					clear();
					so.m.destroy();
					so.loginUserMenuGenerator(0);
					new ui.Alert({autoHide: 5e3}).show(tr('OfflineMode'));
				}).finally(function () {
					so.lock = false;
					ui.toggleLoader(false);
				}).done();
				return;
			}

			verifyUsersPin();

			break;
		case 'left':
			if (!so.dialogPinEnterHiden)
				so.dialogEnterPassword(false);
			clear();

			break;
		default:
			if (!so.dialogPinEnterHiden)
				so.dialogEnterPassword(false);

			if (!isNaN(parseInt(keyPressedName, 10))) {
				so.pin += keyPressedName;
				so.passwordField.push(so.pin.length);
			}
			break;
		}
	};

	so.adjustPinInputMargin = function () {
		if (so.pinInputMarginAdjuster) {
			var $userElm = $('#user_' + so.m.currentMenuItems().currentInfo().userId);
			var currentProfileBBox = $userElm[0].getBBox();
			so.pinInputMarginAdjuster.setAttribute(
				'transform',
				'translate(%d, 0)'.sprintf(BS.portal.direction === 'ltr'
					? currentProfileBBox.width
					: -currentProfileBBox.width)
			);
		}
	};

	so.init = function (caller, continuation) {
		continuation = continuation || function () {};
		this.continueLogin = function (data) {
			BS.logger.info('###### LOGIN SUCCESSFUL!');
			am.pop();
			continuation(data);
		};

		this.accessGuard = new BeeSmartMain.AccessGuard();
		$('#interfacesHolder, #login, #loginPanel').show();
		if (!BS.portal.isOnline) $('#signon-offline-msg').show();
		ui.ActionBar($('#signupHelpBar'));
		this.dialogEnterPassword(true);
		this.pinInputMarginAdjuster = $('#pinInputMarginAdjuster')[0] || null;

		loginUserMenuGenerator(BS.users.defaultUser.defaultPosition);

		function loginUserMenuGenerator(scrollPositionCounter) {
			var mSelectorDom = $('#loginSelectorUsers');
			mSelectorDom.parent().attr('display', '');
			var menuList = BS.users.all
				.filter(function (user) {

					return bsPortal.isDisconnected ? user === BS.users.defaultUser : true;
				})
				.map(function (user) {

					return {
						userName: user.userName,
						userId: user.userId,
						avatarLink: BS.portal.isOnline ? user.avatarLink :
							'skin/%s/img/icons/default_buddy_alt.png'
								.sprintf(BS.portal.user.skin.keyword),
						label: user.label,
						desc: user.desc,
						autoLogin: user.autoLogin,
						isFirstLogin: user.isFirstLogin,
						pinValidTill: user.pinValidTill
					};
				});

			so.passwordDom = $('#loginPassword');
			so.passwordField = new ui.PasswordField(so.passwordDom, {'maxFieldEntries': maxPinLen});
			so.m = new ui.Menu(mSelectorDom[0]);

			var items = [];
			for (var i = 0, node; (node = menuList[i++]);) {
				items.push(
					ui.template('loginOperatorMenuItemsTemplate', {
						'userName': node.userName,
						'userId': node.userId,
						'avatarLink': node.avatarLink
					})
				);
			}

			so.m.newMenuItems().setItems(items, menuList).show()
				.jump(parseInt(scrollPositionCounter, 10));
			so.adjustPinInputMargin();

			$('#loginText').svg(tr('startup_selectAcc'));
		}
		so.loginUserMenuGenerator = loginUserMenuGenerator;

		so.promptLoginError = function () {
			clear();
			so.accessGuard.recordWrongAttempt();

			if (!so.accessGuard.isFalseGuessing()) {
				uia.show(tr('Ooops') + '! ' + tr('startup_wrongPin'));
				return;
			}

			so.lock = true;
			var a = new ui.Alert({autoHide: so.accessGuard.lockoutTime * 1000});
			so.accessGuard.resetPropertiesAfter(function () {
				a.hide();
				so.lock = false;
			});

			a.show(tr('LockedWait').concat(' ', so.accessGuard.lockoutTime, tr('s')));

			so.accessGuard.startLock(function () {
				a.updateMessage(tr('LockedWait').concat(' ', so.accessGuard.lockoutTime, tr('s')));
			});
		};
		clear();

		function clear() {
			if (!so.passwordDom)
				return;
			so.pin = '';
			so.passwordField.clear();
		}
	};

	so.dialogEnterPassword = function (showDialog) {
		if (showDialog) {
			so.dialogPinEnterHiden = false;
			$('#loginEnterPasswordShow').begin();
			so.chDescrHideTimer = setTimeout(function () {
				so.dialogPinEnterHiden = true;
				$('#loginEnterPasswordHide').begin();
			}, 10000);
		} else {
			if (so.chDescrHideTimer) {
				clearTimeout(so.chDescrHideTimer);
				so.chDescrHideTimer = null;
			}

			if (!so.dialogPinEnterHiden) {
				so.dialogPinEnterHiden = true;
				$('#loginEnterPasswordHide').begin();
			}
		}
	};
	so.destroy = function () {
		uia.hide();
		$('#signupFinishedAni').begin();
		$('#interfacesHolder').hide();

		setTimeout(function () {
			so.m.destroy();
			$('#login').remove();
			gc();
		}, 200);
	};


	var misc = new BS.App('Misc', {
		listenTo: [k.globals, k.shortcuts],
		helpId: 'misc'
	});
	misc.eventListeners = {
		subtitleLangEv: null, audioLangEv: null, ratioEv: null,
		standByMode: null
	};
	misc.streamLanguages = {subtitle: null, audio: null};
	misc.volumeTimeoutID = null;
	misc.onInputEvent = function (keyPressedName) {
		if (!BeeSmartMain.portalReady) {
			BS.logger.debug('MISC: key input blocked until boot finishes!');
			return;
		}

		var appMgr = am;
		var dApp;
		try {
			switch (keyPressedName) {
			case 'power':
				media.stop();
				break;
			case 'menu':
			case 'reload':
				if (!appMgr.isStackInteruptable)
					return;
				var mmApp = mm.getApp(this.adapterMainMenu.appId);

				var isFocused = appMgr.lastLoaded(mmApp.toString());
				if (isFocused || !appMgr.isLoaded(mmApp.toString())) {
					dApp = mm.defaultModule.defaultApp;

					if (appMgr.isLoaded('tvMosaics')) {
						appMgr.cutOff('tvMosaics');
					} else if (!appMgr.lastLoaded('' + dApp)) {
						if (appMgr.isLoaded('' + dApp)) {
							appMgr.cutOff('' + dApp);
						} else {
							appMgr.cutOff('Misc');
							appMgr.push(dApp);
						}
					}

					if (!isFocused)
						appMgr.push(mmApp);

				} else {
					appMgr.cutOff(mmApp.toString(), mmApp.toString());
				}
				break;
			case 'fsTV':
				if (!appMgr.interuptable())
					return;

				if (appMgr.isLoaded('tvMosaics')) {
					appMgr.cutOff('tvMosaics');
				} else {
					dApp = mm.defaultModule.defaultApp;

					if (!appMgr.lastLoaded('' + dApp)) {
						if (appMgr.isLoaded('' + dApp))
							appMgr.cutOff('' + dApp);
						else {
							appMgr.cutOff('Misc');
							appMgr.push(dApp);
						}
					}
				}
				break;
			case 'epg':
				if (!appMgr.interuptable()) {
					return;
				}
				if (IS_COLIBRY === true) {
					if (appMgr.isLoaded('EpgColumnView') || !appMgr.lastLoaded('liveTv'))
						return;
					appMgr.push(mm.getApp('EpgColumnView'));
				} else {
					if (appMgr.isLoaded('EpgMatrixView'))
						return;
					if (appMgr.lastLoaded('epgTvShowDetails'))
						appMgr.cutOff('liveTv');

					appMgr.push(
						mm.getApp('EpgMatrixView'),
						mm.getApp('liveTv').getCurrentChannel()
					);
				}
				break;
			case 'games':
				break;
			case 'radio':
				break;
			case 'dvr':
				if (
					!appMgr.interuptable() ||
					appMgr.lastLoaded('MyRecordings') || IS_COLIBRY === true
				) return;

				cutOff();
				this.adapterMainMenu.showCModule('MyRecordings');
				break;
			case 'www':
				if (appMgr.lastLoaded('WebBrowsingExtraApp') || !appMgr.interuptable())
					return;

				this.adapterMainMenu.showCModule('Applications', ['WebBrowsingExtraApp']);
				break;
			case 'volup':
			case 'voldown':
				this.dom.showVolumeBox();
				this.dom.setVolume(keyPressedName === 'voldown' ? -0.1 : 0.1);

				break;
			case 'mute':
				this.dom.showVolumeBox();
				this.dom.setVolume('mute');

				break;
			case 'settings':
				if (!appMgr.isStackInteruptable)
					return;

				if (appMgr.isLoaded('Settings')) {
					return;
				}
				cutOff();

				this.adapterMainMenu.showCModule('Settings');

				break;
			case 'vod':
				if (!appMgr.isStackInteruptable || IS_COLIBRY === true)
					return;
				if (appMgr.lastLoaded('Vod')) {
					return;
				}
				cutOff();

				this.adapterMainMenu.showCModule('Vod');

				break;
			case 'aod':
				if (!appMgr.isStackInteruptable || IS_COLIBRY === true)
					return;
				if (appMgr.isLoaded('mod')) {
					return;
				} else if (!mm.appExists('mod')) {
					BS.logger.info('There is no application AOD (mod) to show ' +
						'(maybe not installed or deployed)');
					return;
				}
				cutOff();

				this.adapterMainMenu.showCModule('mod');

				break;

			case 'help':
				if (!appMgr.interuptable() || IS_COLIBRY === true)
					return;
				if (appMgr.lastLoaded('sidebar_helpmenu')) {
					appMgr.pop();
					appMgr.pop();
				} else {
					cutOff();
					this.adapterMainMenu.showCModule('sidebar_helpmenu');
				}
				break;
			case 'extras':
				if (!appMgr.interuptable() || IS_COLIBRY === true)
					return;
				if (appMgr.lastLoaded('AppStoreCategories')) {
					appMgr.pop();
					appMgr.pop();
				} else {
					this.adapterMainMenu.showCModule('AppStoreCategories');
				}
				break;

			}

		} catch (ex) {
			if (ex === 'invalid-license')
				BS.logger.debug('Note: >' + ex + '< caught in ' + this + '.onInputEvent');

			throw ex;
		}
		function cutOff() {
			if (am.isLoaded('tvMosaics')) {
				am.cutOff('tvMosaics');
			} else if (am.isLoaded(misc.adapterMainMenu.appId)) {
				am.cutOff(misc.adapterMainMenu.appId);
			} else {
				am.cutOff(mm.defaultModule.defaultApp);
			}
		}
	};
	misc.timeCounter = 0;
	misc.registerMainMenuAdapter = function (instance) {
		if (this.adapterMainMenu) throw 'main-menu-adapter-already-set';
		this.adapterMainMenu = instance;
	};
	misc.init = function () {
		var _formats = bsPortal.local.formats;
		misc.uiAlert = new ui.Alert({autoHide: 5000});


		if (!misc.clock) {
			sysDate = new DateText(misc.dom['portal_date'], _formats.date);
			sysClock = new DateText(misc.dom['portal_time'], _formats.time);
			sysDate.update(cDate);
			sysClock.update(cDate);
		}

		misc.event = { write: BS.F, send: BS.F, beginEvent: BS.F, endEvent: BS.F };
		if (mm.isAllowed('userstatistics')) {

			misc.event = new BS.StatisticsModel.StatisticsService({
				maxEventsBeforeSend: BS.config.get('Core.Statistics.MAX_EVENTS_TO_SEND'),
				minTvWatch: BS.config.get('Core.Statistics.MIN_TV_WATCH'),
				interval: parseInt(BS.config.get('Core.Statistics.INTERVAL'), 10) * 1000,
				enabled: BS.config.get('Core.Statistics.ENABLED')
			});

			em.bind('onConfigChange', function (ev) {
				if (ev.updated('Core.Statistics.MAX_EVENTS_TO_SEND') === true) {
					misc.event.maxEventsBeforeSend = BS.config.get('Core.Statistics.MAX_EVENTS_TO_SEND');
					BS.logger.debug('Configuration change: changed ' +
						'Core.Statistics.MAX_EVENTS_TO_SEND to ' + misc.event.maxEventsBeforeSend);
				}
				if (ev.updated('Core.Statistics.MIN_TV_WATCH') === true) {
					misc.event.minTvWatch = BS.config.get('Core.Statistics.MIN_TV_WATCH');
					BS.logger.debug('Configuration change: changed ' +
						'Core.Statistics.MIN_TV_WATCH to ' + misc.event.minTvWatch);
				}
				if (ev.updated('Core.Statistics.INTERVAL') === true) {
					var newInterval = BS.config.get('Core.Statistics.INTERVAL');
					misc.event.interval = parseInt(newInterval, 10) * 1000;
					BS.logger.debug('Configuration change: changed ' +
						'Core.Statistics.INTERVAL to ' + newInterval);
				}
				if (ev.updated('Core.Statistics.ENABLED') === true) {
					misc.event.enabled = BS.config.get('Core.Statistics.ENABLED');
					BS.logger.debug('Configuration change: changed ' +
						'Core.Statistics.ENABLED to ' + misc.event.enabled);
				}
			});
		}
	};
	misc.startup = function () {
		misc.dom = new $.ModuleDom(
			[
				'portalNavigationHolder', 'moduleTitleHolder', 'modTitleReflClip',
				'portal_title', 'portal_title_bg', 'portal_date', 'portal_time',
				'portal_title_refl', 'video', 'volumeInfoBox', 'animVolum', 'muteBox',
				'volumeInfoBoxShow', 'volumeInfoBoxHide', 'interfacesHolder',
				'moduleActionBar', 'portalNavigationBorders'
			],
			{
				navStack: [],
				setModuleTitle: function (title) {
					var isUpperCase = this['portal_title']
							.attr('text-transform', null, NS.bee) === 'uppercase';
					var pt = this['portal_title']
							.text(isUpperCase ? title.toUpperCase() : title)[0];
					var matrix = new SVGMatrix();
					var ptWidth = pt && pt.getBBox() ? pt.getBBox().width : 100;

					isUpperCase = this['portal_title_refl']
							.attr('text-transform', null, NS.bee) === 'uppercase';
					this['portal_title_refl'].text(isUpperCase ? title.toUpperCase() : title);
					this.modTitleReflClip.first().attr('width', ptWidth);

					var addWidth = parseInt(this['portal_title_bg'].attr('add-width', null,
						NS.bee));
					addWidth = isNaN(addWidth) ? 0 : addWidth;

					var maxWidth = parseInt(this['portal_title'].attr('max-width', null, NS.bee));
					ptWidth = isNaN(maxWidth) ? ptWidth : maxWidth;

					this['portal_title_bg'].attr('width', (ptWidth + addWidth));
					this['portal_title'].attr('width', ptWidth);

					if (bsPortal.direction === 'rtl')
						ptWidth = -ptWidth;

					matrix.setComponent(4, ptWidth);
					matrix.setComponent(5, 0);

					this.portalNavigationHolder[0].setMatrixTrait('transform', matrix);
				},
				setNavigationPosition: function () {
					if (this.portalNavigationBorders.length === 0)
						return;
					var mt = this.moduleTitleHolder,
						mtWidth = mt[0].getBBox().width,
						mtY = mt.attr('defaultY', null, NS.bee),
						mtX = mt.attr('defaultX', null, NS.bee),
						border = parseInt(this.portalNavigationBorders.attr('width', null, NS.svg));
					mt.attr('transform',
						'translate(' + (mtWidth > border ? border - mtWidth : mtX)
						+ ',' + mtY + ')');
				},
				navigationPush: function (title) {
					this.navStack.push(title);
					this.redrawNavigation();
				},
				navigationPop: function () {
					this.navStack.pop();
					this.redrawNavigation();
				},
				navigationReset: function () {
					this.navStack = [];
					this.redrawNavigation();
				},
				redrawNavigation: function () {
					this.portalNavigationHolder.svg(' ');
					var subitemLeft = bsPortal.direction === 'rtl' ? -4 : 4;
					var sizes = ['sub-title', 's-title', 'xs-title', 'xxs-title'];
					var subItemWidth = 0;
					var prevDomElement = null;
					var top2Items = this.navStack.filter(function (_, i, a) {
						return i > a.length - 3;
					});
					if (this.navStack.length > 2) top2Items.unshift('...');
					top2Items.forEach(function (title, i) {
						if (prevDomElement) {
							subItemWidth = prevDomElement.getBBox().width + 3;
							if (bsPortal.direction === 'rtl') {
								subitemLeft -= subItemWidth;
							} else {
								subitemLeft += subItemWidth;
							}
						}

						var currSvg = ui.template('templateNavLayer', {
							'subitemLeft': subitemLeft,
							'title': title.encodeEntities(),
							'currSize': sizes[i],
							'index': i,
							'length': this.navStack.length
						});
						prevDomElement = $.parseSvg(currSvg);
						this.portalNavigationHolder.append(prevDomElement);
					}.bind(this));
					this.setNavigationPosition();
				},
				showVolumeBox: function () {
					var r = this;
					if (r.volumeInfoBoxHidden) {
						r.volumeInfoBoxShow.begin();
						r.volumeInfoBoxHidden = false;
					}
					if (this.volumeTimeoutID) {
						clearTimeout(this.volumeTimeoutID);
						this.volumeTimeoutID = null;
					}

					r.volumeTimeoutID = setTimeout(function () {
						r.volumeInfoBoxHide.begin(function () {
							r.volumeInfoBoxHidden = true;
						});
					}, 1500);
				},

				currVolume: null,
				isMute: false,
				isSystemMute: false,
				getCurrentVolumeLevel: function () {
					if (this.isMute)
						return 'mute';
					return this.currVolume;
				},
				systemUnMute: function () {
					this.isSystemMute = false;
					var vol = !this.isMute ? Number(this.currVolume).toFixed(2) : 0;
					this.video.attr('audio-level', vol);
				},
				systemMute: function () {
					this.isSystemMute = true;
					this.video.attr('audio-level', 0);
				},
				setVolume: function (volumeAdjValue) {
					if (this.currVolume === null)
						this.currVolume = 0;

					if (volumeAdjValue === 'mute') {
						this.isMute = !this.isMute;
						var vol = !this.isMute ? Number(this.currVolume).toFixed(2) : 0;
						this.muteBox.attr('opacity', this.isMute ? '1' : '0.1');
						if(!this.isSystemMute)
							this.video.attr('audio-level', vol);
						em.dispatch(new VolumeChangeEvent('mute', vol));
						return vol;
					}

					if (!('volumeRectWidth' in this))
						this.volumeRectWidth =
							parseInt(this.animVolum.attr('max-width', null, NS.bee), 10);

					var previousValue = this.currVolume;
					this.isMute = false;
					this.currVolume += volumeAdjValue;
					this.currVolume = this.currVolume < 0 ? 0 : this.currVolume;
					this.currVolume = this.currVolume > 1 ? 1 : this.currVolume;
					if(!this.isSystemMute)
						this.video.attr('audio-level', this.currVolume);

					this.muteBox.attr('opacity', this.currVolume < 0.05 ? '1' : '0.1');
					this.animVolum.attr('from', previousValue * this.volumeRectWidth);
					this.animVolum.attr('to', this.currVolume * this.volumeRectWidth);
					this.animVolum.begin();
					em.dispatch(new VolumeChangeEvent(
						volumeAdjValue > 0 ? 'volumeUp' : 'volumeDown',
						this.currVolume
					));
					return this.currVolume;
				}
			}
		);


		misc.dom.volumeInfoBoxHidden = true;
		try {
			misc.dom.actionBar = new ui.ActionBar(misc.dom.moduleActionBar);
		} catch (ex) {
		}
	};
	misc.destroy = function () {
		var ev = new BeeSmartExitEvent();
		em.dispatch(ev);

		clearInterval(misc.clock);

		BS.msgMgr.stop();

		misc.clock = null;

		ui.toggleLoader();
		try {
			if (am.isLoaded('pauseAndResume'))
				mm.getApp('pauseAndResume').abortPR();

			media.stop();
		} catch (ex) {
		}

		misc.hidePortal();

		misc.event.endEvent(Date.now());

		var restartAction = function () {
			ui.toggleLoader();
			BS.device.restart();
		};

		if (mm.getApp('liveTv')) mm.getApp('liveTv').commitLastChannel().finally(restartAction);
		else restartAction();
	};
	misc.showPortal = function (exclude) {
		exclude = exclude || (BS.skinConfiguration.mmHidesOnSelection ? 'excludeMenu' : 'all');
		if (exclude !== 'excludeInterface')
			(misc.dom.interfacesHolder || $('#interfacesHolder')).show();
		if (exclude === 'excludeMenu') return;
		this.adapterMainMenu.show();
	};
	misc.hidePortal = function (exclude) {
		exclude = exclude || 'all';
		if (exclude !== 'excludeInterface')
			(misc.dom && misc.dom.interfacesHolder || $('#interfacesHolder')).hide();
		if (exclude === 'excludeMenu') return;
		this.adapterMainMenu.hide();
	};
	misc.portalIsHidden = function () {
		return this.dom.interfacesHolder.attr('display') === 'none';
	};
	misc.eventIds = BS.StatisticsModel.StatisticsService.eventIds;

	var jsHeapUsage, sysDate, sysClock;
	var cDate = new Date();
	var lLevel = BS.logger.getLogLevel();

	BS.evMgr.bind('onSystemTimeReady', function () { cDate = new Date(); });

	setInterval(function indefiniteEverySecondIntervalHandler() {
		var nDate;
		if ((nDate = new Date()).getDate() !== cDate.getDate())
			em.dispatch(new BS.Event('DayChange', nDate,
				'Next day event, clock passes midnight'));

		cDate = new Date();
		misc.timeCounter++;
		if (sysDate && misc.timeCounter % 60 === 0) {
			sysDate.update(cDate);
			sysClock.update(cDate);
			lLevel = BS.logger.getLogLevel();
		}

		if (lLevel === 'trace' && misc.timeCounter % 10 === 0) {
			logVersionHeap('trace');
			BS.debugGlobalVariables();
			if (misc.timeCounter % 60 === 0)
				BS.backgroundService.debug();
		}
		if (lLevel === 'debug' && misc.timeCounter % 60 === 0) {
			logVersionHeap('debug');
			BS.debugGlobalVariables();
		}
		if (misc.timeCounter % 60 === 0) logVersionHeap('info');

		var currentApp = am.lastLoaded();
		if (currentApp && mm.getApp(currentApp) && mm.getApp(currentApp).onInterval) {
			mm.getApp(currentApp).onInterval(cDate);
		}
	}, 1000);


	function DateText(dom, format) {
		format = dom.attr('date-format', null, NS.bee) || format;
		this.update = function (dt) {
			dom.text(dt.toFormatedString(format));
		};
	}

	function logVersionHeap(level) {
		try {
			jsHeapUsage = 'usage %s%%/%d.1MB'
				.sprintf(Number(100 * jsHeapUsed / jsHeapMax).toFixed(2),
					jsHeapMax / (1024 * 1024));
		} catch (x) {
			jsHeapUsage = '';
		}
		BS.logger[level]('CLI version: %s, JS heap: %s, UA: %s', BS.CLIENT_VERSION,
			jsHeapUsage, navigator.userAgent);
	}


	function VolumeChangeEvent(command, volume) {
		var ev = this;
		ev.type = 'VolumeChangeEvent';
		ev.handler = 'onVolumeChange';
		ev.data = volume;
		ev.command = command;
		ev.description = 'When volume changes';
	}

	VolumeChangeEvent.prototype = new BS.Event();

	function DeviceUnlockedEvent() { }
	DeviceUnlockedEvent.prototype = {
		type: 'DeviceUnlockedEvent',
		description: 'When user has unlocked locked screen',
		handler: 'onDeviceUnlocked'
	};
	Object.extend(DeviceUnlockedEvent, BS.Event);

	em.bind('onBeeSmartPowerStateChange', function (ev) {
		if (ev.value) {
			BS.logger.info('STANDBY -> POWER ON event @ misc');

		} else {
			BS.logger.info('POWER ON -> STANDBY event @ misc');
			media.stop();

			am.cutOff('liveTv');

			if (misc.event) {
				misc.event.endEvent(Date.now());
			}

			if (!am.lastLoaded('beeSmartLockDialog') && misc.event) {
				misc.event.send(function () {
					mm.getApp('liveTv').commitLastChannel();
				}, true);
			}
		}
	});

	em.bind('onIpChange', function () {
		BS.msgMgr.restart();
	});

	var messageDisplay = BS.MessageDisplay.create();

	var pictureDisplay = new BS.App('pictureDisplay', {
		listenTo: [k.shortcuts]
	});
	pictureDisplay.onInputEvent = function (keyPressedName) {
		var r = pictureDisplay;
		switch (keyPressedName) {
		case 'up':
			r.dom.nextImage();
			break;
		case 'down':
			r.dom.previousImage();
			break;
		case 'back':
			am.pop();
			break;
		case 'ok':
			break;
		}
	};
	pictureDisplay.init = function (caller, pictureList) {
		this.dom.setImages(pictureList);
		this.dom.jumpToFirstImage();
		this.dom.show();
	};


	em.bind('onSubtitleStream', function (e) {
		if (!BeeSmartMain.portalReady) return;
		var ch = mm.getApp('liveTv').getCurrentChannel();
		var iso3Code = BS.portal.user.language.iso3Code;
		var iso2Code = BS.portal.user.language.label;
		var userSetSubtitle = ch ? ch.getCurrentSubtitle() : null;

		if (ch && bsPortal.user.autoSub === true && ch.type !== 'mosaic') {
			var desiredSubtitle = userSetSubtitle || e.data.get(iso3Code)[0]
				|| e.data.get(iso2Code)[0];

			if (desiredSubtitle)
				media.subtitle = desiredSubtitle;
			else if (BS.config.get('Core.client.USE_FALLBACK_FIRST_SUBTITLE')
				&& media.subtitles.length > 1)
				media.subtitle = media.subtitles[1];
			else
				media.subtitle = media.subtitles[0];
		} else if (userSetSubtitle) {
			media.subtitle = userSetSubtitle;
		}
	});

	var audioLangMapping = {'deu': ['de', 'deu', 'ger']};
	em.bind('onAudioStream', function (e) {
		if (!BeeSmartMain.portalReady) return;
		var iso3Code = BS.portal.user.language.iso3Code;
		var iso2Code = BS.portal.user.language.label;
		var ch = mm.getApp('liveTv').getCurrentChannel();
		var userSetAudio = ch ? ch.getCurrentAudio() : null;

		if (ch && bsPortal.user.autoAudio === true && ch.type !== 'mosaic') {
			if (userSetAudio) {
				media.audio = userSetAudio;
				return;
			}
			var desiredLanguages = audioLangMapping[iso3Code] || [iso3Code, iso2Code];
			for (var i = 0; i < desiredLanguages.length; i++) {
				var desiredAudio = e.data.get(desiredLanguages[i]);
				if (desiredAudio.length !== 0) {
					media.audio = desiredAudio[0];
					return;
				}
			}
		} else if (userSetAudio) {
			media.audio = userSetAudio;
		}
	});


	function makeValidPinSynchronization(maybePin, pinType) {
		var pinTypeRange = ['system', 'parental', 'system-of-parent'];
		pinType = pinTypeRange.indexOf(pinType) === -1 ? pinTypeRange[0] : pinType;
		var someUser = pinTypeRange[0] === pinType ? BS.portal.user : BS.users.defaultUser;
		var pinMatches = pinTypeRange[1] === pinType ?
			someUser.compareParentalPinTo(maybePin) :
			someUser.comparePinTo(maybePin);
		BS.logger.trace('ACCESS: Pin validation, Me %s compares %s pin and it %s MATCHES'.sprintf(
			BS.portal.user, pinType, pinMatches ? '' : 'NOT'));
		var url = '/restapi/rest/%d/%d/validate-access'.sprintf(bsRegionId, bsUserId);
		var params = {
			accept: 'json',
			preventEvent: true,
			timeout: 2000,
			data: {
				'pin': maybePin,
				'pin_type': 'system-of-parent' === pinType ? 'parent-user' : pinType
			}
		};
		ui.toggleLoader(true);
		return BS.request.Get(url, params).then(function () {
			if (pinMatches) {
				return q(true);
			}
			BS.logger.debug('ACCESS: updating %s with new pin', someUser);
			if (pinTypeRange[1] === pinType) {
				someUser.parentalPin = maybePin;
			} else {
				someUser.pin = maybePin;
			}
			return q(true);
		}, function (xResponse) {
			if (404 !== xResponse.status) {
				return q(pinMatches);
			}
			return q(false);
		}).finally(function (value) {
			ui.toggleLoader(false);
			return q(value);
		});
	}

	BS.makeValidPinSynchronization = makeValidPinSynchronization;

	function PinCheckDialog() {
		BS.ui.Dialog.apply(this, arguments);
	}

	PinCheckDialog.MODE_UNDEFINED = 0;
	PinCheckDialog.MODE_CHECK_SYSTEM_PIN = 1;
	PinCheckDialog.MODE_CHECK_PARENTAL_PIN = 2;
	PinCheckDialog.prototype = {
		_constructor: PinCheckDialog,
		dom: {},
		isInitialized: null,
		pin: '',
		mode: PinCheckDialog.MODE_UNDEFINED,
		accessGuard: {
			1: {},
			2: {}
		},
		clearInputFields: function () {
			this.dom.dlgPinCheckPinInput.clear();
			this.pin = '';
		},
		init: function (callerAppId, mode, otherStuff) {
			var that = this;
			mode = mode || PinCheckDialog.MODE_CHECK_PARENTAL_PIN;
			BS.ui.Dialog.prototype.init.apply(that, arguments);
			if (!that.isInitialized) {
				var cntSvg = $('#dlgPinCheck').remove().show();
				that.replaceContentWith(cntSvg);
				that.isInitialized = true;
				that.dom.dlgPinCheckPinInput = cntSvg.find('.dlgPinCheckPinInput');
				that.dom.dlgPinCheckInputDesc = cntSvg.find('.dlgPinCheckInputDesc');
				that.dom.dlgPinCheckPinInput = new ui.PasswordField(that.dom.dlgPinCheckPinInput,
					{'maxFieldEntries': maxPinLen});
				that.feedback = new ui.InplaceFeedback(cntSvg.find('.dlgPinCheckMsg'),
					{autoHide: 1000});
				that.accessGuard[1] = new BeeSmartMain.AccessGuard();
				that.accessGuard[2] = new BeeSmartMain.AccessGuard();
			}

			bsPortal.user.rating = bsPortal.user.defaultAgeRating;
			that.setMode(mode);
			var accessGuard = this.accessGuard[mode];
			if (accessGuard.isFalseGuessing())
				that.feedback.reinit();
			that.args = otherStuff || false;
			that.clearInputFields();
		},
		setMode: function (mode) {
			this.mode = mode;
			var title = null;
			switch (this.mode) {
			case PinCheckDialog.MODE_CHECK_PARENTAL_PIN:
				title = tr('Parental_control');
				this.dom.dlgPinCheckInputDesc.svg(tr('Plese_insert_parental_pin'));
				break;
			case PinCheckDialog.MODE_CHECK_SYSTEM_PIN:
				title = tr('user_control_header');
				this.dom.dlgPinCheckInputDesc.svg(tr('plese_insert_user_pin'));
				break;
			}
			this.update({title: title});
		},
		onInputEvent: function (key) {
			var that = this;
			var _super = BS.ui.Dialog.prototype.onInputEvent.bind(this);
			var acsGrd = that.accessGuard[that.mode];
			if (that.lock)
				return;

			switch (key) {
			case 'blue':
				if (acsGrd.isFalseGuessing())
					break;
				that.clearInputFields();

				break;
			case 'left':
			case 'back':
				BS.ui.Dialog.prototype.onInputEvent.call(this, key);

				break;
			case 'ok':
				var pinInp = that.pin;
				var mode = that.mode;
				that.clearInputFields();
				if (acsGrd.isFalseGuessing())
					return;

				makeValidPinSynchronization(pinInp, ['parental', 'system', 'parental'][mode])
					.then(function (pinMatches) {
						if (pinMatches) {
							acsGrd.resetProperties();
						} else {
							if (acsGrd.recordWrongAttempt().isFalseGuessing()) {
								that.feedback
									.setProperties({autoHide: undefined})
									.show('errSmall', makeMessage(acsGrd.lockoutTime));
								acsGrd.resetPropertiesAfter(that.feedback.hide);
								acsGrd.startLock(function () {
									that.feedback.updateText(makeMessage(acsGrd.lockoutTime));
								});
							} else
								that.feedback.setProperties({autoHide: 2000});
							throw {message: tr('pinInvalid')};
						}
					})
					.then(function () {
						var dfr = q.defer();
						that.lock = false;
						if (
							mode === PinCheckDialog.MODE_CHECK_PARENTAL_PIN &&
							(!am.isLoaded('Settings') || am.isLoaded('EpgMatrixView'))
						) {
							bsPortal.user.unlockParentalControl();
						}
						_super('ok', pinInp, that.args || true, dfr.resolve);
						return dfr.promise;
					})
					.catch(function (xRes) {
						that.lock = false;
						var msg = xRes.message || tr('UNKNOWN_ERROR');
						if (xRes instanceof Error || xRes instanceof BS.request.Result) {
							BS.logger.log(xRes);
							msg = tr('UNKNOWN_ERROR');
						}
						that.feedback.show('errSmall', msg);
					})
					.done();

				break;
			case 'epg':

				break;
			default:
				if (acsGrd.isFalseGuessing())
					return;

				if ((key === '0' || parseInt(key)) && that.pin.length <= maxPinLen) {
					that.pin += key;
					that.dom.dlgPinCheckPinInput.push(that.pin.length);
				}
				break;
			}

			function makeMessage(value) {
				return '%s %s %s'.sprintf(tr('LockedWait'), value, tr('s'));
			}
		},
		destroy: function () {
			this.hide();
			this.mode = PinCheckDialog.MODE_UNDEFINED;
		}
	};
	Object.extend(PinCheckDialog, BS.ui.Dialog);

	var pinCheckDialog = new PinCheckDialog(
		'pinCheckDialog',
		{
			type: 'popup',
			listenTo: [BS.InputManager.keyGroups.shortcuts],
			helpId: 'parentalControl_popUp',
			inputMapper: BS.App.portalDirectionKeyMapper
		},
		{
			x: 409.5,
			y: 235,
			width: 462.5,
			height: 270,
			layer: '#dialogs_layer3',
			buttons: [
				['back', 'back'],
				['blue', 'reset_field'],
				['confirm', 'ok']
			],
			exitKeys: ['back', 'left', 'ok'],
			onBeforeExit: function () {
				return true;
			}
		}
	);


	var numberPicker = new BS.App('NumberPicker', {type: 'popup'});
	numberPicker.onInputEvent = function (keyPressedName) {
		switch (keyPressedName) {
		case 'back':
			am.pop();

			break;
		case 'ok':
			this.action(this.number);

			break;
		default:
			if (keyPressedName.match(/[0-9]/g) === null)
				return;
			this.cancelTimer();

			if (this.number.length < this.maxDigits) {
				this.timeoutID = setTimeout(function () {
					this.action(parseInt(this.number, 10));
				}.bind(this), 1500);

				this.number += keyPressedName;
				this.dom.setChannelNum.trigger('beginEvent', {'chanNum': this.number
					.toLocaleString(languageCode)});
			} else {
				this.action(parseInt(this.number, 10));
			}

			break;
		}
	};

	numberPicker.action = function (number) {
		var cn = parseInt(number, 10);
		this.cancelTimer();
		this.actionCallback(cn);
		if (am.isLoaded('NumberPicker'))
			am.pop();
		if (am.lastLoaded('tvMosaics') && !(mm.getApp('liveTv').getCurrentChannel()
			instanceof BeeSmartMain.MosaicChannel)) {
			am.pop();
		}
	}.bind(numberPicker);

	numberPicker.init = function (callerApp, keyPressedName, actionCallback) {
		this.actionCallback = actionCallback || function () {};
		this.maxDigits = BS.skinConfiguration.maxChannelDigits;

		this.dom.showPanel();
		this.dom.clearPanel();
		this.timeoutID = null;
		this.number = '';
		this.onInputEvent(keyPressedName);
	};

	numberPicker.destroy = function () {
		this.number = '';
		this.dom.hidePanel();
		this.cancelTimer();
	};

	numberPicker.startup = function () {
		this.dom = new $.ModuleDom(
			[
				'channelNum', 'channelNumBox', 'channelNumBoxShow', 'channelNumBoxHide',
				'setChannelNum'
			],
			{
				showPanel: function () {
					this.channelNumBox.show();
					this.channelNumBoxShow.begin();
				},
				hidePanel: function () {
					this.channelNumBoxHide.begin(function () {
						this.channelNumBox.hide();
					}.bind(this));
				},
				clearPanel: function () {
					this.channelNum.text(' ');
				}

			}
		);
	};

	numberPicker.cancelTimer = function () {
		if (this.timeoutID !== null) {
			clearTimeout(this.timeoutID);
			this.timeoutID = null;
		}
	}.bind(numberPicker);

	BS.evMgr.bind('onUserParentalStatusChange', function () {
		var bss = BS.BeeSmartSettings;

		if (bsPortal.user.isParentalyUnlocked()) {
			bss.nodeParentalControl.appendChild(
				new bss.SettingNode(
					'resetParentalLock',
					'resetParentalLockDesc',
					['defaultUser', 'subUser'],
					1,
					BS.modMgr.getApp('resetParentalLock')
				)
			);
		} else {
			bss.nodeParentalControl.removeChild('resetParentalLock');
		}
	});
	var resetParentalLock = new BS.App('resetParentalLock');
	resetParentalLock.init = function () {
		bsPortal.user.resetParentalControl();
		am.pop();
		am.pop();
		BS.modMgr.getApp('Settings').pushSelectedApp();
	};


	function BeeSmartExitEvent() {
		var ev = this;
		ev.type = 'BeeSmartExit';
		ev.handler = 'onBeeSmartExit';
		ev.description = 'When BeeSmart will restart';
	}

	BeeSmartExitEvent.prototype = new BS.Event();


	function FreshContentEvent(contentType, data) {
		var ev = this;
		var types = {
			'channels': 'onChannelsChanged',
			'epg': 'onEpgChanged',
			'configuration': 'onConfigurationChanged',
		};
		ev.type = 'FreshContentEvent';
		ev.data = data || null;
		ev.handler = types[contentType];
		ev.description = null;
	}

	FreshContentEvent.prototype = new BS.Event();
	BS.FreshContentEvent = FreshContentEvent;

	var BeeSmartMain = new BS.Module({id: 'BeeSmartMain', isDefault: true});

	BeeSmartMain._dfrTvLib = q.defer();
	BeeSmartMain.registerTvLib = function (TvLibraryClass) {
		var libInstance = new TvLibraryClass;
		if (libInstance instanceof BeeSmartMain.TvLibrary) {
			var notifyAvailability = !!BeeSmartMain.tvLibrary;
			BeeSmartMain.tvLibrary = libInstance;
			if (notifyAvailability)
				BeeSmartMain._dfrTvLib.resolve(libInstance);
			return;
		}
		throw new Error("ERROR! .registerTvLib() can only register instance of TvLibrary class!");
	};

	BeeSmartMain.getInstanceAvailabilityPromiseOf = function (type) {
		if (type === 'TvLibrary')
			return BeeSmartMain._dfrTvLib.promise;
		return q(undefined);
	};


	BeeSmartMain.portalReady = false;
	BS.BeeSmartMain = BeeSmartMain;

	var startDrivingKeys = function (keys) {
		keys = keys.replace(/ /g, '');
		keys = keys.toUpperCase().split(';');


		BS.inputManager.remoteControlEnabled = false;
		BS.logger.info('locked external input (remote). Starting key simulation...');

		var currentPause = 1000,
			i = 0,
			repetitions = 0,
			translateKeyArray = {
				'OK': 'ok', 'GRN': 'green', 'RED': 'red', 'YEL': 'yellow',
				'BLU': 'blue', 'LFT': 'left', 'UP': 'up', 'RGT': 'right',
				'DWN': 'down', 'BCK': 'back', 'PLY': 'play',
				'REW': 'rew', 'FW': 'fw', 'STP': 'stop', 'MUT': 'mute',
				'VUP': 'volup', 'VDN': 'voldown', 'TXT': 'text', 'REC': 'record',
				'INF': 'info', 'PWR': 'power', 'BEG': 'toBegin', 'CHD': 'chDown',
				'CHU': 'chUp', 'SPC': 'space', 'DEL': 'delete', 'KBD': 'keyboard'
			},
			moduleShortcuts = {
				'EPG': {'BSSupported': true, 'appId': 'epg'},
				'FST': {'BSSupported': true, 'appId': 'fsTV'},
				'GAM': {'BSSupported': true, 'appId': 'games'},
				'RAD': {'BSSupported': true, 'appId': 'radio'},
				'MNU': {'BSSupported': true, 'appId': 'menu'},
				'DVR': {'BSSupported': true, 'appId': 'dvr'},
				'STG': {'BSSupported': false, 'appId': 'Settings'},
				'VOD': {'BSSupported': false, 'appId': 'Vod'},
				'STV': {'BSSupported': false, 'appId': 'tvPanel'},
				'APP': {'BSSupported': false, 'appId': 'Applications'},
				'BIL': {'BSSupported': false, 'appId': 'Bills'},
				'PRM': {'BSSupported': false, 'appId': 'Promotions'},
				'HLP': {'BSSupported': false, 'appId': 'sidebar_helpmenu'},
				'WWW': {'BSSupported': true, 'appId': 'www'},
				'INF': {'BSSupported': true, 'appId': 'info'},
				'VOI': {'BSSupported': false, 'appId': 'voip'},
				'CHT': {'BSSupported': false, 'appId': 'contactsMain'},
				'SRC': {'BSSupported': false, 'appId': 'searchResults'}
			};

		if (keys[0].indexOf('DLY,') !== -1) {
			currentPause = parseInt(
				keys[0].substring(
					keys[0].indexOf('DLY,') + 4,
					keys[0].length
				)
			);
			if (isNaN(currentPause))
				currentPause = 1000;

			i++;

			BS.logger.info('[KeyPressEvent] delay set to ' + currentPause);
		}

		var translateKey = function (keyToTranslate) {
			if (keyToTranslate.length === 1)
				return keyToTranslate.toLowerCase();
			else if (keyToTranslate.indexOf('NU') === 0)
				return keyToTranslate[2];
			else if (keyToTranslate.indexOf('LE') === 0)
				return keyToTranslate[2].toLowerCase();
			return translateKeyArray[keyToTranslate];
		};

		var keyDriver = null;
		keyDriver = function () {
			var cKey = keys[i];

			if (i < keys.length && cKey.indexOf('DLY,') !== -1 && repetitions === 0) {
				currentPause = parseInt(
					cKey.substring(
						cKey.indexOf('DLY,') + 4,
						cKey.length
					)
				);

				if (isNaN(currentPause))
					currentPause = 1000;
				cKey = '';
				BS.logger.info('[KeyPressEvent] delay set to ' + currentPause);

			} else if (cKey.indexOf(',') !== -1) {
				repetitions = parseInt(
						cKey.substring(
							cKey.indexOf(',') + 1,
							cKey.length
						)
					) - 1;
				keys[i] = cKey.substring(0, cKey.indexOf(','));
				cKey = keys[i];

			}

			if (cKey.length > 0) {
				BS.logger.info('[KeyPressEvent] simulating key ' + cKey);
				if (cKey.toLowerCase() === 'pwr') {
					var pwr = BS.powerManager.powerMap;
					pwr.onPowerKey();
				} else if (moduleShortcuts[cKey]) {
					var shortcut = moduleShortcuts[cKey];
					if (shortcut.BSSupported)
						am.keyPressHandler(shortcut.appId);
					else {
						if (!shortcut.appId || !mm.appExists(shortcut.appId)) {
							BS.logger.info('Application ' + shortcut.appId + ' doesn\'t exists');
						} else {
							am.cutOff('liveTv');
							misc.adapterMainMenu.showCModule(shortcut.appId);
						}
					}
				} else
					am.keyPressHandler(translateKey(cKey));
			}

			if (repetitions === 0) {
				i++;
			} else {
				repetitions--;
			}
			if (i < keys.length)
				setTimeout(keyDriver, currentPause);
			else {
				BS.inputManager.remoteControlEnabled = true;
				BS.logger.info('[KeyPressEvent] key simulation complete! External keys input ' +
					'(remote) re-enabled !!!!');
			}

		};

		keyDriver();
	};

	BS.msgMgr.registerMsgType('KeyPressEvent');
	BS.evMgr.bind('msg:onKeyPressEvent', function (ev) {
		BS.logger.info('[KeyPressEvent] started');
		var message = ev.data,
			keys = message.body.keyPressSequence;

		startDrivingKeys(keys);
	});

	BS.msgMgr.registerMsgType('Generic');
	BS.evMgr.bind('msg:onGeneric', function (ev) {
		var msg = ev.data.body, parts;
		if (
			typeof msg === 'string' && (parts = msg.match('^Core.Client.LOG_LEVEL=(' +
				BS.logger.modes.join('|') + ')$'))
		) {

			BS.evMgr.dispatch(new BS.config.ConfigChangeEvent({
				'Core.Client.LOG_LEVEL': {
					oldValue: BS.config.get('Core.Client.LOG_LEVEL'),
					newValue: parts[1]
				}
			}));
			ev.stopPropagation();
		}
	});
	var onUnlockBinder = null;
	BS.evMgr.bind('msg:onGeneric', function showMessageDisplay(ev) {
		if (BS.media.isTeletextShown()) {
			setTimeout(showMessageDisplay.bind(this, ev), 1000);
			return;
		}
		if (BS.device.power !== 'on' || BS.appMgr.isLoaded(beeSmartLockDialog)) {
			BS.logger.trace('Event:msg:onGeneric Message queued to be shown after device unlock');
			messageDisplay.enqueue(ev.data);
			if (onUnlockBinder === null) {
				onUnlockBinder = BS.evMgr.bind('onDeviceUnlocked', function () {
					am.push(messageDisplay);
					onUnlockBinder.unbind();
					onUnlockBinder = null;
				});
			}
		} else if (!am.isLoaded(messageDisplay))
			am.push(messageDisplay, ev);
		else
			messageDisplay.enqueue(ev.data);
	});

	BS.msgMgr.registerMsgType('CommandInvoke');
	BS.evMgr.bind('msg:onCommandInvoke', function (ev) {
		var msgBody = ev.data.body;
		if ([
				'channels-order-change',
				'channels-favorite-change',
				'recordings-change',
				'channel-name-change',
				'channels-number-change',
				'reboot-device',
				'restart-device'
			].indexOf(msgBody.command) !== -1)
			return;

		if (!msgBody.command || (!msgBody.arguments || !msgBody.arguments.length
			|| msgBody.arguments[0].length === 0)
		) {
			var reason = !msgBody.command ? 'command' : 'argument';
			BS.logger.info('CommandInvoke wont be propagated since no ' + reason + ' supplied !');
			ev.stopPropagation();
			return;
		}
	});

	BS.evMgr.bind('msg:onCommandInvoke', function (ev) {
		var msgBody = ev.data.body;
		var liveTv = mm.getApp('liveTv');
		if (msgBody.command === 'refresh_channel_list') {
			var channelBeforeUpdate = mm.getApp('liveTv').getCurrentChannel();
			BeeSmartMain.tvLibrary.update().then(function (success) {
				if (success && channelBeforeUpdate){
					liveTv.setCurrentChannel(BeeSmartMain.tvLibrary
						.getChannelById(channelBeforeUpdate.id));
				}
			}).done();
		} else if (msgBody.command === 'reboot-device') {
			BS.logger.info('received reboot-device command, restarting ekioh process...');
			BS.device.restart();

		} else if (msgBody.command === 'restart-device') {
			BS.logger.info('received restart-device command, restarting STB...');
			liveTv.commitLastChannel().finally(function () {
				BS.device.reboot();
			});
		}
	});

	BS.evMgr.bind('msg:onCommandInvoke', function (ev) {
		var msgBody = ev.data.body;
		if (msgBody.command === 'push-application') {
			var appId = msgBody.arguments[0],
				app = mm.appExists(appId) && mm.isAppAllowed(appId) ? mm.getApp(appId) : false,
				resetStack = msgBody.arguments[1] || false,
				arg1 = msgBody.arguments[2] || null,
				arg2 = msgBody.arguments[3] || null,
				arg3 = msgBody.arguments[4] || null,
				arg4 = msgBody.arguments[5] || null;

			if (!app) {
				BS.logger.info('App ' + appId + ' not found or not allowed !!!');
				return;
			}

			if (eval(resetStack))
				am.cutOff('liveTv');

			BS.logger.info('Pushing app ' + appId);

			am.push(app, arg1, arg2, arg3, arg4);
		}
		return;

	});

	BS.evMgr.bind('msg:onCommandInvoke', function (ev) {
		var msgBody = ev.data.body;
		if (msgBody.command === 'generate-input') {
			if (msgBody.arguments) {
				var keys = msgBody.arguments.join(',');
				startDrivingKeys(keys);
			} else {
				BS.logger.info('Cannot simulate keys, arguments not present!');
			}
		}
		return;
	});


	var AccessGuard = function (p) {
		this._setProps(p);
	};
	AccessGuard.prototype = {
		lockoutTime: null,
		incorrectEntries: null,
		lastEntry: null,
		expiredLockTime: null,
		isFalseGuessing: function () {
			return null !== this.incorrectEntries && this.incorrectEntries <= 0;
		},
		recordWrongAttempt: function () {
			if (this.lastEntry && (this.lastEntry + (this.lockoutTime * 1000)) < Date.now())
				this.incorrectEntries = BS.config.get('Core.Client.Pin.MAX_FAILED_ATTEMPTS');
			else
				this.incorrectEntries = this.incorrectEntries - 1;
			this.lastEntry = Date.now();
			return this;
		},
		resetPropertiesAfter: function (callback) {
			var that = this;
			callback = callback || function () {
			};
			setTimeout(function () {
				that.deleteLock();
				that.resetProperties();
				callback();
			}, that.lockoutTime * 1000);
		},
		startLock: function (callback) {
			callback = callback || function () {
				};
			var that = this;
			this.expiredLockTime = setInterval(function () {
				that.lockoutTime = that.lockoutTime - 1;
				callback();
			}, 1000);
		},
		deleteLock: function () {
			if (this.expiredLockTime !== null) {
				clearInterval(this.expiredLockTime);
				this.expiredLockTime = null;
			}
		},
		resetProperties: function () {
			this.lastEntry = null;
			this.lockoutTime = BS.config.get('Core.Client.Pin.LOCK_PERIOD');
			this.incorrectEntries = BS.config.get('Core.Client.Pin.MAX_FAILED_ATTEMPTS');
		},
		_setProps: function _setProps(p) {
			p = p || {
					lockoutTime: BS.config.get('Core.Client.Pin.LOCK_PERIOD'),
					incorrectEntries: BS.config.get('Core.Client.Pin.MAX_FAILED_ATTEMPTS')
				};
			if ('lockoutTime' in p)
				this.lockoutTime = p.lockoutTime;
			if ('incorrectEntries' in p)
				this.incorrectEntries = p.incorrectEntries;
		}
	};
	BeeSmartMain.AccessGuard = AccessGuard;

	var MenuListDialog = function () {
		var callingModule = arguments[0],
			appDetails = arguments[1],
			properties = arguments[2],
			recenterx = false,
			recentery = false
			;
		if (!appDetails) {
			appDetails = {
				type: 'popup',
				listenTo: [BS.InputManager.keyGroups.shortcuts],
				inputMapper: BS.App.portalDirectionKeyMapper
			};
		}
		if (properties) {
			if (typeof properties.x === 'undefined') {
				properties.x = 390;
				recenterx = true;
			}
			if (typeof properties.y === 'undefined') {
				properties.y = 185;
				recentery = true;
			}
			if (typeof properties.width === 'undefined') properties.width = 500;
			else if (recenterx) properties.x = 390 - (properties.width - 500) / 2;
			if (typeof properties.height === 'undefined') properties.height = 350;
			else if (recentery) properties.y = 185 - (properties.height - 350) / 2;
			if (typeof properties.layer === 'undefined') properties.layer = '#dialogs_layer2';
			if (typeof properties.buttons === 'undefined') {
				properties.buttons = [
					['back', 'back'],
					['vertical', 'upDown'],
					['right', 'sel./unsel.'],
					['confirm', 'confirm']
				];
			}
			if (typeof properties.exitKeys === 'undefined')
				properties.exitKeys = ['back', 'left', 'ok'];
		}
		BS.ui.Dialog.apply(this, [callingModule, appDetails, properties]);
	};
	MenuListDialog.prototype = {
		dom: null,
		isInitialized: null,
		isMultipleSelection: false,
		init: function (title, isMultipleSelection, selectorElements) {
			var that = this;
			selectorElements = selectorElements || {};
			that.isMultipleSelection = !!isMultipleSelection;
			BS.ui.Dialog.prototype.init.apply(that, arguments);
			that.dom = that.dom || domInit(selectorElements);

			if (title) this.update({title: title});

			if (that.isMultipleSelection) {
				this.update({
					buttons: [
						['back', 'back'],
						['vertical', 'upDown'],
						['right', 'sel./unsel.'],
						['confirm', 'confirm']
					]
				});
			} else {
				this.update({
					buttons: [
						['back', 'back'],
						['vertical', 'upDown'],
						['empty', null],
						['confirm', 'confirm']
					]
				});
			}

			function domInit(elms) {
				var dialogId = elms.holder || 'menuListDialog';
				var selectorCls = elms.selector || 'menu_list_dialog_selector';
				var menuListDialogSelectionIcon = elms['selection_icon'] ||
					'menuListDialogSelectionIcon';

				var cntSvg = $('#' + dialogId).clone(true).attr('id', dialogId + '_cloned').show();
				var standardSelectorRect = cntSvg.find('.standardSelectorRect');
				that.replaceContentWith(cntSvg);
				that.isInitialized = true;

				return {
					selectorHeight: cntSvg.attr('height') || that.props.height - 100,
					mSelector: cntSvg.find('.' + selectorCls),
					mSelectorIcon: $('#' + menuListDialogSelectionIcon),
					selectorWidth: that.props.width - 70 - standardSelectorRect.attr('x') * 2
				};
			}
		},
		onInputEvent: function (keyPressedName) {
			var that = this,
				info = this.actionMenu ? this.actionMenu.currentInfo() : null;

			if (!info) {
				BS.ui.Dialog.prototype.onInputEvent.call(this, 'back', null, null);
				return;
			}

			var action = this.actionMenu.currentInfo().key,
				onCallback = this.actionMenu.currentInfo().callback || function () {
					};

			switch (keyPressedName) {
			case 'right':
				if (that.isMultipleSelection)
					this.switchPopupItemSelection(this.actionMenu.selectorIndex());
				break;
			case 'back':
			case 'left':
				BS.ui.Dialog.prototype.onInputEvent.call(this, keyPressedName, null, action);
				this.actionMenu.showFocus();
				break;
			case 'ok':
				this.actionMenu.showFocus();
				BS.ui.Dialog.prototype.onInputEvent.call(this, keyPressedName, null, action,
					onCallback);

				break;
			case 'up':
			case 'down':
				this.actionMenu[keyPressedName === 'up' ? 'previous' : 'next']();
				break;
			}
		},
		fillActionMenu: function (list, svgText, jumpToIndex, useCalculatedHeight) {
			var that = this,
				items = [],
				infos = [];
			svgText = svgText || '';
			jumpToIndex = jumpToIndex || 0;
			useCalculatedHeight = useCalculatedHeight === undefined ? true : useCalculatedHeight;

			if (!that.aMenu) {
				that.aMenu = new ui.Menu(that.dom.mSelector);
				if (useCalculatedHeight) {
					that.aMenu.setMenuHeight(that.dom.selectorHeight);
				}
			}

			if (svgText === '') {
				for (var i in list) {
					var checkMarkIcon = null;
					if (list[i].selected === 1)
						checkMarkIcon = that.getSelectionImage(true);
					else if (list[i].selected === 2)
						checkMarkIcon = that.getPendingImage(true);
					items.push(ui.template('menuListDialogTemplate',
						{
							'imageLink': list[i].imageLink ? list[i].imageLink : '',
							'iconLink': list[i].iconLink ? list[i].iconLink : '',
							'name': list[i].name.constructor === String ?
								list[i].name.encodeEntities() : list[i].name,
							'checkedLink': checkMarkIcon,
							'textWidth': that.dom.selectorWidth
						}));
					infos.push(list[i]);
				}
			} else {
				items = svgText;
				infos = list;
			}
			if (!that.actionMenu) {
				that.actionMenu = that.aMenu.newMenuItems();
				that.actionMenu.setItems(items, infos);

			} else
				that.actionMenu.setItems(items, infos);

			that.actionMenu.jump(jumpToIndex, true);
			that.actionMenu.show();

		},
		switchPopupItemSelection: function (selectorIndex) {
			var info = this.actionMenu.currentInfo(),
				that = this;
			info.selected = !info.selected;
			that.dom.mSelectorIcon.trigger('changeSelectionIcon',
				{
					'selectorIndex': selectorIndex,
					'newIcon': that.getSelectionImage(info.selected)
				});
		},
		setActionBar: function (actions) {
			this.actionBar.set(actions);
		},
		getSelectionImage: function (selected) {
			var imageLink = '';
			if (selected)
				imageLink = '#okBigBlack';
			return imageLink;
		},
		getPendingImage: function (pending) {
			var imageLink = '';
			if (pending)
				imageLink = '#pending';
			return imageLink;
		}
	};

	MenuListDialog.Exception = function (type) {
		this.type = type;
	};
	MenuListDialog.Exception.prototype = {
		type: '',
		message: '',
		Class: 'MenuListDialog'
	};

	Object.extend(MenuListDialog, BS.ui.Dialog);
	BeeSmartMain.MenuListDialog = BS.MenuListDialog = MenuListDialog;

	var ActionItem = function (p) {
		this._setProps(p);
	};

	ActionItem.prototype = {
		key: null,
		iconLink: '#',
		imageLink: null,
		name: null,
		selected: null,
		callback: function () {
		},
		_setProps: function _setProps(p) {
			p = p || {};
			if ('key' in p)            this.key = p.key;
			if ('iconLink' in p)    this.iconLink = p.iconLink;
			if ('imageLink' in p)    this.imageLink = p.imageLink;
			if ('name' in p)        this.name = p.name;
			if ('selected' in p)    this.selected = p.selected;
			if ('callback' in p)    this.callback = p.callback;
		}
	};

	BeeSmartMain.MenuListDialog.ActionItem = ActionItem;

	var ActionList = function (p) {
		this._setProps(p);
	};

	ActionList.prototype = {
		list: [],
		data: [],
		_setProps: function _setProps(p) {
			p = p || {list: [], data: []};
			if ('list' in p)    this.list = p.list;
			if ('data' in p)    this.data = p.data;
		},
		addActionItem: function (item) {
			if (item && item instanceof ActionItem) {
				for (var i in this.list) {
					var it = this.list[i];
					if (it.key === item.key) {
						BS.logger.info('trying to add actionItem with key, that already exists ! ' +
							it.key);
						return;
					}
				}
			}

			if (item instanceof ActionItem) {
				this.list.push(item);
				return;
			}

			throw new MenuListDialog.Exception('cant-add-action-item');
		},
		removeActionItem: function (item) {
			if (item instanceof ActionItem) {
				for (var i in this.list) {
					if (this.list[i].key !== item.key)
						continue;

					this.list.splice(i, 1);
					return;
				}
			}
		},
		concatActionLists: function (extra) {
			if (extra instanceof ActionList) {
				var currList = this.list;
				this.list = currList.concat(extra.list);
				return;
			}

			throw new MenuListDialog.Exception('cant-combine-action-item-lists');
		},
		getList: function () {
			return this.list;
		},
		setData: function (item) {
			if (item instanceof ActionContent) {
				for (var i in this.data) {
					if (this.data[i].id !== item.id)
						continue;
					this.data[i].obj = item.obj;
					return;
				}
				this.data.push(item);
				return;
			}
		},
		getData: function () {
			return this.data;
		},
		getObjById: function (item) {
			for (var i in this.data) {
				if (this.data[i].id !== item)
					continue;
				return this.data[i].obj;
			}
		}
	};

	BeeSmartMain.MenuListDialog.ActionList = ActionList;

	var ActionContent = function (p) {
		this._setProps(p);
	};

	ActionContent.prototype = {
		id: null,
		obj: {},
		_setProps: function (p) {
			p = p || {};
			if ('id' in p)        this.id = p.id;
			if ('obj' in p)        this.obj = p.obj;
		}
	};

	BeeSmartMain.MenuListDialog.ActionList.ActionContent = ActionContent;

	var InfoDialog = function () {
		var appDetails = null,
			properties = arguments[1];

		if (!appDetails)
			appDetails = {
				type: 'popup',
				listenTo: [BS.InputManager.keyGroups.shortcuts]
			};

		if (properties) {
			if (typeof properties.x === 'undefined') {
				properties.x = 390;
			}
			if (typeof properties.y === 'undefined') properties.y = 185;
			if (typeof properties.width === 'undefined') properties.width = 500;
			if (typeof properties.height === 'undefined') properties.height = 350;
			if (typeof properties.layer === 'undefined') properties.layer = '#dialogs_layer3';
			if (typeof properties.buttons === 'undefined') {
				properties.buttons = [
					['back', 'cancel'],
					['confirm', 'ok']
				];
			}
			if (typeof properties.exitKeys === 'undefined')
				properties.exitKeys = ['back', 'left', 'ok'];
		}

		var newargs = [];
		newargs[0] = arguments[0];
		newargs[1] = appDetails;
		newargs[2] = arguments[1];
		BS.ui.Dialog.apply(this, newargs);
	};

	InfoDialog.prototype = {
		dom: {},
		isInitialized: null,
		init: function (callerAppId, _title, _text) {
			var that = this;
			_title = _title || null;
			_text = _text || null;
			BS.ui.Dialog.prototype.init.apply(that, arguments);
			if (!that.isInitialized) {
				var cntSvg = $('#infoDialog').clone(true).attr('id', '').show();
				that.replaceContentWith(cntSvg);
				that.isInitialized = true;
				that.dom.textField = cntSvg.find('.infoDialogText');
			}
			this.updateText(_text);
			var bbox = that._dom.content.filterByClass('.content').first()[0].getBBox(),
				newHeight = bbox ? bbox.y + bbox.height + 120 : null,
				newY = newHeight ? (720 - newHeight) / 2 : null;

			this.update({height: newHeight, y: newY, title: _title}, true);
		},
		getText: function () {
			return this.dom.textField.svg();
		},
		updateText: function (newText) {
			this.dom.textField.svg(newText.escapedBeeText());
		}
	};

	Object.extend(InfoDialog, BS.ui.Dialog);
	BeeSmartMain.InfoDialog = InfoDialog;


	var PinExpiredDialog = function (appId, isAutologin) {
		BS.ui.Dialog.call(
			this,
			appId,
			{
				type: 'popup',
				helpId: 'pinExpired',
				listenTo: [BS.InputManager.keyGroups.shortcuts],
				inputMapper: BS.App.portalDirectionKeyMapper
			},
			{
				x: 490,
				y: 245,
				width: 300,
				height: 230,
				layer: '#dialogs_layer0',
				buttons: isAutologin ?
					[
						[null, null],
						['confirm', 'ok']
					] : [
					['back', 'cancel'],
					['confirm', 'ok']
				],
				exitKeys: ['back', 'left', 'ok']
			}
		);
	};
	PinExpiredDialog.pinToggle = 0;
	PinExpiredDialog.oldPinNumber = '';
	PinExpiredDialog.prototype = {
		dom: {
			markOldPinHolder: function () {
				this.pinExpiredNewPinSelector.removeClass('selected').addClass('unselected');
				this.pinExpiredOldPinSelector.removeClass('unselected').addClass('selected');
			},
			markNewPinHolder: function () {
				this.pinExpiredOldPinSelector.removeClass('selected').addClass('unselected');
				this.pinExpiredNewPinSelector.removeClass('unselected').addClass('selected');
			},
			unblurrOldPin: function () {
				this.oldPinHolder.removeClass('blurred');
			},
			blurrOldPin: function () {
				this.oldPinHolder.addClass('blurred');
			},
			clearNewPinInputField: function () {
				this.pinExpiredNewPin.text('');
			},
			clearInputFields: function () {
				this.pinExpiredOldPin.clear();
				PinExpiredDialog.oldPinNumber = '';
			}
		},
		isInitialized: null,
		init: function (caller, continuation, usr) {
			var that = this;
			that.changeSuccesful = false;
			that.continuation = continuation;
			that.cUser = usr ? usr : bsPortal.user;

			BS.ui.Dialog.prototype.init.apply(that, arguments);

			if (!that.isInitialized) {
				var cntSvg = $('#pinExpiredDialog').remove().show();
				that.replaceContentWith(cntSvg);
				that.isInitialized = true;
				that.dom.oldPinHolder = cntSvg.find('.oldPinHolder');
				that.dom.newPinHolder = cntSvg.find('.newPinHolder');
				that.dom.pinExpiredNewPinSelector = cntSvg.find('.pinExpiredNewPinSelector');
				that.dom.pinExpiredOldPinSelector = cntSvg.find('.pinExpiredOldPinSelector');
				that.dom.pinExpiredNewPin = cntSvg.find('.pinExpiredNewPin');
				that.dom.pinExpiredNewPin.text('');
				that.dom.pinExpiredOldPin = cntSvg.find('.pinExpiredOldPin');
				that.dom.pinExpiredOldPin = new ui.PasswordField(that.dom.pinExpiredOldPin,
					{'maxFieldEntries': maxPinLen});
				that.alert = new BS.ui.Alert({autoHide: 2500});
				that.update({title: tr('pinExpired')});
			}

			that.dom.clearNewPinInputField();
			that.dom.clearInputFields();

			if (that.cUser.isAutoLoginEnabled) {
				that.pinToggle = 0;
				that.dom.markOldPinHolder();
				that.dom.unblurrOldPin();
			} else {
				that.pinToggle = 1;
				that.dom.markNewPinHolder();
				that.dom.blurrOldPin();
			}
		},
		onInputEvent: function (keyPressedName) {
			var Super = BS.ui.Dialog.prototype.onInputEvent.bind(this, keyPressedName, null, null);
			var that = this;
			switch (keyPressedName) {
			case 'right':
				that.dom.clearNewPinInputField();
				that.dom.clearInputFields();

				break;
			case 'back':
			case 'left':
				if (!that.cUser.isAutoLoginEnabled) Super();
				break;
			case 'up':
			case 'down':
				if (that.cUser.isAutoLoginEnabled) {
					that.pinToggle = (that.pinToggle === 0) ? 1 : 0;
					if (that.pinToggle === 0) that.dom.markOldPinHolder();
					else that.dom.markNewPinHolder();
				}
				break;
			case 'ok':
				var newPin = that.dom.pinExpiredNewPin.text();
				var url = '/restapi/rest/%d/%d/profiles'.sprintf(that.cUser.regionId,
					that.cUser.userId);

				if (
					!that.cUser.comparePinTo(PinExpiredDialog.oldPinNumber) &&
					that.cUser.isAutoLoginEnabled
				) {
					that.alert.show(tr('startup_wrongPin'));
					that.dom.clearInputFields();
					that.pinToggle = 0;
					that.dom.markOldPinHolder();
					return;
				}

				if (
					newPin.length < BS.config.get('User.MIN_PIN_SIZE')
					|| newPin.length > maxPinLen
				) {
					that.alert.show(newPin.length < BS.config.get('User.MIN_PIN_SIZE') ?
						tr('passTooShortMinLen') : tr('passTooLongMaxLen'));
					that.dom.clearNewPinInputField();
					that.pinToggle = 1;
					that.dom.markNewPinHolder();
					return;
				}

				BS.request.Put(url, {
						accept: 'json',
						data: {
							'system_pin': newPin,
							'target_user_id': that.cUser.userId
						}
					})
					.then(function () {
						that.alert.show(tr('PINchanged'));
						that.cUser.pin = newPin.md5();
						that.changeSuccesful = true;
						setTimeout(Super, 2500);
					}).catch(function (x) {
						if (x instanceof BS.request.Result) x = tr('UNKNOWN_ERROR');
						that.changeSuccesful = false;
						that.alert.show(x);
					})
					.finally(function () {
						that.dom.clearInputFields();
					});

				break;
			default:
				var number = parseInt(keyPressedName, 10);
				if (isNaN(number) || !(number >= 0 && number < 10))
					break;

				if (that.pinToggle === 1) {
					that.dom.pinExpiredNewPin.text(that.dom.pinExpiredNewPin.text()
						+ keyPressedName);
				} else if (that.pinToggle === 0) {
					if (PinExpiredDialog.oldPinNumber === null) PinExpiredDialog.oldPinNumber = '';
					PinExpiredDialog.oldPinNumber += keyPressedName.toString();
					that.dom.pinExpiredOldPin.push(PinExpiredDialog.oldPinNumber.length);
				}
				break;
			}
		},
		destroy: function () {
			var that = this;
			if (that.changeSuccesful) setTimeout(that.continuation, 0);
			BS.ui.Dialog.prototype.destroy.call(this);
		}
	};
	Object.extend(PinExpiredDialog, BS.ui.Dialog);


	var beeSmartLockDialog = new BS.BeeSmartLockDialog('beeSmartLockDialog');
	beeSmartLockDialog.init = function (caller, continuation, usr) {
		BS.BeeSmartLockDialog.prototype.init.call(this, caller, continuation, usr);
	};


	em.bind('onBeeSmartPowerStateChange', function (ev) {
		if (ev.value) {
			BS.logger.info('STANDBY -> POWER ON event @ beeSmartLockDialog');
			if (!misc.dom) return;
			misc.dom.setVolume(misc.dom.currVolume === null ?
			BS.config.get('Core.Client.DEFAULT_VOLUME') / 100 : 0);

			am.cutOff('liveTv');

			if (bsPortal.user.isAutoLoginEnabled) {
				restoreVideoPlayback();
				return;
			}
			if (!am.isLoaded('beeSmartLockDialog')) {
				am.push(mm.getApp('beeSmartLockDialog'), restoreVideoPlayback);
			}
		}

		function restoreVideoPlayback() {
			var INITIAL_CHANNEL = BS.config.get('Core.Client.INITIAL_CHANNEL');
			var initialChannelName = INITIAL_CHANNEL !== -1 ? INITIAL_CHANNEL : null;
			var chArray = [];
			var liveTv = mm.getApp('liveTv');

			if (!bsPortal.user.isParentalyUnlocked()) {
				BS.logger.debug('LIVETV: Resetting parental unlocked channels')
				BeeSmartMain.tvLibrary.resetTemporaryAcknowledgedChannels();
			}

			if (initialChannelName !== null) {
				chArray = BeeSmartMain.tvLibrary.getChannels().filter(function (chObj) {
					return chObj.originalName === initialChannelName;
				});
			}
			var cChan = chArray[0] || liveTv.getCurrentChannel();
			BS.logger.debug('LIVETV.@onBeeSmartPowerStateChange: Restoring channel based on '
				+ '`Core.Client.INITIAL_CHANNEL` configuration to %s', cChan);
			liveTv.setChannel(cChan);
			BS.evMgr.dispatch(new DeviceUnlockedEvent());
		}
	});


	var connectionErrorDialog = new BS.ui.Dialog(
		'ConnectionErrorDialog',
		{
			listenTo: [BS.InputManager.keyGroups.shortcuts, BS.InputManager.keyGroups.globals],
			inputMapper: BS.App.portalDirectionKeyMapper
		},
		{
			title: tr('ConnectionProblem'),
			modal: false,
			layer: '#dialogs_layer3',
			buttons: [
				['', ''],
				['confirm', 'RestartPortal']
			],
			exitKeys: ['confirm'],
			onBeforeExit: function (key) {
				if (BeeSmartMain.portalReady) {
					if (key === 'ok') {
						if (this.clearErrorDialogTimeout !== null) {
							clearTimeout(this.clearErrorDialogTimeout);
							this.clearErrorDialogTimeout = null;
						}
						this.hide(function () {
							am.cutOff('Misc');
							var liveTv = mm.getModule('Tv').getApp('liveTv');
							am.inContextOf(this).push(liveTv);
							var currCh = liveTv.getCurrentChannel();
							if (currCh instanceof BeeSmartMain.MosaicChannel){
								am.push(mm.getApp('tvMosaics'));
							}
						}.bind(this));
						return false;
					}
					return null;
				}
				this.hide();
				setTimeout(function () {
					try {
						misc.destroy();
					} catch (x) {
					}
				}, 200);

				return null;
			}
		}
	);

	connectionErrorDialog.clearErrorDialog = function () {
		am.cutOff(this.id);
		if ('Misc' !== BS.appMgr.lastLoaded()) am.pop();
		this.hide();
		clearTimeout(this.clearErrorDialogTimeout);
		this.clearErrorDialogTimeout = null;
		setTimeout(function () {
			am.debug();
		}, 1000);
	};

	connectionErrorDialog.init = function () {
		var that = this;
		BS.ui.toggleLoader(false);
		if (that.clearErrorDialogTimeout) {
			that.clearErrorDialog();
			return;
		}
		that.clearErrorDialogTimeout = setTimeout(that.clearErrorDialog.bind(that), 36e5);

		this.__proto__.init.call(connectionErrorDialog);

		this.update({title: tr('ConnectionProblem')});
		this.replaceContentWith($($.parseSvg(
			'<g bee:dialog-center="true" bee:dialog-width="480" bee:dialog-height="250">'
			+ '<textArea width="460" style="font-size:25">'
			+ '<desc>ServerConnectionHasBeenInterrupted</desc>'
			+ '</textArea>'
			+ '</g>',
			true
		)));
		if (BeeSmartMain.portalReady)
			this.update({
				'buttons': [
					['', ''],
					['confirm', 'ReturnToLiveTv']
				]
			});
		if (BS.logger.isGreaterThanDebug())
			setTimeout(function () {
				am.debug();
			}, 1000);
	};


	BS.evMgr.bind('onBeeSmartReady', function () {
		function toOnlineConnected() {
			if (bsPortal.isDisconnected) bsPortal.setOnlineConnected();
			if (am.isLoaded(connectionErrorDialog.toString())){
				connectionErrorDialog.clearErrorDialog();
			}
		}

		function showDialogIfNeeded() {
			q.try(function () {
				function shouldCutOff() {
					return !am.isLoaded('EpgMatrixView')
						&& !am.lastLoaded('MainMenu')
						&& !am.lastLoaded('liveTv')
						&& !am.isLoaded('normalCIB')
						&& !am.isLoaded('EpgColumnView')
						&& !am.isLoaded('audioSubtitleSelection')
						&& !am.isLoaded('channelCategories');
				}

				if (am.isLoaded('liveTv') && !am.isLoaded('vodPlayer')) {
					return shouldCutOff();
				} else if (am.isLoaded('vodPlayer')) {
					var dfr = q.defer();
					var eventRef = em.bind('onVideoPlayerExit', function () {
						dfr.resolve(shouldCutOff());
						eventRef.unbind();
					});
					return dfr.promise;
				}
				return q(true);
			}).then(function (doCutStack) {
				if (doCutStack) {
					if (!am.isLoaded(connectionErrorDialog.toString())){
						am.push(connectionErrorDialog, {requestObj: this});
					}
				}
			});
		}

		function toOnlineDisconnected(ev) {
			var httpStatus = ev.data.status;
			var isDisconnected = BS.request.Result.prototype.isStatusDisconnected
				.bind({status: httpStatus});
			if (isDisconnected() && bsPortal.isOnline) {
				if (BS.skinConfiguration.alwaysShowConnectionErrorDialog === false) {
					showDialogIfNeeded();
				} else {
					if (!am.isLoaded(connectionErrorDialog.toString())){
						am.push(connectionErrorDialog, {requestObj: this});
					}
				}
				bsPortal.setOnlineDisconnected();
			}
		}

		BS.evMgr.bind('onRequestSuccess', toOnlineConnected);
		q.delay(1000).then(function () {
			BS.evMgr.bind('onRequestError', toOnlineDisconnected);
		}).done();
	});


	BeeSmartMain.register(BSlp);
	BeeSmartMain.register(so);
	BeeSmartMain.register(misc);
	BeeSmartMain.register(messageDisplay);
	BeeSmartMain.register(pinCheckDialog);
	BeeSmartMain.register(numberPicker);
	BeeSmartMain.register(pictureDisplay);
	BeeSmartMain.register(resetParentalLock);
	BeeSmartMain.register(connectionErrorDialog);
	BeeSmartMain.register(beeSmartLockDialog);

	function CECManager() {
		var that = this,
			_currentCECHandler = null;

		that.addHandler = function (CECClass) {
			if (typeof CECClass === 'undefined') {
				_currentCECHandler = new that.DefaultCECHandler();
				return;
			}

			var cecInstance = new CECClass();
			if (cecInstance instanceof that.DefaultCECHandler) {
				_currentCECHandler = cecInstance;
				return;
			}

			throw new Error('ERROR! .initializeCEC() can only register instance of ' +
				'DefaultCECHandler class!');
		};

		that.initializeCEC = function () {
			if (_currentCECHandler && _currentCECHandler.checkConditions()) {
				return;
			}

			that.addHandler();
			_currentCECHandler.checkConditions();
		};

		that.tvOn = function () {
			_currentCECHandler.tvOn();
		};

		that.tvOff = function () {
			_currentCECHandler.tvOff();
		};

		that.volumeUp = function () {
			_currentCECHandler.volumeUp();
		};

		that.volumeDown = function () {
			_currentCECHandler.volumeDown();
		};

		that.activeSource = function () {
			_currentCECHandler.activeSource();
		};

		that.getAddress = function () {
			_currentCECHandler.getAddress();
		};

		that.getClassName = function () {
			_currentCECHandler.ClassName;
		};

		that.DefaultCECHandler = function () {
		};
		that.DefaultCECHandler.prototype = {
			ClassName: 'DefaultCECHandler',
			tvOn: function () {
				return true;
			},
			tvOff: function () {
				return true;
			},
			getAddress: function () {
				return '';
			},
			checkConditions: function () {
				BS.logger.info('DefaultCECHandler Condition Checker: Default CEC Present = TRUE, ' +
					'CEC Address = Empty - DefaultCEC in use');
				return true;
			},
			volumeUp: function () {
				return true;
			},
			volumeDown: function () {
				return true;
			},
			activeSource: function () {
				return true;
			}
		};

	}

	BS.cecMgr = new CECManager();
	BS.cecMgr.initializeCEC();


	var lowPowerStateDialog = new BeeSmartMain.InfoDialog(
		'lowPowerStateDialog', {
			buttons: [
				['back', 'cancelSTBGoingToSleep']
			],
			exitKeys: null
		}
	);
	lowPowerStateDialog.countdownTimerIntervalRef = null;
	lowPowerStateDialog.clearStandbyInterval = function () {
		if (lowPowerStateDialog.countdownTimerIntervalRef !== null) {
			clearInterval(lowPowerStateDialog.countdownTimerIntervalRef);
			lowPowerStateDialog.countdownTimerIntervalRef = null;
		}
	};
	lowPowerStateDialog.countdownTimer = 30;
	lowPowerStateDialog.onInputEvent = function (key) {
		if (key === 'back' || key === 'left') {
			am.pop();
			BS.logger.info('User canceled STANDBY countdown');
			return false;
		}
	};
	lowPowerStateDialog.init = function (caller) {
		var tr1 = tr('sleepModeTitle'),
			tr2 = tr('lowPowerStateMsg').sprintf(' 30');
		var that = this;
		InfoDialog.prototype.init.call(that, caller, tr1, tr2);
		that.countdownTimer = 30;
		that.updateText((tr('lowPowerStateMsg').sprintf(' ' + that.countdownTimer)));
		that.clearStandbyInterval();
		that.countdownTimerIntervalRef = setInterval(function () {
			that.updateText((tr('lowPowerStateMsg').sprintf(' ' + (--that.countdownTimer))));
			if (that.countdownTimer === 0) {
				BS.logger.debug('Putting STB into standby mode');
				am.pop();
				BeeSmart.device.power = 'standby';
			}
		}, 1000);
	};
	lowPowerStateDialog.destroy = function () {
		this.clearStandbyInterval();
		this.hide();
	};
	BeeSmartMain.register(lowPowerStateDialog);

	var standbyTimeoutRef = null,
		keydownBindRef = null,
		standbyTimerDelay = null;

	function initializeSleepTimer() {
		var prevVal = standbyTimerDelay;
		try {
			standbyTimerDelay = BS.config.get('Core.Client.SLEEP_TIMER_MINUTES') * 60 * 1000;
		} catch (x) {
			BS.logger.debug(x);
		}
		BS.logger.info('SLEEP_TIMER is set to ' + BS.config.get('Core.Client.SLEEP_TIMER_MINUTES'));

		if (prevVal !== null && standbyTimerDelay !== null && prevVal === standbyTimerDelay) {
			BS.logger.info('wont re-initialize sleep timer: new value and old value are the same!');
			return;
		}

		if (standbyTimeoutRef !== null) {
			clearTimeout(standbyTimeoutRef);
			standbyTimeoutRef = null;
		}
		if (keydownBindRef !== null) {
			keydownBindRef.unbind();
			keydownBindRef = null;
		}

		if (standbyTimerDelay > 0) {
			standbyTimeoutRef = setTimeout(startStandbyCountdown, standbyTimerDelay);
			keydownBindRef = BeeSmart.evMgr.bind('onKeypress', function () {
				if (standbyTimeoutRef !== null) {
					clearTimeout(standbyTimeoutRef);
					standbyTimeoutRef = null;
				}
				standbyTimeoutRef = setTimeout(startStandbyCountdown, standbyTimerDelay);
			});
		} else {
			BS.logger.info('SLEEP_TIMER is DISABLED!');
		}
	}

	em.bind('onBeeSmartLoaded', function () {
		initializeSleepTimer();
	});

	em.bind('onConfigChange', function (ev) {
		if (ev.updated('Core.Client.SLEEP_TIMER_MINUTES') === false)
			return;
		BS.logger.debug('Configuration change: changed Core.Client.SLEEP_TIMER_MINUTES to ' +
			BS.config.get('Core.Client.SLEEP_TIMER_MINUTES'));
		initializeSleepTimer();
	});

	function startStandbyCountdown() {
		BS.logger.debug('Standby popup shown, counting down');
		am.push(lowPowerStateDialog);
	}

	BS.evMgr.bind('msg:onResourceChanged', function resourceChangedHandler(ev) {
		var message = ev.data.body;
		if (message.resource === 'USER_INFO') {
			BS.logger.trace('Event:msg:onResourceChanged USER_INFO Received');
			BS.backgroundService.runOnce(function () {
				const userId = BS.portal.user.userId;
				var url = '/restapi/rest/%s/%s/profiles/%s'.sprintf(BS.regionId, userId, userId);
				return BS.request.Get(url).then(function (response) {
					BS.portal.user.update(response.data.list[0]);
					BS.ui.currentUserAvatar.href = BS.portal.user.avatarLink;
				});
			}, 'User update');
		} else if (message.resource === 'ACTIVE_SUBSCRIPTIONS') {
			BS.logger.trace('Event:msg:onResourceChanged ACTIVE_SUBSCRIPTIONS Received');
			BS.backgroundService.runOnce(function () {
				return BeeSmartMain.subscriptionRepository.initialize().then(function () {
					BS.PurchaseModel.PriceItemFactory.itemCache = {};
					return BeeSmartMain.productRepository.updateAllProductsOfType('live');
				});
			}, 'Active subscriptions and products update');
		}
	});

	BS.evMgr.bind('onConfigChange', function (ev) {
		if (!ev.updated('Core.Client.LOG_LEVEL'))
			return;
		BS.logger.changeLogLevel(BS.config.get('Core.Client.LOG_LEVEL'));
		BS.logger.info('Configuration change: changed LOG LEVEL procedure to '
			+ BS.config.get('Core.Client.LOG_LEVEL'));
	});

	var KeyPressEvent = function (code, key){
		this.data = code;
		this.originalKey = key;
	};
	KeyPressEvent.prototype = {
		type: 'KeyPressEvent',
		handler: 'onKeypress',
		description: 'Keypress event',
		cancelable: false,
		synced: true,
		_defaultAction: function(){
			BS.appMgr.keyPressHandler(this.data, this.originalKey);
		}
	};
	Object.extend(KeyPressEvent, BS.Event);

	document.addEventListener('keydown' , function (e) {
		var kCode = typeof e.keyCode === 'undefined' || e.keyCode === null ? e.charCode : e.keyCode;
		var key;
		var kmObj = BS.inputManager.keyMap;
		if (!BS.inputManager.remoteControlEnabled) {
			BS.logger.info('NOTE: User input is disabled!');
			return;
		}
		if (!kCode) {
			BS.logger.info('ERROR: Invalid key event!');
			return true;
		}

		kCode = (e.ctrlKey ? 'C' : '') + (e.altKey ? 'A' : '') + kCode;
		if ((key = kmObj && kmObj.get(kCode, e)) === false)
			return;
		BS.logger.info('Pressed ' + key + ' (' + kCode + ')');

		var pwrState = BeeSmart.device.power;
		if (pwrState === 'on') {
			BS.evMgr.dispatch(new KeyPressEvent(key, kCode));
		} else if (key !== 'power') {
			BS.logger.info('Ignoring keypress : STB IS IN STANDBY!');
			return;
		}

		if (key === 'power') {
			BS.powerManager.powerMap.onPowerKey();
		}
	}, false);

	BS.evMgr.bind('onBeeSmartReady', function () {
		BS.backgroundService.addTask(function () {
			logVersionHeap('trace');
			gc();
			logVersionHeap('trace');
		}, {
			name: 'GC()',
			interval: 60e3
		});
	});

	BS.evMgr.bind('onPurchasedProductsUpdated', function () {
		if (BeeSmartMain.portalReady) {
			BeeSmartMain.storeService.logPurchasedItems(BeeSmartMain.tvLibrary);
		}
	});

	function InvalidateCacheEvent() { }
	InvalidateCacheEvent.prototype = {
		handler: 'onInvalidateCache',
		type: 'InvalidateCache',
		description: 'Notifies that this is the right time to invalidate all caches.',
		_defaultAction: function () {
			String.prototype.sprintf.clearCache();
			String.prototype.cache.clear();
		}
	};
	Object.extend(InvalidateCacheEvent, BS.Event);

	var now = new Date();
	var at3am = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 3);
	setTimeout(function invalidateCacheLoop() {
		BS.evMgr.dispatch(new InvalidateCacheEvent());
		setTimeout(invalidateCacheLoop, 24*60*60*1000);
	}, at3am - Date.now());

})(BeeSmart, Q, BeeSmart.NiceException, BeeSmart.PVR, BeeSmart.DvlUtil);


(function (BS, BeeSmartMain, bsMisc, k, am, media, mm, ui) {
	var mmApp = new BS.App('MainMenu', {helpId: 'mainmenu', isDefault: true});
	var	mmDom = null;
	var	mmListCount = 0;
	var	prevAppList = [];
	var	currAppList = [];

	mmApp.autoHide = null;
	mmApp.mmItems = [];

	function initDom() {
		mmDom = new $.ModuleDom(
			[
				'mainMenuHolder', 'focus_indicator', 'mm_ani_off', 'mm_ani_on',
				'moduleIconText', 'mainMenuLowQuality', 'mm_go_static', 'menuActionBar',
				'mmIconsGroup', 'mmDefs', 'currentModuleLogo','unavailableIcon'
			],
			{
				show: function () {
					mmApp._state = 'shown';
					this.mm_ani_on.begin();
				},

				hide: function () {
					if (mmApp._state === 'hidden')
						return;
					mmApp._state = 'hidden';
					this.mm_ani_off.begin();
				},
				setFocus: function () {
					this.focus_indicator.show();
					this.moduleIconText.show();
				},

				unsetFocus: function () {
					this.focus_indicator.hide();
					if (BS.skinConfiguration.hideMainMenuIconLabelOnBlur === true)
					this.moduleIconText.hide();
				},

				resetAutoClose: function () {
					if (mmApp.autoHide !== null) {
						clearTimeout(mmApp.autoHide);
						mmApp.autoHide = null;
					}

					mmApp.autoHide = setTimeout(function() {
						mmApp.autoHide = null;

						if (am.lastLoaded('MainMenu'))
							am.pop();

					}, 10000);
				},
				updateMenu: function (index, key) {
					function ciIndex(position) {
						if (BS.portal.direction === 'rtl')
							return index - position;
						return index + position;
					}

					var	ci = Array.calculateIndex;
					var	cIcons = [
						ci(ciIndex(-4), mmListCount),
						ci(ciIndex(-3), mmListCount),
						ci(ciIndex(-2), mmListCount),
						ci(ciIndex(-1), mmListCount),
						ci(index,	mmListCount),
						ci(ciIndex(1), mmListCount),
						ci(ciIndex(2), mmListCount),
						ci(ciIndex(3), mmListCount),
						ci(ciIndex(4), mmListCount)
					];
					var mIconIndex = Math.floor(cIcons.length / 2);

					var currMMItem = mmApp.mmItems[cIcons[mIconIndex]];

					if (this.isModuleOfflineReady()){
						this.currentItemText = currMMItem.title;
						mmDom['unavailableIcon'].hide();
					} else {
						mmDom['unavailableIcon'].show();
						this.currentItemText = tr('unavailableModule');
					}
					this.focus_indicator
						.attr('width', this.moduleIconText[0].getBBox().width + 20)
						.attr('x', this.moduleIconText[0].getBBox().x - 10);

					for (var i = 0; i < cIcons.length; i++)
						this.iconsDom.eq(i).attr(
							'href',
							'#' + mmApp.mmItems[cIcons[i]].icon + (i === mIconIndex ? '1' : ''),
							NS.xlink
						);

					if (key)
						this.anis.filter('#inFrom_' + key).begin();
				},
				animationEnd: function () {
					mmDom.mainMenuLowQuality.end();
				},

				isHidden: function () {
					return mmApp._state === 'hidden';
				},
				isModuleOfflineReady: function (moduleObj) {
					if (moduleObj === undefined) {
						moduleObj = mmApp.mmItems[mmApp._currentModuleIndex];
					}
					return BS.portal.isOnline || (!BS.portal.isOnline && moduleObj.offlineReady);
				},
				set currentItemText (beeText) {
					var tt = this._textTransform ||
						(this._textTransform = this.moduleIconText.attr('text-transform', void 0,
								NS.bee) || 'uppercase');
					beeText = tt === 'uppercase' ? beeText.toUpperCase() :
						tt === 'capitalize' ? beeText.toLowerCase().capitalize() :
							beeText.toLowerCase();
					this.moduleIconText.svg(beeText);
				}
			}
		);

		mmApp._state = 'hidden';
		mmDom.iconsDom = mmDom['mmIconsGroup'].find('.mm-icon');
		mmDom.anis = $(BS.portal.direction === 'rtl' ?
			'#inFrom_left, #inFrom_right' : '#inFrom_right, #inFrom_left')
			.end(mmDom.animationEnd);
		mmApp.actionBar = new ui.ActionBar(mmDom.menuActionBar);

		if (!mm.isAllowed('search'))
			mmApp.actionBar.hideButton('blue');
	}

	BS.evMgr.bind('onBeeSmartReady', function () {
		mmApp.buildMenu();
		$('#baseInterfaceBG').trigger('addModuleListener', {});
	});

	mmApp.onInputEvent = function (keyPressedName) {
		var isFocused = am.lastLoaded(this);
		switch (keyPressedName) {
		case 'left':
		case 'right':
			if (isFocused === false)
				return;

			var shiftIndex = (BS.portal.direction === 'rtl') ? -1 : 1;

			this._currentModuleIndex = Array.calculateIndex(
				keyPressedName === 'left' ?
					this._currentModuleIndex - shiftIndex :
					this._currentModuleIndex + shiftIndex,
				this.mmItems.length
			);

			mmDom.resetAutoClose();
			mmDom.updateMenu(this._currentModuleIndex, keyPressedName);

			break;
		case 'ok':
			if (!isFocused)
				return;

			var mmItem = this.mmItems[this._currentModuleIndex];

			if (!mmDom.isModuleOfflineReady()){
				ui.generalAlert(tr('offlineMsg'));
				return;
			}

			mmDom.currentModuleLogo.attr('href', '#' + mmItem.icon, NS.xlink);

			bsMisc.dom.setModuleTitle(mmItem.title.toLowerCase().capitalize());
			bsMisc.showPortal('excludeMenu');
			mmDom['mm_go_static'].begin();

			try {
				am.inContextOf(this).push(mm.getApp(mmItem.appId), 'MainMenu');
			} catch (e) {
				BS.logger.log(e.message);
			}

			break;
		case 'back':
			am.pop();

			break;
		case 'blue':
			if (!mm.isAllowed('search')) return;
			am.inContextOf(this).push(mm.getApp('searchPopup'));

			break;
		default:
			break;
		}
	};
	mmApp.rebuild = function(unprocessedMenuList) {
		var iconPosition;
		var resultItems = [];

		for (var i = 0, len = unprocessedMenuList.length; i < len; i++) {
			var mmItem = unprocessedMenuList[i];

			var mmItemsProp = BS.skinConfiguration.mmItemVisibilityAndPositionProps;
			var appProps = mmItemsProp[mmItem.appId];
				if (appProps) {
					if (appProps.hidden) continue;
					if (appProps.position) mmItem.position = appProps.position;
				}

			try {
				iconPosition = mmItem.position;
				mmItem.position = iconPosition < 0 ?
					Math.abs((len + iconPosition) % len + 1) : iconPosition;
				mmItem.title = tr(mmItem.title);

				if (mm.appExists(mmItem.appId))
					resultItems.push(mmItem);
			} catch (x) {
			}
		}

		resultItems.sort(function (a, b) {
			return a.position - b.position;
		});
		mmListCount = resultItems.length;

		if (mmListCount === 0) {
			mmListCount = 1;
			resultItems.push({title: 'BeeSmart', icon: 'beesmart', image: 'beesmart'});
		}

		for (var i in resultItems) {
			var item = resultItems[i];
			var iconID = item.icon;
			var imageUrlTpl;
			var imageHiUrlTpl;

			if (item.iconUrl !== undefined) {
				imageUrlTpl = item.iconUrl;
				imageHiUrlTpl = item.iconHiUrl || imageUrlTpl;
			} else {
				imageUrlTpl = 'skin/{skin_name}/img/mm/' + item.icon + '.png';
				imageHiUrlTpl = 'skin/{skin_name}/img/mmh/' + item.icon + '.png';
			}

			imageUrlTpl = imageUrlTpl.replace(/\{skin_name\}/, '' + BS.portal.user.skin.keyword);
			imageHiUrlTpl = imageHiUrlTpl.replace(/\{skin_name\}/, '' +
				BS.portal.user.skin.keyword);

			resultItems[i].icon = 'mmi-' + iconID;
			resultItems[i].title = item.title;
			resultItems[i].image = iconID;
			resultItems[i].imageUrl = imageUrlTpl;

			mmDom.isModuleOfflineReady(resultItems[i]) ? resultItems[i].imageHiUrl = imageHiUrlTpl : resultItems[i].imageHiUrl = imageUrlTpl;
		}
		return resultItems;
	};
	mmApp.buildMenu = function () {
		if (Object.serialize(prevAppList) !== Object.serialize(currAppList)) {
			mmApp.mmItems = mmApp.rebuild(currAppList);
			mmDom['mmDefs'].svg(ui.template('mmIconsTpl', {'icons': mmApp.mmItems}));
			mmApp._currentModuleIndex = 0;
			mmDom.updateMenu(0);
		}
		prevAppList = currAppList;
	};
	mmApp.init = function () {
		mmApp.buildMenu();
		mmDom.resetAutoClose();
		mmDom.show();
		mmDom.setFocus();
		mmDom.updateMenu(mmApp._currentModuleIndex);
		mmApp.showActionBar();
	};
	mmApp.destroy = function () {
		if (this.autoHide !== null) {
			clearTimeout(this.autoHide);
			this.autoHide = null;
		}
		mmDom.hide();
		mmDom.unsetFocus();
		bsMisc.hidePortal();
	};
	mmApp.focus = function () {
		mmDom.resetAutoClose();
		bsMisc.hidePortal('excludeMenu');
		mmDom.setFocus();
		mmApp.showActionBar();
		if (BS.skinConfiguration.mmHidesOnSelection) mmApp.show();
	};
	mmApp.blur = function () {
		if (this.autoHide !== null) {
			clearTimeout(this.autoHide);
			this.autoHide = null;
		}
		mmDom.unsetFocus();
		mmApp.hideActionBar();
		if (BS.skinConfiguration.mmHidesOnSelection) mmApp.hide();
	};


	mmApp.show = function () { if (mmDom !== null) mmDom.show(); };
	mmApp.hide = function () { if (mmDom !== null) mmDom.hide(); };
	mmApp.showActionBar = function () { if (mmDom !== null) mmDom.mm_go_static.end(); };
	mmApp.hideActionBar = function () { if (mmDom !== null) mmDom.mm_go_static.begin(); };
	mmApp.isHidden = function () { return mmDom.isHidden(); };
	mmApp.selectCModule = function (moduleAppId) {
		if (Object.serialize(prevAppList) !== Object.serialize(currAppList)) {
			mmApp.mmItems = mmApp.rebuild(currAppList);
			mmDom['mmDefs'].svg(ui.template('mmIconsTpl', {'icons': mmApp.mmItems}));
			mmApp._currentModuleIndex = 0;
			mmDom.updateMenu(0);
			prevAppList = currAppList;
		}

		var appRef = mm.getApp(moduleAppId);
		var	newIndex = -1;

		for (var i = 0, len = this.mmItems.length; i < len; i++) {
			if (this.mmItems[i].appId === appRef.appID)
				newIndex = i;
		}

		if (newIndex !== -1) {
			this._currentModuleIndex = newIndex;
			bsMisc.dom.setModuleTitle(tr(this.mmItems[this._currentModuleIndex].title));
			mmDom.updateMenu(this._currentModuleIndex);
			var mmItem = this.mmItems[this._currentModuleIndex];
			mmDom.currentModuleLogo.attr('href', '#' + mmItem.icon, NS.xlink);
		}
	};

	mmApp.showCModule = function (moduleAppID, moduleArgs) {
		if (!moduleAppID || !mm.appExists(moduleAppID)) {
			BS.logger.info('Application ' + moduleAppID + ' doesn`t exists');
			return false;
		}

		if (!am.lastLoaded(this)) {
			if (am.isLoaded(this)) {
				am.cutOff(this);
			} else if (am.isLoaded('tvMosaics')) {
				if (!am.lastLoaded('tvMosaics')) {
					am.cutOff('tvMosaics');
				}
				am.inContextOf(this).push(this);
			} else {
				if (!am.lastLoaded('liveTv')) {
					if (am.isLoaded('liveTv')) {
						am.cutOff('liveTv');
					} else {
						am.cutOff('Misc');
						am.inContextOf(this).push(mm.getModule('Tv').getApp('liveTv'));
					}
				}
				am.inContextOf(this).push(this);
			}
		}

		mmApp.selectCModule(moduleAppID);
		bsMisc.showPortal('excludeMenu');

		var appRef = mm.getApp(moduleAppID);
		am.push.apply(this, [ appRef ].concat(moduleArgs || []));
	};


	function MmAdapter() {}
	MmAdapter.prototype = {
		appId: mmApp.toString(),
		showCModule: function () { mmApp.showCModule.apply(mmApp, arguments); },
		selectCModule: function() { mmApp.selectCModule.apply(mmApp, arguments); },
		hideActionBar: function () { mmApp.hideActionBar.apply(mmApp, arguments); },
		show: function () { mmApp.show(); },
		hide: function () { mmApp.hide(); },
		isHidden: function () { return mmApp.isHidden(); }
	};

	new BS.Module(
		{
			id: 'MainMenu',
			startupTasks: [
				{
					name: 'Main Menu interface',
					isCrucial: true,
					payload: function (params, callback) {
						BS.template.get('svg/main_menu.svg').then(function () {
							initDom();
						}).finally(callback).done();
					}
				}
			]
		}
	).register(mmApp);

	BS.extend({
		type: 'ModuleConstructor',
		bindToProperty: 'mmExtensions',
		constructorAction: function (optionsObject) {
			var mItem = {
				appId: '' + optionsObject.app,
				icon: optionsObject.icon,
				title: optionsObject.title,
				position: optionsObject.position,
				iconUrl: optionsObject.iconUrl,
				iconHiUrl: optionsObject.iconHiUrl,
				offlineReady: optionsObject.offlineReady ? true : false
			};
			optionsObject.mmExtensions = mItem;
			currAppList.push(mItem);
		},
		destructorAction: function (optionsObject) {
			var mmIndex = currAppList.indexOf(optionsObject.mmExtensions);

			if (mmIndex !== -1)
				currAppList = Array.remove(currAppList, mmIndex);
		}
	});

	var MMModule = new BS.Module({
		id: 'MainMenuModule',
		requiredLicense: '',
		startupTasks: [
			{
				name: 'MainMenu interface',
				payload: function (params, callback) {
					BS.template.get('svg/main_menu.svg').finally(function () {
						initDom();
					}).finally(callback);
					bsMisc.registerMainMenuAdapter(new MmAdapter());
				}
			}
		]
	});

	MMModule.register(mmApp);


})(
	BeeSmart,
	BeeSmart.BeeSmartMain,
	BeeSmart.modMgr.getApp('Misc'),
	BeeSmart.InputManager.keyGroups,
	BeeSmart.appMgr,
	BeeSmart.media,
	BeeSmart.modMgr,
	BeeSmart.ui
);


(function (BS, BeeSmartMain, am, mm, ui) {
	var kbd = new BS.App('keyboard', {
		type: 'popup',
		helpId: 'keyboard',
		inputMapper: BS.App.portalDirectionKeyMapper,
		listenTo: ['select']
	});
	kbd.lastPressed = null;
	kbd.lang = 'en';
	kbd.input = '';
	kbd.overflow = null;
	kbd.space = false;
	kbd.keyboardType = 'qwerty';
	kbd.letter = {
		'prevX': null,
		'x': 0,
		'y': 0
	};
	kbd.isSymbols = false;
	kbd.inputIndicator = 0;
	kbd.direction = 'ltr';
	kbd.passwordChar = '\u25CF';

	kbd.onInputEvent = function (keyPressedName, originalKeyPressCode) {
		if (BS.device.info.deviceTypeDesc === 'IP STB Generic' && originalKeyPressCode >= 65)
			keyPressedName = String.fromCharCode(originalKeyPressCode);

		switch (keyPressedName) {
		case 'clear':
			kbd.dom.deleteText();
			break;
		case 'back':
		case 'keyboard':
			am.pop();
			break;
		case 'left':
			if (kbd.keyboardType === 'qwerty') {
				if (BS.portal.direction === 'rtl')
					keyPressedName = 'right';
				kbd.moveToLetter(keyPressedName);
				return;
			}
			kbd.deleteAction();
			break;
		case 'down':
			if (kbd.keyboardType === 'qwerty') {
				kbd.moveToLetter(keyPressedName);
				return;
			} else {
				if (kbd.lastPressed !== null) {
					clearTimeout(kbd.timer);
					kbd.lastPressed = null;
					kbd.dom.keyboardPossible.text('');
				}
				kbd.dom.clearInput();
			}
			break;
		case 'right':
			if (kbd.keyboardType === 'qwerty') {
				if (BS.portal.direction === 'rtl')
					keyPressedName = 'left';
				kbd.moveToLetter(keyPressedName);
				return;
			}
			break;
		case 'yellow':
			kbd.keyboardType = kbd.keyboardType === 'qwerty' ? 'numerical' : 'qwerty';

			kbd.dom.showKeyboardByType();
			kbd.dom.setKeyboardInput();

			break;
		case 'delete':
			kbd.dom.clearInput();
			break;
		case 'space':
			kbd.spaceAction();
			break;
		case 'up':
			if (kbd.keyboardType === 'qwerty') {
				kbd.moveToLetter(keyPressedName);
				return;
			}

			kbd.upper = !kbd.upper;
			if (kbd.lastPressed !== null) {
				kbd.dom.keyboardPossible.text('');
				kbd.displayPossible(kbd.lastPressed, kbd.currPos);
			}
			break;
		case 'ok':
			if (kbd.keyboardType === 'qwerty') {
				kbd.doBtnAction(kbd.fKM[kbd.lang][kbd.letter.y][kbd.letter.x]);
				return;
			}

			if (kbd.lastPressed !== null)
				kbd.complete(kbd.lastPressed, kbd.currPos);

			if (kbd.dom.getText().charAt(0) === ' ')
				kbd.dom.setText(kbd.dom.getText().substring(1, kbd.dom.getText().length));

			am.pop(kbd.input);

			break;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			var number = parseInt(keyPressedName, 10);

			if (!(number >= 0 && number < 10))
				break;

			if (kbd.lastPressed !== null) {
				clearTimeout(kbd.timer);
				kbd.timer = null;
			}

			if (kbd.lastPressed === null) {
				kbd.currPos = 0;
				kbd.displayPossible(number, 0);
				kbd.timer = setTimeout(function () {
					kbd.complete(number, 0);
				}, kbd.autoSelectTimeOut);

			} else {
				if (kbd.lastPressed == keyPressedName) {
					kbd.currPos = ((kbd.currPos + 1) === kbd.KM[kbd.lang][number].length) ? 0 :
					kbd.currPos + 1;
					kbd.displayPossible(number, kbd.currPos);
					kbd.timer = setTimeout(function () {
						kbd.complete(number, kbd.currPos);
						kbd.currPos = 0;
					}, kbd.autoSelectTimeOut);

				} else {
					kbd.complete(kbd.lastPressed, kbd.currPos);

					kbd.currPos = 0;
					kbd.displayPossible(number, 0);

					kbd.timer = setTimeout(function () {
						kbd.complete(number, 0);
					}, kbd.autoSelectTimeOut);

				}
			}
			kbd.lastPressed = number;

			break;
		case 'select':
			kbd.upper = !kbd.upper;
			kbd.dom.setQwerty(true);
		default:
			if (/^[a-z]?$/i.test(keyPressedName))
				kbd.dom.inputText(kbd.upper ?
					keyPressedName.toString().toUpperCase() : keyPressedName.toString());

			break;
		}
	};

	kbd.moveToLetter = function (key) {
		var vertical = kbd.fKM[kbd.lang].length - 1,
			horizontal = kbd.fKM[kbd.lang][kbd.letter.y].length - 1;

		kbd.dom.deselectCharacter();

		switch (key) {
		case 'up':
			recalculateOldXPos();

			if (kbd.letter.y === 0)
				kbd.letter.y = vertical;
			else
				kbd.letter.y -= 1;

			recalculateNewXPos();
			break;
		case 'down':
			recalculateOldXPos();
			if (kbd.letter.y === vertical)
				kbd.letter.y = 0;
			else
				kbd.letter.y += 1;

			recalculateNewXPos();
			break;
		case 'left':
			kbd.letter.prevX = null;

			if (kbd.letter.x === 0) {
				kbd.letter.x = horizontal;
				break;
			}

			kbd.letter.x -= 1;
			break;
		case 'right':
			kbd.letter.prevX = null;

			if (kbd.letter.x === horizontal) {
				kbd.letter.x = 0;
				break;
			}

			kbd.letter.x += 1;
			break;
		}

		function recalculateOldXPos() {
			if (kbd.letter.prevX !== null) {
				kbd.letter.x = kbd.letter.prevX;
				return;
			}

			var nHorizontal = kbd.fKM[kbd.lang][kbd.letter.y];
			var i = 0, sizeOfLine = -1, len = kbd.letter.x + 1;

			for (i; i < len; i++) {
				if (nHorizontal[i] instanceof Array)
					sizeOfLine += 1;
				else if (nHorizontal[i] instanceof Object)
					sizeOfLine += nHorizontal[i].size;
				else
					sizeOfLine += 1;
			}
			kbd.letter.x = sizeOfLine;
		}

		function recalculateNewXPos() {
			var nHorizontal = kbd.fKM[kbd.lang][kbd.letter.y];

			kbd.letter.prevX = kbd.letter.x;

			var i = 0, sizeOfLine = -1, len = nHorizontal.length;

			for (i; i < len; i++) {
				if (nHorizontal[i] instanceof Array)
					sizeOfLine += 1;
				else if (nHorizontal[i] instanceof Object)
					sizeOfLine += nHorizontal[i].size;
				else
					sizeOfLine += 1;

				if (sizeOfLine >= kbd.letter.x) {
					kbd.letter.x = i;
					break;
				}
			}
		}

		kbd.dom.selectCharacter();
	};

	kbd.displayPossible = function (number, pos) {
		var pg = kbd.dom.keyboardPossible.text(''),
			chr = '',
			charsForDigit = kbd.KM[kbd.lang][number];

		for (var i = 0, len = charsForDigit.length; i < len; i++) {
			chr = charsForDigit[i].toString();
			var code = '<tspan class="' + (i == pos ? 'selected' : 'unSelected') +
				'" xml:id="possible' + i.toString() + '"\> ' + (kbd.upper ? chr.toUpperCase() : chr)
				+ '</tspan>';
			pg.append(
				code
			);
		}
		kbd.dom.setBg();
	};

	kbd.doBtnAction = function (btn) {
		var text = btn;

		if (btn instanceof Array)
			text = btn[0];
		else if (btn instanceof Object)
			text = btn.action;

		switch (text) {
		case 'whitespace':
			kbd.spaceAction();
			break;
		case 'backspace':
			kbd.dom.deleteText();
			break;
		case 'left':
			if (kbd.inputIndicator > 0 && kbd.direction === 'ltr') {
				kbd.inputIndicator--;
			}

			if (kbd.inputIndicator < kbd.input.length && kbd.direction === 'rtl') {
				kbd.inputIndicator++;
			}

			kbd.dom.inputText('', true);
			break;
		case 'right':
			if (kbd.inputIndicator > 0 && kbd.direction === 'rtl') {
				kbd.inputIndicator--;
			}

			if (kbd.inputIndicator < kbd.input.length && kbd.direction === 'ltr') {
				kbd.inputIndicator++;
			}

			kbd.dom.inputText('', true);
			break;
		case 'sym':
			kbd.isSymbols = !kbd.isSymbols;
			kbd.dom.setQwerty(true);
			break;
		case 'lang':
			var allowedKeyboards = BS.languages.getAll().reduce(function (allowedKeyboards, lang) {
				if (kbd.fKM[lang.label] !== undefined) {
					allowedKeyboards[lang.label] = {
						'desc': lang.nativeDescription,
						'direction': lang.displayDirection
					};
				}
				return allowedKeyboards;
			}, {});
			am.push(mm.getApp('KeyboardPossibleLanguages'), allowedKeyboards);

			break;
		case 'shift':
			kbd.upper = !kbd.upper;
			kbd.dom.setQwerty(true);
			break;
		case 'enter':
			am.pop(kbd.input);
			break;
		default:
			text = kbd.upper ? text.toUpperCase() : text;

			if (btn instanceof Array)
				text = kbd.isSymbols ? btn[1] : text;

			if (text.length !== 0)
				kbd.dom.inputText(text);
			break;
		}
	};

	kbd.complete = function (number, pos) {
		kbd.dom.keyboardPossible.text(' ');
		kbd.lastPressed = null;

		var chr = kbd.KM[kbd.lang][number][pos],
			del = kbd.KM[kbd.lang][10][0]['DEL'],
			spc = kbd.KM[kbd.lang][10][0]['SPC'];

		if (chr === null)
			return;

		if (number === del[0] && pos === del[1])
			kbd.deleteAction();
		else if (number === spc[0] && pos === spc[1])
			kbd.spaceAction();
		else
			kbd.dom.inputText(kbd.upper ? chr.toUpperCase() : chr);

		kbd.dom.setBg();
	};

	kbd.deleteAction = function () {
		var txt = kbd.dom.getText();
		kbd.dom.deleteText();
		if (!txt || !kbd.dom.getText())
			kbd.dom.clearInput();
	};
	kbd.spaceAction = function () {
		kbd.dom.inputText(' ');
	};

	kbd.init = function (callerAppId, startValue, key, isPrivateInput, caretPosition) {
		var langCode = kbd.lang;
		try {
			langCode = BS.portal.user.language.label;
		} catch (e) {
			BS.logger.trace('KEYBOARD: exception with setting language: ' + e);
		}

		if (kbd.keyboardType === 'numerical')
			kbd.lang = kbd.KM[langCode] ? langCode : kbd.lang;

		if (kbd.keyboardType === 'qwerty')
			kbd.lang = kbd.fKM[langCode] ? langCode : kbd.lang;

		kbd.lang = kbd.KM[langCode] ? langCode : kbd.lang;

		kbd.letter.prevX = null;
		kbd.letter.x = 0;
		kbd.letter.y = 0;
		kbd.privateInput = isPrivateInput === true;

		if (!this.dom) {
			this.dom = new $.ModuleDom(
				[
					'numericKeyboard',
					'keyboardInput', 'keyboard', 'keyboardButton', 'keyboardPossible',
					'keyboardShow', 'keyboardHide', 'kbdSetPossibleWidth', 'keyboardPossibleG',
					'keyboardButton',

					'fullKeyboard', 'fkBtnTemplate', 'fkLayout', 'fullKeyboardInput',
					'setFkCharacter'
				],
				{
					isQwertySet: false,
					clearInput: function () {
						kbd.input = '';
						kbd.inputIndicator = 0;
						kbd.space = false;

						this.inputText('');
					},
					actionBar: function (buttonVector) {
						kbd.actionBar.set(buttonVector);
					},
					show: function () {
						var r = this;
						r.keyboard.show();
						r.keyboardShow.begin();

						r.showKeyboardByType();
					},
					showKeyboardByType: function () {
						var r = this;

						if (kbd.keyboardType === 'qwerty') {
							r.isQwertySet = false;
							r.numericKeyboard.hide();
							r.actionBar([
								['back', 'back'],
								['navigation', 'move'],
								['yellow', 'changeKeyboardType'],
								['confirm', 'confirm']
							]);
							r.fullKeyboard.show();
							r.setQwerty();
						}

						if (kbd.keyboardType === 'numerical') {
							if (r.fullKeyboard.length === 0) {
								r.actionBar([
									['back', 'back'],
									['up', 'capsMode'],
									['left', 'delete'],
									['confirm', 'confirm']
								]);
							} else {
								r.actionBar([
									['back', 'back'],
									['up', 'capsMode'],
									['yellow', 'changeKeyboardType'],
									['confirm', 'confirm']
								]);
							}

							r.fullKeyboard.hide();
							r.numericKeyboard.show();
						}
					},
					hideKeyboardByType: function () {
						var r = this;
						if (kbd.keyboardType === 'qwerty') {
							r.isQwertySet = false;
							r.fullKeyboard.hide();
						}

						if (kbd.keyboardType === 'numerical') {
							r.numericKeyboard.hide();
						}
					},
					setQwerty: function (forceRestruct) {
						var r = this;
						forceRestruct = forceRestruct || false;

						if (r.isQwertySet && !forceRestruct)
							return;

						if (kbd.fKM[kbd.lang] === undefined) {
							kbd.lang = 'en';
							kbd.direction = 'ltr';
						}

						var pSVG = ui.template('fkBtnTemplate', {
							'layout': kbd.fKM[kbd.lang],
							'symbols': kbd.isSymbols,
							'upperCase': kbd.upper,
							'direction': kbd.direction,
							'language': kbd.lang
						});
						r.fkLayout.text('').append($.parseSvg('<g>' + pSVG + '</g>'));
						r.selectCharacter();
						r.isQwertySet = true;
					},
					setInputTextDirection: function () {
						kbd.ki.removeClass(kbd.direction === 'ltr' ?
							'rtlDirectionText' : 'ltrDirectionText');
						kbd.ki.addClass(kbd.direction === 'ltr' ?
							'ltrDirectionText' : 'rtlDirectionText');
					},
					hide: function () {
						this.keyboardHide.begin(function () {
							kbd.dom.hideKeyboardByType();
							kbd.dom.keyboard.hide();
						});
					},
					inputText: function (text, isMoving) {
						isMoving = isMoving || false;
						if (kbd.space && text === ' ')
							return;

						kbd.space = text === ' ';

						if (kbd.keyboardType === 'numerical') {
							kbd.input += text;
							kbd.inputIndicator += text.length;
							kbd.ki.text(this.setOverflow());
							this.setText(kbd.privateInput ? '' : this.setOverflow());
						}

						if (kbd.keyboardType === 'qwerty') {
							var prevInput = kbd.input;
							var txt = text.encodeEntities();
							kbd.input =
								prevInput.substring(0, kbd.inputIndicator)
								+ txt
								+ prevInput.substring(kbd.inputIndicator, prevInput.length);

							if (!isMoving)
								kbd.inputIndicator += txt.length;

							this.setText(kbd.privateInput ?
								kbd.input.replace(/./g, kbd.passwordChar) : this.setOverflow());
						}
					},
					setKeyboardInput: function () {
						var r = this;
						if (r.fullKeyboard.length === 0) {
							kbd.keyboardType = 'numerical';
						}

						kbd.overflow = kbd.keyboardType === 'qwerty' ?
							parseInt(r.fullKeyboard.attr('overflow', null, NS.bee)) || 30 :
							parseInt(r.numericKeyboard.attr('overflow', null, NS.bee)) || 95;

						kbd.ki = kbd.keyboardType === 'qwerty' ?
							this.fullKeyboardInput : this.keyboardInput;

						r.setInputTextDirection();
						r.setText(kbd.privateInput ? kbd.input.replace(/./g, kbd.passwordChar) :
							r.setOverflow());
					},
					setText: function (text) {
						if (kbd.keyboardType === 'numerical') {
							kbd.ki.text(text);
							return;
						} else if (text === '' && kbd.privateInput) {
							kbd.ki.text('');
							return;
						}
						kbd.ki.svg(text);
					},
					getText: function () {
						if (kbd.keyboardType === 'numerical')
							return kbd.ki.text();

						return kbd.ki.text().substring(0, kbd.inputIndicator);
					},
					deleteText: function () {
						var len = kbd.input.length;

						if (len === 0)
							return;

						if (kbd.keyboardType === 'numerical') {
							var txt = this.setOverflow(
								kbd.input.substring(len - kbd.overflow, len - 1), len);
							kbd.input = kbd.input.substring(0, len - 1);
							kbd.inputIndicator--;
							this.setText(kbd.privateInput ? kbd.input.replace(/./g,
								kbd.passwordChar) :
								txt);
							return;
						}
						if (kbd.inputIndicator === 0)
							return;

						kbd.input =
							kbd.input.substring(0, kbd.inputIndicator - 1)
							+ kbd.input.substring(kbd.inputIndicator, len);

						kbd.inputIndicator--;
						this.setText(kbd.privateInput ? kbd.input.replace(/./g, kbd.passwordChar) :
							this.setOverflow());
					},
					setOverflow: function (text, len) {
						var txt = typeof text === 'undefined' ? kbd.input : text;
						len = len || txt.length;

						if (kbd.keyboardType === 'numerical') {
							if (len >= kbd.overflow) {
								txt = txt.substring(txt.length - kbd.overflow, txt.length);
								txt = txt.replace(txt.substr(0, 2), '...');
							}
							return txt;
						}

						var half = kbd.overflow / 2,
							seperatorIndx = kbd.inputIndicator,
							upper = len,
							lower = 0;
						if (len >= kbd.overflow) {
							upper = kbd.inputIndicator + half;
							lower = kbd.inputIndicator - half;
							if (len < upper) {
								seperatorIndx = kbd.overflow - Math.abs(len - kbd.inputIndicator);
								upper = len;
								lower = upper - kbd.overflow;
							} else if (lower < 0) {
								seperatorIndx = kbd.inputIndicator;
								lower = lower < 0 ? 0 : lower;
								upper = kbd.overflow;
							} else
								seperatorIndx = half;
							txt = txt.substring(lower, upper);
						}

						len = txt.length;
						var lText = txt.substring(0, seperatorIndx),
							uText = txt.substring(seperatorIndx, len);
						return lText + '<tspan class="fKbdInputIndicator">_</tspan>' + uText;

					},
					selectCharacter: function () {
						var r = this;
						r.setFkCharacter.trigger('selectBtnCharacter', {
							'letterX': kbd.letter.x,
							'letterY': kbd.letter.y
						});
					},
					deselectCharacter: function () {
						var r = this;
						r.setFkCharacter.trigger('deselectBtnCharacter', {
							'letterX': kbd.letter.x,
							'letterY': kbd.letter.y
						});
					},
					setBg: function () {
						var r = this,
							rect = r.keyboardPossibleG.first(),
							text = rect.next();

						r.kbdSetPossibleWidth.trigger('setWidth', {
							'textWidth': text[0].getBBox() ? text[0].getBBox().width : 0
						});
					}
				},
				function () {
					kbd.actionBar = new BS.ui.ActionBar(this.keyboardButton);
					this.setKeyboardInput();

					var keyboardPossibleLanguages = new BeeSmartMain.MenuListDialog(
						'KeyboardPossibleLanguages',
						null,
						{
							onBeforeExit: function (key) {
								switch (key) {
								case 'ok':
									var cItem = this.actionMenu.currentInfo();
									kbd.lang = cItem.key;
									kbd.direction = cItem.direction;
								}
							}
						}
					);
					keyboardPossibleLanguages.init = function (caller, allowedKeyboards) {
						var that = this;
						var languages = [], i;

						BeeSmartMain.MenuListDialog.prototype.init.call(that, 'KeyboardLanguages');
						for (i in allowedKeyboards) {
							languages.push({
								name: tr(allowedKeyboards[i].desc) || '',
								key: i || '',
								selected: kbd.lang === i,
								direction: allowedKeyboards[i].direction.toLowerCase()
							});
						}
						that.fillActionMenu(languages);
					};
					keyboardPossibleLanguages.destroy = function () {
						var that = this;
						this.hide(function () {
							that.__proto__.destroy.call(this);
						});
					};
					BeeSmartMain.register(keyboardPossibleLanguages);
				}
			);
		}

		try {
			kbd.autoSelectTimeOut = 1250;
		} catch (e) {
			kbd.autoSelectTimeOut = 2000;
		}

		kbd.dom.show();
		kbd.dom.clearInput();

		if (startValue){
			kbd.dom.inputText(startValue.toString());
		}

		if (caretPosition && !isNaN(parseInt(caretPosition, 10))) {
			kbd.inputIndicator = parseInt(caretPosition, 10);
			kbd.dom.inputText('', true);
		}

		if (key !== undefined && kbd.keyboardType !== 'qwerty')
			this.onInputEvent(key);
	};

	var originalCharsOnZero = null,
		originalCharsOnOne = null,
		fullKeyboardEnabled = false;

	kbd.startup = function () {
		try {
			var langCode = kbd.lang;
			try {
				langCode = BS.portal.user.language.label;
			} catch (e) {
				BS.logger.trace('KEYBOARD: exception with setting language: ' + e);
			}
			kbd.lang = kbd.KM[langCode] ? langCode : kbd.lang;
			kbd.direction = BS.portal.direction;
		} catch (e) {
		}
	};

	kbd.destroy = function () {
		kbd.dom.hide();
		kbd.enableSpecialChars();

		if (fullKeyboardEnabled) {
			fullKeyboardEnabled = false;
			kbd.KM[kbd.lang][0] = originalCharsOnZero;
			kbd.KM[kbd.lang][1] = originalCharsOnOne;
		}
	};

	kbd.enableSpecialChars = function (charList) {
		var i;
		if (charList && charList.length) {
			kbd.specailCharList = charList;
			for (i = 0; i < charList.length; i++)
				kbd.KM[kbd.lang][0].push(charList[i]);

		} else {
			if (kbd.specailCharList && kbd.specailCharList.length)
				for (i = 0; i < kbd.specailCharList.length; i++)
					kbd.KM[kbd.lang][0].pop();
			kbd.specailCharList = null;
		}
	};

	kbd.enableFullKeyboard = function () {
		if (fullKeyboardEnabled) return;
		fullKeyboardEnabled = true;
		originalCharsOnZero = kbd.KM[kbd.lang][0].slice();
		originalCharsOnOne = kbd.KM[kbd.lang][1].slice();
		kbd.KM[kbd.lang][1].push('.', ',', '?', '!', '-', '(', ')', '@', '/');
		kbd.KM[kbd.lang][0].push(':', ';', '_', '&', '%', '*', '=');
	};

	kbd.focus = function (caller) {
		switch (caller) {
		case 'KeyboardPossibleLanguages':
			kbd.dom.setInputTextDirection();
			kbd.dom.setQwerty(true);
			break;
		}
	};


	kbd.fKM = {
		'en': [
			[ '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',
				{ 'action': 'backspace', 'size': 2}
			],
			[
				['q', '!'],
				['w', '?'],
				['e', '*'],
				['r', '%'],
				['t', '#'],
				['y', '$'],
				['u', ''],
				['i', ','],
				['o', '+'],
				['p', '-'],
				['(', "'"],
				[')', '\\']
			],
			[
				['a', '('],
				['s', ')'],
				['d', '['],
				['f', ']'],
				['g', '{'],
				['h', '}'],
				['j', '_'],
				['k', '|'],
				['l', '\u0080'],
				['~', ''],
				[',', '*'],
				['-', '`']
			],
			[
				{ 'action': 'shift', 'size': 1 },
				['z', ''],
				['x', ''],
				['c', ''],
				['v', ''],
				['b', ''],
				['n', ''],
				['m', ''],
				';',
				':',
				{ 'action': 'enter', 'size': 2 }
			],
			[
				{ 'action': 'sym', 'size': 1 },
				{ 'action': 'lang', 'size': 1 },
				{ 'action': 'whitespace', 'size': 4 },
				'@',
				'.com',
				'/',
				'.',
				{ 'action': 'left', 'size': 1 },
				{ 'action': 'right', 'size': 1 }
			]
		],
		'fa': [
			[
				['\u06F1', '!'],
				['\u06F2', '@'],
				['\u06F3', '#'],
				['\u06F4', '$'],
				['\u06F5', '%'],
				['\u06F6', '^'],
				['\u06F7', '&'],
				['\u06F8', '*'],
				['\u06F9', '('],
				['\u06F0', ')'],
				{ 'action': 'backspace', 'size': 2}
			],
			[
				['\u0636', '\u064B'],
				['\u0635', '\u064C'],
				['\u062B', '\u064D'],
				['\u0642', '\u0631\u064A\u0627\u0644'],
				['\u0641', '\u060C'],
				['\u063A', '['],
				['\u0639', ']'],
				['\u0647', '{'],
				['\u062E', '}'],
				['\u062D', '='],
				['\u062C', '-'],
				['\u0686', '+']
			],
			[
				['\u0634', '\u064E'],
				['\u0633', '\u064F'],
				['\u06CC', '\u0650'],
				['\u0628', '\u0651'],
				['\u0644', '\u0621'],
				['\u0627', '\u0622'],
				['\u062A', '\u0640'],
				['\u0646', '\u00BB'],
				['\u0645', '\u00AB'],
				['\u06A9', ':'],
				['\u06AF', ';'],
				['\u067E', '\'']
			],
			[
				{ 'action': 'shift', 'size': 1 },
				['\u0638', '\u0629'],
				['\u0637', '\u0629'],
				['\u0632', '\u0647'],
				['\u0631', '\u0624'],
				['\u0630', '\u0625'],
				['\u062F', '\u0623'],
				['\u0698', '<'],
				['\u0648', '>'],
				['-', '\u061F'],
				{ 'action': 'enter', 'size': 2 }
			],
			[
				{ 'action': 'sym', 'size': 1 },
				{ 'action': 'lang', 'size': 1 },
				{ 'action': 'whitespace', 'size': 4 },
				'@',
				['.com', '.ir'],
				['/', '\\'],
				'.',
				{ 'action': 'left', 'size': 1 },
				{ 'action': 'right', 'size': 1 }
			]
		],
		'ar': [
			[
				['\u06F1', '1'],
				['\u06F2', '2'],
				['\u06F3', '3'],
				['\u06F4', '4'],
				['\u06F5', '5'],
				['\u06F6', '6'],
				['\u06F7', '7'],
				['\u06F8', '8'],
				['\u06F9', '9'],
				['\u06F0', '0'],
				{ 'action': 'backspace', 'size': 2}
			],
			[
				['\u0636', '\u064B'],
				['\u0635', '\u064E'],
				['\u062B', '\u064D'],
				['\u0642', '\u06D5'],
				['\u0641', '\u066B'],
				['\u063A', '\uFDFC'],
				['\u0639', '\u061B'],
				['\u06D5', '!'],
				['\u062E', '#'],
				['\u062D', '$'],
				['\u062C', '('],
				['\u0686', ')']
			],
			[
				['\u0634', '\u064E'],
				['\u0633', '\u0618'],
				['\u0649', '\u061A'],
				['\u0628', '\u0651'],
				['\u0644', '\u0629'],
				['\u0627', '\u0622'],
				['\u062A', '\u0620'],
				['\u0646', '\u0621'],
				['\u0645', ';'],
				['\u06A9', ':'],
				['\u06AF', '&'],
				['\u067E', '*']
			],
			[
				{ 'action': 'shift', 'size': 1 },
				['\u0638', '\u0629'],
				['\u0637', '\u064A'],
				['\u0632', '\u0624'],
				['\u0631', '\u0623'],
				['\u0630', '\u0625'],
				['\u062F', '\u060C'],
				['\u063E', ''],
				['\u0648', ''],
				['-', '\u061F'],
				{ 'action': 'enter', 'size': 2 }
			],
			[
				{ 'action': 'sym', 'size': 1 },
				{ 'action': 'lang', 'size': 1 },
				{ 'action': 'whitespace', 'size': 4 },
				'@',
				'.com',
				'/',
				'.',
				{ 'action': 'left', 'size': 1 },
				{ 'action': 'right', 'size': 1 }
			]
		],
		'sl': [
			[ '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',
				{ 'action': 'backspace', 'size': 2}
			],
			[
				['q', '!'],
				['w', '?'],
				['e', '*'],
				['r', '%'],
				['t', '#'],
				['z', '$'],
				['u', ''],
				['i', ','],
				['o', '+'],
				['p', '-'],
				['\u0161', "'"],
				['\u0111', '\\']
			],
			[
				['a', '('],
				['s', ')'],
				['d', '['],
				['f', ']'],
				['g', '{'],
				['h', '}'],
				['j', '_'],
				['k', '|'],
				['l', '\u0080'],
				['\u010d', '~'],
				['\u0107', ''],
				['\u017e', '`']
			],
			[
				{ 'action': 'shift', 'size': 1 },
				['y', ''],
				['x', ''],
				['c', '*'],
				['v', ''],
				['b', ''],
				['n', ''],
				['m', ''],
				';',
				':',
				{ 'action': 'enter', 'size': 2 }
			],
			[
				{ 'action': 'sym', 'size': 1 },
				{ 'action': 'lang', 'size': 1 },
				{ 'action': 'whitespace', 'size': 4 },
				'@',
				'.com',
				'/',
				'.',
				{ 'action': 'left', 'size': 1 },
				{ 'action': 'right', 'size': 1 }
			]
		],
		'hr': [
			[ '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',
				{ 'action': 'backspace', 'size': 2}
			],
			[
				['q', '!'],
				['w', '?'],
				['e', '*'],
				['r', '%'],
				['t', '#'],
				['z', '$'],
				['u', ''],
				['i', ','],
				['o', '+'],
				['p', '-'],
				['\u0161', "'"],
				['\u0111', '\\']
			],
			[
				['a', '('],
				['s', ')'],
				['d', '['],
				['f', ']'],
				['g', '{'],
				['h', '}'],
				['j', '_'],
				['k', '|'],
				['l', 'Ã¢âÂ¬'],
				['\u010d', '~'],
				['\u0107', ''],
				['\u017e', '`']
			],
			[
				{ 'action': 'shift', 'size': 1 },
				['y', ''],
				['x', ''],
				['c', '*'],
				['v', ''],
				['b', ''],
				['n', ''],
				['m', ''],
				';',
				':',
				{ 'action': 'enter', 'size': 2 }
			],
			[
				{ 'action': 'sym', 'size': 1 },
				{ 'action': 'lang', 'size': 1 },
				{ 'action': 'whitespace', 'size': 4 },
				'@',
				'.com',
				'/',
				'.',
				{ 'action': 'left', 'size': 1 },
				{ 'action': 'right', 'size': 1 }
			]
		],
		'bs': [
			[ '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',
				{ 'action': 'backspace', 'size': 2}
			],
			[
				['q', '!'],
				['w', '?'],
				['e', '*'],
				['r', '%'],
				['t', '#'],
				['z', '$'],
				['u', ''],
				['i', ','],
				['o', '+'],
				['p', '-'],
				['\u0161', "'"],
				['\u0111', '\\']
			],
			[
				['a', '('],
				['s', ')'],
				['d', '['],
				['f', ']'],
				['g', '{'],
				['h', '}'],
				['j', '_'],
				['k', '|'],
				['l', 'Ã¢âÂ¬'],
				['\u010d', '~'],
				['\u0107', ''],
				['\u017e', '`']
			],
			[
				{ 'action': 'shift', 'size': 1 },
				['y', ''],
				['x', ''],
				['c', '*'],
				['v', ''],
				['b', ''],
				['n', ''],
				['m', ''],
				';',
				':',
				{ 'action': 'enter', 'size': 2 }
			],
			[
				{ 'action': 'sym', 'size': 1 },
				{ 'action': 'lang', 'size': 1 },
				{ 'action': 'whitespace', 'size': 4 },
				'@',
				'.com',
				'/',
				'.',
				{ 'action': 'left', 'size': 1 },
				{ 'action': 'right', 'size': 1 }
			]
		],
		'mn': [
			[
				['=', '1'],
				['\u2116', '2'],
				['-', '3'],
				['"', '4'],
				['\u20ae', '5'],
				['%', '6'],
				['?', '7'],
				['\\', '8'],
				['\u0435', '9'],
				['\u0449', '0'],
				{'action': 'backspace', 'size': 2}
			],
			[
				['\u0444', '@'],
				['\u0446', '#'],
				['\u0443', '$'],
				['\u0436', '&'],
				['\u044d', '*'],
				['\u043d', '+'],
				['\u0433', '='],
				['\u0448', 'â¬'],
				['\u04af', '\u20a4'],
				['\u0437', '-'],
				['\u043a', '\u00b1'],
				['\u044a', '\u00bd']
			],
			[
				['\u0439', '<'],
				['\u044b', '>'],
				['\u0431', '('],
				['\u04e9', ')'],
				['\u0430', '_'],
				['\u0445', '-'],
				['\u0440', '\u00bf'],
				['\u043e', '{'],
				['\u043b', '}'],
				['\u0434', '['],
				['\u043f', ']'],
				['\u044e', '%']
			],
			[
				{'action': 'shift', 'size': 1},
				['\u044f', '\\'],
				['\u0447', ';'],
				['\u0451', ':'],
				['\u0441', '\''],
				['\u043c', '"'],
				['\u0438', '!'],
				['\u0442', '?'],
				['\u044c', '\u00a1'],
				['\u0432', '\u00b1'],
				{'action': 'enter', 'size': 2}
			],
			[
				{'action': 'sym', 'size': 1},
				{'action': 'lang', 'size': 1},
				{'action': 'whitespace', 'size': 4},
				'@',
				'.com',
				'/',
				'.',
				{'action': 'left', 'size': 1},
				{'action': 'right', 'size': 1}
			]
		],
		'hu': [
			[ '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', { 'action': 'backspace', 'size': 2}
			],
			[
				['q', '!'],
				['w', '?'],
				['e', '*'],
				['r', '%'],
				['t', '#'],
				['z', '$'],
				['u', '\u20AC'],
				['i', ','],
				['o', '+'],
				['p', '-'],
				['\u0151', "'"],
				['\u00FA', '\\']
			],
			[
				['a', '('],
				['s', ')'],
				['d', '['],
				['f', ']'],
				['g', '{'],
				['h', '}'],
				['j', '_'],
				['k', '|'],
				['l', ''],
				['\u00E9', '~'],
				['\u00E1', '*'],
				['\u00E4', '`']
			],
			[
				{ 'action': 'shift', 'size': 1 },
				['y', '\u0111'],
				['x', '\u00F6'],
				['c', '\u00FC'],
				['v', '\u00F3'],
				['b', '\u0171'],
				['n', '\u0142'],
				['m', '\u00ED'],
				';',
				':',
				{ 'action': 'enter', 'size': 2 }
			],
			[
				{ 'action': 'sym', 'size': 1 },
				{ 'action': 'lang', 'size': 1 },
				{ 'action': 'whitespace', 'size': 4 },
				'@',
				'.com',
				'/',
				'.',
				{ 'action': 'left', 'size': 1 },
				{ 'action': 'right', 'size': 1 }
			]
		],
		'ru': [
			[ '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', { 'action': 'backspace', 'size': 2}
			],
			[
				['\u0439', '!'],
				['\u0446', '?'],
				['\u0443', '*'],
				['\u043A', '%'],
				['\u0435', '#'],
				['\u043D', '('],
				['\u0433', ')'],
				['\u0448', ','],
				['\u0449', '+'],
				['\u0437', '-'],
				['\u0445', "'"],
				['\u044A', '\\']
			],
			[
				['\u0444', '_'],
				['\u044B', ')'],
				['\u0432', '['],
				['\u0430', ']'],
				['\u043F', '{'],
				['\u0440', '}'],
				['\u043E', '_'],
				['\u043B', '|'],
				['\u0434', ''],
				['\u0436', '~'],
				['\u044D', '*'],
				[',', '`']
			],
			[
				{ 'action': 'shift', 'size': 1 },
				['\u044F', '\u0431'],
				['\u0447', '\u044E'],
				['\u0441', '\u0451'],
				['\u043C', '\u2116'],
				['\u0438', ''],
				['\u0442', ''],
				['\u044C', ''],
				';',
				':',
				{ 'action': 'enter', 'size': 2 }
			],
			[
				{ 'action': 'sym', 'size': 1 },
				{ 'action': 'lang', 'size': 1 },
				{ 'action': 'whitespace', 'size': 4 },
				'@',
				'.com',
				'/',
				'.',
				{ 'action': 'left', 'size': 1 },
				{ 'action': 'right', 'size': 1 }
			]
		]
	};


	kbd.KM = {
		'en': [
			['SPC', '+', '0'],
			['DEL', '1'],
			['a', 'b', 'c', '2'],
			['d', 'e', 'f', '3'],
			['g', 'h', 'i', '4'],
			['j', 'k', 'l', '5'],
			['m', 'n', 'o', '6'],
			['p', 'q', 'r', 's', '7'],
			['t', 'u', 'v', '8'],
			['w', 'x', 'y', 'z', '9'],
			[
				{'SPC': [0, 0], 'DEL': [1, 0]}
			]
		],
		'fa': [
			['SPC', '+', '0', '\u06F0'],
			['DEL', '1', '.', '\u060C', '\u061F', '!', '\u06F1'],
			['\u0628', '\u067E', '\u062A', '\u062B', '\u06F2', 'a', 'b', 'c', '2'],
			['\u0627', '\u0622', '\u0623', '\u0625', '\u06F3', 'd', 'e', 'f', '3'],
			['\u0633', '\u0634', '\u0635', '\u0636', '\u06F4', 'g', 'h', 'i', '4'],
			['\u062F', '\u0630', '\u0631', '\u0632', '\u0698', '\u06F5', 'j', 'k', 'l', '5'],
			['\u062C', '\u0686', '\u062D', '\u062E', '\u06F6', 'm', 'n', 'o', '6'],
			['\u0645', '\u0646', '\u0648', '\u0647', '\u06F7', 'p', 'r', 's', '7'],
			['\u0641', '\u0642', '\u06A9', '\u06AF', '\u0644', '\u06F8', 't', 'u', 'v', '8'],
			['\u0637', '\u0638', '\u0639', '\u063A', '\u06F9', 'w', 'x', 'y', 'z', '9'],
			[
				{'SPC': [0, 0], 'DEL': [1, 0]}
			]
		],
		'ar': [
			['SPC', '+', '0', '\u0660'],
			['DEL', '1', '\u0661'],
			['\u0628', '\u062A', '\u0629', '\u062B', '\u0662', 'a', 'b', 'c', '2'],
			['\u0627', '\u0621', '\u0663', 'd', 'e', 'f', '3'],
			['\u0633', '\u0634', '\u0635', '\u0636', '\u0664', 'g', 'h', 'i', '4'],
			['\u062F', '\u0630', '\u0631', '\u0632', '\u0665', 'j', 'k', 'l', '5'],
			['\u062C', '\u062D', '\u062E', '\u0666', 'm', 'n', 'o', '6'],
			['\u0646', '\u0647', '\u0648', '\u064A', '\u0667', 'p', 'r', 's', '7'],
			['\u0641', '\u0642', '\u0643', '\u0644', '\u0645', '\u0668', 't', 'u', 'v', '8'],
			['\u0637', '\u0638', '\u0639', '\u063A', '\u0669', 'w', 'x', 'y', 'z', '9'],
			[
				{'SPC': [0, 0], 'DEL': [1, 0]}
			]
		],
		'sl': [
			['SPC', '+', '0'],
			['DEL', '1'],
			['a', 'b', 'c', '\u010d', '2'],
			['d', 'e', 'f', '3'],
			['g', 'h', 'i', '4'],
			['j', 'k', 'l', '5'],
			['m', 'n', 'o', '6'],
			['p', 'q', 'r', 's', '\u0161', '7'],
			['t', 'u', 'v', '8'],
			['w', 'x', 'y', 'z', '\u017e', '9'],
			[
				{'SPC': [0, 0], 'DEL': [1, 0]}
			]
		],
		'hr': [
			['SPC', '+', '0'],
			['DEL', '1'],
			['a', 'b', 'c', '\u010d', '\u0107', '2'],
			['d', '\u0111', 'e', 'f', '3'],
			['g', 'h', 'i', '4'],
			['j', 'k', 'l', '5'],
			['m', 'n', 'o', '6'],
			['p', 'q', 'r', 's', '\u0161', '7'],
			['t', 'u', 'v', '8'],
			['w', 'x', 'y', 'z', '\u017e', '9'],
			[
				{'SPC': [0, 0], 'DEL': [1, 0]}
			]
		],
		'mn': [
			['SPC', '+', '0'],
			['DEL', '1'],
			['\u0430', '\u0431', '\u0432', '\u0433', 'a', 'b', 'c', '2'],
			['\u0434', '\u0435', '\u0436', '\u0437', 'd', 'e', 'f', '3'],
			['\u0438', '\u043a', '\u043b', 'g', 'h', 'i', '4'],
			['\u043c', '\u043d', '\u043e', '\u043f', 'j', 'k', 'l', '5'],
			['\u0440', '\u0441', '\u0442', '\u0443', 'm', 'n', 'o', '6'],
			['\u0444', '\u0445', '\u0446', '\u0447', 'p', 'r', 's', '7'],
			['\u0448', '\u0449', '\u044b', 't', 'u', 'v', '8'],
			['\u044d', '\u044e', '\u044f', 'w', 'x', 'y', 'z', '9'],
			[
				{'SPC': [0, 0], 'DEL': [1, 0]}
			]
		],
		'hu': [
			['SPC', '+', '0'],
			['DEL', '1'],
			['a', '\u00e1', 'b', 'c', '2'],
			['d', 'e', '\u00e9', 'f', '3'],
			['g', 'h', 'i', '\u00ed', '4'],
			['j', 'k', 'l', '5'],
			['m', 'n', 'o', '\u00f3', '\u00f6', '\u0151', '6'],
			['p', 'q', 'r', 's', '7'],
			['t', 'u', '\u00fa', '\u00fc', '\u0171', 'v', '8'],
			['w', 'x', 'y', 'z', '9'],
			[
				{'SPC': [0, 0], 'DEL': [1, 0]}
			]
		],
		'ru': [
			['SPC', '+', '0'],
			['DEL', '1'],
			['\u0430', '\u0431', '\u0432', '\u0433', 'a', 'b', 'c', '2'],
			['\u0434', '\u0435', '\u0436', '\u0437', 'd', 'e', 'f', '3'],
			['\u0438', '\u043a', '\u043b', 'g', 'h', 'i', '4'],
			['\u043c', '\u043d', '\u043e', '\u043f', 'j', 'k', 'l', '5'],
			['\u0440', '\u0441', '\u0442', '\u0443', 'm', 'n', 'o', '6'],
			['\u0444', '\u0445', '\u0446', '\u0447', 'p', 'r', 's', '7'],
			['\u0448', '\u0449', '\u044b', 't', 'u', 'v', '8'],
			['\u044d', '\u044e', '\u044f', 'w', 'x', 'y', 'z', '9'],
			[
				{'SPC': [0, 0], 'DEL': [1, 0]}
			]
		]
	};
	kbd.KM.bs = kbd.KM.hr;


	var passThroughKeys = BS.InputManager.keyGroups.shortcuts.slice(0);
	passThroughKeys.splice(passThroughKeys.indexOf('ttx'), 1);
	BS.evMgr.bind('onKeypress', function (ev) {
		try {
			if (BS.device.info.deviceTypeDesc == "IP STB Generic" && am.lastLoaded('keyboard')) {
				if (passThroughKeys.indexOf(ev.data) != -1 || ev.data == 'power')
					kbd.onInputEvent(ev.data, ev.originalKey);
			}
		} catch (x) {
			BS.logger.info('KEYBOARD: Device not known. Keys wont\'t work! Configure device at'
				+ ' backend administration!');
		}
	});


	BeeSmartMain.register(kbd);

})(BeeSmart, BeeSmart.BeeSmartMain, BeeSmart.appMgr, BeeSmart.modMgr, BeeSmart.ui);


(function (BS, BeeSmartMain, PVR) {
	var mm = BS.modMgr;
	var storeService;

	BS.TvModel = BS.TvModel || {};

	BS.evMgr.bind('onBeeSmartLoginSuccess', function () {
		storeService = BeeSmartMain.storeService;
	});
	function Channel(dto) {
		this.id = dto.id;
		this.lastModified = dto.lastModified;
		this.uid = dto.uid;
		this.chLogoLink = dto.chLogoLink;
		this.chBackgroundLink = dto.chBackgroundLink;
		this.hidden = dto.hidden;
		this.ageRating = dto.ageRating;
		this.displayPopupWhenNoEpg = dto.displayPopupWhenNoEpg;
		this.recordable = dto.recordable;
		this.autoRecord = dto.autoRecord;
		this.autoRecExpiration = dto.autoRecExpiration;
		this.pauseResume = dto.pauseResume;
		this.instantRecording = dto.instantRecording;
		this.hd = dto.hd;
		this.broadcasting = dto.broadcasting;
		this.localRecordable = dto.localRecordable;
		this.previewDuration = dto.previewDuration;
		this.mediaResources = dto.mediaResources;
		this.name = dto.name;
		this.custName = dto.custName;
		this.number = dto.number;
		this.custNumber = dto.custNumber;
	}

	Channel.prototype = {
		id: null,
		lastModified: 0,
		uid: null,
		type: null,
		chLogoLink: null,
		chBackgroundLink: null,
		hidden: null,
		ageRating: null,
		displayPopupWhenNoEpg: null,
		recordable: null,
		autoRecord: null,
		autoRecExpiration: null,
		pauseResume: null,
		instantRecording: null,
		hd: null,
		broadcasting: null,
		_purchaseExpirationTimer: null,
		localRecordable: null,
		previewDuration: null,
		lastChPreview: null,
		mediaResources: null,
		_name: null,
		custName: null,
		set name(value) {
			this._name = value;
		},
		get name() {
			return this.custName || this._name;
		},
		get originalName() {
			return this._name;
		},
		_number: null,
		custNumber: null,
		set number(value) {
			this._number = value;
		},
		get number() {
			if (this.custNumber === 0) return 0;
			return this.custNumber || this._number;
		},
		get originalNumber() {
			return this._number;
		},
		isOutdated: function (obj) {
			return (
				(obj.lastModified === 0 || this.lastModified < obj.lastModified) ||
				(('cnf' in obj) && (
					this.custName !== obj.cnf.name ||
					this.custNumber !== obj.cnf.number ||
					this.hidden !== obj.cnf.hidden
				)) ||
				('ts' in obj && obj.ts !== this.autoRecExpiration) ||
				(!('ts' in obj) && this.isTimeshifted())
			);
		},
		setCurrentSubtitle: function (streamObject) {
			BeeSmartMain.tvLibrary.setChannelsSubtitle(this, streamObject);
			BS.media.subtitle = streamObject;
		},
		getCurrentSubtitle: function () {
			return BeeSmartMain.tvLibrary.getChannelsSubtitle(this);
		},
		setCurrentAudio: function (streamObject) {
			BeeSmartMain.tvLibrary.setChannelsAudio(this, streamObject);
			BS.media.audio = streamObject;
		},
		getCurrentAudio: function () {
			return BeeSmartMain.tvLibrary.getChannelsAudio(this);
		},
		restoreSubstreamSelection: function () {
			var s, a;
			if ((s = this.getCurrentSubtitle()))
				BS.media.subtitle = s;
			if ((a = this.getCurrentAudio()))
				BS.media.audio = a;
		},
		isAcknowledgedByPC: function (showChannelAnywayPolicy) {
			if (showChannelAnywayPolicy === undefined)
				throw 'isAcknowledgedByPC-wrong-arguments';
			return !this.hidden || showChannelAnywayPolicy === true;
		},
		isTemporaryAcknowledged: function () {
			return BeeSmartMain.tvLibrary.isChannelTemporaryAcknowledged(this);
		},
		temporaryAcknowledge: function () {
			return BeeSmartMain.tvLibrary.temporaryAcknowledgeChannel(this);
		},
		parentallyLocked: function () {
			if (
				BS.portal.user.isParentalyUnlocked() ||
				this.isTemporaryAcknowledged()
			) return false;

			return !BS.portal.user.checkParentalLimit(this.ageRating) ||
				!this.isAcknowledgedByPC(false);
		},
		isPlayable: function () {
			if (this.isPreviewTemporaryEnabled())
				return true;
			else if (this.isPurchased())
				return true;
			return false;
		},
		isPreviewSupported: function () {
			return !this.isPurchased() && this.previewDuration !== null && this.previewDuration > 0;
		},
		isPreviewTemporaryEnabled: function () {
			var liveTv = mm.getApp('liveTv');
			var lastChPreview = liveTv.getLastChPreview();
			return lastChPreview !== null &&
				this.previewDuration !== null &&
				(lastChPreview + this.previewDuration > Date.now());
		},
		markChPreview: function () {
			this.lastChPreview = Date.now();
		},
		getLastChPreview: function () {
			return this.lastChPreview;
		},
		resetChPreview: function () {
			var liveTv = mm.getApp('liveTv');
			liveTv.setChannel();
		},
		enableChPreview: function () {
			this.markChPreview();
			mm.getApp('liveTv').setChannel();
		},
		isPurchased: function () {
			var status = storeService.getItemPurchaseStatus(this.id, 'live');
			return status.isFree() || status.isPurchased();
		},
		isPurchasable: function (blankChannelPolitics) {
			return storeService.getItemPurchaseStatus(this.id, 'live').isPayable() &&
				blankChannelPolitics === true;
		},
		isPreOrder: function (blankChannelPolitics) {
			return this.getProducts().every(function (prod) {
					return prod.isPreOrder();
				}) && blankChannelPolitics === true;
		},
		isPreOrdered: function () {
			return storeService.getItemPurchaseStatus(this.id, 'live').isPreOrdered();
		},
		getProducts: function (kind) {
			kind = kind || 'product';
			return storeService.productRepository.findByItemId(this.id, 'live', kind);
		},
		isTimeshifted: function () {
			return false;
		},
		equals: function (instanceToCmp) {
			return instanceToCmp instanceof Channel && instanceToCmp.id === this.id;
		},
		kill: function () {
			if (null !== this._purchaseExpirationTimer) {
				clearTimeout(this._purchaseExpirationTimer);
				this._purchaseExpirationTimer = null;
			}
		},
		toString: function () {
			var ps = storeService.getItemPurchaseStatus(this.id, 'live');
			var flags = [];
			var age = this.lastModified ? ((Date.now() - this.lastModified)/36e5).toFixed(1) : 0;
			if (this.custName && this.originalName !== this.custName) flags.push('RENAM');
			if (this.custNumber) flags.push('RENUM');
			if (this.hidden) flags.push('HIDDEN');
			if (this.isPreviewTemporaryEnabled()) flags.push('PREVIEW');
			if (ps.isFree()) flags.push('FREE');
			if (ps.isPurchased()) flags.push('PURCHASED');
			if (this.isTimeshifted()) flags.push('CU' + Math.round(this.autoRecExpiration/36e5));
			return '%s#%s %d.%s Lm%sh `%s` [%s]'.sprintf('Channel', this.id, this.number,
				this.name, age,flags.join(','), this.mediaResources);
		}
	};
	BS.TvModel.Channel = BeeSmartMain.Channel = Channel;

	function VideoChannel(p) {
		Channel.apply(this, [p]);
		this.pipSourceLinks = p.pipSourceLinks;
	}

	VideoChannel.prototype = {
		pipSourceLinks: null,
		isTimeshifted: function () {
			return this.autoRecord;
		}
	};
	Object.extend(VideoChannel, Channel);
	BS.TvModel.VideoChannel = BeeSmartMain.VideoChannel = VideoChannel;

	function AudioChannel(p) {
		Channel.apply(this, [p]);
	}

	AudioChannel.prototype = {
		type: 'audio'
	};
	Object.extend(AudioChannel, Channel);
	BS.TvModel.AudioChannel = BeeSmartMain.AudioChannel = AudioChannel;

	function BlankChannel(p) {
		Channel.apply(this, [p]);
	}
	BlankChannel.id = -1000;
	BlankChannel.props = {
		id: BlankChannel.id,
		number: 0,
		name: 'BlankChannel',
		broadcasting: true,
		streams: [{
			src: 'igmp://0.0.0.0:5000',
			provider: 'GENERIC_PROVIDER',
			protocolStack: 'mcast',
			profiles: 'stb,mobile-device,tablet,pc-web',
			protocol: 'mcast'
		}],
		pipStreams: [],
		ageRating: 0
	};
	BlankChannel.prototype = {
		parentallyLocked: function () { return false; },
		isPlayable: function () { return true; },
		isPreviewSupported: function () {return false; },
		isPurchased: function () { return true; },
		isPurchasable: function () { return false; },
		isPreOrder: function () { return false; },
		isPreOrdered: function () { return false; }
	};
	Object.extend(BlankChannel, Channel);
	BS.TvModel.BlankChannel = BlankChannel;

	function MosaicChannel(dto) {
		Channel.apply(this, [dto]);
		for (var i in dto)
			if (dto.hasOwnProperty(i) && this[i] !== undefined)
				this[i] = dto[i];
	}
	MosaicChannel.prototype = {
		type: 'mosaic',
		horizontalCellSpace: 0,
		verticalCellSpace: 0,
		matrix: '',
		horizontalBorderSpace: 0,
		verticalBorderSpace: 0,
		epgShown: true,
		listChannelId: [],
		defaultAudioPID: '',
		listAudioPids: [],
		linkedChannelID: -1,
		isMatrixConsistent: function (dto) {
			var matrix = dto.matrix.toLocaleLowerCase().split('x');
			return dto.listChannelId && (dto.listChannelId.length === parseInt(matrix[0]) *
				parseInt(matrix[1]));
		},
		isIdConsistent: function (dto) {
			return BeeSmartMain.tvLibrary.isChannel(dto.linkedChannelID, true);
		}
	};


	Object.extend(MosaicChannel, Channel);
	BS.TvModel.MosaicChannel = BeeSmartMain.MosaicChannel = MosaicChannel;


	function ChannelZappingPricingPolicy(policyValue) {
		this._policyValue = policyValue;
	}

	ChannelZappingPricingPolicy.prototype = {
		_policyValue: null,
		isSwitchable: function (ch) {
			if (!ch) return;
			if (ch instanceof BS.TvModel.DvbChannel) return true;

			var purchaseStatus = storeService.getItemPurchaseStatus(ch.id, 'live');
			if (this._policyValue === 0) {
				return purchaseStatus.isPurchasedOrFree();
			} else if (this._policyValue === 1) {
				return purchaseStatus.isPurchasedOrFree() || purchaseStatus.isPreOrdered();
			} else if (this._policyValue === 2) {
				return purchaseStatus.isAvailable();
			} else if (this._policyValue === 3) {
				return purchaseStatus.isAvailable() || purchaseStatus.isInOtherSubscription();
			} else {
				return false;
			}
		}
	};

	BeeSmartMain.ChannelZappingPricingPolicy = ChannelZappingPricingPolicy;

	function TvLibrary() {
		this.reset('all');
	}

	TvLibrary.prototype = {
		CHANNEL_VIDEO: 'video',
		CHANNEL_AUDIO: 'audio',
		CHANNEL_MOSAIC: 'mosaic',
		CHANNEL_DVB: 'dvb',
		_channelList: null,
		_channelsById: null,
		_channelsByUid: null,
		_chAudioSubStreams: {},
		_chSubtitleSubStreams: {},
		_channelParentalUnlocks: [],
		_channelAudioAndSubsSelection: {},
		_currentChannel: null,
		_previousChannel: null,
		mapperChannelOAv2: function (dto) {
			return {
				'id': dto.id,
				'uid': dto.uid,
				'name': dto.name,
				'number': dto.number,
				'type': dto.type,
				'hd': dto.hd,
				'ageRating': dto.ageRating,
				'displayPopupWhenNoEpg': dto.voidEpgPopup,
				'broadcasting': dto.broadcasting,
				'recordable': dto.programRecordable,
				'pauseResume': dto.pauseAndResume,
				'autoRecord': dto.timeshift,
				'instantRecording': dto.instantRecordable,
				'localRecordable': dto.localRecordable,
				'chLogoLink': dto.icon,
				'chBackgroundLink': dto.poster,
				'previewDuration': dto.previewDuration * 1e3,
				'mediaResources': dto.streams,
				'pipSourceLinks': dto.pipStreams
			};
		},
		channelReconstitutionFactory: function (channelDtoOAv2, timeshiftWindow,
			usrChCustomizations, mosaicDto, lastModified) {
			var dtoCh = this._channelConstructionHelper(channelDtoOAv2, timeshiftWindow,
				usrChCustomizations, mosaicDto, lastModified);
			var type = BlankChannel.id === dtoCh.id ? 'blank' : dtoCh.type;
			switch (type) {
			case 'video': return new VideoChannel(dtoCh);
			case 'audio': return new AudioChannel(dtoCh);
			case 'mosaic': return new MosaicChannel(dtoCh);
			case 'blank': return new BlankChannel(dtoCh);
			}
		},
		updateChannel: function (channelDtoOAv2, timeshiftWindow, usrChCustomizations, mosaicDto,
			lastModified
		) {
			var chDto = this._channelConstructionHelper(channelDtoOAv2, timeshiftWindow,
				usrChCustomizations, mosaicDto, lastModified);
			var objCh = this.getChannelById(chDto.id, true);
			if (objCh instanceof MosaicChannel) MosaicChannel.call(objCh, chDto);
			else Channel.call(objCh, chDto);
			BS.logger.trace('TV-LIBRARY.updateChannel: Updated channel now is '+ objCh);
		},
		_channelConstructionHelper: function (channelDtoOAv2, timeshiftWindow,
			usrChCustomizations, mosaicDto, lastModified) {
			var chDto = this.mapperChannelOAv2(channelDtoOAv2);
			if (lastModified !== undefined) chDto.lastModified = lastModified;
			chDto.mediaResources = new BS.media.VendorMediaResources(chDto.mediaResources);

			if ('video' === chDto.type) {
				chDto.pipSourceLinks = new BS.media.VendorMediaResources(chDto.pipSourceLinks);
			}
			if ('mosaic' === chDto.type && mosaicDto) {
				chDto.matrix = mosaicDto.matrix.toLowerCase();
				chDto.horizontalCellSpace = mosaicDto.horizontalCellSpace;
				chDto.verticalCellSpace = mosaicDto.verticalCellSpace;
				chDto.horizontalBorderSpace = mosaicDto.horizontalBorderSpace;
				chDto.verticalBorderSpace = mosaicDto.verticalBorderSpace;
				chDto.epgShown = mosaicDto.epgShown;
				chDto.listChannelId = mosaicDto.listChannelId;
				chDto.mediaResources = new BS.media.VendorMediaResources(mosaicDto.mediaResources);
			}
			if (mm) {
				chDto.recordable = PVR.featurePolicy
					.isFeatureAvailable(PVR.RecordingFeatures.Program) && chDto.recordable;
				chDto.autoRecord = PVR.featurePolicy
					.isFeatureAvailable(PVR.RecordingFeatures.CatchUp) && chDto.autoRecord;
				chDto.pauseResume = PVR.featurePolicy
					.isFeatureAvailable(PVR.RecordingFeatures.PNR) && chDto.pauseResume;
				chDto.instantRecording = PVR.featurePolicy
					.isFeatureAvailable(PVR.RecordingFeatures.Instant) && chDto.instantRecording;
			}
			if (timeshiftWindow) chDto.autoRecExpiration = timeshiftWindow;
			if (usrChCustomizations) {
				chDto.custName = usrChCustomizations.name;
				chDto.custNumber = usrChCustomizations.number;
				chDto.hidden = usrChCustomizations.hidden;
			}
			return chDto;
		},
		getChannels: function (all) {
			all = all || false;
			return all === true ? this._channelList :
				this._channelList.filter(channelVisibleFilter);
		},
		getAvailableChannels: function () {
			return this._channelList.filter(channelAvailableFilter);
		},
		getChannelById: function (id, includeHidden) {
			if (!id) throw new TvLibrary.Exception('invalid-arguments');
			if (
				id in this._channelsById &&
				(channelVisibleFilter(this._channelsById[id]) || includeHidden === true)
			) {
				return this._channelsById[id];
			} else {
				throw new TvLibrary.DoesNotExistEx('no-channel-of-id-' + id, id);
			}
		},
		getChannelByUid: function (uid, includeHidden) {
			if (!uid)
				throw new TvLibrary.Exception('invalid-arguments');
			if (uid in this._channelsByUid &&
				(channelVisibleFilter(this._channelsByUid[uid]) || includeHidden === true))
				return this._channelsByUid[uid];
			else {
				throw new TvLibrary.DoesNotExistEx('no-channel-of-uid-' + uid, uid);
			}
		},
		isChannel: function (chObjOrId, includeHidden) {
			var id = chObjOrId instanceof Channel ? chObjOrId.id : chObjOrId;
			return id in this._channelsById &&
				(channelVisibleFilter(this._channelsById[id]) || includeHidden === true);
		},
		addChannel: function (c) {
			if (c instanceof Channel) {
				this._channelList.push(c);
				this._channelsById[c.id] = c;
				this._channelsByUid[c.uid] = c;
				return;
			}
			throw new TvLibrary.Exception('cant-add-channel');
		},
		update: function () {},
		reset: function Reset() {
			this._channelList = [];
			this._channelsById = {};
			this._channelsByUid = {};
		},


		setChannelsAudio: function (channel, streamObject) {
			if (streamObject instanceof BS.Stream) {
				this._chAudioSubStreams[channel.id] = streamObject;
				return;
			}
			throw 'set-channels-audio-argument-not-stream-object';
		},
		getChannelsAudio: function (channel) {
			return this._chAudioSubStreams[channel.id];
		},
		setChannelsSubtitle: function (channel, streamObject) {
			if (streamObject instanceof BS.Stream) {
				this._chSubtitleSubStreams[channel.id] = streamObject;
				return;
			}
			throw 'set-channels-audio-argument-not-stream-object';
		},
		getChannelsSubtitle: function (channel) {
			return this._chSubtitleSubStreams[channel.id];
		},

		isChannelTemporaryAcknowledged: function (channel) {
			return this._channelParentalUnlocks.indexOf(channel) !== -1;
		},
		temporaryAcknowledgeChannel: function (channel) {
			this._channelParentalUnlocks.push(channel);
		},
		resetTemporaryAcknowledgedChannels: function () {
			this._channelParentalUnlocks = [];
		},
		removeChannel: function (channelObject) {
			var id = channelObject.id;
			if (!(id in this._channelsById))
				return;
			delete this._channelsById[id];
			this._channelList.splice(this._channelList.indexOf(channelObject), 1);
		},
		removeChannels: function (ofType, filterFunction) {
			ofType = ofType || null;
			var chTypeObject = ofType === this.CHANNEL_VIDEO ?
					VideoChannel : ofType === this.CHANNEL_AUDIO ?
					AudioChannel : ofType === this.CHANNEL_MOSAIC ?
					MosaicChannel : BS.TvModel.DvbChannel,
				items = this._channelList,
				lookup = this._channelsById,
				elements = [],
				ch, i;

			if (filterFunction instanceof Function) {
				for (i = items.length - 1; i >= 0; i--) {
					ch = items[i];
					if (ofType !== null && !(ch instanceof chTypeObject))
						continue;
					if (filterFunction(i, ch) === false)
						continue;
					items.splice(i, 1);
					delete lookup[ch.id];
					elements.push(ch);
				}
			} else {
				for (i = items.length - 1; i >= 0; i--) {
					ch = items[i];
					if (ofType !== null && !(ch instanceof chTypeObject))
						continue;
					items.splice(i, 1);
					delete lookup[ch.id];
					elements.push(ch);
				}
			}
			return elements;
		}
	};

	TvLibrary.CHANNEL_VIDEO = TvLibrary.prototype.CHANNEL_VIDEO;
	TvLibrary.CHANNEL_AUDIO = TvLibrary.prototype.CHANNEL_AUDIO;
	TvLibrary.CHANNEL_MOSAIC = TvLibrary.prototype.CHANNEL_MOSAIC;
	TvLibrary.CHANNEL_DVB = TvLibrary.prototype.CHANNEL_DVB;

	TvLibrary.DoesNotExistEx = function (type, message) {
		this.type = type;
		this.message = message;
		this.Class = 'TvLibrary';
		return new Error(type);
	};
	TvLibrary.Exception = function (type) {
		this.type = type;
		throw new Error(type);
		this.Class = 'TvLibrary';
		return new Error(type);
	};
	TvLibrary.TvLibraryUpdated = function (dataType, data) {
		this.data = {
			type: dataType,
			value: data
		};
	};
	TvLibrary.TvLibraryUpdated.prototype = {
		type: 'TvLibraryUpdated',
		description: 'When new TvLibrary data is available',
		handler: 'onTvLibraryUpdate'
	};
	Object.extend(TvLibrary.TvLibraryUpdated, BeeSmart.Event);


	BeeSmartMain.TvLibrary = TvLibrary;
	BeeSmartMain.registerTvLib(TvLibrary);

	function channelVisibleFilter(channel) {
		if (isChannelDvbOrBlank(channel)) return true;
		var purchaseStatus = storeService.getItemPurchaseStatus(channel.id, 'live');
		return purchaseStatus.isAvailable() || purchaseStatus.isInOtherSubscription();
	}

	function channelAvailableFilter(channel) {
		if (isChannelDvbOrBlank(channel)) return true;
		var purchaseStatus = storeService.getItemPurchaseStatus(channel.id, 'live');
		return purchaseStatus.isAvailable() || purchaseStatus.isInOtherSubscription();
	}

	function isChannelDvbOrBlank(channel) {
		return channel.type === 'dvb' || channel instanceof BlankChannel;
	}


})(BeeSmart, BeeSmart.BeeSmartMain, BeeSmart.PVR);


(function (BS, BeeSmartMain, keyboard, bsMisc, k, am, media, mm, q) {

	var beeWebBrowser = new BS.App(
		'BeeWebBrowser',
		{requiredLicense: 'webaccess', listenTo: [ k.shortcuts ]}
	);

	var beeBrowser = null,
		BSFocus = null,
		keyboardState = null
		;


	beeWebBrowser.onInputEvent = function (keyPressedName) {
		var r = beeWebBrowser;

		if (r.lock)
			return;

		switch (keyPressedName) {
		case 'back':
		case 'fsTV':
		case 'menu':
			r.dom.endLoading('force');
			am.pop();
			break;
		case 'stop':
			r.dom.endLoading('force');
			break;
		case 'www':
			r.dom.showKeyboard(beeBrowser.getUrl(), 'url');
			break;
		case 'rew':
		case 'toBegin':
			beeBrowser.setPageScrollXPosition(-1);
			break;
		case 'fw':
		case 'toEnd':
			beeBrowser.setPageScrollXPosition(1);
			break;
		}
	};

	beeWebBrowser.init = function (caller, url) {
		var that = beeWebBrowser;
		that.lock = true;
		var prmsInit = that.dom ?
			null :
			BS.template.get('svg/web_browser.svg').then(initializeDom);
		q(prmsInit).then(function () {
			that.dom.show();
			that.dom.setUrl(url);
		}).done();
	};

	function initializeDom () {
		var that = beeWebBrowser;

		function setBrowser() {
			var browserElement = document.getElementById('beeBrowser');
			if (EkiohWebBrowserElement.prototype.isImplemented(browserElement))
				beeBrowser = new EkiohWebBrowserElement(browserElement);
			else
				beeBrowser = new WebBrowserElement(browserElement);

			beeBrowser.addEventListener('loadstart', this.initLoading);
			beeBrowser.addEventListener('ekiohProgressPercentage', this.progressPercentage);
			beeBrowser.addEventListener('load', this.endLoading);
			beeBrowser.addEventListener('error', this.errorLoading);
			beeBrowser.addEventListener('scroll', this.scroll);
			beeBrowser.addEventListener('ekiohNavigate', function () {});
			beeBrowser.addEventListener('ekiohInputActivate', this.textInput);
			beeBrowser.addEventListener('textInput', function () {});

			beeBrowser.addEventListener('keydown', this.keyDown);
			that.beeBrowser = beeBrowser;
		}

		beeWebBrowser.dom = beeWebBrowser.dom || new $.ModuleDom(
				[
					'beeBrowserHolder', 'beeBrowser', 'progressBar', 'loadedBar',
					'addressBarText',
					'boFrame', 'boIndicator', 'boSwitch', 'bpoHideAni',
					'btSwitch', 'btShowAni', 'btHideAni', 'video'
				],
				{
					portalIsShown: false,
					show: function () {
						media.stop();
						this.portalIsShown = !bsMisc.portalIsHidden();
						if (this.portalIsShown)
							bsMisc.hidePortal();

						var margins = media.displayMargins;
						this.beeBrowser
							.attr('x', margins.safe.x, NS.svg)
							.attr('y', margins.safe.y, NS.svg)
							.attr('width', margins.safe.width, NS.svg)
							.attr('height', margins.safe.height, NS.svg)
						;
						this.beeBrowserHolder.show();

						BSFocus = document.documentElement.getCurrentFocusedObject();
						that.setFocus();
					},
					hide: function () {
						if (this.portalIsShown)
							bsMisc.showPortal();
						this.portalIsShown = false;
						setTimeout(function () {
							mm.getApp('liveTv').setChannel(null, true);
						}, 1000);

						this.endLoading('force');
						that.setFocus(BSFocus);

						beeBrowser.setUrl('about:config');
						this.beeBrowserHolder.hide();
					},
					showToolbar: function(){
						this.clearHideToolbarTmr();
						var precentege = beeBrowser.getPageScrollYPosition() / beeBrowser.getHeight() * 100,
							height = that.dom.loadedBar[0].getBBox().height,
							videoHeight = parseInt(that.dom.video.attr("height")),
							whereToShow = videoHeight - height - 80,
							showAni = precentege > 50 ? 50 : whereToShow,
							hideAni = precentege > 50 ? -50 : videoHeight + 50;
						this.btSwitch.begin();
					},
					hideToolbar: function () {
						that.dom.btSwitch.end();
					},
					initLoading: function (evt) {
						that.dom.progressBar.attr('width', 0);
						that.dom.showToolbar();
						that.lock = true;
					},
					hideToolbarTimerRef : null,
					clearHideToolbarTmr : function(){
						if (that.dom.hideToolbarTimerRef != null){
							clearTimeout(that.dom.hideToolbarTimerRef);
							that.dom.hideToolbarTimerRef = null;
						}
					},
					endLoading: function(evt){
						that.lock = false;
						that.dom.clearHideToolbarTmr();
						that.dom.hideToolbarTimerRef = setTimeout(that.dom.hideToolbar, 2000);
						that.dom.scroll();
						if (evt !== 'force')
							return;
						beeBrowser.stop();
					},
					progressPercentage: function (evt) {
						var width = that.dom.loadedBar[0].getBBox().width;
						that.dom.progressBar.attr('width', width * evt.loaded / evt.total);
					},
					keyDown: function (evt) {
						if (evt.keyCode > 47 && evt.keyCode < 58) {
							var active = document.getElementById('beeBrowser')
								.contentWindow.document.activeElement;
							var text = active.value;
							var position = active.selectionStart;
							active.setSelectionRange(0, text.length);
							that.dom.showKeyboard(text, 'form', {
								caretPosition: position
							});
							evt.stopPropagation();
						}
					},
					scroll: function (evt) {
						var boFrame = that.dom.boFrame,
							scaleX = boFrame.attr('width') / beeBrowser.getPageWidth(),
							scaleY = boFrame.attr('height') / beeBrowser.getPageHeight();
						that.dom.boIndicator
							.attr('x', (beeBrowser.getPageScrollXPosition() * scaleX))
							.attr('y', (beeBrowser.getPageScrollYPosition() * scaleY))
							.attr('width', (beeBrowser.getWidth() * scaleX))
							.attr('height', (beeBrowser.getHeight() * scaleY));
					},
					showKeyboard: function (text, state, options) {
						options = options || { caretPosition: undefined };
						if (am.lastLoaded('keyboard'))
							return;
						var showPrivateKeyboard;
						keyboardState = state;
						beeWebBrowser.setFocus(BSFocus);
						keyboard.enableFullKeyboard();

						try {
							if ('password' === document.getElementById('beeBrowser')
								.contentWindow.document.activeElement
								.getAttribute('type')
							) showPrivateKeyboard = true;
						} catch (x) {
							BS.logger.log(x);
						}

						am.push(keyboard, text, undefined, showPrivateKeyboard,
							options.caretPosition);
					},
					setUrl: function (url) {
						var url1 = url.toString().toLowerCase();
						if (url1.indexOf("http://") != 0 && url1.indexOf("https://") != 0)
							url = 'http://' + url;

						beeBrowser.setUrl(url);
						this.setAddressBarText(url);
					},
					setAddressBarText: function (url) {
						url = url || beeBrowser.getUrl();
						that.dom.addressBarText.text(url);
					},
					setTextInput: function (text) {
						beeBrowser.dispatchInputEvent(text);
						this.setAddressBarText();
					},
					textInput: function (evt) {
						evt.preventDefault();
						that.dom.showKeyboard(evt.data, 'form');
					}
				}
			);

		setBrowser.call(beeWebBrowser.dom);
	}


	beeWebBrowser.focus = function (caller, arg) {
		var r = beeWebBrowser;
		if (!r.dom)
			return;
		switch (caller) {
		case 'keyboard':
			switch (keyboardState) {
			case 'form':
				if (arg)
					r.dom.setTextInput(arg);
				break;
			case 'url':
				if (arg)
					r.dom.setUrl(arg);
				break;
			}
			break;
		}
		r.dom.hideToolbar();
		r.setFocus();
	};

	beeWebBrowser.destroy = function () {
		if (!beeWebBrowser.dom)
			return;
		beeWebBrowser.dom.hide();
	};

	beeWebBrowser.setFocus = function (item) {
		if (item == BSFocus) {
			document.documentElement.setFocus(item);
			return;
		}

		beeBrowser.setFocusToMe();
	};

	beeWebBrowser.blur = function (caller) {
		if (!beeWebBrowser.dom)
			return;

		if (caller == 'keyboard')
			beeWebBrowser.dom.showToolbar();
	};


	function WebBrowserElement(domNode) {
		this._ref = domNode;
	}

	WebBrowserElement.prototype = {
		_ref: null,
		width: 0,
		height: 0,
		pageWidth: 0,
		pageHeight: 0,
		scroll: 0,
		getWidth: function () {
			var that = this;
			return typeof this._ref.getScreenBBox != 'function' ? 0 : (function () {
				if (that._ref.getScreenBBox() == null)
					return 0;
				return that._ref.getScreenBBox().width
			})();
		},
		getHeight: function () {
			var that = this;
			return typeof this._ref.getScreenBBox != 'function' ? 0 : (function () {
				if (that._ref.getScreenBBox() == null)
					return 0;
				return that._ref.getScreenBBox().height
			})();
		},
		getPageWidth: function () {
			return 0;
		},
		getPageHeight: function () {
			return 0;
		},
		getPageScrollXPosition: function () {
			return 0;
		},
		getPageScrollYPosition: function () {
			return 0;
		},
		setPageScrollXPosition: function (value) {},
		setPageScrollYPosition: function (value) {},
		setFocusToMe: function () {},
		setUrl: function (url) {
			this._ref.setAttributeNS(NS.xlink, 'href', url);
		},
		getUrl: function () {
			return this._ref.getAttributeNS(NS.xlink, 'href');
		},

		stop: function () {},
		dispatchInputEvent: function (axis, amount) {},
		addEventListener: function (name, callback) {},
		remove: function () {},
		isImplemented: function () {
			return false;
		}
	};

	function EkiohWebBrowserElement(domNode) {
		WebBrowserElement.call(this, domNode);
	}

	EkiohWebBrowserElement.prototype = {
		getPageWidth: function () {
			return this._ref.documentWidth;
		},
		getPageHeight: function () {
			return this._ref.documentHeight;
		},
		getPageScrollXPosition: function () {
			return this._ref.scrollX;
		},
		getPageScrollYPosition: function () {
			return this._ref.scrollY;
		},
		setPageScrollXPosition: function (value) {
			this._ref.scrollX = value * this._ref.documentWidth / 10;
		},
		setPageScrollYPosition: function (value) {
			this._ref.scrollY = value * this._ref.documentHeight / 10;
		},
		setFocusToMe: function () {
			document.documentElement.setFocus(this._ref);
		},
		stop: function () {
			this._ref.stop();
		},
		dispatchInputEvent: function (keyCode) {
			var e = document.createEvent('TextEvent');
			e.initTextEvent('textInput', false, true, this._ref, keyCode);
			this._ref.dispatchEvent(e);
		},
		addEventListener: function (handlerName, callback) {
			this._ref.addEventListener(handlerName, callback, false);
		},
		removeEventListener: function (handlerName, callback) {
			this._ref.removeEventListener(handlerName, callback);
		},
		remove: function () {
		},
		isImplemented: function (element) {
			return ('scrollX' in element);
		}
	};
	Object.extend(EkiohWebBrowserElement, WebBrowserElement);

	BeeSmartMain.register(beeWebBrowser);

})(BeeSmart, BeeSmart.BeeSmartMain, BeeSmart.modMgr.getApp('keyboard'),
		BeeSmart.modMgr.getApp('Misc'), BeeSmart.InputManager.keyGroups, BeeSmart.appMgr, BeeSmart.media,
		BeeSmart.modMgr, Q);

(function (BS, em) {
	function Price(dto) {
		this.value = dto.value;
		this.type = dto.type === 'currency' ? Price.Types.Currency : Price.Types.Points;
		if (Price.symbol === null && dto.type === 'currency')
			Price.symbol = dto.symbol;
		this._symbol = Price.symbol === dto.symbol ? Price.symbol : dto.symbol;
	}

	Price.symbol = null;
	Price.Types = {
		Points: 'points',
		Currency: 'currency'
	};
	Price.prototype = {
		value: null,
		type: null,
		_symbol: null,
		get symbol() {
			if (this.type === 'points') {
				return BS.config.get('Services.External.Paypoints.SYMBOL');
			}
			return Price.showSymbol ? Price.currencyToSymbolMap[this._symbol] : this._symbol;
		}
	};

	Price.showSymbol = false;
	Price.currencyToSymbolMap = {
		'EUR': '\u20AC', 'MNT': '\u20AE', 'CRC': '\u20A1', 'SVC': '\u20A1', 'BRL': '\u20A2',
		'NGN': '\u20A6', 'ESP': '\u20A7', 'TRL': '\u20BA', 'INR': '\u20A8', 'KPW': '\u20A9',
		'KRW': '\u20A9', 'ILS': '\u20AA', 'VND': '\u20AB', 'LAK': '\u20AD', 'PHP': '\u20B1',
		'PYG': '\u20B2', 'UAH': '\u20B4', 'GHS': '\u20B5', 'KZT': '\u20B8', 'TRY': '\u20BA',
		'AZN': '\u20BC', 'RUB': '\u20BD', 'GEL': '\u20BE', 'USD': '\u0024', 'HRK': 'kn',
		'IRR': '\u0631\u06cc\u0627\u0644', 'HUF': 'Ft'
	};
	BS.PurchaseModel.Price = Price;

	em.bind('onSkinManifestLoaded', function () {
		BS.PurchaseModel.Price.showSymbol = BS.skinConfiguration.showCurrencySymbolCode;
	});

	function PriceItem(dto) {
		this.id = dto.id;
		this.price = new Price(dto.price);
		this.billingType = dto.billingType;
		this.rentalPeriodUnit = dto.rentalPeriodUnit;
		this.rentalPeriodValue = dto.rentalPeriodValue;
	}

	PriceItem.prototype = {
		id: null,
		price: null,
		billingType: null,
		rentalPeriodUnit: null,
		rentalPeriodValue: null
	};

	var PriceItemFactory = {};
	PriceItemFactory.itemCache = {};
	PriceItemFactory.createPriceItem = function (options){
		if (!(options.id in PriceItemFactory.itemCache))
			PriceItemFactory.itemCache[options.id] = new PriceItem(options);
		return PriceItemFactory.itemCache[options.id];
	};
	BS.PurchaseModel.PriceItemFactory = PriceItemFactory;
	BS.PurchaseModel.PriceItem = PriceItem;

	BS.msgMgr.registerMsgType('ResourceChanged');


	function ChangeDigest (New, existingUpdated, obsolete) {
		this.new = New;
		this.existingUpdated = existingUpdated;
		this.obsolete = obsolete;
	}
	ChangeDigest.prototype = {
		'new': 0,
		'existingUpdated': 0,
		'obsolete': 0,
		get anyChanged () {
			return this.new > 0 || this.obsolete > 0 || this.existingUpdated > 0;
		},
		toString: function () {
			return 'Changes new#%d, existing upd.#%d, obsolete#%d,'.sprintf(this.new,
				this.existingUpdated, this.obsolete);
		}
	};
	BS.PurchaseModel.ChangeDigest = ChangeDigest;

})(
	BeeSmart,
	BeeSmart.evMgr
);


(function (BS, BeeSmartMain, q, ChangeDigest) {

	function SubscriptionRepository(fetchService) {
		this._fetchService = fetchService;
		this._subscriptions = [];
		this._activeSubscriptions = [];
		this._activeSubscriptionsMap = {};
		this._subscriptionsMap = {};
	}

	SubscriptionRepository.prototype = {
		_noActiveSubscriptionException: 'No active subscriptions',
		_fetchService: null,
		_subscriptions: [],
		_subscriptionsMap: {},
		_activeSubscriptions: [],
		_activeSubscriptionsMap: {},
		errors: {
			cannotReactivateActiveBasicSubscription: new TypeError(
				'You cannot reactivate active basic subscription',
				'cannot-cancel-active-basic-subscription'
			),
			cannotCancelActiveBasicSubscription: new TypeError(
				'You cannot cancel active basic subscription',
				'cannot-cancel-active-basic-subscription'
			),
			cannotReactivateSubscription: new TypeError(
				'You cannot reactivate subscription',
				'cannot-cancel-subscription'
			),
			cannotCancelSubscription: new TypeError(
				'You cannot cancel subscription',
				'cannot-cancel-subscription'
			)
		},
		Events: {
			SubscriptionsChange: SubscriptionsChange,
			ActiveSubscriptionsChange: ActiveSubscriptionsChange
		},
		SubscriptionFactory: SubscriptionFactory,
		get subscriptions() {
			return this._subscriptions.filter(function (s) { return s.isAvailable(); });
		},
		get activeSubscriptions() {
			return this._activeSubscriptions.filter(function (s) { return s.isAvailable(); });
		},
		get activeBasicSubscription() {
			return this.activeSubscriptions.filter(function (s) {
					var subscription = this._subscriptionsMap[s.subscriptionId];
					return subscription.type === BS.PurchaseModel.SubscriptionTypes.Basic;
				}.bind(this))[0] || null;
		},
		get basicSubscriptions() {
			return this.subscriptions.filter(function (s) {
				return s.type === BS.PurchaseModel.SubscriptionTypes.Basic;
			});
		},
		get extraSubscriptions() {
			return this.subscriptions.filter(function (s) {
				return s.type === BS.PurchaseModel.SubscriptionTypes.Extra;
			});
		},
		getSubscriptionBySubscriptionId: function (subscriptionId) {
			return this._subscriptionsMap[subscriptionId];
		},
		getActiveSubscriptionBySubscriptionId: function (subscriptionId) {
			return this._activeSubscriptionsMap[subscriptionId];
		},
		containsId: function (id) {
			//return true;
			var inMemory = id in this._subscriptionsMap || id in this._activeSubscriptionsMap || false;
			if (!inMemory) return false;
			var sub = this._subscriptionsMap[id];
			return sub.isAvailable();
		},
		activateSubscription: function (activeSubDto) {
			var activeSub = SubscriptionFactory.create(activeSubDto);
			var sub = this._subscriptionsMap[activeSub.subscriptionId];
			if (sub.type === Subscription.SubscriptionTypes.Basic) {
				this._activateBasicSubscription(activeSub);
			} else {
				this._addActiveSubscription(activeSub);
			}
		},
		cancelSubscription: function (subscription) {
			if (subscription instanceof ActiveSubscription) {
				subscription = this._subscriptionsMap[subscription.subscriptionId];
			}
			if (subscription.type === Subscription.SubscriptionTypes.Basic) {
				throw this.errors.cannotCancelActiveBasicSubscription;
			}
			var activeSubscription = this.getActiveSubscriptionBySubscriptionId(subscription.id);
			if (!activeSubscription)
				throw this.errors.cannotCancelSubscription;
			activeSubscription.status = ActiveSubscription.StatusTypes.Canceled;
			var now = new Date();
			activeSubscription.availabilityPeriod.to = new Date(
				now.getFullYear(), now.getMonth() + 1, 1
			).getTime();
		},
		reactivateSubscription: function (activeSubDto) {
			var newActiveSubscription = SubscriptionFactory.create(activeSubDto);
			var subscription = this.getSubscriptionBySubscriptionId(
				newActiveSubscription.subscriptionId
			);
			if (subscription.type === Subscription.SubscriptionTypes.Basic) {
				throw this.errors.cannotReactivateActiveBasicSubscription;
			}

			var activeSubscription = this.getActiveSubscriptionBySubscriptionId(
				newActiveSubscription.subscriptionId);

			if (!activeSubscription)
				throw this.errors.cannotReactivateSubscription;

			delete this._activeSubscriptionsMap[activeSubscription.subscriptionId];
			this._activeSubscriptions = this._activeSubscriptions.filter(function (s) {
				return s.subscriptionId !== activeSubscription.subscriptionId;
			});
			this._addActiveSubscription(newActiveSubscription);
		},
		_activateBasicSubscription: function (activesub) {
			delete this._activeSubscriptionsMap[this.activeBasicSubscription.subscriptionId];
			this._activeSubscriptions = this._activeSubscriptions.filter(function (s) {
				var subscription = this._subscriptionsMap[s.subscriptionId];
				return subscription.type !== Subscription.SubscriptionTypes.Basic;
			}.bind(this));
			this._addActiveSubscription(activesub);
		},
		_addActiveSubscription: function (subscription) {
			this._activeSubscriptions.push(subscription);
			this._activeSubscriptionsMap[subscription.subscriptionId] = subscription;
		},
		updateActiveSubscriptions: function () {
			var changeDg = new ChangeDigest(0, 0, 0);
			return this._fetchService.activeSubscriptions()
				.then(function (subscriptions) {
					var tmpActiveSubs = subscriptions.map(toSubscription).filter(isAvailable);
					var tmpActiveSubsMap = tmpActiveSubs.reduce(objMapReducer, {});
					var as = this._activeSubscriptions;
					var asMap = this._activeSubscriptionsMap;
					changeDg = new ChangeDigest(
						tmpActiveSubs.reduce(inThisReducer.bind(asMap), 0),
						tmpActiveSubs.reduce(isDiffReducer.bind(asMap), 0),
						as.reduce(inThisReducer.bind(tmpActiveSubsMap), 0)
					);

					this._activeSubscriptions = tmpActiveSubs;
					this._activeSubscriptionsMap = tmpActiveSubsMap;

					if (changeDg.anyChanged) {
						BS.logger.debug('SUBSCRIPTION REPO .updateActiveSubscriptions()'
							+ ' Users active subscriptions changed.');
						BS.evMgr.dispatch(new this.Events.ActiveSubscriptionsChange());
					}

					return changeDg;
				}.bind(this)).catch(function (ex) {
					BS.logger.trace('SUBSCRIPTION REPO .updateActiveSubscriptions() Error: %s'
						.sprintf(ex));
					BS.logger.log(ex);
					var error = ex.data.errors[0];
					if (309 !== error.errorCode) throw ex;
					this._activeSubscriptions = [];
					this._activeSubscriptionsMap = {};
					return changeDg;
				}.bind(this));
			function inThisReducer (p, s) {
				return p + (s.subscriptionId in this ? 0 : 1);
			}
			function isDiffReducer (p, s) {
				var myAS = this[s.subscriptionId];
				return p + (myAS && s.isDifferentFrom(myAS) ? 1 : 0);
			}
			function objMapReducer(map, s) {
				map[s.subscriptionId] = s;
				return map;
			}
			function isAvailable (s) {
				return true;
				return s.isAvailable();
			}
			function toSubscription (s) {
				return SubscriptionFactory.create(s);
			}
		},
		updateSubscriptions: function (forceUpdate) {
			var changeDg = new ChangeDigest(0, 0, 0);
			return this._fetchService.allSubscriptions(forceUpdate)
				.then(function (subscriptions) {
					if (subscriptions === null) return changeDg;
					var tmpSubs = subscriptions
						.filter(isEligible.bind(this))
						.map(toSubscription)
						.filter(isAvailable);
					var tmpSubscriptionsMap = tmpSubs.reduce(objMapReducer, {});
					changeDg = new ChangeDigest(
						tmpSubs.reduce(inThisReducer.bind(this._subscriptionsMap), 0),
						tmpSubs.reduce(isDiffReducer.bind(this._subscriptionsMap), 0),
						this._subscriptions.reduce(inThisReducer.bind(tmpSubscriptionsMap), 0)
					);

					this._subscriptions = tmpSubs;
					this._subscriptionsMap = tmpSubscriptionsMap;

					if (changeDg.anyChanged) {
						BS.logger.debug('SUBSCRIPTION REPO .updateSubscriptions()'
							+ ' Subscriptions changed.');
						BS.evMgr.dispatch(new this.Events.SubscriptionsChange());
					}

					return changeDg;
				}.bind(this));


			function inThisReducer (p, s) {
				return p + (s.id in this ? 0 : 1);
			}
			function isDiffReducer (p, s) {
				var myAS = this[s.id];
				return p + (myAS && myAS.isDifferentFrom(s) ? 1 : 0);
			}
			function objMapReducer(map, s) {
				map[s.id] = s;
				return map;
			}
			function isEligible (sub) {
				return true;
				return !sub.isPrivate || sub.id in this._activeSubscriptionsMap;
			}
			function isAvailable (s) {
				return true;
				return s.isAvailable();
			}
			function toSubscription (s) {
				return SubscriptionFactory.create(s);
			}
		},
		initialize: function () {
			var audit = 'SUBSCRIPTION REPO .initialize() ';
			BS.logger.trace(audit + 'Started');
			var error = false;
			var t = Date.now();
			return this.updateActiveSubscriptions()
				.then(function (changesAS) {
					return changesAS.anyChanged;
				}.bind(this))
				.then(this.updateSubscriptions.bind(this))
				.then(function () {
					BS.logger.trace(audit + 'Completed in %d ms'.sprintf(Date.now() - t));
					if (!this.activeSubscriptions.length) throw this._noActiveSubscriptionException;
					BS.logger.trace('## MY SUBSCRIPTIONS');
					this.activeSubscriptions.forEach(function (subscription) {
						BS.logger.trace(subscription);
					});
				}.bind(this))
				.catch(function (ex) {
					BS.logger.trace(audit + 'Error: %s'.sprintf(ex));
					BS.logger.log(ex);
					error = true;
					throw ex;
				}.bind(this));
		},
		toString: function () {
			return 'SubscriptionRepository Length:%d'.sprintf(this.subscriptions.length);
		}
	};

	function SubscriptionsChange() { }
	SubscriptionsChange.prototype = {
		handler: 'onSubscriptionsChange',
		type: 'SubscriptionsChange',
		_defaultAction: function () {}
	};
	Object.extend(SubscriptionsChange, BS.Event);

	function ActiveSubscriptionsChange() { }
	ActiveSubscriptionsChange.prototype = {
		handler: 'onActiveSubscriptionsChange',
		type: 'ActiveSubscriptionsChange',
		_defaultAction: function () {}
	};
	Object.extend(ActiveSubscriptionsChange, BS.Event);

	BeeSmart.PurchaseModel.SubscriptionRepository = SubscriptionRepository;
	BeeSmartMain.subscriptionRepository = new SubscriptionRepository({
		activeSubscriptions: prmsActiveSubscriptionFetch,
		allSubscriptions: prmsSubscriptionsFetch
	});


	function SubscriptionFactory() {
	}

	SubscriptionFactory.create = function (options) {
		var FCI = BS.config.get('Core.Client.FRESH_CONTENT_INTERVAL');
		return 'availabilityPeriod' in options ?
			new ActiveSubscription(options, FCI) :
			new Subscription(options);
	};
	BS.PurchaseModel.SubscriptionFactory = SubscriptionFactory;

	function SubscriptionPurchaseInfo(dto) {
		this.priceItem = SubscriptionPurchaseInfo.priceItemFactory.createPriceItem(dto.priceItem);
		this.clientPurchaseEnabled = dto.clientPurchaseEnabled;
		this.offerVersion = dto.offerVersion;
	}

	SubscriptionPurchaseInfo.priceItemFactory = BS.PurchaseModel.PriceItemFactory;
	SubscriptionPurchaseInfo.prototype = {
		priceItem: null,
		clientPurchaseEnabled: true,
		offerVersion: null,
		toString: function () {
			return 'SubscriptionPurchaseInfo PurchaseEnabled: %s, PriceItem: %s'
				.sprintf(this.clientPurchaseEnabled, this.priceItem);
		}
	};
	BS.PurchaseModel.SubscriptionPurchaseInfo = SubscriptionPurchaseInfo;

	function Subscription(dto) {
		this.id = dto.id;
		this.title = dto.title;
		this.description = dto.description.escapedBeeText();
		this.poster = dto.poster || null;
		this.type = dto.type === 'basic' ?
			Subscription.SubscriptionTypes.Basic :
			Subscription.SubscriptionTypes.Extra;
		this.purchaseInfo = new SubscriptionPurchaseInfo(dto.purchaseInfo);
		this.subscriptionPeriod = dto.subscriptionPeriod;
		this.consumptionPeriod = dto.consumptionPeriod;
		this.isPrivate = dto.isPrivate;
	}

	Subscription.SubscriptionTypes = {Basic: 'basic', Extra: 'extra'};
	Subscription.prototype = {
		id: null,
		title: null,
		description: null,
		poster: null,
		type: null,
		purchaseInfo: null,
		subscriptionPeriod: null,
		consumptionPeriod: null,
		isPrivate: false,
		isSubscribeAble: function () {
			var now = Date.now();
			return now >= this.subscriptionPeriod.from && now <= this.subscriptionPeriod.to;
		},
		isDifferentFrom: function (s) {
			return this.subscriptionPeriod.from !== s.subscriptionPeriod.from ||
				this.subscriptionPeriod.to !== s.subscriptionPeriod.to ||
				this.consumptionPeriod.from !== s.consumptionPeriod.from ||
				this.consumptionPeriod.to !== s.consumptionPeriod.to;
		},
		isAvailable: function () {
			return true;
			var now = Date.now();
			return this.isSubscribeAble() ||
				now >= this.consumptionPeriod.from && now <= this.consumptionPeriod.to;
		},
		toString: function () {
			return 'Subscription#%s %s %s %s'
				.sprintf(this.id, this.isPrivate ? '[PRIVATE]' : '', this.type, this.title);
		}
	};
	BeeSmart.PurchaseModel.Subscription = Subscription;
	BeeSmart.PurchaseModel.SubscriptionTypes = Subscription.SubscriptionTypes;

	function ActiveSubscription(dto, availabilityEndDelay) {
		this.id = dto.id;
		this.subscriptionId = dto.subscriptionId;
		this.availabilityPeriod = dto.availabilityPeriod;
		this.availabilityPeriod.to += availabilityEndDelay || 0;
		this.status = dto.status === 'canceled' ?
			ActiveSubscription.StatusTypes.Canceled :
			ActiveSubscription.StatusTypes.Recurring;
	}

	ActiveSubscription.StatusTypes = {Recurring: 'recurring', Canceled: 'canceled'};
	ActiveSubscription.availableTimeMargin = 1e4;
	ActiveSubscription.prototype = {
		id: null,
		subscriptionId: null,
		availabilityPeriod: null,
		status: null,
		isAvailable: function () {
			return true;
			var now = Date.now();
			return now >= this.availabilityPeriod.from - ActiveSubscription.availableTimeMargin &&
				now <= this.availabilityPeriod.to;
		},
		isDifferentFrom: function (s) {
			return this.availabilityPeriod.from !== s.availabilityPeriod.from ||
				this.availabilityPeriod.to !== s.availabilityPeriod.to;
		},
		toString: function () {
			return 'ActiveSubscription#%s SubscriptionId: %s Status: %s'
				.sprintf(this.id, this.subscriptionId, this.status);
		}
	};
	BS.PurchaseModel.ActiveSubscription = ActiveSubscription;

	function prmsActiveSubscriptionFetch() {
		return BS.request.Get(
			'/restapi/rest/%d/%d/store/active-subscriptions'.sprintf(BS.portal.user.regionId,
				BS.portal.user.userId),
			{accept: 'json', cache: 'CARD', data: {'language': BS.portal.user.language.label}}
		).then(function (response) {
			return response.data;
		});
	}

	function prmsSubscriptionsFetch(forceUpdate) {
		var url = '/restapi/rest/%d/store/subscriptions'.sprintf(BS.portal.user.regionId);
		return BS.request.Get(url, {
			accept: 'json', cache: 'CARD', data: {'language': BS.portal.user.language.label},
			noCachedData: !forceUpdate
		}).then(function (response) {
			return response.data && response.data.list;
		});
	}

})(
	BeeSmart,
	BeeSmart.BeeSmartMain,
	Q,
	BeeSmart.PurchaseModel.ChangeDigest
);

(function (BS, BeeSmartMain, q, em, ChangeDigest) {
	var user;
	var subscriptionRepo;

	em.bind('onBeeSmartLoginSuccess', function () {
		user = BS.portal.user;
		subscriptionRepo = BeeSmartMain.subscriptionRepository;
	});

	function ProductRepositoryChangeEvent(key, type, ids, detailsIncluded) {
		this.type = 'ProductRepositoryChange';
		this.value = {
			key: key,
			type: type,
			ids: ids,
			detailsIncluded: detailsIncluded
		};
		this.handler = 'onProductRepositoryChange';
		this.description = 'Product repository update has been completed';
	}

	ProductRepositoryChangeEvent.prototype = new BS.Event();

	function PurchasedProductsChangeEvent() { }
	PurchasedProductsChangeEvent.prototype = {
		handler: 'onPurchasedProductsChange',
		type: 'PurchasedProductsChange',
		_defaultAction: function () {}
	};
	Object.extend(PurchasedProductsChangeEvent, BS.Event);


	function ProductRepository(fetchService, subscriptionRepository) {
		this._fetchService = fetchService;
		this._subscriptionRepository = subscriptionRepository;
		this._purchasedProductsCache = {};
		this._productsCache = {};
		this._purchasedItemsCache = {};
		this._itemsCache = {};
		this._updatePromises = {};
	}

	var PurchaseItemType = {
		Live: 'live', OnDemand: 'on-demand', BeeApp: 'bee-app', NPVRQuota: 'npvr-quota',
		ShowView: 'show-view', Misc: 'misc'
	};
	PurchaseItemType.getType = function (value) {
		switch (value) {
		case 'live':
			return PurchaseItemType.Live;
		case 'on-demand':
			return PurchaseItemType.OnDemand;
		case 'bee-app':
			return PurchaseItemType.BeeApp;
		case 'npvr-quota':
			return PurchaseItemType.NPVRQuota;
		case 'show-view':
			return PurchaseItemType.ShowView;
		}
		return 'misc';
	};

	ProductRepository.prototype = {
		_fetchService: null,
		_subscriptionRepository: null,
		_purchasedProductsCache: {},
		_productsCache: {},
		_purchasedItemsCache: {},
		_itemsCache: {},

		Product: Product,
		PurchasedProduct: PurchasedProduct,
		ProductFactory: ProductFactory,
		Kinds: {Product: 'product', PurchasedProduct: 'purchased-product'},
		Types: PurchaseItemType,
		_updatePromises: {},
		Events: {
			PurchasedProductsChange: PurchasedProductsChangeEvent,
			ProductRepositoryChange: ProductRepositoryChangeEvent
		},
		_getProductsCache: function (kind) {
			return kind === this.Kinds.PurchasedProduct ?
				this._purchasedProductsCache : this._productsCache;
		},
		_getItemsCache: function (kind) {
			return kind === this.Kinds.PurchasedProduct ?
				this._purchasedItemsCache : this._itemsCache;
		},

		add: function (product) {
			var cacheKind = product instanceof PurchasedProduct ?
				this.Kinds.PurchasedProduct : this.Kinds.Product;
			var productCache = this._getProductsCache(cacheKind);
			var itemCache = this._getItemsCache(cacheKind);

			if (!(product.type in productCache)) {
				productCache[product.type] = [];
			}

			if (!('idMap' in productCache)) {
				productCache.idMap = {};
			}

			if (product instanceof Product && product.id in productCache.idMap) {
				productCache.idMap[product.id]._setProps(product);
				return;
			}

			productCache[product.type].push(product);
			productCache.idMap[product.id] = product;

			product.items.forEach(function (pi) {
				if (!(pi.type in itemCache)) {
					itemCache[pi.type] = {};
				}

				if (!(pi.id in itemCache[pi.type])) {
					itemCache[pi.type][pi.id] = [];
				}

				itemCache[pi.type][pi.id].push(product);
			}.bind(this));
		},
		remove: function (product) {
			var cacheKind = product instanceof PurchasedProduct ?
				this.Kinds.PurchasedProduct : this.Kinds.Product;
			var removeProd = function (array, entity) {
				return array.filter(function (prod) {
					return prod.id !== entity.id;
				});
			};

			var productCache = this._getProductsCache(cacheKind);
			var itemCache = this._getItemsCache(cacheKind);

			var type = product.type;
			var id = product.id;

			if (productCache.idMap && id in productCache.idMap) {
				delete productCache.idMap[id];
			}

			if (type in productCache) {
				productCache[type] = removeProd(productCache[type], product);
			}

			product.items.forEach(function (item) {
				var type = item.type;
				var id = item.id;
				if (type in itemCache && id in itemCache[type]) {
					itemCache[type][id] = removeProd(itemCache[type][id], product);
					if (itemCache[type][id].length === 0)
						delete itemCache[type][id];
				}
			}.bind(this));
		},
		clearProductRepoData: function (type) {
			var audit = 'PRODUCT REPOSITORY :: ';
			if (type === 'live') {
				BS.logger.debug(audit + 'live products can\'t be cleared!');
				throw 'live products can\'t be cleared!';
			}
			var products = this.findByType(type);
			products.forEach(function (p) {
				this.remove(p);
			}.bind(this));
			BS.logger.debug(audit + 'cleared %d on-demand products from repository',
				products.length);
		},
		findByType: function (type, kind) {
			kind = kind || this.Kinds.Product;
			var cache = this._getProductsCache(kind);
			var res = type in cache ? cache[type] : [];
			return res.filter(isPayableOrConsumable);
		},
		findById: function (id, kind) {
			kind = kind || this.Kinds.Product;
			var cache = this._getProductsCache(kind);
			var product = 'idMap' in cache ? cache.idMap[id] : void 0;
			if (product && !isPayableOrConsumable(product)) {
				return void 0;
			}
			return product;
		},
		findByIds: function (ids, type, kind) {
			kind = kind || this.Kinds.Product;
			type = type || null;
			return ids.map(function (id) {
				return this.findById(id, kind);
			}.bind(this)).filter(function (prod) {
				return prod && (type === null || (prod && prod.type === type));
			});
		},
		findByItemId: function (itemId, itemType, kind) {
			return this.findAllForItemId(itemId, itemType, kind).filter(isPayableOrConsumable);
		},
		findAllForItemId: function (itemId, itemType, kind) {
			kind = kind || this.Kinds.Product;
			var cache = this._getItemsCache(kind);
			return itemType in cache && itemId in cache[itemType] ? cache[itemType][itemId] : [];
		},
		findByItemIds: function (itemIds, itemType, kind) {
			kind = kind || this.Kinds.Product;
			return itemIds.reduce(function (products, itemId) {
				var itemProducts = this.findByItemId(itemId, itemType, kind);
				for (var i = 0, len = itemProducts.length; i < len; i++) {
					if (products.indexOf(itemProducts[i]) === -1) {
						products.push(itemProducts[i]);
					}
				}
				return products;
			}.bind(this), []);
		},
		findAll: function (kind) {
			kind = kind || this.Kinds.Product;
			var cache = this._getProductsCache(kind);
			return Object.keys(cache).reduce(function (res, key) {
				if (key !== 'idMap') {
					res = res.concat(cache[key]);
				}
				return res;
			}.bind(this), []).filter(isPayableOrConsumable);
		},
		initialize: function () {
			var that = this;
			return q.all([
				that.updateAllProductsOfType(that.Types.Live, false),
				that.updatePurchasedProducts()
			]);
		},
		updateRepository: function (oldProducts, newProductsDto) {
			var that = this;
			var added = 0, updated = 0, removed = 0;
			var FCI = BS.config.get('Core.Client.FRESH_CONTENT_INTERVAL');
			var oldProductsMap = oldProducts.reduce(reduceToMap, {});
			newProductsDto.forEach(function(productDto){
				var dtoKind = 'availabilityPeriod' in productDto ?
					that.Kinds.PurchasedProduct :
					that.Kinds.Product;
				var oldProd = oldProductsMap[productDto.id] ||
					that.findById(productDto.id, dtoKind);
				if (oldProd) {
					that.remove(oldProd);
					oldProd._setProps(productDto);
					if (oldProd instanceof PurchasedProduct || oldProd.purchaseInfo.length) {
						that.add(oldProd);
						delete oldProductsMap[productDto.id];
					}
					if (oldProd instanceof PurchasedProduct) {
						if (oldProd.isDifferentFrom(productDto)) updated++;
					} else {
						updated++;
					}
				} else {
					added++;
					that.add(ProductFactory.createProduct(productDto, FCI));
				}
			});
			oldProducts.forEach(function (prod) {
				if (prod.id in oldProductsMap) {
					that.remove(prod);
					removed++;
				}
			});
			return new ChangeDigest(added, updated, removed);
			function reduceToMap (map, p) {
				map[p.id] = p;
				return map;
			}
		},
		update: function (type, itemType, itemIds, includeDetails) {
			var that = this;
			var updateKey = generateKey();

			if (updateKey in this._updatePromises) {
				BS.logger.info(
					'PROD REPO :: Update already in progress, returning promise (%s)', updateKey
				);
				return this._updatePromises[updateKey];
			}

			if (type !== 'purchased-products' &&
				that._subscriptionRepository.activeBasicSubscription === null
			) return q(false);

			var promiseOfUpdate = q();

			switch (type) {
			case 'products-of-items':
				BS.logger.trace('PROD REPO :: Updating products of item with id %s', itemIds);
				promiseOfUpdate = that._fetchService.productsOfItem(
					itemIds, itemType, includeDetails
				).then(function (products) {
					products = products.filter(isVisibleToUserFilter);
					BS.logger.trace(
						'PROD REPO :: Updated products of item (%s), got %d products',
						itemIds, products.length
					);
					var oldProducts = that.findByItemIds(itemIds, itemType);
					dispatchOnChange(that.updateRepository(oldProducts, products));
					return q(true);
				});

				break;
			case 'products-of-type':
				promiseOfUpdate = that._fetchService.productsOfType(
					itemIds, itemType, includeDetails
				).then(function (products) {
					products = products.filter(isVisibleToUserFilter);
					BS.logger.trace(
						'PROD REPO :: Updated %d products of type (%s), got %d products',
						itemIds.length, itemType, products.length
					);
					var oldProducts = that.findByIds(itemIds, itemType);
					dispatchOnChange(that.updateRepository(oldProducts, products));
					return q(true);
				});

				break;
			case 'all-products-of-type':
				promiseOfUpdate = that._fetchService.allProductsOfType(
					itemType, includeDetails, itemType === that.Types.Live
				).then(function (products) {
					if (!products && itemType === that.Types.Live) return q(true);
					products = products.filter(isVisibleToUserFilter);
					BS.logger.trace(
						'PROD REPO :: Updated all products of type (%s), got %d products',
						itemType, products.length
					);
					var oldProducts = that.findByType(itemType);
					dispatchOnChange(that.updateRepository(oldProducts, products));
					return q(true);
				});

				break;
			case 'products':
				promiseOfUpdate = that._fetchService.products(
					itemIds, includeDetails
				).then(function (products) {
					products = products.filter(isVisibleToUserFilter);
					BS.logger.trace(
						'PROD REPO :: Updated %d products, got %d products',
						itemIds.length, products.length
					);
					var oldProducts = that.findByIds(itemIds, itemType);
					dispatchOnChange(that.updateRepository(oldProducts, products));
					return q(true);
				});

				break;
			case 'purchased-products':
				promiseOfUpdate = that._fetchService.purchasedProducts()
					.then(function (purchasedProducts) {
						var oldProducts = that.findAll(that.Kinds.PurchasedProduct);
						BS.logger.trace(
							'PROD REPO :: Updated purchased products, got %d purchased products',
							purchasedProducts.length
						);
						var changeDigest = that.updateRepository(oldProducts, purchasedProducts);
						if (changeDigest.anyChanged) {
							BS.logger.trace('PROD REPO :: Purchased product list changed: %s',
								changeDigest);
							em.dispatch(new that.Events.PurchasedProductsChange());
						}
						return q(true);
					});
				break;
			}

			that._updatePromises[updateKey] = promiseOfUpdate;

			that._updatePromises[updateKey].finally(function() {
				delete that._updatePromises[updateKey];
			});

			return that._updatePromises[updateKey];

			function isVisibleToUserFilter(prod) {
				return prod.purchaseInfo.some(function (pi) {
					return that._subscriptionRepository.containsId(pi.subscriptionId);
				});
			}

			function generateKey() {
				return type + itemType + itemIds + includeDetails;
			}

			function dispatchOnChange(changeDigest) {
				if (changeDigest.anyChanged) {
					BS.logger.trace('PROD REPO :: Update detected changes in product update: %s',
						changeDigest);
					em.dispatch(new that.Events.ProductRepositoryChange(type, itemType, itemIds,
						includeDetails));
				}
			}
		},
		updateProductsOfItems: function (ids, type, includeDetails) {
			return this.update('products-of-items', type, ids, includeDetails);
		},
		updateProductsOfType: function (ids, type, includeDetails) {
			return this.update('products-of-type', type, ids, includeDetails);
		},
		updateAllProductsOfType: function (type, includeDetails) {
			return this.update('all-products-of-type', type, null, includeDetails);
		},
		updateProducts: function (ids, includeDetails) {
			return this.update('products', null, ids, includeDetails);
		},
		updatePurchasedProducts: function () {
			return this.update('purchased-products');
		}
	};

	function isPayableOrConsumable(product) {
		if (product instanceof Product) {
			return product.isFree() || product.isPayable();
		} else {
			return product.isAvailable();
		}
	}

	BeeSmartMain.productRepository = new ProductRepository({
		productsOfItem: prmsProductsOfItemFetch,
		allProductsOfType: prmsAllProductsOfTypeFetch,
		productsOfType: prmsProductsOfType,
		products: prmsProductsFetch,
		purchasedProducts: prmsPurchasedProductsFetch
	}, BeeSmartMain.subscriptionRepository);
	BeeSmart.PurchaseModel.ProductRepository = ProductRepository;

	function ProductFactory () {}
	ProductFactory.createProduct = function (options, delay){
		return options.consumptionPeriod ?
			new Product(options) :
			new PurchasedProduct(options, delay);
	};
	BeeSmart.PurchaseModel.ProductFactory = ProductFactory;

	function MetaData(dto, alreadyEscaped) {
		if (!dto) return;
		this.genres = dto.genres;
		this.director = dto.director;
		this.duration = dto.duration;
		this.cast = dto.cast;
		this.summary = dto.summary;
		this.year = dto.year;
		this.country = dto.country;
		this.description = dto.description;
		this._descriptionReady = alreadyEscaped || false;
	}

	MetaData.prototype = {
		genres: [],
		director: null,
		duration: null,
		cast: null,
		summary: null,
		year: null,
		country: null,
		_description: null,
		_descriptionReady: null,
		get description() {
			if (!this._descriptionReady && this._description) {
				this._description = this._description.escapedBeeText();
				this._descriptionReady = true;
			}
			return this._description || '';
		},
		set description(newDescription) {
			this._description = newDescription;
			this._descriptionReady = false;
		}
	};

	function PurchaseInfoFactory() {
	}

	PurchaseInfoFactory.prototype = {
		create: function (purchaseInfoDto) {
			return Array.isArray(purchaseInfoDto) ?
				this.createProductPurchaseInfo(purchaseInfoDto) :
				this.createPurchasedProductPurchaseInfo(purchaseInfoDto);
		},
		createProductPurchaseInfo: function (productPurchaseInfoDto) {
			return new ProductPurchaseInfo(productPurchaseInfoDto);
		},
		createPurchasedProductPurchaseInfo: function (purchasedProductPurchaseInfo) {
			return new PurchasedProductPurchaseInfo(purchasedProductPurchaseInfo);
		}
	};
	var purchaseInfoFactory = new PurchaseInfoFactory();

	function PurchaseInfo() {
		this.list = [];
		this.map = {};
	}

	PurchaseInfo.subscriptionRepository = BeeSmartMain.subscriptionRepository;
	PurchaseInfo.prototype = {
		get subscriptionRepository() {
			return PurchaseInfo.subscriptionRepository;
		},
		get length() {
			return this.list.length;
		},
		list: [],
		map: {},
		_add: function (purchaseInfoDto) {
			this.map[purchaseInfoDto.subscriptionId] = purchaseInfoDto;
			this.list.push(purchaseInfoDto);
		},
		isInUsersSubscription: function () {
			return this.subscriptionRepository.activeSubscriptions.some(function (s) {
				return s.subscriptionId in this.map;
			}.bind(this));
		},
		getBySubscriptionId: function (subscriptionId) {
			var sub = this.subscriptionRepository.getSubscriptionBySubscriptionId(subscriptionId);
			return sub ? this.map[sub.id] || null : null;
		},
		get: function () {
			var subs = this.subscriptionRepository.activeSubscriptions;
			if (!subs.length || !subs[0]) return null;
			subs = subs.reduce(function (arr, s) {
				var sub = this.map[s.subscriptionId];
				if (sub) arr.push(sub);
				return arr;
			}.bind(this), []);
			return subs.length ? subs : null;
		}
	};

	function ProductPurchaseInfo(listDto) {
		PurchaseInfo.apply(this, arguments);
		listDto.forEach(function (dto) {
			if (!this.subscriptionRepository.containsId(dto.subscriptionId))
				return;
			dto.priceList = dto.priceList.map(function (pi) {
				return PurchaseInfo.priceItemFactory.createPriceItem(pi);
			});
			this._add(dto);
		}.bind(this));
	}

	Object.extend(ProductPurchaseInfo, PurchaseInfo);

	function PurchasedProductPurchaseInfo(dto) {
		PurchaseInfo.apply(this, arguments);
		dto.priceItem = PurchaseInfo.priceItemFactory.createPriceItem(dto.priceItem);
		this._add(dto);
	}

	PurchaseInfo.priceItemFactory = BS.PurchaseModel.PriceItemFactory;
	PurchasedProductPurchaseInfo.prototype = {
		isInUsersSubscription: function () {
			return true;
		},
		get: function (subId) {
			return !subId || subId in this.map ? this.list[0] : null;
		}
	};
	Object.extend(PurchasedProductPurchaseInfo, PurchaseInfo);

	BS.PurchaseModel.PurchaseInfo = PurchaseInfo;
	BS.PurchaseModel.ProductPurchaseInfo = ProductPurchaseInfo;
	BS.PurchaseModel.PurchasedProductPurchaseInfo = PurchasedProductPurchaseInfo;
	BS.PurchaseModel.PurchaseInfoFactory = PurchaseInfoFactory;

	function MainProduct(dto) {
		this._setProps(dto);
	}

	MainProduct.prototype = {
		id: null,
		title: null,
		poster: null,
		type: null,
		purchaseInfo: null,
		items: [],
		ageRating: null,
		rating: null,
		details: null,
		_setProps: function (p) {
			this.id = p.id;
			this.title = p.title;
			this.poster = p.poster;
			this.type = PurchaseItemType.getType(p.type);
			this.items = p.items.map(function (i) {
				i.type = PurchaseItemType.getType(i.type);
				return i;
			});
			this.purchaseInfo = p.purchaseInfo instanceof PurchaseInfo ?
				p.purchaseInfo : purchaseInfoFactory.create(p.purchaseInfo);
			this.ageRating = p.ageRating;
			this.rating = p.rating;
			if (p.details) {
				this.details = p.details instanceof MetaData ? p.details :
					new MetaData(p.details, p.details instanceof MetaData);
			}
		},
		isSingle: function () {
			return this.items.length === 1;
		},
		isAgeRestricted: function () {
			return !user.checkParentalLimit(this.ageRating);
		}
	};

	function Product(p) {
		MainProduct.apply(this, [p]);
	}

	Product.getNewProductMarkMillis = function () {
		return BS.config.get('Core.Client.Vod.NEW_MOVIES_MARK_HOURS') * 36e5;
	};
	Product.prototype = {
		purchasePeriod: null,
		consumptionPeriod: null,
		get priceList () {
			return getPriceListForProduct(this);
		},
		get clientPurchaseEnabled () {
			var info = this.purchaseInfo.get();
			return info ? info.some(function (i) {
				return i.clientPurchaseEnabled;
			}) : null;
		},
		_setProps: function (p) {
			MainProduct.prototype._setProps.apply(this, arguments);
			this.purchasePeriod = p.purchasePeriod;
			this.consumptionPeriod = p.consumptionPeriod;
		},
		isPreOrder: function () {
			return this.isPayable() && this.consumptionPeriod.from > Date.now();
		},
		isPayable: function () {
			var now = Date.now();
			return (!this.purchaseInfo.isInUsersSubscription() || this.priceList.length > 0) &&
				this.purchasePeriod.from <= now &&
				this.purchasePeriod.to > now;
		},
		isFree: function () {
			var now = Date.now();
			var currencyPriceItem = this.getCheapestPriceItem('currency');
			var ppPriceItem = this.getCheapestPriceItem('points');
			return !!(this.consumptionPeriod.from <= now && this.consumptionPeriod.to > now &&
			((currencyPriceItem && currencyPriceItem.price.value === 0) ||
			(ppPriceItem && ppPriceItem.price.value === 0)));
		},
		isNew: function () {
			return Date.now() - this.purchasePeriod.from < Product.getNewProductMarkMillis();
		},
		getCheapestPriceItem: function (type) {
			type = type || 'currency';
			var priceList = this.priceList;
			if (!priceList || priceList.length === 0)
				return null;
			return priceList.reduce(function (ci, pitem) {
				if (pitem.price.type !== type)
					return ci;
				return !ci || ci.price.value > pitem.price.value ? pitem : ci;
			}, null);
		},
		getPurchaseInfoForPriceItem: function(priceItem) {
			var priceItemId = priceItem.id;
			return this.purchaseInfo.get().filter(function (el) {
				return el.priceList.some(function (priceItem) {
					return priceItem.id === priceItemId;
				});
			})[0];
		},
		getMostExpensivePriceItem: function (type) {
			type = type || 'currency';
			if (!this.priceList || this.priceList.length === 0)
				return null;
			return this.priceList.reduce(function (ci, pitem) {
				if (pitem.price.type !== type)
					return ci;
				return !ci || ci.price.value < pitem.price.value ? pitem : ci;
			}, null);
		},
		toString: function () {
			var groupType = this.isSingle() ? 'single' : 'multiple';
			return 'Product#%s InUserSub:%s (%s) (%s) (%s)'.sprintf(this.id,
				this.purchaseInfo.isInUsersSubscription(), this.title, this.type, groupType);
		}
	};
	Object.extend(Product, MainProduct);
	BS.PurchaseModel.Product = Product;

	function getPriceListForProduct(product) {
		var infos = product.purchaseInfo.get();
		var priceItemMap = {};
		var similarPriceItemMap = {};

		return infos && infos.length ? infos.reduce(toPriceList, []) : null;

		function toPriceList(priceList, purchaseInfo) {
			purchaseInfo.priceList.forEach(function (pi) {
				var similarKey = similarPriceKey(pi);
				if (similarKey in similarPriceItemMap) {
					if (priceList[similarPriceItemMap[similarKey]].price.value > pi.price.value)
						priceList[similarPriceItemMap[similarKey]] = pi;
					return;
				}

				priceList.push(pi);
				priceItemMap[pi.id] = pi;
				similarPriceItemMap[similarKey] = priceList.length - 1;
			});
			return priceList;
		}

		function similarPriceKey(pi) {
			return [
				pi.price.type, pi.billingType, pi.rentalPeriodUnit, pi.rentalPeriodValue
			].join('_');
		}
	}

	function PurchasedProduct(p, availabilityEndDelay) {
		MainProduct.apply(this, [p]);
		this._availabilityPeriod = p.availabilityPeriod;
		this.purchaseTimestamp = p.purchaseTimestamp;
		availabilityEndDelay = availabilityEndDelay || 0;
		if (availabilityEndDelay > 0 && this.priceItem.billingType === 'periodic') {
			this.availabilityEndDelay = availabilityEndDelay;
		}
	}

	PurchasedProduct.prototype = {
		_availabilityPeriod: null,
		purchaseTimestamp: null,
		availabilityEndDelay: 0,
		_setProps: function (p) {
			MainProduct.prototype._setProps.apply(this, arguments);
			this._availabilityPeriod = p instanceof PurchasedProduct
				? p._availabilityPeriod
				: p.availabilityPeriod;
			this.purchaseTimestamp = p.purchaseTimestamp;
		},
		get priceItem() {
			return this.purchaseInfo.get().priceItem;
		},
		get availabilityPeriod() {
			return {
				from: this._availabilityPeriod.from - 10e3,
				to: this._availabilityPeriod.to + this.availabilityEndDelay
			};
		},
		isDifferentFrom: function (pp) {
			return pp.availabilityPeriod.from !== this._availabilityPeriod.from ||
				pp.availabilityPeriod.to !== this._availabilityPeriod.to;
		},
		isNew: function () {
			return false;
		},
		isAvailable: function () {
			return true;
			var now = Date.now();
			return this.availabilityPeriod.to >= now;
		},
		isPurchased: function () {
			var now = Date.now();
			return this.availabilityPeriod.from <= now && this.availabilityPeriod.to > now;
		},
		isPreOrdered: function () {
			var now = Date.now();
			return this.availabilityPeriod.from > now;
		},
		toString: function () {
			var groupType = this.isSingle() ? 'single' : 'multiple';
			var aDelay = this.availabilityEndDelay > 0 ? ' DELAYED' : '';
			return 'PurchasedProduct#%s (a. to: %s%s) (%s) (%s) (%s)'.sprintf(this.id,
				new Date(this.availabilityPeriod.to),
				aDelay, this.title, this.type, groupType);
		}
	};
	Object.extend(PurchasedProduct, MainProduct);
	BS.PurchaseModel.PurchasedProduct = PurchasedProduct;

	function prmsProductsOfItemFetch(itemIds, itemType, includeDetails) {
		itemIds = itemIds.sort();
		var groups = Array.makeGroups(itemIds, 150);

		var allRequestsPromises = q.all(groups.map(function (g) {
			var products = [];
			return BS.request.Get('/restapi/rest/%d/store/products'.sprintf(user.regionId), {
				accept: 'json', cache: 'CARD',
				data: {
					'purchase_item_id_list': g.join(','),
					'purchase_item_type': itemType,
					'include_details': includeDetails,
					'language': BS.portal.user.language.label
				}
			}).then(function getProductsPage(response) {
				var nextCall = response.data['nextPageLink'];
				products = products.concat(response.data.list);
				return nextCall !== null ?
					BS.request.Get(nextCall, {accept: 'json'}).then(getProductsPage) :
					q(products);
			});
		}));

		return allRequestsPromises.spread(function () {
			return [].concat.apply([], arguments);
		});
	}

	function prmsAllProductsOfTypeFetch(type, includeDetails, canHandleCCResponse) {
		includeDetails = includeDetails || false;
		canHandleCCResponse = canHandleCCResponse || false;
		var products = [];
		return BS.request.Get(
			'/restapi/rest/%d/store/products'.sprintf(user.regionId), {
				accept: 'json', cache: 'CARD',
				data: {
					'purchase_item_type': type,
					'include_details': includeDetails,
					'language': BS.portal.user.language.label
				},
				noCachedData: canHandleCCResponse && prmsAllProductsOfTypeFetch.hasDataFor[type],
			}).then(function getProductsPage(response) {
			if (response.data === null) return q(null);
			var nextCall = response.data['nextPageLink'];
			products = products.concat(response.data.list);
			if (nextCall === null) {
				if (canHandleCCResponse) {
					prmsAllProductsOfTypeFetch.hasDataFor[type] = true;
				}
				return q(products);
			}
			return BS.request.Get(nextCall, {accept: 'json'}).then(getProductsPage);
		});
	}

	prmsAllProductsOfTypeFetch.hasDataFor = {live: false};

	function prmsProductsOfType(productIds, type, includeDetails) {
		productIds = productIds.sort();
		var groups = Array.makeGroups(productIds, 150);

		var allRequestsPromises = q.all(groups.map(function (g) {
			var products = [];
			return BS.request.Get('/restapi/rest/%d/store/products'.sprintf(user.regionId), {
				accept: 'json', cache: 'CARD',
				data: {
					'purchase_group_id_list': g.join(','),
					'purchase_item_type': type,
					'include_details': includeDetails,
					'language': BS.portal.user.language.label
				}
			}).then(function getProductsPage(response) {
				var nextCall = response.data['nextPageLink'];
				products = products.concat(response.data.list);
				return nextCall !== null ?
					BS.request.Get(nextCall, {accept: 'json'}).then(getProductsPage) :
					q(products);
			});
		}));

		return allRequestsPromises.spread(function () {
			return [].concat.apply([], arguments);
		});
	}

	function prmsProductsFetch(productIds, includeDetails) {
		productIds = productIds.sort();
		var groups = Array.makeGroups(productIds, 150);

		var allRequestsPromises = q.all(groups.map(function (g) {
			var products = [];
			return BS.request.Get('/restapi/rest/%d/store/products'.sprintf(user.regionId), {
				accept: 'json', cache: 'CARD',
				data: {
					'purchase_group_id_list': g.join(','),
					'include_details': includeDetails,
					'language': BS.portal.user.language.label
				}
			}).then(function getProductsPage(response) {
				var nextCall = response.data['nextPageLink'];
				products = products.concat(response.data.list);
				return nextCall !== null ?
					BS.request.Get(nextCall, {accept: 'json'}).then(getProductsPage) :
					q(products);
			});
		}));

		return allRequestsPromises.spread(function () {
			return [].concat.apply([], arguments);
		});
	}

	function prmsPurchasedProductsFetch() {
		var products = [];
		return BS.request.Get(
			'/restapi/rest/%d/%d/store/purchased-products'.sprintf(user.regionId, user.userId),
			{
				accept: 'json',
				cache: 'CARD',
				data: {
					'include_details': true,
					'language': BS.portal.user.language.label
				}
			}
		).then(function getProductsPage(response) {
			var nextCall = response.data['nextPageLink'];
			products = products.concat(response.data.list);
			return nextCall !== null ?
				BS.request.Get(nextCall, {accept: 'json'}).then(getProductsPage) :
				q(products);
		});
	}

	function ProductFavouriteRepository(timeToReset) {
		this.list = [];
		if (timeToReset)
			this.timeToReset = timeToReset;
	}

	ProductFavouriteRepository.prototype = {
		list: null,
		isFresh: false,
		timeToReset: 3600e3,
		resetTimerRef: null,
		add: function (productId) {
			if (this.list.indexOf(productId) !== -1)
				return;
			this.list.push(productId);
		},
		remove: function (productId) {
			this.list = this.list.filter(function (id) {
				return id !== productId;
			});
		},
		contains: function (productId) {
			return this.getAll().then(function (list) {
				return list.some(function (pid) {
					return pid === productId;
				});
			});
		},
		reset: function () {
			BS.logger.debug('PROD FAV REPO :: Resetting repository');
			this.isFresh = false;
			this.list = [];
			this.clearResetTimer();
		},
		getAll: function () {
			if (this.isFresh)
				return q(this.list);

			var that = this;
			that.clearResetTimer();
			that.resetTimerRef = setTimeout(function() { that.reset(); }, that.timeToReset);

			return BS.request.Get(
				'/restapi/rest/%d/%d/store/products/favourite'
					.sprintf(BS.portal.user.regionId, BS.portal.user.userId),
				{accept: 'json'}
			).then(BS.request.pageItemsAggregator()).then(function (list) {
				that.list = list;
				that.isFresh = true;
				return that.list;
			});
		},
		clearResetTimer: function () {
			if (this.resetTimerRef !== null) {
				clearTimeout(this.resetTimerRef);
				this.resetTimerRef = null;
			}
		}
	};

	BeeSmartMain.productFavouriteRepository = new ProductFavouriteRepository();
	BS.PurchaseModel.ProductFavouriteRepository = ProductFavouriteRepository;

	var updatePurchaseProductsTimer = null;
	var updatePurchaseProductsCount = 0;
	function createUpdatePurchaseProductsTimer() {
		updatePurchaseProductsTimer = new BS.Utils.Timer(function() {
			BS.logger.debug('PROD REPO :: Requested purchase products update %d times',
				updatePurchaseProductsCount);
			BeeSmartMain.productRepository.updatePurchasedProducts();
			updatePurchaseProductsTimer = null;
			updatePurchaseProductsCount = 0;
		}, 10e3);
	}

	BS.evMgr.bind('msg:onResourceChanged', function (ev) {
		var message = ev.data.body;
		switch (message.resource) {
		case 'FAVOURITE_PRODUCTS':
			BeeSmartMain.productFavouriteRepository.reset();
			break;
		case 'PURCHASED_PRODUCTS':
			BS.logger.debug('PROD REPO :: Update requested by onResourceChanged message, batching');
			if (!updatePurchaseProductsTimer) createUpdatePurchaseProductsTimer();
			updatePurchaseProductsTimer.reset();
			updatePurchaseProductsCount++;

			break;
		}
	});

	em.bind('onBeeSmartReady', function () {
		function resetAllLiveProductsL2CacheFlag() {
			prmsAllProductsOfTypeFetch.hasDataFor.live = false;
		}
		em.bind('onSubscriptionsChange', resetAllLiveProductsL2CacheFlag);
		em.bind('onActiveSubscriptionsChange', resetAllLiveProductsL2CacheFlag);
	});

})(
	BeeSmart,
	BeeSmart.BeeSmartMain,
	Q,
	BeeSmart.evMgr,
	BeeSmart.PurchaseModel.ChangeDigest
);


(function (BS, BeeSmartMain, q, em, mm) {
	var user;
	var bsRegionId;
	var bsUserId;

	em.bind('onBeeSmartLoginSuccess', function () {
		user = BS.portal.user;
		bsRegionId = user.regionId;
		bsUserId = user.userId;
	});

	function CategoryRepository(fetchService, categoryLicenseService) {
		this.fetch = fetchService;
		this.categoryLicenseService = categoryLicenseService;
		this._categories = [];
	}

	CategoryRepository.prototype = {
		fetch: null,
		categoryLicenseService: null,
		_categories: [],
		Category: Category,
		DynamicCategory: DynamicCategory,

		add: function (cat) {
			if (cat instanceof Category)
				this._categories.push(cat);
		},
		get: function (){
			return this._categories;
		},
		remove: function (catId){
			this._categories = this._categories.filter(function(cat){
				return cat.id !== catId;
			});
		},
		findById: function (id){
			return this._categories.filter(idFilter)[0] || null;
			function idFilter (cat) {
				return cat.id === id;
			}
		},
		findByType: function (type){
			return this.get().filter(function (item){
				return item.type === type;
			});
		},
		findByParentIdAndType: function (parentId, type){
			var categories =  this._categories
				.filter(function (cat) {
					return cat.type === type && (parentId === undefined ?
						rootFilter(cat) : parentFilter(cat));
				});

			function rootFilter(cat) {
				return cat.isRoot();
			}
			function parentFilter(cat) {
				return cat.parentId === parentId;
			}

			if (!parentId && type === 'on-demand') {
				return this.sortAndFilterRootCategories(categories);
			} else {
				return categories;
			}
		},
		sortAndFilterRootCategories: function (catList) {
			var catOrder = BS.skinConfiguration.onDemandCategories.order;
			var staticCat = [];
			var serverCat = [];
			var newCatList = [];

			catList.forEach(function (cat) {
				if (cat instanceof BS.PurchaseModel.DynamicCategory) staticCat.push(cat);
				else serverCat.push(cat);
			});

			catOrder.forEach(function (catId) {
				if (catId === 'dynamic-categories') {
					newCatList = newCatList.concat(serverCat);
				} else {
					var category = staticCat.filter(function (cat) {
						return cat.id === catId;
					})[0];

					if (category) {
						newCatList.push(category);
					}
				}
			});
			return newCatList;
		},

		clearCategoryRepoData: function (type) {
			var msg = '##CATEGORY REPOSITORY: ';
			var length = this._categories.length;
			this._categories = this._categories.filter(function (cat) {
				return cat.type !== type;
			});
			msg += 'cleared ' + (length - this._categories.length) + ' ' + type
				+ ' categories from repository';
			BS.logger.debug(msg);
		},
		initialize: function (type){
			var that = this;
			var catFactory = new CategoryFactory();
			var dynamicCatFactory = new DynamicCategoryFactory();

			return Q.fcall(function (){
				if (type === 'on-demand'){
					if (that.categoryLicenseService.isRecommendationEnabled())
						that.add(dynamicCatFactory.create(
							{'id': Category.onDemandIds.RECOMMENDED, title: tr('vodRecomended'),
								type: type, ageRating: 0}));

					if (that.categoryLicenseService.isMostPurchasedEnabled())
						that.add(dynamicCatFactory.create(
							{'id': Category.onDemandIds.MOST_PURCHASED, title: tr('mostPurchased'),
								type: type, ageRating: 0}));

					if (that.categoryLicenseService.isMostWatchedEnabled())
						that.add(dynamicCatFactory.create(
							{'id': Category.onDemandIds.MOST_WATCHED, title: tr('mostWatched'),
								type: type, ageRating: 0}));

					that.add(dynamicCatFactory.create({'id': Category.onDemandIds.MY_VOD,
						title: tr('myVodContent'), type: type, ageRating: 0}));
					that.add(dynamicCatFactory.create({'id': Category.onDemandIds.GIFTS,
						title: tr('giftsCategory'), type: type, ageRating: 0}));
					if (that.categoryLicenseService.isFavoritesEnabled())
						that.add(dynamicCatFactory.create(
							{'id': Category.onDemandIds.FAVOURITE, title: tr('myFavoriteVods'),
								type: type, ageRating: 0}
						));

				} else if (type === 'bee-app') {
					that.add(dynamicCatFactory.create(
						{'id': Category.beeAppsIds.ALL_APPS, title:
							tr('BEE_STORE_ALL_APPLICATIONS'),type: type, ageRating: 0}));
					that.add(dynamicCatFactory.create(
						{'id': Category.beeAppsIds.MY_APPS, title: tr('BEE_STORE_MY_APPLICATIONS'),
							type: type, ageRating: 0}));
				}
			}).then(function(){
				return that.fetch.byType(type);
			}).then(function(data){
				var oldCatIds = that.get().map(function (cat){return cat.id;});

				data.forEach(function(cat){
					var oldCat = that.findById(cat.id);

					if (oldCat === null)
						that.add(catFactory.create(cat));
					else {
						oldCat._setProps(cat);
						oldCatIds = oldCatIds.filter(function(id){
							return id !== cat.id;
						});
					}
				});
				oldCatIds.forEach(function(id){
					var cat = that.findById(id);
					if (cat && cat.type === type && !(cat instanceof DynamicCategory))
						that.remove(id);
				});

				BS.logger.trace('CAT REPO .initialize(%s) Recalculating sizes', type);
				that.recalculateCategorySizesForType(type);
				BS.logger.trace('CAT REPO .initialize(%s) Recalculating sizes DONE', type);

				return q(true);
			});
		},
		recalculateCategorySizesForType: function (type) {
			if (type !== 'on-demand')
				return;
			var that = this;
			var cats = that.findByType('on-demand');
			cats.forEach(function(cat) {
				if (cat instanceof DynamicCategory)
					return;
				cat.size = 0;
			});
			cats.forEach(function(cat) {
				if (!cat.isLeaf || cat instanceof DynamicCategory)
					return;

				var size = cat.purchaseGroupsIds.length;
				if (size > 0)
					propagateCategorySize(cat, size);
			});

			function propagateCategorySize(cat, size) {
				cat.size += size;
				if (cat.parentId) {
					propagateCategorySize(that.findById(cat.parentId), size);
				}
			}
		}
	};

	function CategoryFactory () {}
	CategoryFactory.prototype.create = function (options){
		return new Category(options);
	};
	function DynamicCategoryFactory () {}
	DynamicCategoryFactory.prototype.create = function (options){
		return new DynamicCategory(options);
	};
	function Category(dto) {
		this._setProps(dto);
	}

	Category.onDemandIds = {
		MY_VOD: 'my-vod',
		FAVOURITE: 'favourite',
		RECOMMENDED_BY_FRIEND: 'recommended-by-friend',
		MOST_PURCHASED: 'most-purchased',
		MOST_WATCHED: 'most-watched',
		RECOMMENDED: 'recommended',
		GIFTS: 'gifts'
	};
	Category.beeAppsIds = {
		ALL_APPS: 'all-apps',
		MY_APPS: 'my-apps'
	};

	Category.prototype = {
		id: null,
		title: null,
		tag: null,
		parentId: null,
		isLeaf: true,
		isLoaded: false,
		purchaseGroupsIds: [],
		type: null,
		size: 0,
		ageRating: null,
		poster: null,
		_setProps: function (p) {
			for (var i in p)
				if (p.hasOwnProperty(i) && this[i] !== undefined)
					this[i] = p[i];
		},
		isRoot: function () {
			return this.parentId === null;
		},
		toString: function () {
			return 'Category#%s %s'.sprintf(this.id, this.title);
		}
	};

	function DynamicCategory(dto) {
		Category.apply(this, [dto]);
		this._setProps(dto);
	}
	Object.extend(DynamicCategory, Category);

	BS.PurchaseModel.CategoryRepository = CategoryRepository;
	BS.PurchaseModel.CategoryFactory = CategoryFactory;
	BS.PurchaseModel.DynamicCategoryFactory = DynamicCategoryFactory;
	BS.PurchaseModel.Category = Category;
	BS.PurchaseModel.DynamicCategory = DynamicCategory;

	var defaultCategoryLicenseService = {
		isRecommendationEnabled: function () {
			return mm.isAllowed('recommendvod') && BS.portal.user.vodRecommend;
		},
		isMostPurchasedEnabled: function () {
			return BS.config.get('Core.Client.Vod.MOST_PURCHASED_CATEGORY_ENABLED') === true;
		},
		isMostWatchedEnabled: function () {
			return BS.config.get('Core.Client.Vod.MOST_WATCHED_CATEGORY_ENABLED') === true;
		},
		isFavoritesEnabled: function () {
			return BS.config.get('Core.Client.Vod.FAVORITES_CATEGORY_ENABLED') === true;
		}
	};

	BeeSmartMain.categoryRepository = new CategoryRepository(
		{ byType: prmsCategoriesFetch },
		defaultCategoryLicenseService
	);

	function prmsCategoriesFetch(type) {
		var categories = [];
		type = type || 'all';
		return BS.request.Get('/restapi/rest/%d/store/categories'.sprintf(user.regionId), {
			accept: 'json', cache: 'CARD',
			data: {
				'purchase_item_type': type,
				'language': BS.portal.user.language.label
			}
		}).then(function getCategoriesPage(response) {
			var nextCall = response.data['nextPageLink'];
			categories = categories.concat(response.data.list);
			return nextCall !== null ?
				BS.request.Get(nextCall, {accept: 'json'}).then(getCategoriesPage) :
				categories;
		});
	}
})(
	BeeSmart,
	BeeSmart.BeeSmartMain,
	Q,
	BeeSmart.evMgr,
	BeeSmart.modMgr
);


(function (BS, BeeSmartMain, q, em, ActiveSubscription) {
	var user;

	em.bind('onBeeSmartLoginSuccess', function () {
		user = BS.portal.user;
	});


	function StoreService(subscriptionRepository, productRepository, productFavouriteRepository,
		openApiActions) {
		this.subscriptionRepository = subscriptionRepository;
		this.productRepository = productRepository;
		this.productFavouriteRepo = productFavouriteRepository;
		this._getContentsOfCategoryPromiseCache = {};
		this.clearCachedPurchaseStatus();
		this.openApiActions = openApiActions;
	}

	StoreService.prototype = {
		subscriptionRepository: null,
		productRepository: null,
		productFavouriteRepo: null,
		openApiActions: null,
		_purchaseItemStatusCache: {},
		PurchaseStatus: PurchaseStatus,
		getSubscriptionStatus: function(subscription) {
			var status = new SubscriptionStatus();
			var activeSubscription = this.subscriptionRepository
				.getActiveSubscriptionBySubscriptionId(subscription.id);

			if (activeSubscription && activeSubscription.isAvailable()) {
				if (activeSubscription.status === ActiveSubscription.StatusTypes.Recurring) {
					status.active = true;
				} else {
					status.canceled = true;
				}
			}

			if (!subscription.purchaseInfo.clientPurchaseEnabled) {
				status.callOperator = true;
			} else if (subscription.isSubscribeAble()) {
				status.subscribeAble = true;
			}
			return status;
		},

		_getCachedPurchaseStatus: function (id, type) {
			if (type in this._purchaseItemStatusCache) {
				var cacheItem = this._purchaseItemStatusCache[type][id];
				if (!cacheItem || Date.now() > cacheItem.expires) return null;
				return cacheItem.status;
			}
			return null;
		},
		_setCachedPurchaseStatus: function (id, type, status, expires) {
			if (type in this._purchaseItemStatusCache) {
				this._purchaseItemStatusCache[type][id] = { status: status, expires: expires };
			}
		},
		clearCachedPurchaseStatusForItem: function (id, type) {
			if (!(type in this._purchaseItemStatusCache)) {
				return false;
			}
			return delete this._purchaseItemStatusCache[type][id];
		},
		clearCachedPurchaseStatus: function () {
			BS.logger.trace('StoreService .clearCachedPurchaseStatus()');
			this._purchaseItemStatusCache = { live: {} };
		},

		getItemPurchaseStatus: function (id, type) {
			//return true;
			var status = this._getCachedPurchaseStatus(id, type);
			if (status) return status;

			status = PurchaseStatus.unavailable;
			var expires = Number.MAX_VALUE;
			var purchasedProducts = this.productRepository
				.findByItemId(id, type, this.productRepository.Kinds.PurchasedProduct);
			var purchasedProductsMap = {};
			var setPurchaseStatusCache = this._setCachedPurchaseStatus.bind(this, id, type);
			var prod;
			var i, len;

			for (i = 0, len = purchasedProducts.length; i < len; i++) {
				prod = purchasedProducts[i];
				// if (prod.isPurchased()) {
				if (true) {
					status = PurchaseStatus.purchased;
					expires = prod.availabilityPeriod.to;
					return saveToCacheAndReturnStatus();
				} else if (prod.isPreOrdered()) {
					status = PurchaseStatus.preordered;
					purchasedProductsMap[prod.id] = true;
					expires = prod.availabilityPeriod.from;
				}
			}


			// alert("Item is not purchased");


			var isInOtherSubscription = false;
			var products = this.productRepository.findAllForItemId(id, type);
			var product = null;
			var futureExpire = Number.MAX_VALUE;

			for (i = 0, len = products.length; i < len; i++) {
				prod = products[i];

				if (prod.id in purchasedProductsMap)
					continue;
				if (!prod.purchaseInfo.isInUsersSubscription()) {
					isInOtherSubscription = true;
					alert("******************Item is not purchased************************");
					continue;
				}

				if (true) {
					status = PurchaseStatus.free;
					expires = getProductExpiration(prod, this.subscriptionRepository, true);
					return saveToCacheAndReturnStatus();
				}
				if (prod.isPayable()) {
					if (status.isPreOrdered())
						continue;
					product = prod;
					expires = prod.purchasePeriod.to;
					status = PurchaseStatus.payable;
				}
				if (prod.purchasePeriod.from > Date.now()) {
					futureExpire = prod.purchasePeriod.from;
				}
			}

			if (status.isPayable()) {
				expires = getProductExpiration(product, this.subscriptionRepository);
			}

			if (!status.isAvailable()) {
				expires = futureExpire;
				if (isInOtherSubscription)
					status = PurchaseStatus.inOtherSubscription;
			}

			return saveToCacheAndReturnStatus();

			function saveToCacheAndReturnStatus() {
				setPurchaseStatusCache(status, Math.min(futureExpire, expires) || expires);
				return status;
			}

			function getProductExpiration(prod, subRepo, forFree) {
				var purchaseInfos = prod.purchaseInfo.get();
				for (var i = 0, len = purchaseInfos.length; i < len; i++) {
					var purchaseInfo = purchaseInfos[i];
					if (forFree === true && !isFreePurchaseInfo(purchaseInfo)) continue;

					var subscriptionId = purchaseInfo.subscriptionId;
					var sub = subRepo.getActiveSubscriptionBySubscriptionId(subscriptionId);
					if (sub) {
						return Math.min(prod.consumptionPeriod.to, sub.availabilityPeriod.to);
					}
				}
				return Number.MAX_VALUE;
			}

			function isFreePurchaseInfo(purchaseInfo) {
				return true;
				for (var i = 0, len = purchaseInfo.priceList.length; i < len; i++) {
					if (purchaseInfo.priceList[i].price.value === 0)
						return true;
				}
				return false;
			}

		},
		getProductPurchaseStatus: function (id) {
			var purchasedProd = this.productRepository.findById(id, 'purchased-product');

			if (purchasedProd) {
				if (purchasedProd.isPurchased())
					return PurchaseStatus.purchased;
				else if (purchasedProd.isPreOrdered())
					return PurchaseStatus.preordered;
			}

			var prod = this.productRepository.findById(id);
			if (prod) {
				if (!prod.purchaseInfo.isInUsersSubscription())
					return PurchaseStatus.inOtherSubscription;
				else if (prod.isFree())
					return PurchaseStatus.free;
				else if (prod.isPayable())
					return PurchaseStatus.payable;
			}
			return PurchaseStatus.unavailable;
		},
		getPriceItemsCount: function (products) {
			return products.reduce(function (count, prod) {
				if (!prod.clientPurchaseEnabled)
					return count;
				return count + prod.priceList.length;
			}, 0);
		},
		getCheapestPriceItem: function (products, priceType) {
			priceType = priceType || 'currency';
			return products.reduce(function (cheapest, item) {
				if (!item.clientPurchaseEnabled || !item.purchaseInfo.isInUsersSubscription())
					return cheapest;
				var pi = item.getCheapestPriceItem(priceType);

				if (cheapest === null)
					return pi;
				if (pi === null)
					return cheapest;

				return !cheapest || cheapest.price.value > pi.price.value ? pi : cheapest;
			}, null);
		},
		getMostExpensivePriceItem: function (products, priceType) {
			priceType = priceType || 'currency';
			return products.reduce(function (mostExpensive, item) {
				if (!item.clientPurchaseEnabled || !item.purchaseInfo.isInUsersSubscription())
					return mostExpensive;
				var pi = item.getMostExpensivePriceItem(priceType);

				if (mostExpensive === null)
					return pi;
				if (pi === null)
					return mostExpensive;

				return mostExpensive.price.value < pi.price.value ? pi : mostExpensive;
			}, null);
		},
		getPriceItemDescription: function (priceItem, productTitle) {
			var description = '';
			var _formats = BS.portal.local.formats;
			var billingType = priceItem.billingType;
			var rentalUnit = priceItem.rentalPeriodUnit;
			var rentalValue = priceItem.rentalPeriodValue;
			var price = priceItem.price.type === 'currency' ?
				priceItem.price.value.formatPrice(_formats.price) : priceItem.price.value;
			var currencySign = priceItem.price.symbol;
			var unit = rentalUnit === 'hour' ? tr('hour_s') :
				rentalUnit === 'day' ? tr('day_s') : tr('month_s');

			if (billingType === 'one-time' && rentalUnit === 'fixed') {
				description = tr('PurchaseUntilForPrice')
					.sprintf(new Date(rentalValue).toFormatedString(_formats.shortDate),
					price, currencySign, productTitle);

			} else if (billingType === 'one-time') {
				description = tr('PurchaseTimePerPrice').sprintf(rentalValue, unit, price,
					currencySign, productTitle);

			} else {
				description = tr('PurchasePeriodicIntervalForPrice')
					.sprintf(rentalValue, unit, price, currencySign, productTitle);
			}

			return description.toLocaleString(BS.portal.language.label);
		},
		getSubscriptionsOfProducts: function (products) {
			return products.reduce(function (subscriptions, prod) {
				prod.purchaseInfo.list.forEach(function (info) {
					var sub = this.subscriptionRepository.getSubscriptionBySubscriptionId(
						info.subscriptionId
					);
					if (sub && subscriptions.indexOf(sub) === -1)
						subscriptions.push(sub);
				}.bind(this));
				return subscriptions;
			}.bind(this), []);
		},
		_getContentsOfCategoryPromiseCache: {},
		getContentsOfCategory: function (cat) {
			if (cat.id in this._getContentsOfCategoryPromiseCache) {
				return this._getContentsOfCategoryPromiseCache[cat.id];
			}

			if (!cat.isLoaded) {
				var url = '/restapi/rest/%d/store/products';
				this._getContentsOfCategoryPromiseCache[cat.id] = BS.request
					.Get(url.sprintf(user.regionId), {
						accept: 'json', cache: 'CARD',
						data: {
							'purchase_category_id': cat.id,
							'include_details': true,
							'language': BS.portal.user.language.label
						}
					}).then(BS.request.pageItemsAggregator()).then(function (products) {
						products = products.filter(function (prod) {
							return prod.purchaseInfo.some(function (pi) {
								return this.subscriptionRepository.containsId(pi.subscriptionId);
							}.bind(this));
						}.bind(this));
						this.productRepository.updateRepository([], products);

						var foundProducts = this.productRepository
							.findByIds(cat.purchaseGroupsIds, cat.type);
						cat.isLoaded = true;
						return foundProducts;
					}.bind(this));
			} else {
				this._getContentsOfCategoryPromiseCache[cat.id] = q(
					this.productRepository.findByIds(cat.purchaseGroupsIds, cat.type)
				);
			}

			this._getContentsOfCategoryPromiseCache[cat.id].finally(function () {
				delete this._getContentsOfCategoryPromiseCache[cat.id];
			}.bind(this));

			return this._getContentsOfCategoryPromiseCache[cat.id];
		},
		getProductsByIdList: function (ids, type) {
			if (ids.length === 0)
				return q([]);

			var that = this;
			var contents = that.productRepository.findByIds(ids, type);

			if (ids.length === contents.length)
				return q(contents);

			BS.logger.trace('STORE SERVICE :: Fetched contents from product repository ' +
				'does not match with category purchase group ids');
			if (type) {
				return that.productRepository.updateProductsOfType(ids, type, true)
					.then(function () {
						return that.productRepository.findByIds(ids, type);
					});
			} else {
				return that.productRepository.updateProducts(ids, true)
					.then(function () {
						return that.productRepository.findByIds(ids, type);
					});
			}
		},
		getMostPurchasedProducts: function (type, limit) {
			var sub = this.subscriptionRepository.activeBasicSubscription;
			if (!sub) return q([]);

			return BS.request.Get(
				'/restapi/rest/%d/store/subscriptions/%s/products'
					.sprintf(user.regionId, sub.subscriptionId),
				{
					accept: 'json', cache: 'CARD', data: {
					'purchase_item_type': type,
					'order_type': 'most-purchased',
					'page_size': limit,
					'include_details': true,
					'language': BS.portal.user.language.label
				}
				})
				.then(function (response) {
					return this._mapProductListResponseToProducts(response.data.list, type);
				}.bind(this));
		},
		getRecommendedProducts: function (type, limit) {
			return BS.request.Get(
				'/restapi/rest/%d/%d/system-recommendations/products'
					.sprintf(user.regionId, user.userId),
				{
					accept: 'json', cache: 'CARD', data: {
					'purchase_item_type': type,
					'page_size': limit,
					'include_details': true,
					'language': BS.portal.user.language.label
				}
				})
				.then(function (response) {
					return this._mapProductListResponseToProducts(response.data.list, type);
				}.bind(this));
		},
		purchaseProduct: function (product, priceItem) {
			var that = this;
			var productPurchaseInfo = product.getPurchaseInfoForPriceItem(priceItem) || {
					offerVersion: null, subscriptionId: null
				};
			return BS.request.Put(
				'/restapi/rest/%d/%d/store/purchased-products'.sprintf(user.regionId, user.userId),
				{
					accept: 'json', cache: 'CARD',
					data: {
						'purchase_group_id': product.id,
						'price_item_id': priceItem.id,
						'offer_version': productPurchaseInfo.offerVersion,
						'subscription_id': productPurchaseInfo.subscriptionId
					},
					preventEvent: true
				}
			).then(function (response) {
				var prod = BS.PurchaseModel.ProductFactory.createProduct(response.data);
				that.productRepository.add(prod);
				prod.items.forEach(function (purchaseItem) {
					that.clearCachedPurchaseStatusForItem(purchaseItem.id, purchaseItem.type);
				});
				that.logPurchasedItems();
				return prod;
			}, function (ex) {
				BS.logger.info(
					'STORE SERVICE :: Purchase of %s (PI: %s, OV: %s, S: %s) failed with reason:%s',
					product.id, priceItem.id,
					productPurchaseInfo.offerVersion, productPurchaseInfo.subscriptionId,
					ex
				);
				handleOpenApiActionErrors(ex);
				var error = ex.data.errors[0];

				if ([302, 306, 303].indexOf(error.errorCode) === -1)
					throw ex;

				var updatePromise = error.errorCode === 303 ?
					that.productRepository.updatePurchasedProducts() :
					that.productRepository.updateProductsOfType(
						[product.id], product.type, true);
				return updatePromise.then(function () {
					throw ex;
				});
			});
		},
		activateSubscription: function (subscription) {
			return this.openApiActions.activateSubscription(subscription).then(function (subDto) {
				this.clearCachedPurchaseStatus();
				this.subscriptionRepository.activateSubscription(subDto);
			}.bind(this)).catch(function (ex) {
				BS.logger.info(
					'STORE SERVICE .activateSubscription(%s) failed with reason:%s',
					subscription, ex
				);
				if (!this.shouldUpdateSubscriptionRepository(ex.errorCode)) throw ex;
				return this.subscriptionRepository.initialize().finally(function() {
					throw ex;
				});
			}.bind(this));
		},
		cancelSubscription: function (activeSub) {
			return this.openApiActions.cancelSubscription(activeSub).then(function () {
				this.subscriptionRepository.cancelSubscription(activeSub);
			}.bind(this)).catch(function (ex) {
				BS.logger.info(
					'STORE SERVICE .cancelSubscription(%s) failed with reason:%s', activeSub, ex
				);
				if (!this.shouldUpdateSubscriptionRepository(ex.errorCode)) throw ex;
				return this.subscriptionRepository.initialize().finally(function() {
					throw ex;
				});
			}.bind(this));
		},
		reactivateSubscription: function (activeSub) {
			return this.openApiActions.reactivateSubscription(activeSub).then(function (subDto) {
				this.subscriptionRepository.reactivateSubscription(subDto);
			}.bind(this)).catch(function (ex) {
				BS.logger.info(
					'STORE SERVICE .reactivateSubscription(%s) failed with reason:%s',
					activeSub, ex
				);
				if (!this.shouldUpdateSubscriptionRepository(ex.errorCode)) throw ex;
				return this.subscriptionRepository.initialize().finally(function() {
					throw ex;
				});
			}.bind(this));
		},
		shouldUpdateSubscriptionRepository: function(errorCode) {
			return [300, 301, 304, 309, 311].indexOf(errorCode) !== -1;
		},
		getErrorCodeDescription: function (errorCode) {
			switch (errorCode) {
			case 311:
			case 306:
			case 304:
			case 303:
			case 302:
			case 301:
				return tr('purchaseContentChanges');

			case 1000:
			case 305:
			case 19:
				return tr('purchasePaymentProblems');

			case 20:
				return tr('purchaseInsufficientBalance');

			case 300:
			case 309:
				return tr('subscriptionNotFoundError');
			case 312:
				return tr('userNotSubscribedToAnyBasicSubscriptionError');
			}
			return tr('UNKNOWN_ERROR');
		},
		isProductFavourited: function (product) {
			return this.productFavouriteRepo.contains(product.id);
		},
		favouriteProduct: function (product) {
			var that = this;
			return BS.request.Post(
				'/restapi/rest/%d/%d/store/products/favourite?purchase_group_id=%s'
					.sprintf(BS.portal.user.regionId, BS.portal.user.userId, product.id), {
					accept: 'json'
				}).then(function (response) {
				if (response.status === 201) {
					that.productFavouriteRepo.add(product.id);
					return true;
				}
				throw 'server-response-not-201';
			}).catch(function (ex) {
				if (ex.data &&
					ex.data.errors &&
					ex.data.errors.length &&
					ex.data.errors[0].errorCode === 350
				) {
					that.productFavouriteRepo.reset();
					return true;
				}
				throw ex;
			});
		},
		unfavouriteProduct: function (product) {
			var that = this;
			return BS.request.Delete(
				'/restapi/rest/%d/%d/store/products/favourite/%s'
					.sprintf(BS.portal.user.regionId, BS.portal.user.userId, product.id), {
					accept: 'json'
				}).then(function (response) {
				if (response.status === 204) {
					that.productFavouriteRepo.remove(product.id);
					return true;
				}
				throw 'server-response-not-204';
			}).catch(function (ex) {
				if (ex.status === 404) {
					that.productFavouriteRepo.reset();
					return true;
				}
				throw ex;
			});
		},
		getFavouriteProducts: function (type) {
			var that = this;
			return that.productFavouriteRepo.getAll().then(function (ids) {
				return that.getProductsByIdList(ids, type);
			});
		},
		initialize: function () {
			var that = this;
			return that.subscriptionRepository.initialize()
				.then(function () {
					return that.productRepository.initialize();
				}).catch(function (ex) {
					var message = ex.data ? ex.data.errors[0].exceptionMessage : ex;
					BS.logger.debug('PRODUCT REPOSITORIES have no data because ' + message);
				}).finally(function () {
					em.dispatch(new StoreServiceInitializedEvent());
				});
		},
		showCallOperatorDialog: function (product) {
			BS.appMgr.push(
				BS.modMgr.getApp('callOperatorDialog'),
				tr('callOperatorPurchaseDialogTitle'),
				tr('callOperatorDialogText').sprintf(product.title)
			);
		},
		showSubscriptionApp: function (products) {
			if (BS.skinConfiguration.enableSubscriptionStoreApp) {
				BS.appMgr.push(
					BS.modMgr.getApp('subscriptionApp'),
					products
				);
			} else {
				this.showCallOperatorDialog(products[0]);
			}
		},
		_mapProductListResponseToProducts: function (responseProductList, type) {
			var that = this;
			var ids = responseProductList.map(function (prod) {
				return prod.id;
			});
			var contents = that.productRepository.findByIds(ids, type);

			if (ids.length !== contents.length) {
				BS.logger.trace('STORE SERVICE :: Fetched contents from product' +
					' repository includes products that are not in repository.');

				var toBeAdded = responseProductList.filter(function (prodDto) {
					return !contents.some(function (prod) {
						return prod.id === prodDto.id;
					});
				});

				toBeAdded.forEach(function (prodDto) {
					that.productRepository.add(
						BS.PurchaseModel.ProductFactory.createProduct(prodDto)
					);
				});

				return that.productRepository.findByIds(ids, type);

			} else {
				return contents;
			}
		},
		logPurchasedItems: function () {
			if (!BS.logger.isGreaterThanDebug()) return;
			var t = Date.now();
			var log = BS.logger.trace;
			var ProductKind = this.productRepository.Kinds.Product;
			var PurchasedProductKind = this.productRepository.Kinds.PurchasedProduct;
			var products = this.productRepository.findAll(ProductKind);
			var purchasedProducts = this.productRepository.findAll(PurchasedProductKind);
			var channels = BeeSmartMain.tvLibrary.getChannels();

			log('StoreService .logPurchasedItems()');
			log('##  FREE PRODUCTS: ');
			products.forEach(function (prod) {
				var ps = this.getProductPurchaseStatus(prod.id);
				if (!ps.isFree()) return;
				log(prod);
			}.bind(this));
			log('## PURCHASED PRODUCTS:');
			purchasedProducts.forEach(function (prod) { log(prod); });
			log('## CHANNELS VISIBLE TO USER:');
			channels.forEach(function (ch) { log(ch); });
			log('Log outputing time: %s ms', Date.now() - t);
		}
	};
	BeeSmartMain.storeService = new StoreService(
		BeeSmartMain.subscriptionRepository,
		BeeSmartMain.productRepository,
		BeeSmartMain.productFavouriteRepository,
		{
			activateSubscription: openApiActivateSubscriptionAction,
			cancelSubscription: openApiCancelSubscriptionAction,
			reactivateSubscription: openApiReactivateSubscriptionAction
		}
	);

	BS.PurchaseModel.StoreService = StoreService;

	function PurchaseStatus() {
	}

	PurchaseStatus.prototype = {
		_free: false,
		_payable: false,
		_purchased: false,
		_preOrdered: false,
		_inOtherSubscription: false,
		isFree: function () {
			return this._free;
		},
		isPayable: function () {
			return this._payable;
		},
		isPurchased: function () {
			return this._purchased;
		},
		isPurchasedOrFree: function () {
			return this.isFree() || this.isPurchased();
		},
		isPreOrdered: function () {
			return this._preOrdered;
		},
		isUnavailable: function () {
			return false;
			return !this.isFree() && !this.isPurchased() && !this.isPayable()
				&& !this.isPreOrdered();
		},
		isAvailable: function () {
			return true;
			return !this.isUnavailable();
		},
		isInOtherSubscription: function () {
			return this._inOtherSubscription;
		}
	};

	PurchaseStatus.free = new PurchaseStatus();
	PurchaseStatus.free._free = true;
	Object.freeze(PurchaseStatus.free);
	PurchaseStatus.payable = new PurchaseStatus();
	PurchaseStatus.payable._payable = true;
	Object.freeze(PurchaseStatus.payable);
	PurchaseStatus.purchased = new PurchaseStatus();
	PurchaseStatus.purchased._purchased = true;
	Object.freeze(PurchaseStatus.purchased);
	PurchaseStatus.preordered = new PurchaseStatus();
	PurchaseStatus.preordered._preOrdered = true;
	Object.freeze(PurchaseStatus.preordered);
	PurchaseStatus.inOtherSubscription = new PurchaseStatus();
	PurchaseStatus.inOtherSubscription._inOtherSubscription = true;
	Object.freeze(PurchaseStatus.inOtherSubscription);
	PurchaseStatus.unavailable = new PurchaseStatus();
	Object.freeze(PurchaseStatus.unavailable);

	function SubscriptionStatus() {}
	SubscriptionStatus.prototype = {
		active: false,
		canceled: false,
		subscribeAble: false,
		callOperator: false,
		shouldCallOperator: function() { return this.callOperator; },
		isSubscribeAble: function() { return this.subscribeAble; },
		isActive: function() { return this.active; },
		isCanceled: function() { return this.canceled; },
		isActiveOrCanceled: function() { return this.isActive() || this.isCanceled(); }
	};

	function StoreServiceInitializedEvent() {
		this.type = 'StoreServiceInitialized';
		this.value = new Date();
		this.handler = 'onStoreServiceInitialized';
		this.description = 'Store service has been initialized';
	}

	StoreServiceInitializedEvent.prototype = new BS.Event();

	function openApiActivateSubscriptionAction(subscription) {
		return BS.request.Post(
			'/restapi/rest/%d/%d/store/active-subscriptions'.sprintf(user.regionId, user.userId),
			{
				accept: 'json',
				data: {
					'subscription_id': subscription.id,
					'offer_version': subscription.purchaseInfo.offerVersion
				},
				preventEvent: true
			}
		).then(function (response) {
			return response.data;
		}).catch(function (ex) {
			BS.logger.info(
				'openApiActivateSubscriptionAction(%s) OV: %s failed with reason: %s',
				subscription, subscription.purchaseInfo.offerVersion, ex
			);
			return handleOpenApiActionErrors(ex);
		});
	}

	function openApiCancelSubscriptionAction(activeSubscription) {
		var canceledStatus = BS.PurchaseModel.ActiveSubscription.StatusTypes.Canceled;
		return changeActiveSubscriptionStatus(activeSubscription, canceledStatus);
	}

	function openApiReactivateSubscriptionAction(activeSubscription) {
		var recurringStatus = BS.PurchaseModel.ActiveSubscription.StatusTypes.Recurring;
		return changeActiveSubscriptionStatus(activeSubscription, recurringStatus);
	}

	function changeActiveSubscriptionStatus(activeSubscription, newStatus) {
		return BS.request.Put(
			'/restapi/rest/%d/%d/store/active-subscriptions/%s'
				.sprintf(user.regionId, user.userId, activeSubscription.id),
			{
				accept: 'json',
				data: {'status': newStatus},
				preventEvent: true
			}
		).then(function (response) {
			return q(response.data);
		}).catch(function (ex) {
			BS.logger.info('changeActiveSubscriptionStatus(%s, %s) failed with reason: %s',
				activeSubscription, newStatus, ex.data.errors[0].errorMessage
			);
			return handleOpenApiActionErrors(ex);
		});
	}

	function handleOpenApiActionErrors(ex) {
		if (!ex.data) {
			BS.logger.log(ex);
			ex.data = {
				errors: [
					{
						errorCode: 1000,
						errorMessage: ex.toString(),
						exception: ex
					}
				]
			};
		}
		throw ex.data.errors[0];
	}

	em.bind('onBeeSmartReady', function () {
		var handler = BeeSmartMain.storeService.clearCachedPurchaseStatus
			.bind(BeeSmartMain.storeService);
		em.bind('onPurchasedProductsChange', handler);

		em.bind('onProductRepositoryChange', function (ev) {
			if (ev.value.type === BeeSmartMain.productRepository.Types.Live) {
				handler();
			}
		});

		em.bind('onSubscriptionsChange', handler);
		em.bind('onActiveSubscriptionsChange', handler);
	});

})(
	BeeSmart,
	BeeSmart.BeeSmartMain,
	Q,
	BeeSmart.evMgr,
	BeeSmart.PurchaseModel.ActiveSubscription
);


(function (BS, BeeSmartMain, q, em) {
	var user;
	var regionId;

	em.bind('onBeeSmartLoginSuccess', function () {
		user = BS.portal.user;
		regionId = user.regionId;
	});

	function BlockRepository(fetchService) {
		this._list = [];
		this._fetchService = fetchService;
	}

	BlockRepository.prototype = {
		_list: [],
		contentType: {
			BANNER: 'BANNER',
			VIDEOCLIP: 'VIDEOCLIP',
			VIDEOCLIP_FIXED: 'VIDEOCLIP_FIXED',
			isBanner: function (contentType) {
				return this.BANNER === contentType;
			},
			isVideoClip: function (contentType) {
				return this.VIDEOCLIP === contentType;
			},
			isFixedVideoClip: function (contentType) {
				return this.VIDEOCLIP_FIXED === contentType;
			}
		},
		displayContainer: {
			TOPLEFT: 'TOPLEFT',
			TOPMID: 'TOPMID',
			TOPRIGHT: 'TOPRIGHT',
			MIDLEFT: 'MIDLEFT',
			MIDMID: 'MIDMID',
			MIDRIGHT: 'MIDRIGHT',
			BOTLEFT: 'BOTLEFT',
			BOTMID: 'BOTMID',
			BOTRIGHT: 'BOTRIGHT'
		},
		blockContext: {
			ON_DEMAND_VIDEO: 'ON_DEMAND_VIDEO',
			LIVE_VIDEO: 'LIVE_VIDEO',
			APPS: 'APPS',
			MOVIES: 'MOVIES',
			PROGRAM_GUIDE: 'PROGRAM_GUIDE',
			RECORDED: 'RECORDED',
			OTHER: 'OTHER',
			isLiveContext: function (contextType) {
				return this.LIVE_VIDEO === contextType;
			},
			isOnDemandContext: function (contextType) {
				return this.ON_DEMAND_VIDEO === contextType;
			},
			isAppContext: function (contextType) {
				return !this.isLiveContext(contextType) && !this.isOnDemandContext(contextType);
			}
		},
		add: function (block) {
			this._list.push(block);
		},
		remove: function (blockEntity) {
			this._list = this._list.filter(function (block) {
				return block.id !== blockEntity.id;
			});
		},
		get blocks() {
			return this._list;
		},
		findById: function (id) {
			return this._list.filter(function (block) {
				return block.id === id;
			})[0];
		},
		initialize: function () {
			var that = this;
			return q(that._fetchService.blocks()
				.then(function (response) {
					response.list.forEach(function (block) {
						that.add(blockFactory.createBlock(block));
					});
					var lifetime = response.lifetime / 2;

					BS.logger.debug('###BLOCK REPOSITORY successfully initialized! ' +
						'Repository stores ' + that._list.length + ' blocks');

					return Date.now() + Math.floor((Math.random() * lifetime) + lifetime);
				}));
		},
		update: function () {
			this._list = [];
			return q(this.initialize());
		}
	};

	BeeSmart.TaModel.BlockRepository = BlockRepository;
	BeeSmart.TaModel.blockRepository = new BlockRepository({
		blocks: prmsBlocksFetch
	});


	function Block(dto) {
		this._setProps(dto);
	}

	Block.prototype = {
		id: null,
		name: null,
		position: null,
		duration: null,
		contentIds: null,
		blockContext: null,
		contentType: null,
		displayContainer: null,
		fixedVideoClipAdId: null,
		_setProps: function (p) {
			this.id = p.id;
			this.name = p.name;
			this.position = p.position;
			this.duration = p.duration;
			this.contentIds = p.contentIds;
			this.blockContext = p.blockContext;
			this.contentType = p.contentType;
			this.displayContainer = p.displayContainer;
			this.fixedVideoClipAdId = p.fixedVideoClipAdId;
		},
		isBanner: function () {
			var ContentType = BeeSmart.TaModel.blockRepository.contentType;
			return ContentType.isBanner(this.contentType);
		},
		isVideoClip: function () {
			var ContentType = BeeSmart.TaModel.blockRepository.contentType;
			return ContentType.isVideoClip(this.contentType);
		},
		isFixedVideoClip: function () {
			var ContentType = BeeSmart.TaModel.blockRepository.contentType;
			return ContentType.isFixedVideoClip(this.contentType);
		},
		isLiveBlockContext: function () {
			var BlockContext = BeeSmart.TaModel.blockRepository.blockContext;
			return BlockContext.isLiveContext(this.blockContext);
		},
		isOnDemandBlockContext: function () {
			var BlockContext = BeeSmart.TaModel.blockRepository.blockContext;
			return BlockContext.isOnDemandContext(this.blockContext);
		},
		isAppBlockContext: function () {
			var BlockContext = BeeSmart.TaModel.blockRepository.blockContext;
			return BlockContext.isAppContext(this.blockContext);
		},
		hasLiveVideoDisplayConditions: function (timestamp) {
			return this.isLiveBlockContext() && this.isBanner() &&
				(timestamp < this.position || timestamp < this.position + this.duration * 1e3);
		},
		hasOnDemandVideoDisplayConditions: function (videoPosition) {
			if (this.isOnDemandBlockContext()) {
				if (this.isBanner()) {
					return this.position > videoPosition ||
						videoPosition < this.position + this.duration;
				} else if (this.isVideoClip() || this.isFixedVideoClip()) {
					return videoPosition < this.position;
				}
			}
			return false;
		},
		toString: function () {
			return 'Block#%s (%s) (%s) (%s) (%s) (%s)'.sprintf(this.id, this.name,
				this.blockContext, this.contentType, this.contentIds, this.position);
		}
	};

	var blockFactory = {
		createBlock: function (options) {
			return new Block(options);
		}
	};
	BeeSmart.TaModel.Block = Block;
	BeeSmart.TaModel.blockFactory = blockFactory;

	function prmsBlocksFetch() {
		return BS.request.Get('/restapi/rest/%d/target-advertising/blocks'.sprintf(regionId), {
			accept: 'json',
			preventEvent: true
		}).then(function (response) {
			return response.data;
		});
	}
})(
	BeeSmart,
	BeeSmart.BeeSmartMain,
	Q,
	BeeSmart.evMgr
);

(function (BS, q, em) {
	var user;
	var regionId;

	em.bind('onBeeSmartLoginSuccess', function () {
		user = BS.portal.user;
		regionId = user.regionId;
	});

	function AdRepository(fetchService) {
		this._list = [];
		this._fetchService = fetchService;
	}

	AdRepository.prototype = {
		_list: [],
		add: function (ad) {
			this._list.push(ad);
		},
		remove: function (adEntity) {
			this._list = this._list.filter(function (ad) {
				return ad.id !== adEntity.id;
			});
		},
		get bannerAds() {
			return this._list.filter(function (ad) {
				return ad instanceof BannerAd;
			});
		},
		get videoClipAds() {
			return this._list.filter(function (ad) {
				return ad instanceof VideoClipAd;
			});
		},
		findAdById: function (id) {
			return this._list.filter(idFilter)[0] || null;
			function idFilter(ad) {
				return ad.id === id;
			}
		},
		initialize: function () {
			var that = this;
			return q.allSettled([
				that._fetchService.ads(),
				that._fetchService.weightForAds()
			]).spread(function (prmsAds, prmsAdsWeight) {
				var rjPrms = [prmsAds, prmsAdsWeight]
					.filter(function (prms) {
						return 'rejected' === prms.state;
					});

				if (rjPrms.length !== 0)
					throw rjPrms[0].reason;

				prmsAds.value.list.forEach(function (ad) {
					that.add(adFactory.createAd(ad));
				});

				prmsAdsWeight.value.forEach(function (weight) {
					var ad = that.findAdById(weight.adId);
					ad.setWeightTo(weight.weight);
				});
				var lifetime = prmsAds.value.lifetime / 2;

				BS.logger.debug('###AD REPOSITORIY successfully initialized! Repository stores ' +
					that._list.length);

				return Date.now() + Math.floor((Math.random() * lifetime) + lifetime);
			});
		},
		update: function () {
			var that = this;
			var oldAds = this._list;
			this._list = [];

			return q(this.initialize().then(function (repoValidTill) {
				oldAds.forEach(function (ad) {
					var newAd = that.findAdById(ad.id);
					if (newAd) {
						newAd.setTriggeredTo(ad._triggered);
					}
				});
				return repoValidTill;
			}));
		}
	};

	BeeSmart.TaModel.AdRepository = AdRepository;
	BeeSmart.TaModel.adRepository = new AdRepository({
		ads: prmsAdsFetch,
		weightForAds: prmsPreCalculatedWeightForAdsFetch
	});


	function Ad(dto) {
		this._setProps(dto);
	}

	Ad.prototype = {
		id: null,
		activeFrom: null,
		activeTo: null,
		duration: null,
		_triggered: null,
		_serverSideWeight: null,
		_setProps: function (p) {
			this.id = p.id;
			this.activeFrom = p.activeFrom;
			this.activeTo = p.activeTo;
			this.duration = p.duration;
			this.bannerClickable = p.bannerClickable;

			this._triggered = 0;
			this._serverSideWeight = 0;
		},
		enlargeTriggeredValue: function () {
			this._triggered++;
		},
		setTriggeredTo: function (value) {
			this._triggered = value;
		},
		setWeightTo: function (value) {
			this._serverSideWeight = value;
		},
		get weight() {
			return this._serverSideWeight - this._triggered * 0.2;
		},
		isClickable: function () {
			return false;
		},
		isSkippable: function () {
			return false;
		},
		toString: function () {
			return 'Ad#%s (%s) (%s) (%s) (%s)'.sprintf(this.id, this.activeFrom, this.activeTo,
				this.duration);
		}
	};

	function BannerAd(p) {
		Ad.apply(this, [p]);
	}

	BannerAd.prototype = {
		bannerImages: [],
		bannerClickable: null,
		clickableTarget: null,
		isClickable: function () {
			return this.clickableTarget !== null && this.bannerClickable;
		},
		_setProps: function (p) {
			Ad.prototype._setProps.apply(this, arguments);
			this.bannerImages = p.bannerImages.map(function (image) {
				return new BannerImage(image);
			});
			this.clickableTarget = p.clickableTarget;
		}
	};
	Object.extend(BannerAd, Ad);
	BeeSmart.TaModel.BannerAd = BannerAd;

	function VideoClipAd(p) {
		Ad.apply(this, [p]);
	}

	VideoClipAd.prototype = {
		skippableAd: null,
		mediaResources: null,
		isSkippable: function () {
			return this.skippableAd;
		},
		_setProps: function (p) {
			Ad.prototype._setProps.apply(this, arguments);
			this.skippableAd = p.skippableAd;
			this.mediaResources = new BS.media.VendorMediaResources(p.mediaResources);
		}
	};
	Object.extend(VideoClipAd, Ad);
	BeeSmart.TaModel.VideoClipAd = VideoClipAd;

	function BannerImage(dto) {
		this.id = dto.id;
		this.name = dto.name;
		this.link = dto.link;
		this.width = dto.width;
		this.height = dto.height;
	}

	BannerImage.prototype = {
		id: null,
		name: null,
		link: null,
		width: null,
		height: null
	};
	BeeSmart.TaModel.BannerImage = BannerImage;


	var adFactory = {
		createAd: function (options) {
			return options.type === 'BANNER' ? new BannerAd(options) : new VideoClipAd(options);
		}
	};

	BeeSmart.TaModel.adFactory = adFactory;
	function prmsAdsFetch() {
		return BS.request.Get('/restapi/rest/%d/target-advertising/ads'.sprintf(regionId), {
			accept: 'json',
			preventEvent: true
		}).then(function (response) {
			return response.data;
		});
	}

	function prmsPreCalculatedWeightForAdsFetch() {
		return BS.request.Get('/restapi/rest/%d/%d/target-advertising/weighted-ad-ids'
			.sprintf(regionId, user.userId), {
			accept: 'json',
			preventEvent: true
		}).then(function (response) {
			return response.data;
		});
	}
})(
	BeeSmart,
	Q,
	BeeSmart.evMgr
);


(function (BS, BeeSmartMain, q, em) {
	var user;

	em.bind('onBeeSmartLoginSuccess', function () {
		user = BS.portal.user;
	});

	function TaService(blockRepo, adRepo) {
		this.blockRepo = blockRepo;
		this.adRepo = adRepo;
		this._lastBlock = null;
		this._blockPredictions = {};
		this._blockRepoValidTill = null;
		this._adRepoValidTill = null;
	}

	TaService.prototype = {
		blockRepo: null,
		adRepo: null,
		_lastBlock: null,
		_blockPredictions: {},
		_adRepoValidTill: null,
		_blockRepoValidTill: null,

		setLastBlock: function (blockId, contentId) {
			if (this._lastBlock) {
				this._lastBlock.update({blockId: blockId, contentId: contentId});
			} else {
				this._lastBlock = lastBlockFactory.createLastBlock({
					blockId: blockId, contentId: contentId
				});
			}
		},
		isDisplayedRecently: function (blockId, contentId) {
			var lb = this._lastBlock;
			return !!(lb && lb.blockId === blockId && lb.contentId === contentId);
		},
		clearLastBlock: function () {
			this._lastBlock = null;
		},
		getBlocksByBlockContextAndContentId: function (blockContext, contentId) {
			return this.getBlocksByBlockContext(blockContext)
				.filter(function (block) {
					return block.contentIds && block.contentIds.indexOf(contentId) !== -1;
				});
		},
		getBlocksByBlockContext: function (blockContext) {
			return this.blockRepo.blocks
				.filter(function (block) {
					return block.blockContext === blockContext;
				});
		},
		getAdsForBlock: function (block) {
			var list = [];
			var ad;

			if (block.id in this._blockPredictions) {
				return this._blockPredictions[block.id].slice(0);
			} else if (block.isFixedVideoClip()) {
				ad = this._getAdForFixedVideoClipBlock(block);
				list = ad ? [ad] : [];
			} else if (block.isVideoClip()) {
				ad = this._getAdForVideoClipBlock(block);
				list = ad ? [ad] : [];
			} else {
				list = this._getAdsForBannerBlock(block);
			}
			this._storeBlockPrediction(block.id, list);

			return list;
		},
		_getAdForFixedVideoClipBlock: function (block) {
			var now = Date.now();
			var ad = this.adRepo.findAdById(block.fixedVideoClipAdId);
			if (ad && now >= ad.activeFrom && now <= ad.activeTo) {
				return ad;
			} else {
				return null;
			}
		},
		_getAdForVideoClipBlock: function (block) {
			var ads = this.adRepo.videoClipAds;
			ads.sort(function (a, b) {
				return b.weight - a.weight;
			});

			return ads.filter(function (ad) {
				return this._isAdProperCandidateForBlock(ad, block.duration);
			}.bind(this))[0];
		},
		_getAdsForBannerBlock: function (block) {
			var blockDurationWindow = block.duration;
			var list = [];
			var ads = this.adRepo.bannerAds;
			ads.sort(function (a, b) {
				return b.weight - a.weight;
			});
			ads.forEach(function (ad) {
				if (this._isAdProperCandidateForBlock(ad, blockDurationWindow)) {
					list.push(ad);
					blockDurationWindow = blockDurationWindow - ad.duration;
				}
			}.bind(this));
			return list;
		},
		_isAdProperCandidateForBlock: function (ad, blockDurationWindow) {
			var now = Date.now();
			var activeTo = this._getTimestampWithoutHours(ad.activeTo);
			var activeFrom = this._getTimestampWithoutHours(ad.activeFrom);

			return blockDurationWindow - ad.duration >= 0 && now <= activeTo && now >= activeFrom;
		},
		_getTimestampWithoutHours: function (timestamp) {
			return new Date(timestamp).setHours(0, 0, 0, 0).valueOf();
		},
		_storeBlockPrediction: function (blockId, adList) {
			this._blockPredictions[blockId] = adList.slice(0);
			if (Object.keys(this._blockPredictions).length > 5) {
				delete this._blockPredictions[Object.keys(this._blockPredictions)[0]];
			}
		},
		enlargeTriggeredAdNumber: function (adId) {
			var ad = this.adRepo.findAdById(adId);
			ad.enlargeTriggeredValue();
		},

		updateBlockAndAdRepository: function () {
			var now = Date.now();
			var that = this;

			var updateBlockRepo = !!this._blockRepoValidTill && this._blockRepoValidTill < now;
			var updateAdRepo = !!this._adRepoValidTill && this._adRepoValidTill < now;

			if (updateBlockRepo || updateAdRepo) {
				return q.allSettled([
					updateBlockRepo ? this.blockRepo.update() : q(this._blockRepoValidTill),
					updateAdRepo ? this.adRepo.update() : q(this._adRepoValidTill)
				]).spread(function (blockRepoExpires, adRepoExpires) {
					var rjPrms = [blockRepoExpires, adRepoExpires]
						.filter(function (prms) {
							return 'rejected' === prms.state;
						});

					if (rjPrms.length !== 0) {
						BS.logger.debug('###TA REPOSITORIES have no data because '
							+ rjPrms[0].reason);
						return false;
					}
					that._blockRepoValidTill = blockRepoExpires.value;
					that._adRepoValidTill = adRepoExpires.value;

					return true;
				});
			} else
				return q(true);
		},
		initialize: function () {
			var that = this;
			return q.allSettled([
				this.blockRepo.initialize(),
				this.adRepo.initialize()
			]).spread(function (blockRepoExpires, adRepoExpires) {
				var rjPrms = [blockRepoExpires, adRepoExpires]
					.filter(function (prms) {
						return 'rejected' === prms.state;
					});

				if (rjPrms.length !== 0) {
					that.blockRepo._list = [];
					that.adRepo._list = [];
					BS.logger.debug('###TA REPOSITORIES have no data because ' + rjPrms[0].reason);
				} else {
					BS.logger.debug('###TA REPOSITORIES successfully initialized!');
					that._blockRepoValidTill = blockRepoExpires.value;
					that._adRepoValidTill = adRepoExpires.value;
				}
			}).finally(function () {
				em.dispatch(new TaServiceInitializedEvent());
			});
		}
	};

	BeeSmart.TaModel.TaService = TaService;
	BeeSmart.TaModel.taService = new TaService(
		BeeSmart.TaModel.blockRepository,
		BeeSmart.TaModel.adRepository
	);


	function TaServiceInitializedEvent() {
		this.type = 'TaServiceInitialized';
		this.value = new Date();
		this.handler = 'onTaServiceInitialized';
		this.description = 'Ta service has been initialized';
	}

	TaServiceInitializedEvent.prototype = new BS.Event();

	BS.evMgr.bind('onBeeSmartLoginSuccess', function () {
		BeeSmart.TaModel.taService.initialize().done();
	});

	function LastBlock(dto) {
		this.update(dto);
	}

	LastBlock.prototype = {
		blockId: null,
		contentId: null,
		update: function (dto) {
			this.blockId = dto.blockId;
			this.contentId = dto.contentId;
		}
	};
	var lastBlockFactory = {
		createLastBlock: function (options) {
			return new LastBlock(options);
		}
	};

	BeeSmart.TaModel.LastBlock = LastBlock;
	BeeSmart.TaModel.lastBlockFactory = lastBlockFactory;

})(
	BeeSmart,
	BeeSmart.BeeSmartMain,
	Q,
	BeeSmart.evMgr
);

(function (BS, BeeSmartMain, q, em) {
	var user;
	var bsRegionId;
	var bsUserId;

	em.bind('onBeeSmartLoginSuccess', function () {
		user = BS.portal.user;
		bsRegionId = user.regionId;
		bsUserId = user.userId;
	});

	function PromotionRepository(fetchService) {
		this._promotions = [];
		this._fetchService = fetchService;
	}

	PromotionRepository.prototype = {
		_firstCall: true,
		_promotions: [],
		_cacheValidDuration: null,
		get cacheValidDuration() {
			return this._cacheValidDuration || prmsPromotionsFetch.minimumExpirationTime;
		},
		Promotion: Promotion,
		PromotionFactory: PromotionFactory,
		get promotions() {
			return this._promotions;
		},
		addPromotion: function (promo) {
			this._promotions.push(promo);
		},
		findById: function (id) {
			return this._promotions.filter(idFilter)[0] || null;
			function idFilter(promo) {
				return promo.id === id;
			}
		},
		get newPromotions() {
			var oldPromotions = this.promotions;
			return this.updatePromotions().then(function () {
				return this.promotions.filter(function (promo) {
					return oldPromotions.every(function (el) {
						return el.id !== promo.id;
					});
				});
			}.bind(this));
		},
		updatePromotions: function () {
			var cachedPromotions = this.promotions.length !== 0 || this._firstCall === false;
			return this._fetchService.prmsPromotions(cachedPromotions)
				.then(function (responseData) {
					if (responseData.data) {
						this._promotions = responseData.data
							.map(function (promo) {
								return PromotionFactory.create(promo);
							});
					}
					if (this._cacheValidDuration === null) {
						this._cacheValidDuration = Math.floor(
								(responseData.expires - Date.now()) / 60e3 + 1
							) * 60e3;
					}
					this._firstCall = false;
					BS.logger.trace('PROMOTIONS REPO .updatePromotions() Got %s promotions',
						this.promotions.length);
				}.bind(this));
		}
	};

	BeeSmart.PromotionModel = BeeSmart.PromotionModel || {};
	BeeSmart.PromotionModel.PromotionRepository = PromotionRepository;
	BeeSmart.promotionRepository = new PromotionRepository({
		prmsPromotions: prmsPromotionsFetch
	});

	function Promotion(p) {
		this._setProps(p);
	}

	Promotion.prototype = {
		id: null,
		title: null,
		text: null,
		position: null,
		picture: null,
		activated: null,
		deactivated: null,
		fullscreen: null,
		_setProps: function (p) {
			for (var i in p)
				if (p.hasOwnProperty(i) && this[i] !== undefined)
					this[i] = p[i];
		}
	};

	function PromotionFactory() {
	}

	PromotionFactory.create = function (options) {
		return new Promotion(options);
	};

	function prmsPromotionsFetch(noCachedData) {
		noCachedData = !!noCachedData;
		if (noCachedData && prmsPromotionsFetch.lastExpires > Date.now())
			return q({data: null, expires: prmsPromotionsFetch.lastExpires});

		return BS.request.Get('/restapi/rest/%d/promotions'.sprintf(bsRegionId), {
			accept: 'json',
			noCachedData: noCachedData,
			data: {'language': BS.portal.user.language.label}
		}).then(function (response) {
			var minExpirationTime = prmsPromotionsFetch.minimumExpirationTime;
			var audit = 'PROMOTIONS prmsPromotionsFetch(%s) '.sprintf(noCachedData);
			if (!response.cacheExpires || response.cacheExpires < Date.now() + minExpirationTime) {
				prmsPromotionsFetch.lastExpires = response.cacheExpires =
					Date.now() + minExpirationTime;
				BS.logger.trace(audit + 'Enforcing %s min expiry of promotions repo fetch at %s',
					Math.floor(minExpirationTime / 60e3),
					new Date(response.cacheExpires));
			}
			return {
				data: response.data,
				expires: response.cacheExpires
			};
		});
	}

	prmsPromotionsFetch.minimumExpirationTime = 15 * 60e3;

	BeeSmart.PromotionModel.Promotion = Promotion;
})(
	BeeSmart,
	BeeSmart.BeeSmartMain,
	Q,
	BeeSmart.evMgr
);


(function (BS, q, mm, em, cfg, portal, DvlUtil) {
	var tvLib, showParentalHiddenChannels,
		showAgeForbiddenChannels, CURRENTLY_MOST_WATCHED_CATEGORY_ENABLED,
		CURRENTLY_MOST_LISTENED_CATEGORY_ENABLED,
		user;
	var bsMain = BS.modMgr.getModule('BeeSmartMain');


	bsMain
		.getInstanceAvailabilityPromiseOf('TvLibrary')
		.then(function (argTvLibrary) {
			tvLib = argTvLibrary;
		});

	cfg.getInstanceAvailabilityPromise().then(function () {
		showParentalHiddenChannels = BS.config.get('Core.Client.PC_CHANNEL_POLICY');
		CURRENTLY_MOST_WATCHED_CATEGORY_ENABLED = BS.config.get(
			'Core.Client.Livetv.CURRENTLY_MOST_WATCHED_CATEGORY_ENABLED');
		CURRENTLY_MOST_LISTENED_CATEGORY_ENABLED = BS.config.get(
			'Core.Client.Livetv.CURRENTLY_MOST_LISTENED_CATEGORY_ENABLED');
	});

	function onUserChange() {
		user = portal.user;
		showAgeForbiddenChannels = showParentalHiddenChannels === 2 ?
			user.isDefault :
			showParentalHiddenChannels === 1;
	}

	portal.getInstanceAvailabilityPromise().progress(onUserChange);
	em.bind('onBeeSmartLoginSuccess', onUserChange);


	function LiveTvLib() {
		bsMain.TvLibrary.apply(this, arguments);
	}
	LiveTvLib.prototype = {
		reset: function (type) {
			bsMain.TvLibrary.prototype.reset.call(this, type);
		},


		update: function (usrCustomizations, usrTimeshifts, mixed) {
			BS.perf.start('dvl update');
			var endMsg = 'LiveTvLib.update: %s finish of channel list update';
			BS.logger.debug('LiveTvLib.update: Started an channel list update!');
			mixed = mixed || {};
			return q
				.allSettled([
					prmsAllChannelsGather(),
					prmsMosaicsFetch(),
					usrCustomizations || {},
					usrTimeshifts || {},
					mixed
				])
				.spread(updateTvLibrary)
				.then(function (changes) {
					if (0 === tvLib.getChannels().length) {
						tvLib.addChannel(bsMain.tvLibrary
							.channelReconstitutionFactory(BS.TvModel.BlankChannel.props));
					}
					BS.logger.debug(endMsg, 'Successfull');
					BS.evMgr.dispatch(new bsMain.TvLibrary.TvLibraryUpdated('channel-video',
						changes));
					BS.perf.stop('dvl update', 'error=%s, new=%s, updated=%s, deleted=%s',
						false, changes.totalAdded, changes.totalUpdated, changes.totalDeleted);
					return true;
				})
				.catch(function (x) {
					BS.logger.info('LiveTvLib.update: ERROR unable to finish TV library update due'
						+ ' to:\n' + x);
					if ('no-ip-no-http' !== x.statusText) throw x.reason;
					if (0 === tvLib.getChannels().length || !BeeSmart.device.getModel()) {
						tvLib.addChannel(tvLib
							.channelReconstitutionFactory(BS.TvModel.BlankChannel.props));
					}
					BS.logger.debug(endMsg, 'Failed');
					BS.perf.stop('dvl update', 'error=%s, new=%s, updated=%s, deleted=%s',
						true, NaN, NaN, NaN);
					return false;
				});
		}
	};

	function updateTvLibrary (pEveryCh, pMosaicChs, pUsrCst, pTimeshiftChs, pLastModifiedTimes) {
		var t1 = Date.now();
		BS.logger.debug('LIVETV.updateTvLibrary Started updateTvLibrary');
		if ('rejected' === pEveryCh.state) throw pEveryCh.reason;
		var newChs = [];
		var existingChsIds = [];
		var updatedChs = [];
		[pUsrCst, pTimeshiftChs, pMosaicChs].forEach(function (prms) {
			if ('fulfilled' === prms.state) return;
			BS.logger.info('LIVETV.updateTvLibrary WARNING: Update tasks failed for %s.',
				prms.reason);
		});
		var usrCst = pUsrCst.value;
		var timeshiftChs = pTimeshiftChs.value;
		var mosaicDTOs = 'fulfilled' === pMosaicChs.state ? pMosaicChs.value : {};
		var lastModifiedTimes = pLastModifiedTimes.value;
		pEveryCh.value.forEach(function (chDto) {
			var chObj;
 var usrCh = usrCst[chDto.id];
 var mosaicDto = mosaicDTOs[chDto.id];
 var timeshiftCh = timeshiftChs[chDto.id];
 var chLastModified = lastModifiedTimes[chDto.id];
 var dtoComp = {id: chDto.id, ch: chDto, cnf: usrCh,
				ts: timeshiftCh, mosaic: mosaicDto, lastModified: chLastModified};
			if (!tvLib.isChannel(chDto.id, true)) {
				if (chDto.type !== 'mosaic' || mosaicDto !== undefined) newChs.push(dtoComp);
			} else if ((chObj = tvLib.getChannelById(chDto.id, true)).isOutdated(dtoComp)) {
				tvLib.updateChannel(dtoComp.ch, dtoComp.ts, dtoComp.cnf, mosaicDto, chLastModified);
				updatedChs.push(chObj);
			}
			existingChsIds.push(chDto.id);
		});
		var obsoleteChs = tvLib.getChannels(true).filter(function (ch) {
			return ch.type !== 'dvb' && -1 === existingChsIds.indexOf(ch.id);
		});
		newChs = newChs.map(function (compCh) {
			try {
				var objCh = tvLib.channelReconstitutionFactory(compCh.ch, compCh.ts, compCh.cnf,
					compCh.mosaic, compCh.lastModified);
				tvLib.addChannel(objCh);
				return objCh;
			} catch (x) {
				BS.logger.log(x);
			}
		});
		obsoleteChs.forEach(function (chObj) {
			chObj.kill();
			tvLib.removeChannel(chObj);
		}, tvLib);
		BS.logger.debug('LIVETV.updateTvLibrary: Added %d new channels', newChs.length);
		if (newChs.length && BS.logger.isGreaterThanDebug()){
			newChs.reduce(logReducer.bind({sliceNumber: 8, separator: '\n '}), [])
				.forEach(BS.logger.trace);
		}
		BS.logger.debug('LIVETV.updateTvLibrary: Updated %d existing channels', updatedChs.length);
		if (updatedChs.length && BS.logger.isGreaterThanDebug()){
			updatedChs.reduce(logReducer.bind({sliceNumber: 8, separator: '\n '}), [])
				.forEach(BS.logger.trace);
		}
		BS.logger.debug('LIVETV.updateTvLibrary: Removed %d obsolete channels', obsoleteChs.length);
		if (obsoleteChs.length && BS.logger.isGreaterThanDebug()){
			BS.logger.trace(obsoleteChs.map(mapToName).join(', '));
		}
		BS.logger.debug('LIVETV.updateTvLibrary: Operation lasted %dms', Date.now() - t1);
		return q({
			'totalAdded': newChs.length,
			'addedChIds': newChs.map(mapToId),
			'totalDeleted': obsoleteChs.length,
			'deletedChIds': obsoleteChs.map(mapToId),
			'totalUpdated': updatedChs.length
		});
		function mapToName (chObj) { return chObj.name; }
		function mapToId (chObj) { return chObj.id; }
		function logReducer(p, curr, i) {
			var gi = Math.floor(i / this.sliceNumber);
			if (p[gi] === undefined) p[gi] = '';
			p[gi] = p[gi].concat(this.separator+ curr.toString());
			return p;
		}
	}
	function prmsAllChannelsGather() {
		var args = {
			accept: 'json', cache: 'CARD', cleanUrls: false,
			data: {
				'channel_type': 'all',
				'page_size': 500,
				'language': BS.portal.user.language.label
			}
		};
		return BS.request
			.Get('/restapi/rest/%d/channels'.sprintf(user.regionId), args)
				.then(function (response) {
				return response.data.list;
			});
	}
	function UserChannelCustomization (dto) {
		this.id = dto.id;
		this.hidden = dto.parentalHidden;
		if (dto.nameChanged) this.name = dto.name;
		if (dto.numberChanged) this.number = dto.number;
	}
	UserChannelCustomization.prototype = {
		id: null,
		name: null,
		number: null,
		hidden: false,
		get hash () {
			return String.fromCharCode((this.number || 0) + (this.hidden ? 7425 : 0))
				.concat(this.name || '');
		},
		toString: function () {
			return 'UsrChannelChange#%d (#%s, %s)'.sprintf(this.id, this.number || '',
				this.name || '', this.hidden ? ' HIDDEN' : '');
		}
	};


	function prmsUserChannelCustomizationsFetch() {
		return BS.request.Get(
			'/restapi/rest/%d/%d/profiles/channel-changes'.sprintf(user.regionId, user.userId),
			{cache: 'CARD', data: {'channel_type': 'ALL', page_size: 500}}
		).then(function (response) {
			return q(
				response.data.list.map(function (dto) {
					return new UserChannelCustomization(dto);
				}).reduce(DvlUtil.userChangesReducer, {})
			);
		});
	}
	LiveTvLib.prototype.prmsUserChannelCustomizationsFetch = prmsUserChannelCustomizationsFetch;
	function prmsTimehiftsFetch (chId) {
		return BS.request.Get(
			'/restapi/rest/%d/%d/recordings/timeshift'.sprintf(user.regionId, user.userId),
			{accept: 'json', cache: 'CARD', data: chId ? {'channel_id': chId} : null}
		).then(function (response) {
				var result = {};
				response.data.list.forEach(function (cChanData) {
					result[cChanData.channelId] = cChanData.expiration * 1000;
				});
				return q(result);
			});
	}
	LiveTvLib.prototype.prmsTimehiftsFetch = prmsTimehiftsFetch;

	function prmsMosaicsFetch () {
		var msg = 'WARNING: Defined channels for mosaic doesn\'t match the matrix. '
			+ 'Rejecting mosaic data for %s';
		return BS.request.Get(
			'/restapi/rest/%d/channel-mosaics'.sprintf(user.regionId),
			{accept: 'json', cache: 'CARD', data: { page_size: 50}}
		).then(function (response) {
			return response.data.list.reduce(function (p, mosaicData) {
				var hasChanelObj = tvLib.isChannel(mosaicData.linkedChannelID, true);
				if (!bsMain.MosaicChannel.prototype.isMatrixConsistent(mosaicData)) {
					BS.logger.debug(msg, hasChanelObj ?
						tvLib.getChannelById(mosaicData.linkedChannelID, true) :
						'DTO#' + mosaicData.id);
					return p;
				}
				p[mosaicData.linkedChannelID] = mosaicData;
				return p;
			}, {});
		});
	}


	Object.extend(LiveTvLib, bsMain.TvLibrary);
	bsMain.registerTvLib(LiveTvLib);


	em.bind('onTvLibraryUpdate', function (ev) {
		var liveTv = mm.getApp('liveTv');
		var evValue;
		var i;
		var currCh = liveTv.getCurrentChannel();
		var prevCh = liveTv.getPreviousChannel();
		var currCat = liveTv.getCurrentCategory();
		if (
			user === null ||
			!currCh || !currCat
			) return;
		switch (ev.data.type) {
		case 'channel-video':
			try {
				if (!tvLib.isChannel(currCh, true) || !tvLib.isChannel(prevCh, true)){
					liveTv.resetNavigation();
				}
			} catch (e) {
				BS.logger.info('LIVETV: ERROR: Setting default channel after `%s` failed:\n%s'
					.sprintf(ev.data.type, e));
			}
			break;
		case 'channel-name':
			evValue = ev.data.value;
			if (evValue.newName) evValue.channel.name = evValue.newName;
			if (evValue.newCustomName) evValue.channel.custName = evValue.newCustomName;
			break;
		case 'channel-renumber':
			ev.data.value.forEach(function(chWithNumber) {
				chWithNumber.channel.custNumber = chWithNumber.newNumber;
			});
			break;
		case 'channel-parental-control':
			evValue = ev.data.value;
			for (i in evValue) evValue[i].channel.hidden = evValue[i].wasIgnored;
			break;
		}
	});

	em.bind('onChannelsChanged', function () {
		tvLib.update(BS.resourceDataVersions.usrChsResource, BS.resourceDataVersions.timeshiftChs,
			BS.resourceDataVersions.channels).done();
	});


	var tvLibUpdateTimer = null;
	function createTvLibUpdateTimer() {
		tvLibUpdateTimer = new BS.Utils.Timer(function() {
			BS.backgroundService.runOnce(function () {
				prmsUserChannelCustomizationsFetch().then(function (userChangedChannels) {
					tvLib.update(userChangedChannels).done();
				});
			}, 'TV LIB Update');
			tvLibUpdateTimer = null;
		}, 60e3);
	}

	BS.evMgr.bind('msg:onResourceChanged', function resourceChangedHandler(ev) {
		var message = ev.data.body;
		switch (message.resource) {
		case 'CHANNELS':
			BS.logger.trace('Event:msg:onResourceChanged CHANNELS Received');
			if (!tvLibUpdateTimer) createTvLibUpdateTimer();
			tvLibUpdateTimer.reset();
			break;
		}
	});


})(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.evMgr,
	BeeSmart.config,
	BeeSmart.portal,
	BeeSmart.DvlUtil
);


(function (BS, q, mm, am, ui, em, ModuleDom, keys) {
	var user, liveTv, tvMosaics, showRepo, showService;
	var bsMain = BeeSmart.modMgr.getModule('BeeSmartMain');
	var misc = mm.getApp('Misc');
	var tvLib = bsMain.tvLibrary;
	var languageCode;
	BS.portal.getInstanceAvailabilityPromise().then(function (argUser) {
		user = argUser;
	});

	em.bind('onBeeSmartLoginSuccess', function () {
		user = BS.portal.user;
		showRepo = BS.ShowModel.showRepository;
		showService = BS.ShowModel.showService;
		var Tv = BeeSmart.modMgr.getModule('Tv');
		Tv.register(channelCategories);
		Tv.register(categoryChannelList);
		languageCode = user.language.label;
	});

	var cc = new BS.App('channelCategories', {
		listenTo: [keys.shortcuts],
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	var dom = null;

	cc.menu = null;
	cc.subMenu = null;
	cc.categoryList = [];
	cc.currentlyDisplayedCatId = undefined;
	cc.currentlyDisplayedCatTs = 0;

	cc.onInputEvent = function (key) {
		if (cc.lock) {
			return;
		}

		var cCatId = cc.getSelectedCategoryId();
		switch (key) {
		case 'info': return true;
		case 'up':
		case 'down':
			if (key === 'up') {
				cc.subMenu.previous();
			} else {
				cc.subMenu.next();
			}

			break;
		case 'right':
			cc.lock = true;
			cc.subMenu.showFocus().then(function () {
				return tvCategoryRepo.getById(cCatId).then(function (catObj) {
					if (catObj.hasSubCategories){
						cc.lastCategoryIndexes.push(cc.subMenu.currentIndex());
						cc.rebuildCatListMenu(cCatId);
					} else {
						am.push(categoryChannelList, catObj);
						cc.dom.hide();
					}
				}).catch(function(e) {
					BS.logger.trace('CH CATEGORIES .onInputEvent(%s) error', key);
					BS.logger.log(e);
					cc.dom.show();
				}).finally(function () {
					cc.lock = false;
				}).done();
			});

			break;
		case 'ok':
			cc.lock = true;
			cc.subMenu.showFocus().then(function () {
				return tvCategoryRepo.getById(cCatId).then(function (catObj) {
					return catObj.getChannels().then(function (channels) {
						if (!catObj.isEmptyForUser) {
							var cCh = liveTv.getCurrentChannel();
							liveTv.setCurrentCategory(catObj);
							var newChannel = catObj.containsChannel(cCh.id) ? cCh : channels[0];
							liveTv.switchToChannel(newChannel, true);
						}
					});
				}).catch(function(ex) {
					BS.logger.trace('CC exception %s', ex);
				}).finally(function () {
					cc.lock = false;
				}).done();
			});

			break;
		case 'back':
		case 'left':
			if (cc.currentlyDisplayedCatId === null) {
				am.pop();
			} else {
				this.lock = true;
				tvCategoryRepo.getById(cc.currentlyDisplayedCatId).then(function (catObj) {
					return cc.rebuildCatListMenu(catObj.parentId);
				}).then(function () {
					if (cc.lastCategoryIndexes.length) {
						cc.subMenu.jump(cc.lastCategoryIndexes.pop(), true);
					}
				}).finally(function () {
					cc.lock = false;
				}).done();
			}

			break;
		case 'menu':
		case 'reload':
			am.pop();
			am.push(mm.getApp(misc.adapterMainMenu.appId));
			break;
		case 'green':
			var channelStatus = liveTv.checkChanStatus(
				liveTv.getCurrentChannel(), true, false, true);
			if (channelStatus === 'chLocked' || channelStatus === 'programLocked' ||
				channelStatus === 'ParentalControlRestrictionsInPlace') {
				am.cutOff('liveTv');
				return true;
			}
			break;
		}
	};
	cc.focus = function () {
		cc.dom.show();
	};
	cc.init = function (cApp, categoryId) {
		BS.perf.start('channel category list');
		var domCs;
		categoryId = categoryId || null;
		liveTv = mm.getApp('liveTv');
		cc.lock = true;

		cc.dom = dom = dom || {
			ccBg: $('#channelCategoriesListBg'),
			ccS: (domCs = $('#categorySelector')),
			ccH: $('#channelCategoriesHolder'),
			ccLoadingHolder: $('#ccLoadingHolder'),
			menuStep: domCs.attr('selectorStep', null, NS.bee),
			minMenuHeight:  parseFloat(domCs.attr('min-height', null, NS.bee)),
			maxMenuHeight: parseFloat(domCs.attr('max-height', null, NS.bee)),
			ccActionBar: $('#ccListActionBar'),
			ccCatText: $('#ccCatText'),
			show: function () {
				if (cc.subMenu && cc.subMenu.size) {
					dom.hideLoadingNotification();
					if (cc.subMenu.size() > 0) {
						dom.showMenuSelector();
					} else {
						dom.hideMenuSelector();
					}
				} else {
					dom.hideMenuSelector();
					dom.showLoadingNotification();
				}
				dom.ccH.show();
			},
			hide: function () {
				dom.ccH.hide();
			},
			showMenuSelector: function () {
				dom.ccS.show();
			},
			hideMenuSelector: function () {
				dom.ccS.hide();
			},
			showLoadingNotification: function () {
				dom.ccLoadingHolder.show();
			},
			hideLoadingNotification: function () {
				dom.ccLoadingHolder.hide();
			},
			setCategoryName: function (name) {
				dom.ccCatText.text(name);
			},
			visible: function () {
				return dom.ccH.visible().length > 0;
			},
			setSizes: function (itmCount) {
				var h = (itmCount * dom.menuStep) + 20;
				var effectiveH = h > dom.maxMenuHeight  ?
					dom.maxMenuHeight :
					h < dom.minMenuHeight ? dom.minMenuHeight : h;
				dom.ccBg.attr('height', effectiveH);
				dom.ccActionBar.ctm({'f': effectiveH + 71});
				return effectiveH;
			}
		};

		if (!this.ab && dom.ccActionBar.length)
			this.ab = new ui.ActionBar(dom.ccActionBar);

		cc.cached = false;
		dom.show();
		cc.rebuildCatListMenu(categoryId).then(function (catObjs) {
			var catIndex = 0;
			var currentCategory = liveTv.getCurrentCategory();
			catObjs.some(function(c, i) {
				if (c.id === currentCategory.id) {
					catIndex = i;
					return true;
				}
			});
			dom.show();
			dom.setSizes(catObjs.length);
			cc.subMenu.jump(catIndex);
		}).finally(function () {
			cc.lock = false;
			BS.perf.stop('channel category list', 'cached=%s', cc.cached);
		});
		cc.lastCategoryIndexes = [];
	};
	cc.startup = function () {
		tvMosaics = mm.getApp('tvMosaics');
	};
	cc.destroy = function () {
		dom.hide();
		if (liveTv.getCurrentChannel() instanceof bsMain.MosaicChannel) {
			return;
		}

		if (cc.subMenu) {
			cc.lastCategoryIndexes.push(cc.subMenu.currentIndex());
		}

	};
	cc.getSelectedCategoryId = function () {
		return cc.subMenu ? cc.subMenu.currentInfo() : null;
	};
	cc.rebuildCatListMenu = function (parentCategoryId) {
		parentCategoryId = parentCategoryId || null;

		if (parentCategoryId === cc.currentlyDisplayedCatId
			&& cc.currentlyDisplayedCatTs > Date.now()
		) {
			cc.cached = true;
			return q(this.categoryList);
		}

		if (parentCategoryId === null) cc.dom.setCategoryName(tr('channelCategories'));
		else tvCategoryRepo.getById(parentCategoryId).then(function(parentCategory) {
				cc.dom.setCategoryName(parentCategory.name);
			});

		if (cc.menu) {
			cc.menu.destroy();
			cc.menu = null;
		}
		cc.menu = new ui.Menu(dom.ccS[0]);

		return tvCategoryRepo.getByParentId(parentCategoryId).then(function (objCategories) {
			var catList = objCategories
				.filter(function (objCat) {
					return (!objCat.isEmpty || objCat.hasSubCategories || objCat.isDynamic);
				})
				.map(function (objCat) {
					return {id: objCat.id, name: objCat.name.encodeEntities(),
						parentId: objCat.parentId, type: objCat.type};
				});

			cc.subMenu = cc.menu.newMenuItems().setItems(
				ui.template('standardMenuTemplate', {
					'text': catList.map(function (catObj) { return catObj.name; }),
					'selector': $('#categorySelector')
				}),
				catList.map(function (catObj) {
					return catObj.id;
				})
			).show();

			cc.currentlyDisplayedCatId = parentCategoryId;
			cc.currentlyDisplayedCatTs = tvCategoryRepo.cacheExpires();

			cc.categoryList = catList;

			return q(catList);

		}).catch(function (x) {
			BS.logger.log(x);
		});
	};
	var channelCategories = cc;
	var menu = null;
	var menuGroup = null;
	var menus = {};
	var currCat = null;
	var ccl = new BS.App('categoryChannelList', {
		listenTo: [keys.shortcuts],
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	ccl.previousAllCategoryHash = null;
	ccl.onInputEvent = function (keyPressedName) {
		if (this.lock) {
			return;
		}
		switch (keyPressedName) {
		case 'info': return true;
		case 'down':
		case 'up':
			if (keyPressedName === 'up') {
				menu.previous();
			} else {
				menu.next();
			}
			ccl.dom.hideChannelTip();
			chTipTimer.reset();

			break;
		case 'green':
			return true;

		case 'ok':
			var categoryObject;
			tvCategoryRepo
				.getById(channelCategories.getSelectedCategoryId())
				.then(function (objCat) {
					categoryObject = objCat;
					return objCat.getChannels();
				}).then(function (channels) {
					if (channels.length === 0) {
						return;
					}
					menu.select(function () {
						try {
							var channel = tvLib.getChannelById(menu.currentInfo().id);
							if (liveTv.getCurrentChannel() instanceof bsMain.MosaicChannel) {
								tvMosaics.cleanup();
							}
							liveTv.switchToChannel(channel, true);

							liveTv.setCurrentCategory(currCat);
							liveTv.checkChanStatus(channel, true, false, false);
						} catch (x) {
							BS.logger.info('Failed to set current category/channel due to: %s', x);
							am.pop();
						}
					});
				}).done();

			break;
		case 'back':
		case 'left':
			am.pop();

			break;
		case 'menu':
		case 'reload':
			am.pop();
			am.pop();
			am.push(mm.getApp(misc.adapterMainMenu.appId));
			break;
		}
	};
	ccl.init = function (callerApp, cat) {
		BS.perf.start('channel category channels list');
		var audit = 'CCL .init(%s, %s) '.sprintf(callerApp, cat);
		BS.logger.trace(audit);
		this.lock = true;
		var that = ccl;
		var error = false;
		var hash, categorySize, cached;
		that.dom = that.dom || ccl.initializeDom();
		that.cCategory = cat;

		Q.fcall(function (){
			that.dom.setCategoryName(cat);
			that.dom.show(false, 0);
		}).delay(0).then(function (){
			return cat.getChannels();
		}).then(function (channels) {
			BS.logger.trace(audit + 'got channels');
			categorySize = channels.length;
			channels = channels.filter(function (chObj) {
				return chObj.isAcknowledgedByPC(liveTv.showAgeForbiddenChannels);
			});
			currCat = cat;
			hash = channels.reduce(function (prev, curr){
				return prev.concat(curr.number).concat(curr.name);
			}, '');

			var newIndex = channels.indexOf(liveTv.getCurrentChannel());
			newIndex = newIndex === -1 ? 0 : newIndex;
			if ((cat.id in menus) && hash === that.previousAllCategoryHash) {
				menu = menus[cat.id];
				menu.jump(newIndex, true).show();
				cached = true;
				BS.logger.trace(audit + 'Showing cached list of channels view!');
			} else {
				cached = false;
				var items = channels.map(function (ch){
					var imgUrl = BS.device.performanceIndex === 'MIN' ? '' : ch.chLogoLink;
					if (imgUrl) {
						imgUrl = BS.ui.Image.addImageSizeParamToUrl(
							imgUrl, that.dom.cclIconSize[0], that.dom.cclIconSize[1]
						);
					}
					return ui.template('cclMenuTemplate', {
						'number': ch.number.padToLength(BS.skinConfiguration.maxChannelDigits)
							.toLocaleString(languageCode),
						'name': ch.name.encodeEntities(),
						'img': !imgUrl ? '-' : imgUrl
					});
				});
				if (menus[cat.id]) {
					menus[cat.id].destroy();
				}
				menu = menus[cat.id] = menuGroup.newMenuItems();
				menu.setItems(items, channels).jump(newIndex, true).show();
				menu.onFinish(function (index, info) {
					ccl.dom.refreshStatusIconsForChanId(info);
				}, 400);
				if (cat.type === tvCategoryRepo.CategoryTypes.ALL_CHANNELS) {
					that.previousAllCategoryHash = hash;
				}
				BS.logger.trace(audit + 'Showing regenerated list of channels view!');
			}

			var isEmpty = menu.size() === 0;
			that.dom.setCategoryEmptyMessage(isEmpty, cat);

			that.dom.show(true, channels.length);
			BS.logger.trace(audit + 'DONE!');
			if (isEmpty) {
				return;
			}

			q.delay(400).then(function () {
				that.dom.refreshStatusIconsForChanId(menu.currentInfo());
				chTipTimer.begin();
				BS.logger.trace(audit + 'Menu delayed actions exec.');
			}).done();
		})
		.catch(function (e) {
			BS.logger.log(e);
			BS.logger.debug(audit + 'Unable to create channel categories menu!');
			error = true;
			am.pop();
		})
		.finally(function () {
			that.lock = false;
			if (cc.dom.visible()) {
				cc.dom.hide();
			}
			BS.perf.stop(
				'channel category channels list',
				'category=%s, type=%s, size=%s, cached=%s, error=%s',
				cat.name, cat.type, categorySize, cached, error
			);
		}).done();
	};
	ccl.destroy = function () {
		q.delay(150).then(function () {
			if (ccl.cCategory.type === tvCategoryRepo.CategoryTypes.ALL_CHANNELS)
				return;
			if (menus[ccl.cCategory.id]) {
				menus[ccl.cCategory.id].destroy();
				delete menus[ccl.cCategory.id];
			}
			menu = null;
		}).done();
		ccl.dom.hide();
		ccl.dom.hideChannelTip();
		chTipTimer.clear();
	};
	ccl.initializeDom = function () {
		var cclChDescShown = false;
		var dom = {};

		dom = new ModuleDom(
			[
				'templateEpgCsd', 'chanCatEmptyText', 'channelSmallDescriptionContent',
				'channelSmallDescription', 'channelSmallDescriptionBg', 'ccl-ch-desc-switch',
				'ccl-ch-desc-rebuild', 'ccListHolderActionBar'
			],
			{
				cclH: $('#categoryChannelListHolder'),
				cclIconsH: $('#channStatusIconsHolder'),
				cclS: $('#catChannelMenuSelector'),
				cclCatText: $('#cclCCatText'),
				cclCatChanCount: $('#cclCCatChanCount'),
				cclMenu: $('#categoryChannelListMenu'),
				cclLoadingH: $('#cclLoadingHolder'),
				cclChCatEmptyH: $('#chanCatEmptyHolder'),
				show: function (showMenu, channelCount) {
					if (showMenu) {
						dom.cclMenu.show();
						dom.cclLoadingH.hide();
						dom.cclCatChanCount.text('(%s)'.sprintf(currCat.length.toLocaleString(
							languageCode)));
					} else {
						dom.cclMenu.hide();
						dom.cclLoadingH.show();
					}
					dom.cclH.show();
				},
				hide: function () {
					dom.cclH.hide();
					dom.cclLoadingH.hide();
					dom.cclMenu.hide();
					dom.cclChCatEmptyH.hide();
					dom.cclCatChanCount.text(' ');
					dom.cclIconsH.hide();
				},
				setCategoryName: function (cat) {
					dom.cclCatText.text(cat.name);
				},
				setCategoryEmptyMessage: function (value, catObj) {
					if (value === true) {
						var trKey = catObj &&
						catObj.type === tvCategoryRepo.CategoryTypes.FAVORITE ? 'favorites_how_to' :
							'categoryEmptyText';
						this['chanCatEmptyText'].svg(tr(trKey));

						dom.cclChCatEmptyH.show();
					} else {
						dom.cclIconsH.show();
						dom.cclChCatEmptyH.hide();
					}
				},
				refreshStatusIconsForChanId: function (chObject) {
					dom.chFeatureIcons.showIcons(liveTv.channelStatusIcons(chObject));
				},
				showChannelTip: function () {
					if (cclChDescShown === true)
						return;
					dom['ccl-ch-desc-switch'].begin();
					this.channelTipTimer.set(6000);
					cclChDescShown = true;
				},
				moveChannelTip: function (x, y) {
					dom.channelSmallDescription.ctm({e: x, f: y});
				},
				resizeChannelTip: function (width, height) {
					if (width) dom.channelSmallDescriptionBg.attr('width', width);
					if (height) dom.channelSmallDescriptionBg.attr('height', height);
				},
				hideChannelTip: function () {
					if (cclChDescShown === false)
						return;

					cclChDescShown = false;
					dom['ccl-ch-desc-switch'].end();
					this.channelTipTimer.clear();
				},
				setChannelTipContent: function (messageSvg) {
					var that = this,
						cont = that.channelSmallDescriptionContent;
					cont.text('').append(messageSvg);
					dom['ccl-ch-desc-rebuild'].trigger('beginEvent', {
						'setHeightAndPosition': function (offset, maxPosition, lastPositionOffset,
							holderX, minHeight) {
							var height = cont[0].getBBox().height + 10,
								cMenuIndex = menu.currentIndex() - menu.topIndex() + 1,
								step = dom.cclS.attr('selectorStep', null,
									NS.bee),
								cMenuIndexPos = (cMenuIndex * step) + offset;

							if (height < minHeight) {
								height = minHeight;
								cMenuIndexPos += 20;
							}

							if (cMenuIndexPos > maxPosition)
								cMenuIndexPos -= lastPositionOffset;

							dom.resizeChannelTip(null, height);
							dom.moveChannelTip(holderX, cMenuIndexPos);
						}
					});
				},
				channelTipTimer: {
					clear: function () {
						if (this.descTimerId !== null) {
							clearTimeout(this.descTimerId);
							this.descTimerId = null;
						}
					},
					set: function (timeout) {
						this.clear();
						this.descTimerId = setTimeout(function () {
							dom.hideChannelTip();
						}, timeout);
					}
				}
			}
		);

		dom.cclIconSize = $('#cclMenuTemplate')
			.attr('channel-icon-size', null, NS.bee)
			.split(',')
			.map(function(size) { return parseInt(size, 10); });
		if (dom.cclIconSize.length < 2)
			dom.cclIconSize = [null, null];

		if (dom.ccListHolderActionBar.length)
			ui.ActionBar(dom.ccListHolderActionBar);

		menuGroup = new ui.Menu(dom.cclS[0]);
		dom.chFeatureIcons = new ui.StatusIcons(
			dom.cclIconsH[0],
			['iconChannelRecordable', 'iconChannelTimeshift', 'iconChannelPauseResume',
				'iconChannelInstantRecording',
				'iconChannelLock', 'iconChannelHD'
			],
			5);

		return dom;
	};

	var categoryChannelList = ccl;
	var chTipTimer = new BS.Utils.Timer(function () {
		if (!menu || menu.size() === 0)
			return;

		var chObj = menu.currentInfo();

		if (!(chObj instanceof bsMain.MosaicChannel)) {
			showRepo.loadChannel(chObj.id).then(function(obj){
				var ceID = obj.channelId;
				var show = showService.getCurrentShow(tvLib.getChannelById(ceID));
				var epgData = [show];
				if (!show || !am.lastLoaded('categoryChannelList'))
					return;
				show = showService.getNextShowAfter(tvLib.getChannelById(ceID), show);
				if (show)
					epgData.push(show);
				var tempSvg = '';
				var responsesCount = 0;
				epgData.forEach(function (data, i) {
					data.getDescription().then(function (txt) {
						tempSvg += ui.template('templateEpgCsd', {
							'position': i,
							'setTime': function (format) {
								return new Date(data.start).toFormatedString(format);
							},
							'setTitle': function () {
								return data.getTitle().encodeEntities();
							},
							'setDescription': function () {
								return txt.stripXmlTags().encodeEntities();
							}
						});
						responsesCount++;
						if (responsesCount >= epgData.length) {
							ccl.dom.setChannelTipContent('<g>' + tempSvg + '</g>');
							ccl.dom.showChannelTip();
						}
					});
				});
			}).done();
		}
	}, 2000);

	function SecondLevelCache () {
		this._cache = {};
		this._expires = {};
	}
	SecondLevelCache.prototype = {
		_cache: null,
		_expires: null,
		store: function (cacheIndex, value, expires) {
			this._cache[cacheIndex] = value;
			this.updateExpires(cacheIndex, expires);
		},
		updateExpires: function(cacheIndex, expires) {
			this._expires[cacheIndex] = expires;
		},
		isReusable: function (cacheIndex, ts) {
			return cacheIndex in this._cache && this._expires[cacheIndex] > ts;
		},
		reuse: function (cacheIndex, ignoreIsReusable) {
			return this.isReusable(cacheIndex, Date.now()) || ignoreIsReusable ?
				this._cache[cacheIndex] : null;
		},
		contains: function(cacheIndex) {
			return cacheIndex in this._cache;
		},
		expires: function (cacheIndex) {
			return this._expires[cacheIndex];
		},
		dump: function (index) {
			if (index) {
				delete this._cache[index];
				delete this._expires[index];
			} else {
				this._cache = {};
				this._expires = {};
			}
			BS.logger.debug('SecondLevelCache has dumped its content (%s).', index);
		}
	};

	function TvCategoryRepo (slc, chCatsFactory, chCatsFetcher) {
		this.cache = slc;
		this._factory = chCatsFactory;
		this._fetch = chCatsFetcher;
	}
	TvCategoryRepo.prototype = {
		TvCategory: TvCategory,
		DynamicTvCategory: DynamicTvCategory,
		CategoryTypes: {
			TOP_WATCHED: 'top-watched',
			TOP_LISTENED_AUDIO: 'top-listened-audio',
			ALL_CHANNELS: 'all-channels',
			FAVORITE: 'favorite-channels',
			DVB: 'dvb-channels',
			STANDARD: 'standard'
		},
		CategoryChanged: CategoryChanged,
		_factory: null,
		_fetch: null,
		_dvbCategory: null,
		includeDVBCategory: false,
		_getAllPromiseLock: null,
		getAll: function () {
			var that = this;
			var has2LCache = that.cache.contains('index-categories');

			if (has2LCache && BS.portal.isDisconnected){
				return q(that.cache.reuse('index-categories', true));
			}
			if (that._getAllPromiseLock)
				return that._getAllPromiseLock;

			that._getAllPromiseLock = that._fetch(has2LCache).then(function (fetchResponse) {
				if (fetchResponse.data !== null)
					return that.rebuildStore(fetchResponse.data, fetchResponse.expires);
				if (has2LCache) {
					that.cache.updateExpires('index-categories', fetchResponse.expires);
					return that.cache.reuse('index-categories', true);
				}
			}).catch(function(ex) {
				if ('no-ip-no-http' !== ex.statusText)
					return that.cache.reuse('index-categories', true) || [];
				return that.rebuildStore(null, Date.now());
			});

			that._getAllPromiseLock.finally(function() {
				that._getAllPromiseLock = null;
			});

			return that._getAllPromiseLock;
		},
		getById: function (id) {
			return this.getAll().then(function (cats) {
				return cats.filter(function idFilter(catObj) {
					return catObj.id === id;
				})[0];
			});
		},
		getByParentId: function (parentId) {
			return this.getAll().then(function (cats) {
				return cats.filter(function (catObj) {
					return catObj.parentId === parentId;
				});
			});
		},
		getByType: function (type) {
			return this.getAll().then(function (cats) {
				return cats.filter(function (catObj) {
					return catObj.type === type;
				});
			});
		},
		getAllCategory: function () {
			return this.getAll().then(function (list) {
				return list.filter(function (catObj) {
					return catObj.type === this.CategoryTypes.ALL_CHANNELS;
				}.bind(this))[0];
			}.bind(this));
		},
		getFavoriteCategory: function () {
			return this.getAll().then(function (list) {
				return list.filter(function (catObj) {
					return catObj.type === this.CategoryTypes.FAVORITE;
				}.bind(this))[0];
			}.bind(this));
		},
		cacheExpires: function () {
			return this.cache.expires('index-categories');
		},
		rebuildStore: function (list, expires) {
			var catNumbering = {current: 10};
			var objCategories = list.map(this._factory, catNumbering);
			var Cnf1 = BS.config.get('Core.Client.Livetv.CURRENTLY_MOST_WATCHED_CATEGORY_ENABLED');
			var Cnf2 = BS.config.get('Core.Client.Livetv.CURRENTLY_MOST_LISTENED_CATEGORY_ENABLED');
			if (Cnf1 && mm.isAllowed('userstatistics'))
				objCategories.push(this._factory({type: 'TOP_WATCHED'}));
			if (Cnf2 && mm.isAllowed('userstatistics'))
				objCategories.push(this._factory({type: 'TOP_LISTENED_AUDIO'}));
			if (this.includeDVBCategory)
				objCategories.push(this._dvbCategory);
			objCategories.sort(function (a, b) {
				return a.position < b.position ? -1 : a.position === b.position ? 0 : 1;
			});
			this.cache.store('index-categories', objCategories, expires);
			em.dispatch(new this.CategoryChanged('all-static'));
			return q(objCategories);
		},
		activateDvbCategory: function() {
			this.includeDVBCategory = true;
			this._dvbCategory = this._factory({type:'DVB'});

			var expires = this.cache.expires('index-categories');
			var objCategories = this.cache.reuse('index-categories');
			if (!expires || !objCategories)
				return this._dvbCategory;
			objCategories.push(this._dvbCategory);
			objCategories.sort(function (a, b) {
				return a.position < b.position ? -1 : a.position === b.position ? 0 : 1;
			});
			this.cache.store('index-categories', objCategories, expires);
			return this._dvbCategory;
		},
		dumpFavourites: function() {
			this.cache.dump('index-category-favorite');
			BS.evMgr.dispatch(new this.CategoryChanged('favorite'));
		},
		dump: function () {
			this.cache.dump('index-categories');
		}
	};




	function PersonalTvCategoryFactory(catDto) {
		var catObj;
		var catNumbering = this;
		var CT = TvCategoryRepo.prototype.CategoryTypes;
		if (catDto.type === 'STANDARD') {
			catDto.type = CT.STANDARD;
			catDto.name = tr(catDto.name);
			catDto.position = catNumbering.current ? catNumbering.current++ : 10;
			catObj = new TvCategory(catDto);

		} else if (catDto.type === 'ALL') {
			if (BS.portal.isEmbedded) catDto.name = tr('allChannelCategory');
			catDto.type = CT.ALL_CHANNELS;
			catDto.position = 1;
			catObj = new AllChannelsCategory(catDto);

		} else if (catDto.type === 'FAVORITES') {
			catDto.type = CT.FAVORITE;
			catDto.position = 2;
			catDto.methodUrl =
				'/restapi/rest/%d/%d/profiles/channels/categories?channel_type=ALL'
					.sprintf(BS.portal.user.regionId, BS.portal.user.userId);
			delete catDto.channelIds;
			catObj = new DynamicTvCategory(catDto);

		} else if (catDto.type === 'TOP_WATCHED') {
			catObj = new DynamicTvCategory({
				type: CT.TOP_WATCHED,
				id: -10,
				name: tr('currentlyTopWatchedVideoChannels'),
				position: 3,
				methodUrl: '/restapi/rest/%d/channels/top-currently-playing?channel_type=video'
					.sprintf(BS.portal.user.regionId),
				leaf: true
			});

		} else if (catDto.type === 'TOP_LISTENED_AUDIO') {
			catObj = new DynamicTvCategory({
				type: CT.TOP_LISTENED_AUDIO,
				id: -20,
				name: tr('currentlyTopListenedAudioChannels'),
				position: 4,
				methodUrl: '/restapi/rest/%d/channels/top-currently-playing?channel_type=audio'
					.sprintf(BS.portal.user.regionId),
				leaf: true
			});
		} else if (catDto.type === 'DVB') {
			catDto.type = CT.DVB;
			catDto.name = tr('dvb_cat_name');
			catDto.position = 4;
			catDto.id = -30;
			catDto.channelIds = [];
			catDto.leaf = true;
			catObj = new TvCategory(catDto);
		}
		return catObj;
	}

	function prmsCategoryMethodsFetch (noCachedData) {
		noCachedData = !!noCachedData;

		if (noCachedData && prmsCategoryMethodsFetch.lastExpires > Date.now())
			return q({data: null, expires: prmsCategoryMethodsFetch.lastExpires});

		var chsUrl = BS.request.translate('/restapi/rest/%d/channels/categories'.sprintf(
			BS.portal.user.regionId));

		return BS.request.Get(chsUrl, {
			cache: 'CARD',
			noCachedData: noCachedData,
			accept: 'json',
			data: { 'language': BS.portal.user.language.label }
		}).then(function (response) {
			var audit = 'TV-CATEGORIES: prmsCategoryMethodsFetch(%s)'.sprintf(noCachedData);
			if (!response.cacheExpires || (response.cacheExpires < Date.now() + 60e3)) {
				prmsCategoryMethodsFetch.lastExpires =
					response.cacheExpires =  Date.now() + (15 * 60e3);
				BS.logger.trace(audit + 'Enforcing default expiry of tvCategoryRepo fetch at %s',
					new Date(response.cacheExpires));
			}
			return {
				data: response.data,
				expires: response.cacheExpires
			};
		});
	}
	prmsCategoryMethodsFetch.lastExpires = 0;

	var slc = new SecondLevelCache();
	var tvCategoryRepo = new TvCategoryRepo(slc, PersonalTvCategoryFactory,
		prmsCategoryMethodsFetch);

	BS.repositories.tvCategoryRepo = tvCategoryRepo;




	function TvCategory(dto) {
		for (var i in dto)
			if (dto.hasOwnProperty(i) && this[i] !== undefined && (i in this))
				this[i] = dto[i];
		this.isLeaf = dto.leaf;
	}
	TvCategory.prototype = {
		id: null,
		name: null,
		channelIds: [],
		position: null,
		type: TvCategoryRepo.prototype.CategoryTypes.STANDARD,
		isLeaf: true,
		parentId: null,
		getChannels: function (doSort) {
			doSort = doSort === undefined || doSort ? true : false;
			var lib = bsMain.tvLibrary;
			var chObjs = this.channelIds.map(idToEntity).filter(filterNulls);
			if (doSort)
				chObjs = chObjs.sort(sorter);
			return q(chObjs);
			function idToEntity (id) { return lib.isChannel(id) ? lib.getChannelById(id) : null; }
			function filterNulls (c) { return c !== null; }
			function sorter (a, b) { return a.number - b.number; }
		},
		get hasSubCategories () {
			return !this.isLeaf;
		},
		isChildOfCategory: function (parentId) {
			return this.parentId === parentId;
		},
		getChannelByNumber: function (number) {
			return this.getChannels().then(function(chs) {
				return chs.filter(function (chObj) {
					return chObj.number === number;
				})[0];
			});
		},
		get length () {
			return this.channelIds.length;
		},
		get isEmpty () {
			return this.length === 0;
		},
		get isEmptyForUser () {
			var hasChannels = this.channelIds.reduce(function(isChannel, channelId) {
				return isChannel || tvLib.isChannel(channelId)
			}, false);

			return hasChannels === false;
		},
		containsChannel: function (chObjId) {
			return this.channelIds.indexOf(chObjId) !== -1;
		},
		equals: function (instanceToCmp) {
			return instanceToCmp instanceof TvCategory && instanceToCmp.id === this.id;
		},
		toString: function () {
			var isLeaf = this.isLeaf ? 'LEAF,' : '';
			var empty = this.isEmpty ? 'EMPTY,' : '';
			var parent = this.parentId ? 'PID-' + this.parentId : '';
			return 'TvCategory#%s `%s` type: %s [%s%s%s]'.sprintf(this.id, this.name, this.type,
				isLeaf, empty, parent);
		}
	};

	function AllChannelsCategory() {
		TvCategory.apply(this, arguments);
	}
	AllChannelsCategory.prototype = {
		get channelIds() {
			return bsMain.tvLibrary.getChannels().map(function(c) { return c.id; });
		},
		getChannels: function () {
			return q(bsMain.tvLibrary.getChannels().sort(function(a,b) {
				return a.number - b.number;
			}));
		},
		get length() {
			return bsMain.tvLibrary.getChannels().length;
		},
		containsChannel: function (chObjId) {
			return bsMain.tvLibrary.isChannel(chObjId);
		}
	};
	Object.extend(AllChannelsCategory, TvCategory);

	function DynamicTvCategory() {
		TvCategory.apply(this, arguments);
	}
	DynamicTvCategory.prototype = {
		methodUrl: null,
		isDynamic: true,
		getChannels: function () {
			var superGetChannels = TvCategory.prototype.getChannels.bind(this);
			var that = this;
			var isFavoriteCat = that.type === tvCategoryRepo.CategoryTypes.FAVORITE;
			if (isFavoriteCat) {
				var list;
				if (BS.portal.isDisconnected) {
					var hasData = slc.contains('index-category-favorite');
					list = slc.reuse('index-category-favorite', hasData) || [];
				} else {
					list = slc.reuse('index-category-favorite');
				}

				if (list) {
					this.channelIds = list;
					return superGetChannels(false);
				} else {
					return BS.request.Get(this.methodUrl, {cache: 'CARD'}).then(function(response) {
						var catCustomization = response.data.filter(function (obj) {
							return obj.id === that.id;
						})[0] || {channelIds: []};

						that.channelIds = catCustomization.channelIds;
						slc.store('index-category-favorite', that.channelIds,
							Date.now() + 7 * 864e+5);

						return superGetChannels(false);
					});
				}
			}

			return BS.request.Get(this.methodUrl).then(function (response) {
				that.channelIds = response.data.map(function (channelUid) {
					try {
						return tvLib.getChannelByUid(channelUid).id;
					} catch (ex) {}
					return null;
				}).filter(function (v) { return !!v; });
				return superGetChannels();
			}).catch(function(ex) {
				if (BS.portal.isDisconnected) {
					that.channelIds = [];
					return superGetChannels();
				}
				throw ex;
			});
		}
	};
	Object.extend(DynamicTvCategory, TvCategory);



	function CategoryChanged(scope) {
		this.data.scope = scope;
	}
	CategoryChanged.prototype = {
		handler: 'onCategoryChanged',
		data: {scope: null}
	};
	Object.extend(CategoryChanged, BS.Event);


	BS.evMgr.bind('msg:onResourceChanged', function(ev) {
		var message = ev.data.body;
		if (message.resource === 'CHANNEL_CATEGORIES') {
			BS.logger.trace('Event:msg:onResourceChanged CHANNEL_CATEGORIES Received');
			slc.dump();
		}
	});

	BS.evMgr.bind('onDvbCategoryChanged', function() {
		cc.currentlyDisplayedCatTs = 0;
	});

	BS.evMgr.bind('onBeeSmartReady', function() {
		if (tvCategoryRepo._dvbCategory) {
			tvCategoryRepo._dvbCategory.name = tr(tvCategoryRepo._dvbCategory.name);
		}
	});


})(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	BeeSmart.evMgr,
	$.ModuleDom,
	BeeSmart.InputManager.keyGroups
);

(function (BS, q, bmisc, mm, am, ui, im, ModuleDom, keys, media, PVR) {
	var tvPanel = new BS.App('tvPanel', {
		inputMapper: BS.App.portalDirectionKeyMapper,
		helpId: 'sidebar_epg',
		isDefault: true
	});

	var channelCategories, categoryChannelList, tvMosaics, storeService, prodRepo, tvCatRepo,
		showRepo, showService, tvLib;

	var bsMain = mm.getModule('BeeSmartMain');
	var numericPicker = mm.getApp('NumberPicker');
	var epgMatrixViewIsAvailable = false;
	var epgMatrixViewApp = null;
	var misc = mm.getApp('Misc');
	var _formats = BS.portal.local.formats;
	var showAgeForbiddenChannels = null;
	var user = null;
	var initialChannelId = null;
	var initialCategoryId = null;
	var languageCode;

	function isChannelPurchaseEnabled() {
		return BS.config.get('Purchase.Client.CH_PURCHASE_ENABLED');
	}

	bsMain
		.getInstanceAvailabilityPromiseOf('TvLibrary')
		.then(function (argTvLibrary) {
			tvLib = argTvLibrary;
		});

	BS.evMgr.bind('onBeeSmartLoginSuccess', function () {
		storeService = bsMain.storeService;
		prodRepo = bsMain.productRepository;
		tvMosaics = mm.getApp('tvMosaics');
		user = BS.portal.user;
		languageCode = user.language.label;
	});

	tvPanel.onInputEvent = function (key) {
		switch (key) {
		case 'back':
		case 'left':
			am.pop();
			break;
		case 'chUp':
		case 'chDown':
			key = key === 'chDown' ? 'down' : 'up';
		case 'up':
		case 'down':
			if (key === 'up') {
				tvPanel.subMenu.previous();
			} else {
				tvPanel.subMenu.next();
			}
			break;
		case 'right':
		case 'ok':
			tvPanel.subMenu.select(function () {
				switch (tvPanel.subMenu.currentInfo().id) {
				case 'channelList':
					am.cutOff(am.isLoaded('tvMosaics') ? 'tvMosaics' : 'liveTv');
					am.push(channelCategories);
					break;
				case 'tvRecommendations':
					tvPanel.dom.sideChListMenu.hide();
					am.push(mm.getApp('tvRecommendations'), 'provider');

					break;
				case 'recommByFriends':
					tvPanel.dom.sideChListMenu.hide();
					am.push(mm.getApp('tvRecommendations'), 'friendly');
					break;
				case 'programGuide':
					if (epgMatrixViewIsAvailable)
						am.push(epgMatrixViewApp);
					break;
				}
			});
			break;
		case 'blue':
			if (!mm.isAllowed('search') || !mm.appExists('searchPopup'))
				return;
			tvPanel.dom.sideChListMenu.hide();
			am.inContextOf(this).push(mm.getApp('searchPopup'));

			break;
		}
	};

	tvPanel.destroy = function () {
		this.dom.hideModule();
	};

	tvPanel.focus = function () {
		this.dom.setActionBar();
		this.dom.sideChListMenu.show();
	};

	tvPanel.init = function (caller, pushAppId, pushAppArg) {
		this.dom = this.dom || new ModuleDom([
			'liveTvContent', 'sideChListMenuSelector', 'sideChListMenu', 'livetv_content'
		], {
			showModule: function () {
				this.setActionBar();
				this.liveTvContent.show();
			},
			hideModule: function () {
				this.liveTvContent.hide();
			},
			subModuleDescription: function (desc) {
				this['livetv_content'].first().svg(desc);
			},
			setActionBar: function () {
				var bar = [
					['back', 'toMainMenu'],
					['vertical', 'select']
				];

				if (mm.isAllowed('search')) {
					bar.push(['blue', 'search']);
					bar.push(['confirm', 'confirm']);
				} else {
					bar.push(['confirm', 'confirm']);
				}

				this.actionBar(bar);
			},
			actionBar: function (buttonVector) {
				misc.dom.actionBar.set(buttonVector);
			}
		});

		var mList = [
			{id: 'channelList', name: 'channelList', description: tr('ChannelListDescription')}
		];
		var items = [];
		var infos = [];

		if (this.menu) {
			this.subMenu.destroy();
			this.menu.destroy();
			this.menu = null;
		}

		this.menu = new ui.Menu(this.dom.sideChListMenuSelector[0]);
		var weAreOnline = BS.portal.isOnline;
		if (weAreOnline && mm.isAllowed('recommendlivetv') && BS.portal.user.tvRecommend) {
			mList.push({
				id: 'tvRecommendations',
				name: 'whatsOn',
				description: tr('WhatsOnDescription')
			});
		}
		if (weAreOnline && mm.isAllowed('mediasharing')) {
			mList.push({
				id: 'recommByFriends',
				name: 'recommByFriends',
				description: tr('recommByFriendsDescription')
			});
		}
		mList.push({
			id: 'programGuide',
			name: 'programGuide',
			description: tr('ProgramGuideDescription')
		});

		for (var i = 0; i < mList.length; i++) {
			items.push(tr(mList[i].name));
			infos.push(mList[i]);
		}

		items = ui.template('standardMenuTemplate', {
			'text': items,
			'selector': this.dom.sideChListMenuSelector
		});

		this.subMenu = this.menu.newMenuItems().setItems(items, infos).show();
		this.subMenu.onFinish(function (index, info) {
			this.dom.subModuleDescription(info.description);
		}.bind(this), 500);
		this.subMenu.jump(0, true);
		this.dom.sideChListMenu.show();
		this.dom.showModule();

		if (pushAppId && pushAppId !== misc.adapterMainMenu.appId) {
			tvPanel.dom.sideChListMenu.hide();
			am.push(mm.getApp(pushAppId, pushAppArg));
		}
	};

	var liveTv = new BS.App('liveTv', {
		isDefault: true,
		helpId: 'liveTv',
		inputMapper: BS.App.portalDirectionKeyMapper,
		listenTo: ['subtitle', 'audio', 'radio', 'fav', 'info']
	});
	liveTv.autoReminderTimer = null;
	liveTv.chInfoTimeout = null;
	liveTv.instRecordedChId = null;
	liveTv.isSwitching = null;
	liveTv.switchDelayTimerRef = null;
	liveTv.firstInit = true;
	liveTv.autoReminderAutoHideTimer = null;
	liveTv.channelZappingPricingPolicy = null;
	liveTv.channelsForZapping = null;
	liveTv.resetChannelsForZapping = function () {
		this.channelsForZapping = null;
	};

	liveTv.onInputEvent = function (key) {
		var that = this;
		var chan;

		if (that.lock && key !== 'play')
			return;

		switch (key) {
		case 'blue':
			if (!mm.isAllowed('search') || !mm.appExists('searchPopup'))
				return;

			am.inContextOf(this).push(mm.getApp('searchPopup'));

			break;
		case 'green':
			chan = that.getCurrentChannel();
			var show = showService.getCurrentShow(chan);

			function continuePurchase(chan, prg) {
				var chStatus = storeService.getItemPurchaseStatus(chan.id, prodRepo.Types.Live);
				var products = prodRepo.findByItemId(chan.id, prodRepo.Types.Live);
				if (
					chan.isPurchasable(isChannelPurchaseEnabled()) &&
					!chan.isPreviewTemporaryEnabled() &&
					!chStatus.isFree()
				) {
					ui.toggleLoader(true);
					that.lock = true;

					try {
						products = prodRepo.findByItemId(chan.id, 'live').filter(function(p) {
							return p.purchaseInfo.isInUsersSubscription();
						});
						var itemsCounter = storeService.getPriceItemsCount(products);

						that.dom.hideChannelUnlock();
						if (am.isLoaded('normalCIB'))
							am.pop('normalCIB');

						var clientPurchaseDisabled = products.some(function (p) {
							return !p.clientPurchaseEnabled;
						});

						if (clientPurchaseDisabled) {
							storeService.showCallOperatorDialog(products.filter(function (p) {
								return !p.clientPurchaseEnabled;
							})[0]);
							return;
						}

						if (itemsCounter > 1) {
							am.push(mm.getApp('priceListDialog'), products);
						} else {
							am.push(
								mm.getApp('content_purchase'),
								that.purchaseChannel,
								{
									product: products[0],
									priceItem: products[0].priceList[0],
									channelId: chan.id,
									dialogTitle: tr(products[0].isPreOrder() ?
										'ChannelPreOrderDialogTitle' : 'channelPurchaseDialogTitle')
								}
							);
						}
					} finally {
						ui.toggleLoader(false);
						that.lock = false;
					}

				} else if (prg && showService.tvShowViewPurchaseService.canOfferSale(prg)) {
					showService.tvShowViewPurchaseService.purchaseShowView(prg);
				} else if (showAgeForbiddenChannels && that.isCurrentProgramAllowed() === false) {
					am.push(mm.getApp('pinCheckDialog'));
				} else if (user.isParentalyUnlocked()) {
					user.resetParentalControl();

					tvLib.resetTemporaryAcknowledgedChannels();

					that.chanCheckerFunction();
				} else if (chStatus.isInOtherSubscription() && isChannelPurchaseEnabled()){
					storeService.showSubscriptionApp(products);
				}
			}

			if (!show && that.dom.chUnlockMode && that.dom.chUnlockMode === 'nextShowDisplay') {
				showService.retrieveNextShowOnChannel(chan).then(function (show) {
					continuePurchase(chan, show);
				});
			} else {
				continuePurchase(chan, show);
			}

			break;
		case 'yellow':
		case 'audio':
			if (am.lastLoaded('audioSubtitleSelection')) {
				am.pop();
				return;
			}

			if (!am.lastLoaded('liveTv'))
				return;

			chan = that.getCurrentChannel();

			if (chan.isPreviewSupported() && that.checkChanPreviewStatus()) {
				chan.enableChPreview();
			} else if (!chan.isPreviewTemporaryEnabled() && chan.isPurchased()) {
				if (that.dom.getLockTimer() !== null)
					return;
				that.dom.startLockTimer(2000);
				am.push(audioSubtitleSelection);
			}
			break;
		case 'ok':
			if (that.isChFlyoverActive()) {
				that.finalizeFlyover();
				that.dom.hideChannelName();
				return;
			}
			am.push(normalCIB, false);

			break;
		case 'chUp':
		case 'chDown':
			key = key === 'chDown' ? 'down' : 'up';

		case 'up':
		case 'down':
			that.chFlyover(key === 'up');

			break;
		case 'ttx':
			if (!am.lastLoaded('liveTv'))
				return;

			am.push(mm.getApp('teletextScreen'));

			break;
		case 'left':
			if (!am.lastLoaded('EpgColumnView')) am.push(mm.getApp('EpgColumnView'));

			break;
		case 'right':
			am.push(channelCategories);

			break;
		case 'toBegin':
			if (that.isSwitching)
				return;
			that.startStartOverRecording();
			break;
		case 'rew':
			if (that.isSwitching)
				return;
			that.startStartOverRecording(that.startOverOptions.startWithRewTrickplay);
			break;
		case 'pause':
		case 'play':
			if (that.isSwitching)
				return;

			if (BS.recorder.getName() === 'LocalRecorder') {
				that.startPnRRecording();
			} else {
				if (am.isLoaded('normalCIB')) am.pop();
				try {
					that.startStartOverRecording(that.startOverOptions.pauseAndResume);
				} catch (ex) {
					BS.logger.log(ex);
					that.startPnRRecording();
				}
			}

			break;
		case 'back':
			if (liveTv.isChFlyoverActive()) {
				liveTv.cancelFlyover();
				return;
			}
			var pChObj = that.getPreviousChannel();
			if (!pChObj || !tvLib.isChannel(pChObj))
				return;
			that.getCurrentCategory().getChannels().then(function (channels) {
				if (channels.indexOf(pChObj) === -1)
					liveTv.setCurrentCategory(that.getPreviousCategory());
				that.switchToChannel(pChObj, false);
				that.dom.triggerChannelNameAutoHide(pChObj, true);
			});

			break;
		case 'stop':
			return true;
		case 'red':
			if (mm.appExists('reminder') && !am.lastLoaded('reminder')) {
				if (mm.getApp('reminder').checkReminder(true).length === 0) {
					var alert = new ui.Alert({
						autoHide: 3500
					});
					alert.show(tr('noReminders'));
				}
			}
			break;
		case 'subtitle':
			if (am.lastLoaded('audioSubtitleSelection')) {
				am.pop();
			} else if (am.lastLoaded('liveTv')) {
				am.push(mm.getApp('audioSubtitleSelection'), true);
			}

			break;
		case 'fav':
			if (am.lastLoaded('liveTv')) {
				am.push(channelCategories);
				tvCatRepo.getFavoriteCategory().then(function (favChannelsCat) {
					am.push(categoryChannelList, favChannelsCat);
				});
			}

			break;
		case 'radio':
			if (am.lastLoaded('liveTv'))
				am.push(mm.getApp('channelCategories'));

			break;
		case 'record':
			return true;
		case 'info':
			if (this.getCurrentChannel() instanceof BS.TvModel.MosaicChannel) break;
			if (!misc.portalIsHidden()) break;
			var tvShow = showService.getCurrentShow(this.getCurrentChannel());
			if (!tvShow) break;
			am.cutOff('liveTv');
			am.push(mm.getApp('epgTvShowDetails'), tvShow, this.getCurrentCategory());
			break;
		default:
			if (key.match(/^[a-xÃ-Ç¿]$/i)) {
				if (mm.appExists('quickChat'))
					am.push(mm.getApp('quickChat'));
				break;
			}

			if (isNaN(parseInt(key)))
				break;

			this.dom.hideChannelName();

			am.push(numericPicker, key, function (number) {
				var currCat = liveTv.getCurrentCategory();
				var pChObj = null;
				if (!currCat) {
					BS.logger.info('LIVE TV :: Current category not set! Will set to ALL.');
				} else {
					pChObj = currCat.getChannelByNumber(number);
				}
				q.all([tvCatRepo.getAllCategory(), pChObj])
					.spread(function (allChannelsCat, chObj) {
						if (!chObj && (!currCat || currCat.id !== allChannelsCat.id)) {
							return allChannelsCat.getChannelByNumber(number).then(function (chObj) {
								if (chObj)
									liveTv.setCurrentCategory(allChannelsCat);
								return chObj;
							});
						}
						return q(chObj);
					}).then(function (chObj) {
						if (chObj)
							liveTv.switchToChannel(chObj, false, true);
					});
			});

			break;
		}
	};

	liveTv.startOverOptions = {
		pauseAndResume: 'pause-and-resume',
		startWithRewTrickplay: 'start-with-rew-trickplay'
	};

	liveTv.startStartOverRecording = function (startOverOptions) {
		var chan = this.getCurrentChannel();
		var cShow = showService.getCurrentShow(chan);
		var seekToTime = Date.now();
		var checkChStatus = this.checkChanStatus(null, false, false, true);

		if (
		!cShow ||
		chan.isPreviewTemporaryEnabled() ||
		!PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.CatchUp) ||
		!PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.StartOver) ||
		!chan.autoRecord ||
		(checkChStatus !== 'ok' && checkChStatus !== 'ParentalControlRestrictionsInPlace')
		) throw 'app-stack-op-abort';

		var showRecProps = showService.getShowRecProperties(cShow);
		if (
			showRecProps &&
			showRecProps.assetType === 'recordedAssetAutoInProgress' &&
			!cShow.barred
		) {
			if (!this.isCurrentProgramAllowed()) {
				am.push(mm.getApp('pinCheckDialog'), undefined, 'playRecording');
			} else {
				ui.toggleLoader(true);
				if (startOverOptions === this.startOverOptions.pauseAndResume) {
					BS.media.pause();
					showRecProps.seekToTime = seekToTime;
					showRecProps.delayRecPlayOut = true;
				} else if (startOverOptions === this.startOverOptions.startWithRewTrickplay) {
					showRecProps.seekToTime = seekToTime;
					showRecProps.startWithRewTrickplay = true;
				}
				showService.playShowRecording(showRecProps).finally(function () {
					ui.toggleLoader(false);
				});
			}
		}
	};

	liveTv.startPnRRecording = function startPnRRecording() {
		var chan = this.getCurrentChannel();
		if (chan.isPreviewTemporaryEnabled())
			return;

		if (!am.isLoaded('normalCIB'))
			am.push(mm.getApp('normalCIB'), false);

		var possibleAbortException = am.push(mm.getApp('pauseAndResume'), chan);
		if (possibleAbortException) {
			am.pop();
			BS.logger.info('LIVETV.onInputEvent: P&R is not possible!');
		}
	};

	liveTv.focus = function (caller, args, args1, args2) {
		var channel;
		switch (caller) {
		case 'content_purchase':
			var that = this;
			if (args === 'ok' && args1 && args1 !== this.getCurrentChannel().id) {
				tvCatRepo.getById(channelCategories.getSelectedCategoryId()).then(function (cat) {
					liveTv.setCurrentCategory(cat);
					that.switchToChannel(tvLib.getChannelById(args1));
				}).catch(function (ex) {
					BS.logger.trace('liveTv.focus unexpected exception %s', ex);
				});
			} else {
				channel = this.getCurrentChannel();
				if (channel instanceof bsMain.MosaicChannel && liveTv.checkChanStatus(channel))
					am.push(tvMosaics);
			}
			break;
		case 'priceListDialog':
			if (args === 'ok' && args2) {
				var showViewService = showService.tvShowViewPurchaseService;
				var product = args2.product;
				var isShowView = product.type === 'show-view';
				var titleTr = isShowView
					? product.isPreOrder()
						? 'PreOrderShowView'
						: 'PurchaseShowView'
					: product.isPreOrder()
						? 'ChannelPreOrderDialogTitle'
						: 'channelPurchaseDialogTitle';
				var callback = isShowView
					? showViewService.completeShowViewPurchase.bind(showViewService)
					: liveTv.purchaseChannel;
				am.push(mm.getApp('content_purchase'), callback, {
					channelId: this.getCurrentChannel().id,
					product: args2.product,
					priceItem: args2.priceItem,
					dialogTitle: tr(titleTr)
				});
			}
			break;
		case 'pinCheckDialog':
			if (args2 === true || args2 === 'allowed') {
				var chObj = this.getCurrentChannel();
				showRepo.loadChannel(chObj.id).then(function () {
					this.chanCheckerFunction();
				}.bind(this)).done();
			} else if (args2 === 'playRecording') {
				var cShow = null;
				var pProps = null;

				if (epgMatrixViewIsAvailable) {
					cShow = showService.getCurrentShow(this.getCurrentChannel());
					if (cShow) {
						pProps = showService.getShowRecProperties(cShow);
						if (pProps) {
							ui.toggleLoader(true);
							showService.playShowRecording(pProps).finally(function() {
								ui.toggleLoader(false);
							});
						}
					}
				}
			}
			break;
		case 'misc':
			am.pop();

			break;
		case 'NumberPicker':
			if (!am.isLoaded('normalCIB')) {
				this.dom.clearAutoShowInfoBarTimeout();
				this.autoShowInfoBarTimeout = setTimeout(function () {
					am.push(normalCIB, true);
				}, BS.device.checkPerformanceIndex(BS.device.consts.performance.MID) ? 500 : 1000);
			}

			break;
		}

		this.chanCheckerFunction();
	};
	liveTv.destroy = function () {
		this.dom.clearAutoShowInfoBarTimeout();
	};
	liveTv.init = function () {
		if (this.firstInit) {
			misc.dom.setVolume(misc.dom.currVolume === null ?
				BS.config.get('Core.Client.DEFAULT_VOLUME') / 100 : 0);
			this.setInitialChannelAndCategory().then(function() {
				this.chanCheckerFunction();
				this.chanChecker = setInterval(this.chanCheckerFunction.bind(this), 10000);
			}.bind(this));
			this.firstInit = false;
		}

		misc.hidePortal();
	};
	liveTv.blur = function (appID) {
		this.dom.clearAutoShowInfoBarTimeout();
		if (appID !== 'normalCIB' && appID !== 'channelCategories') {
			this.alert.hide();
			if (isChannelPurchaseEnabled() || showAgeForbiddenChannels)
				this.dom.hideChannelUnlock();
			this.dom.hideStreamStatus();
		}
	};
	liveTv.setInitialChannelAndCategory = function() {
		var p = q();
		var that = this;
		if (initialCategoryId) {
			p = tvCatRepo.getById(initialCategoryId).then(function(cat) {
				that.setCurrentCategory(cat);
			});
		}
		if (initialChannelId && initialChannelId !== BS.TvModel.BlankChannel.id) {
			p = p.then(function() {
				BS.logger.info('LIVETV Setting last watched channel id: %d', initialChannelId);
				var initialChannel = tvLib.getChannelById(initialChannelId);
				that.setChannel(initialChannel, false);
			});
		}
		p.then(function () {
			if (that.getCurrentChannel() === null || that.getCurrentCategory() === null)
				throw 'no-category-or-channel-set';
		}).catch(function(ex) {
			BS.logger.info('LIVETV Setting last watched channel and category failed');
			BS.logger.log(ex);
			that.resetNavigation(false);
		});
		return p;
	};
	BS.evMgr.bind('onVideoPlayerStart',function() {
		liveTv.dom.hideChannelBackground();
	});
	liveTv.purchaseChannel = function (options) {
		var that = liveTv;
		var product = options.content.product;
		var priceItem = options.content.priceItem;
		return storeService.purchaseProduct(product, priceItem).then(function (prod) {
			var cId = options.content.channelId;
			if (cId) {
				media.stop();
				BS.logger.debug(
					'LIVE TV .purchaseChannel(...) channel %s purchased till %s',
					cId, new Date(prod.availabilityPeriod.to).toString()
				);
				that.dom.hideChannelUnlock();
				that.setChannel(tvLib.getChannelById(cId));
			}
			that.resetChannelsForZapping();
			return q({
				message: tr('success'),
				todo: function () {
					that.chanCheckerFunction();
				}
			});
		}, function (ex) {
			var error = ex.data.errors[0];
			var priceType = priceItem.price.type;

			BS.logger.debug('LIVETV: channel purchase failed because %s', error.errorMessage);

			if (error.errorCode === 500)
				throw ex;

			if (error.errorCode === 304) {
				return {
					todo: function () {
						return storeService.getProductsByIdList(
							[options.content.id]
						).then(function (ps) {
								storeService.showCallOperatorDialog(ps[0]);
							});
					}
				};
			}

			return q({
				todo: function () {
					var message = storeService.getErrorCodeDescription(error.errorCode);
					if (error.errorCode === 20 && priceType === 'points')
						am.push(mm.getApp('payPoints'));
					else
						ui.generalAlert(message);
					that.chanCheckerFunction();
				}
			});
		});
	};
	liveTv.switchToChannel = function (chObject, dontShowChannelInfo, forceDisplays) {
		if (!(chObject instanceof bsMain.Channel)) {
			throw new Error('liveTv.switchToChannel() requires channel object to be passed as 1st' +
				' argument');
		}
		var isMosaic = chObject instanceof bsMain.MosaicChannel;
		var isMosaicLoaded = am.isLoaded('tvMosaics');
		var isMosaicLastLoaded = am.lastLoaded('tvMosaics');
		if (!isMosaicLastLoaded && isMosaicLoaded && !isMosaic) {
			tvMosaics.cleanup();
		}
		this.setChannel(chObject);

		this.dom.clearAutoShowInfoBarTimeout();
		if (am.lastLoaded('normalCIB') && dontShowChannelInfo) {
			am.pop();
		}

		if (am.lastLoaded('liveTv') || forceDisplays) {
			if (dontShowChannelInfo)
				return;

			this.dom.triggerChannelNameAutoHide(chObject, true);
			if (!am.isLoaded('normalCIB') && !isMosaic) {
				this.autoShowInfoBarTimeout = setTimeout(function () {
					this.autoShowInfoBarTimeout = null;
					if (am.isLoaded('MainMenu')) return;
					am.push(normalCIB, true);
				}.bind(this), BS.device.checkPerformanceIndex(BS.device.consts.performance.MID) ?
					500 :1000);
			}
		}
	};
	liveTv.setAutoReminder = function setAutoReminder(channelId) {
		var that = this;
		that.dom.clearAutoReminderTimer();
		if (user.autoReminderTime === 0) return;
		var showTitle, untilNextShowStart, showReminderTime;
		try {
			var chObj = tvLib.getChannelById(channelId);
			var nextShow = showService.getNextShowAfter(chObj, showService.getCurrentShow(chObj));
			showTitle = nextShow.title;
			untilNextShowStart = nextShow.start - Date.now();
			showReminderTime = untilNextShowStart - user.autoReminderTime;
		} catch (x) {
			that.autoReminderTimer = setTimeout(setAutoReminder.bind(that, channelId), 60e3);
			return;
		}

		BS.logger.debug('LIVETV.setAutoReminder: Schedule auto reminder after %ds.',
			Math.round(showReminderTime * 0.001));
		if (showReminderTime > 0) {
			that.autoReminderTimer = setTimeout(function (showTitle) {
				if (!am.isStackInteruptable) {
					setAutoReminder.call(that, channelId);
					return;
				}
				BS.logger.debug('LIVETV.setAutoReminder: reminds me for %s', showTitle);
				that.dom.showAutoReminder(showTitle);
				liveTv.autoReminderAutoHideTimer = setTimeout(function () {
					that.dom.hideAutoReminder();
					liveTv.autoReminderAutoHideTimer = null;
					setAutoReminder.call(that, channelId);
				}, 8000);
			}.bind(that, showTitle), showReminderTime);
		} else {
			BS.logger.debug('LIVETV.setAutoReminder: retry scheduling in %ds',
				Math.round((untilNextShowStart + 15000) * 0.001));
			that.autoReminderTimer = setTimeout(setAutoReminder.bind(that, channelId),
				untilNextShowStart + 15e3);
		}
	};
	liveTv.channelPlayableFlag = false;
	liveTv.chanCheckerFunction = function () {
		if (BS.device.power !== 'on')
			return;
		BS.perf.start('chanCheckerFunction');
		var that = this;
		var channel = that.getCurrentChannel();
		var newChannelStatus = that.checkChanStatus(channel);
		var chObj = that.getCurrentChannel();
		var isChStatusChanged = that.channelPlayableFlag !== newChannelStatus;
		var isMosaic = chObj instanceof bsMain.MosaicChannel;

		BS.logger.info('liveTv.chanCheckerFunction isChStatusChanged=%s, isMosaic=%s,'
		+ ' newChannelStatus=%s',
			isChStatusChanged, isMosaic, newChannelStatus);

		if (isChStatusChanged) {
			if (newChannelStatus) {
				BS.logger.info('LIVETV: Parental control checker is resuming playback for ' +
					'current channel from live stream !!!');
				that.setChannel(channel);
				media.play();
				that.dom.hideChannelUnlock();

			} else {
				BS.logger.info('LIVETV: stream stopped by parental control checker');
				misc.event.endEvent(Date.now());
				media.stop();
				if (isMosaic && am.lastLoaded('tvMosaics'))
					am.cutOff('liveTv');
			}

			BS.evMgr.dispatch(
				new liveTv.ParentalControlEvent(newChannelStatus ? 'allowed' : 'forbiden', chObj)
			);

			that.channelPlayableFlag = newChannelStatus;
		}
		BS.perf.stop(
			'chanCheckerFunction',
			'isChStatusChanged=%s, isMosaic=%s, newChannelStatus=%s',
			isChStatusChanged, isMosaic, newChannelStatus
		);
	};
	liveTv.isCurrentProgramAllowed = function (chObj) {
		chObj = chObj || this.getCurrentChannel();
		var currentShow = showService.getCurrentShow(chObj);
		var isShowAllowed = currentShow ? currentShow.isShowAllowed() : true;

		return user.isParentalyUnlocked() || chObj.isTemporaryAcknowledged() ||
			(isShowAllowed && !chObj.parentallyLocked());
	};
	liveTv.checkChanStatus = function (channel, displayAlert, returnMsg, returnKey) {
		var that = this;
		var c = channel || that.getCurrentChannel();
		returnKey = returnKey || false;

		if (c instanceof BS.TvModel.DvbChannel) {
			that.dom.hideChannelUnlock();
			that.dom.hideStreamStatus();
			that.alert.hide();
			return true;
		}

		var msg = false;
		var key = 'ok';
		var show = showService.getCurrentShow(c);
		var streamAvailable = that.isSwitching === false ? media.isStreaming : true;

		if (typeof displayAlert === 'undefined') {
			displayAlert = !liveTv.isChFlyoverActive() &&
				(
					am.lastLoaded('liveTv') || am.lastLoaded('normalCIB') ||
					am.lastLoaded('extraCIB') || am.lastLoaded('EpgColumnView') ||
					am.lastLoaded('channelCategories') || am.lastLoaded('categoryChannelList')
				);
		}

		var vodPlayerIsNotLoaded = !am.isLoaded('vodPlayer');
		var cps = storeService.getItemPurchaseStatus(c.id, prodRepo.Types.Live);
		var isBlankChannel = c instanceof BS.TvModel.BlankChannel;

		if (!c.broadcasting) {
			that.dom.hideStreamStatus();
			that.dom.hideChannelUnlock();
			msg = tr('chNotBroadcasting');
			key = 'chNotBroadcasting';

		} else if (show && show.barred) {
			that.dom.hideStreamStatus();
			that.dom.hideChannelUnlock();
			msg = tr('programBarred');
			key = 'programBarred';

		} else if (cps.isInOtherSubscription() && !c.isPreviewTemporaryEnabled() &&
			vodPlayerIsNotLoaded && !isBlankChannel
		) {
			that.dom.hideStreamStatus();
			showBackgroundIfAlertWillBeDisplayed();
			var products = prodRepo.findByItemId(c.id, prodRepo.Types.Live);
			var subscriptionNames = storeService.getSubscriptionsOfProducts(products)
				.map(function (sub) {
					return sub.title;
				});
			key = 'chInOtherSubscription';

			if (isChannelPurchaseEnabled()) {
				msg = tr('chInOtherSubscription').sprintf(subscriptionNames.join(', '));
				if (displayAlert) that.dom.showChannelUnlock('chInOtherSubscription', msg);
				displayAlert = false;
			} else {
				msg = tr('chLocked');
				that.dom.hideChannelUnlock();
			}
		} else if (cps.isUnavailable() && !c.isPreviewTemporaryEnabled() && vodPlayerIsNotLoaded &&
			!isBlankChannel
		) {
			that.dom.hideChannelUnlock();
			that.dom.hideStreamStatus();
			msg = tr('chNotInProduct') + '<tbreak/><tbreak/>' + tr('contact_admin');
			showBackgroundIfAlertWillBeDisplayed();
			key = 'chNotInProduct';

		} else if (!c.isPlayable()) {
			that.dom.hideStreamStatus();
			showBackgroundIfAlertWillBeDisplayed();
			msg = tr('chLocked');
			key = 'chLocked';

			if (c.isPreOrdered() && displayAlert) {
				var purchasedProducts = c.getProducts('purchased-product');
				var minAvailabilityFrom = purchasedProducts.reduce(function(from, prod) {
					return from === null || from > prod.availabilityPeriod.from ?
						prod.availabilityPeriod.from : from;
				}, null);
				msg = tr('ChannelAvailableFrom').sprintf(
					new Date(minAvailabilityFrom).toFormatedString(_formats.dateTime));

			} else if (c.isPreOrder(isChannelPurchaseEnabled()) && displayAlert) {
				that.dom.showChannelUnlock('preOrder');
				displayAlert = false;

			} else if (c.isPurchasable(isChannelPurchaseEnabled()) && displayAlert) {
				that.dom.showChannelUnlock();
				displayAlert = false;
			}

		} else if (show && showService.tvShowViewPurchaseService.canOfferSale(show)) {
			that.dom.hideStreamStatus();
			showBackgroundIfAlertWillBeDisplayed();
			msg = tr('programLocked');
			key = 'programLocked';
			if (isChannelPurchaseEnabled() && displayAlert) {
				that.dom.showChannelUnlock('payPerView');
				displayAlert = false;
			}

		} else if (!that.isCurrentProgramAllowed(c)) {
			that.dom.hideStreamStatus();
			msg = tr('ParentalControlRestrictionsInPlace');
			key = 'ParentalControlRestrictionsInPlace';
			if (showAgeForbiddenChannels && displayAlert) {
				that.dom.showChannelUnlock('parental');
				displayAlert = false;
			}

		} else if (c.displayPopupWhenNoEpg && !show) {
			that.dom.hideChannelUnlock();
			that.dom.hideStreamStatus();
			if (isChannelPurchaseEnabled() && displayAlert) {
				that.dom.showChannelUnlock('nextShowDisplay');
				displayAlert = false;
			}
			if (that.getCurrentChannel().type === 'audio') {
				that.dom.showChannelBackground();
			}
		} else {
			that.dom.hideChannelUnlock();
			if (!streamAvailable && displayAlert && that.getCurrentChannel().type !== 'audio') {
				that.dom.showStreamStatus();
				that.dom.showChannelBackground();
				displayAlert = false;
			} else {
				that.dom.hideStreamStatus();
				if (that.getCurrentChannel().type === 'audio') {
					that.dom.showChannelBackground();
				} else {
					that.dom.hideChannelBackground();
				}
			}
		}

		that.alert[msg === false ? 'hide' : (displayAlert ? 'show' : 'hide')](msg, false);
		if (displayAlert === true) {
			that.dom.hideChannelUnlock();
		}
		if (returnKey) {
			return key;
		}
		if (returnMsg) {
			return msg;
		}
		return msg === false;

		function showBackgroundIfAlertWillBeDisplayed() {
			if (!displayAlert) return;
			that.dom.showChannelBackground();
		}
	};
	liveTv.setChannel = function (channel, ignoreStatistics) {
		var that = this;
		ignoreStatistics = ignoreStatistics || false;
		channel = channel || that.getCurrentChannel();
		var isAudioChannel = channel instanceof bsMain.AudioChannel;
		var isMosaicChannel = channel instanceof bsMain.MosaicChannel;

		if (!channel)
			return;

		that.dom.hideChannelPreviewHolder();
		that.dom.clearAutoReminderTimer();
		that.setCurrentChannel(channel);
		channel.restoreSubstreamSelection();
		if (!isMosaicChannel && am.lastLoaded('tvMosaics')) {
			am.pop();
		}

		that.isSwitching = true;

		if (that.switchDelayTimerRef !== null) {
			clearTimeout(that.switchDelayTimerRef);
			that.switchDelayTimerRef = null;
		}

		that.dom.hideChannelBackground();
		var showVideo = that.checkChanStatus(channel);
		that.channelPlayableFlag = showVideo;

		if (!showVideo) {
			that.isSwitching = false;
			media.stop();
			that.dom.toggleTvMode('video');
			if (am.lastLoaded('tvMosaics'))
				am.cutOff('liveTv');
		} else {
			BS.evMgr.dispatch(new liveTv.ChannelChangeEvent(channel.id, 'before'));

			if (isMosaicChannel && mm.isAllowed('mosaics')) {
				if (am.isLoaded('tvMosaics')) {
					tvMosaics.init(liveTv.id, channel);
				} else {
					am.cutOff('liveTv');
					am.push(tvMosaics, channel);
				}
			}

			liveTv.playChannel(channel);

			that.switchDelayTimerRef = setTimeout(function () {
				that.whenSetChannelStable(channel, ignoreStatistics);
			}, 3000);

			if (!isAudioChannel) {
				showRepo.loadChannel(channel.id).then(function (data) {
					if (!that.checkChanStatus(channel)) media.stop();
					else that.setAutoReminder(data.channelId);
				}).done();
			}

			that.dom.toggleTvMode('video');
		}

		if (channel.isPreviewTemporaryEnabled())
			that.dom.showAndUpdateChannelPreviewHolder();
	};
	liveTv.playChannel = function (channel) {
		if (BeeSmart.device.power === 'on') {
			BS.logger.info('LIVETV: BeeSmart: setting new channel (%s, %s)'.sprintf(channel.id,
				channel.name));
			media.playMediaResource(channel.mediaResources, 'livetv');
		} else
			BS.logger.info('LIVETV: no channel change because STB is in STANDBY...');
	};
	liveTv.whenSetChannelStable = function (channel, ignoreStatistics) {
		ignoreStatistics = ignoreStatistics || false;
		var that = this;
		var now = Date.now();
		BS.evMgr.dispatch(new liveTv.ChannelChangeEvent(channel.id));

		if (!ignoreStatistics) {
			misc.event.endEvent(now);
			misc.event.beginEvent({
				id: ('' + channel.id).replace(/[^\d]+/, ''),
				uid: channel.uid,
				start: now,
				eventId: channel instanceof bsMain.AudioChannel ?
					misc.eventIds.radioPlay : misc.eventIds.liveTvWatch
			}, now);
		}

		if (!media.isStreaming && !that.dom.isChannelUnlockShown())
			that.dom.showStreamStatus();

		that.isSwitching = false;
	};
	liveTv.checkChanPreviewStatus = function () {
		var chan = liveTv.getCurrentChannel();
		var PREVIEW_REPEAT_DELAY = BS.config.get('Core.Client.LiveTv.PREVIEW_REPEAT_DELAY');
		var lastChPreview = chan.getLastChPreview();
		var show = showService.getCurrentShow(chan);
		var channelPreviewAvailableAt = lastChPreview + PREVIEW_REPEAT_DELAY * 60 * 1e3;

		if (chan.isPreviewTemporaryEnabled()) {
			return false;
		} else if (lastChPreview && channelPreviewAvailableAt > Date.now()) {
			var languageLabel = BS.portal.user.language.label;
			var remainingTime = Math.round((channelPreviewAvailableAt - Date.now()) / 1e3);

			var sec = remainingTime % 60;
			var min = Math.floor(remainingTime / 60 % 60);
			var hours = Math.floor(remainingTime / 3600 % 24);

			var desc = tr('chPreviewNotAvailableMsg');
			if (hours > 0 && min > 0) {
				desc = desc.sprintf(hours.toLocaleString(languageLabel), tr('hours_short'),
					min.toLocaleString(languageLabel), tr('minutes_short'));
			} else if (hours > 0 && min === 0) {
				desc = desc.sprintf(hours.toLocaleString(languageLabel), tr('hours_short'), '', '');
			} else if (min > 0) {
				desc = desc.sprintf(min.toLocaleString(languageLabel), tr('minutes_short'),
					sec.toLocaleString(languageLabel), tr('seconds_short'));
			} else {
				desc = desc.sprintf(sec.toLocaleString(languageLabel), tr('seconds_short'), '', '');
			}
			ui.generalAlert(desc);

			return false;
		} else if (show && showService.tvShowViewPurchaseService.canOfferSale(show)) {
			ui.generalAlert(tr('chPreviewNotPossibleMsg'));
			return false;
		}
		return true;
	};
	liveTv.startup = function () {
		var that = this;
		var chPreviewCountdownTimerIntervalRef = null;

		that.dom = new ModuleDom(
			[
				'liveTvChannelUnlock', 'liveTvChannelUnlockText', 'autoReminderHolder',
				'autoRemNextShowTitle', 'liveTvChannelUnlockShow', 'setAndToggleMusicInfo',
				'liveTvChannelUnlockHide', 'autoReminderHolderShow', 'autoReminderHolderHide',
				'liveTvStream', 'liveTvStreamShow', 'channelName', 'channelNameRect',
				'nextShowPopupFiller', 'chPreviewCountDownTimer', 'chPreviewCountDownDesc',
				'chPreviewCountDownRemainder', 'liveTvBgImage', 'channelNameBox', 'nextShowPopup'
			], {
				channelBackground: new ui.Image($('#liveTvBgImage')),
				isChannelUnlockShown: function() {
					var chUnlockDom = this.liveTvChannelUnlock.visible().length;
					var nextShowPopup = this.nextShowPopup.visible().length;
					return !!chUnlockDom || !!nextShowPopup;
				},
				chUnlockMode: null,
				lockTimerRef: null,
				channelBackgroundVisible: false,
				getLockTimer: function () {
					return this.lockTimerRef;
				},
				startLockTimer: function (lockTime) {
					lockTime = lockTime || 1000;
					clearTimeout(this.lockTimerRef);
					this.lockTimerRef = setTimeout(function () {
						clearTimeout(that.dom.lockTimerRef);
						that.dom.lockTimerRef = null;
					}, lockTime);
				},
				tvMode: 'video',
				toggleTvMode: function (mode, title) {
					if (this.tvMode !== mode) {
						if (mode === 'video')
							this.setAndToggleMusicInfo.trigger('hide');
						this.tvMode = mode;
					}
					if (mode === 'audio') {
						this.setAndToggleMusicInfo.trigger('showAndSet', {'title': title});
					}
				},
				liveTvStreamDisplayed: false,
				liveTvStreamOriginalPos: 'translate(32.5, 150)',
				showStreamStatus: function () {
					var dom = liveTv.dom;
					var isWatchingLiveTv = am.lastLoaded('liveTv') || am.lastLoaded('normalCIB');

					if (isWatchingLiveTv && !dom.isChannelUnlockShown()) {
						if (!dom.liveTvStreamDisplayed) {
							dom.liveTvStreamDisplayed = true;
							dom.liveTvStream.attr('transform', dom.liveTvStreamOriginalPos, NS.svg);
							dom.liveTvStreamShow.begin();
							dom.liveTvStream.show();
						} else {
							var randomX = 32.5 + (Math.random() * 790);
							var randomY = 100 + (Math.random() * 380);
							dom.liveTvStream.attr('transform',
								'translate(%f, %f)'.sprintf(randomX, randomY), NS.svg);
						}
					}
				},
				hideStreamStatus: function () {
					var dom = liveTv.dom;
					var isWatchingLiveTv = am.lastLoaded('liveTv') || am.lastLoaded('normalCIB');

					if (dom.liveTvStreamDisplayed || !isWatchingLiveTv) {
						dom.liveTvStreamDisplayed = false;
						dom.liveTvStream.hide();
					}
				},
				showChannelBackground: function () {
					if (am.isLoaded('beeSmartLockDialog') || am.isLoaded('vodPlayer') ||
						am.isLoaded('tvMosaics')
					) {
						BS.logger.trace('LIVETV: background will be hidden');
						that.dom.hideChannelBackground();
						return;
					}

					var channel = that.getCurrentChannel();
					var background = channel.chBackgroundLink;
					if (background === null) {
						BS.logger.trace('LIVETV: background is null and will not be set');
						return;
					}

					if (channel === that.getPreviousChannel() &&
						that.dom.channelBackgroundVisible) {
						BS.logger.trace('LIVETV: background will not be set');
						return;
					}

					if (that.dom.channelBackground.href.indexOf(background) === -1) {
						BS.logger.trace('LIVETV: setting background %s', background);
						that.dom.channelBackgroundVisible = true;
						that.dom.channelBackground.href = background;
						that.dom.channelBackground.domRef.show();
					}
				},
				hideChannelBackground: function () {
					if (that.dom.channelBackground.href !== ui.Image.blankUrl) {
						var audit = 'LIVETV .dom.hideChannelBackground() ';
						BS.logger.trace(audit + 'Hiding channel background');
						that.dom.channelBackgroundVisible = false;
						that.dom.channelBackground.href = null;
						that.dom.channelBackground.domRef.hide();
					}
				},
				showChannelUnlock: function (mode, msg) {
					var dom = liveTv.dom;
					var chan = liveTv.getCurrentChannel();

					if (mode === 'parental') {
						dom.liveTvChannelUnlockText.svg(tr('ParentalControlRestrictionsInPlace'));

					} else if (mode === 'payPerView') {
						dom.liveTvChannelUnlockText.svg(tr('programLocked'));

					} else if (mode === 'nextShowDisplay') {
						showService.retrieveNextShowOnChannel(chan).then(function (show) {
							if (!show) return;
							dom.nextShowPopupFiller.trigger('fill', {'program': show,
								'channel': chan});
							dom.nextShowPopupFiller.trigger(showService.tvShowViewPurchaseService
								.canOfferSale(show) ? 'markPurchasable' : 'unmarkPurchasable');
							displayNextShow();
						}).done();

					} else if (mode === 'preOrder') {
						var products = chan.getProducts();
						var minConsumptionFrom = products.reduce(function(from, prod) {
							return from === null || from > prod.consumptionPeriod.from ?
								prod.consumptionPeriod.from : from;
						}, null);
						var dialogText = [
							tr('chLocked'),
							tr('ChannelAvailableFrom').sprintf(
								new Date(minConsumptionFrom).toFormatedString(_formats.dateTime))
						];
						dom.liveTvChannelUnlockText.svg(dialogText.join('<tbreak/>'));
						dom.unlockButtonText.text(tr('PreOrderChannel'));

					} else if (mode === 'chInOtherSubscription'){
						dom.liveTvChannelUnlockText.svg(msg);
					} else {
						dom.liveTvChannelUnlockText.svg(tr('chLocked'));
					}

					if (mode !== 'preOrder') dom.unlockButtonText.text(tr('unlockChannel'));
					if (mode !== 'nextShowDisplay') displayIt();

					function displayIt() {
						dom.nextShowPopupFiller.trigger('hide');
						if (!dom.isChannelUnlockShown()) {
							dom.liveTvChannelUnlock.show();
							dom.chUnlockMode = mode;
							dom.liveTvChannelUnlockShow.begin(function () {
								dom.liveTvChannelUnlock.show();
							});
						}
					}

					function displayNextShow() {
						if (!dom.isChannelUnlockShown()) {
							dom.chUnlockMode = mode;
							dom.nextShowPopupFiller.trigger('show');
						}
					}
				},
				hideChannelUnlock: function () {
					var dom = that.dom;
					if (dom.isChannelUnlockShown()) {
						dom.chUnlockMode = null;
						dom.nextShowPopupFiller.trigger('hide');
						dom.liveTvChannelUnlockHide.begin(function () {
							dom.liveTvChannelUnlock.hide();
						});
					}
				},
				showAndUpdateChannelPreviewHolder: function () {
					var chan = that.getCurrentChannel();
					var previewDurationInSec = chan.previewDuration / 1e3;
					var timeLeft = Math.round((chan.previewDuration -
						(Date.now() - chan.getLastChPreview())) / 1e3);

					that.dom.beginCountdownInterval(timeLeft);

					that.dom.chPreviewCountDownDesc.text(
						that.dom.updateChannelPreviewTranslation(
							tr('chPreviewCDMsg'), previewDurationInSec));
					that.dom.chPreviewCountDownRemainder.text(
						that.dom.updateChannelPreviewTranslation(
							tr('chPreviewCDRemainderMsg'), timeLeft));

					that.dom.chPreviewCountDownTimer.show();
				},
				hideChannelPreviewHolder: function () {
					that.dom.chPreviewCountDownTimer.hide();
					that.dom.clearCountdownInterval();
				},
				updateChannelPreviewHoldersText: function (newText) {
					that.dom.chPreviewCountDownRemainder.text(newText);
				},
				updateChannelPreviewTranslation: function (trans, time) {
					var languageLabel = BS.portal.user.language.label;
					var min = Math.floor(time / 60 % 60);
					var sec = time % 60;

					if (min > 0 && sec > 0) {
						trans = trans.sprintf(min, tr('minutes_short'),
							sec.toLocaleString(languageLabel), tr('seconds_short'));
					} else if (min > 0 && sec === 0) {
						trans = trans.sprintf(min.toLocaleString(languageLabel),
							tr('minutes_short'), '', '');
					} else {
						trans = trans.sprintf(sec.toLocaleString(languageLabel),
							tr('seconds_short'), '', '');
					}
					return trans;
				},
				beginCountdownInterval: function (countdownTimer) {
					chPreviewCountdownTimerIntervalRef = setTimeout(function () {
						that.dom.clearCountdownInterval();

						var chPreviewTr = that.dom.updateChannelPreviewTranslation(
							tr('chPreviewCDRemainderMsg'), --countdownTimer);

						that.dom.updateChannelPreviewHoldersText(chPreviewTr);
						if (countdownTimer > 0) {
							that.dom.beginCountdownInterval(countdownTimer);
						} else {
							var chan = that.getCurrentChannel();
							chan.resetChPreview();
						}
					}, 1000);
				},
				clearCountdownInterval: function () {
					if (chPreviewCountdownTimerIntervalRef !== null) {
						clearTimeout(chPreviewCountdownTimerIntervalRef);
						chPreviewCountdownTimerIntervalRef = null;
					}
				},
				clearAutoReminderTimer: function () {
					if (that.autoReminderTimer !== null) {
						clearTimeout(that.autoReminderTimer);
						that.autoReminderTimer = null;
					}
				},
				clearAutoShowInfoBarTimeout: function () {
					if (that.autoShowInfoBarTimeout !== null) {
						clearTimeout(that.autoShowInfoBarTimeout);
						that.autoShowInfoBarTimeout = null;
					}
				},
				showAutoReminder: function (programTitle) {
					this.autoRemNextShowTitle.text(programTitle);
					this.autoReminderHolder.show();
					this.autoReminderHolderShow.begin();
				},
				hideAutoReminder: function () {
					this.autoReminderHolderHide.begin(function (){
						this.autoReminderHolder.hide();
					}.bind(this));
				},
				triggerChannelNameAutoHide: function (chObj, withAutoHide, autoHideDelay,
					showFlyoverMark) {
					autoHideDelay = autoHideDelay || 3000;
					if (!chObj)
						return;
					var that = liveTv;
					var dom = this;
					var chName = (chObj.number !== null ?
						(chObj.number + '. ').toLocaleString(languageCode)
						: ' ') + chObj.name;

					if (showFlyoverMark) dom.channelNameBox.attr('class', 'common-bg flyover');
					else dom.channelNameBox.attr('class', 'common-bg');

					if (that.chInfoTimeout !== null) {
						clearTimeout(that.chInfoTimeout);
						that.chInfoTimeout = null;
					} else {
						dom.showChannelName();
					}

					dom.channelName.text(chName);

					if (BS.device.performanceIndex === 'MAX') {
						var offset = 100;
						var newWidth = dom.channelName[0].getBBox().width + (offset + 20);
						var maxWidth = 1280;
						if (newWidth > maxWidth) {
							newWidth = maxWidth;
							dom.channelName.attr('width', (newWidth - offset).toString());
						}
						dom.channelNameRect.attr('width', newWidth);
						if (BS.portal.direction === 'rtl') {
							dom.channelNameRect.attr('x', (-newWidth + 40).toString());
						}
					}

					if (withAutoHide) {
						that.chInfoTimeout = setTimeout(that.dom.hideChannelName, autoHideDelay);
					}
				},
				hideChannelName: function () {
					if (that.chInfoTimeout) {
						clearTimeout(that.chInfoTimeout);
						that.chInfoTimeout = null;
					}
					that.dom.channelNameBox.hide();
					that.dom.channelNameBox.attr('class', 'common-bg');
				},
				showChannelName: function () {
					that.dom.channelNameBox.show();
				}
			});

		that.dom.unlockButtonText = that.dom.liveTvChannelUnlock.find('.unlock-button-text');
		that.autoShowInfoBarTimeout = null;

		BS.evMgr.bind('onBeeSmartPowerStateChange', function (ev) {
			if (!ev.value) {
				BS.logger.debug('POWER ON -> STANDBY event @ liveTv');
				if (mm.appExists('pauseAndResume')) {
					var pr = mm.getApp('pauseAndResume');
					if (pr.pause)
						pr.abortPR();
				}
			}
		});
		BS.evMgr.bind('onTvLibraryUpdate', function liveTvUpdate(ev) {
			if (ev.data.type === 'category-current') {
				if (epgMatrixViewIsAvailable && !am.isLoaded('EpgMatrixView'))
					epgMatrixViewApp.dom.clearMatrix();
				ev.data.value.new.getChannels().then(function (list) {
					liveTv.updateCategoryChannelList(list);
				}).done();
				liveTv.resetChannelsForZapping();
				return;
			}
			if (ev.data.type === 'channel-current') {
				if (categoriesChannelList === null) updateFlyoverChannelsList();
				return;
			}
			if (chFlyoverActive === 0) liveTv.resetChannelsForZapping();
			updateFlyoverChannelsList();
			liveTv.finalizeFlyover();

			function updateFlyoverChannelsList() {
				liveTv.getCurrentCategory().getChannels().then(function (list) {
					liveTv.updateCategoryChannelList(list);
				});
			}
		});

		BS.evMgr.bind('onCategoryChanged', onCategoryChanged);
		BS.evMgr.bind('onDvbCategoryChanged', onCategoryChanged);

		function onCategoryChanged() {
			var categoryUpdateTasks = [];
			if (liveTv._currentCategory) {
				categoryUpdateTasks.push(tvCatRepo.getById(liveTv._currentCategory.id)
					.then(function (catObj) {
						liveTv._currentCategoryUpdatePromise = null;
						liveTv._currentCategory = catObj;
					}));
			}
			if (liveTv._previousCategory) {
				categoryUpdateTasks.push(tvCatRepo.getById(liveTv._previousCategory.id)
					.then(function (catObj) {
						liveTv._previousCategory = catObj;
					}));
			}

			q.all(categoryUpdateTasks).then(function() {
				var cat = liveTv.getCurrentCategory();
				if (!cat) return q([]);
				return cat.getChannels().then(function (list) {
					var containsChannel = cat.containsChannel(liveTv.getCurrentChannel().id);
					if (!containsChannel) {
						return tvCatRepo.getAllCategory().then(function(allChCat) {
							liveTv.setCurrentCategory(allChCat);
							return allChCat.getChannels();
						});
					}
					return list;
				});
			}).then(function(list) {
				liveTv.updateCategoryChannelList(list);
				liveTv.resetChannelsForZapping();
			}).done();
		}


		BS.evMgr.bind('onPurchasedProductsChange', liveTv.resetChannelsForZapping.bind(liveTv));
		BS.evMgr.bind('onProductRepositoryChange', function (ev) {
			if (ev.value.type === 'live') {
				liveTv.resetChannelsForZapping();
			}
		});

		var categoriesChannelList = null;
		var doChangeTimerRef = null;
		var chFlyoverActive = 0;
		var currentOffset = null;
		var currentlyZappedChannel = null;
		var boxPerformanceRange = ['MIN', 'MID'].indexOf(BS.device.performanceIndex) !== -1
			? 'slow-device' : 'other-device';
		var FLYOVER_CONF = BS.skinConfiguration.flyover[boxPerformanceRange];
		var isFirstTimeZapp = true;
		var direction;

		function clearDoChangeTimerRef() {
			if (doChangeTimerRef !== null) {
				clearTimeout(doChangeTimerRef);
				doChangeTimerRef = null;
			}
		}

		function everyPress(offset, direction, channelsInCat, channelsForZappingInCat,
			isFirstZapp) {
			chFlyoverActive = 1;

			if (channelsForZappingInCat.length === 0) {
				BS.logger.info('CHANNEL-FLYOVER .everyPress: Note, `empty` channel category ' +
					'switch impossible!');
				return;
			}
			var cChan = liveTv.getCurrentChannel();
			var ce = channelsForZappingInCat.indexOf(cChan);
			var count = null;
			var newChIndx = null;

			if (ce === -1) {
				var idx = channelsInCat.indexOf(cChan);
				count = channelsInCat.length;
				var searched = 0;
				var dir = direction ? 1 : -1;
				while (searched < count) {
					searched++;
					newChIndx = Array.calculateIndex(idx + (searched * dir), count);
					var idxNew = channelsForZappingInCat.indexOf(channelsInCat[newChIndx]);
					if (idxNew !== -1) {
						newChIndx = idxNew;
						break;
					}
				}
			} else {
				count = channelsForZappingInCat.length;
				newChIndx = Array.calculateIndex(ce + offset, count);
			}

			liveTv.dom.clearAutoShowInfoBarTimeout();
			currentlyZappedChannel = channelsForZappingInCat[newChIndx];
			liveTv.dom.triggerChannelNameAutoHide(currentlyZappedChannel, true,
				isFirstZapp ? undefined : 5e3, !isFirstZapp);

			if (am.lastLoaded('normalCIB')) {
				am.pop();
			}

			if (isFirstZapp && FLYOVER_CONF.setStreamOnFirstPress) {
				liveTv.isSwitching = true;
				if (
					liveTv.checkChanStatus(currentlyZappedChannel, false)
				) {
					setTimeout(function () {
						var isMosaicChannel = this instanceof bsMain.MosaicChannel;
						if (isMosaicChannel && mm.isAllowed('mosaics')) {
							if (am.lastLoaded('tvMosaics')) {
								am.cutOff('liveTv');
							}
							am.push(tvMosaics, this);
						}

						liveTv.playChannel(this);
						BS.perf.stop('ch switch', 'channel=%s, uid=%s', this._name, this.uid);
					}.bind(currentlyZappedChannel), 0);
				}
			} else {
				BS.perf.stop('ch switch (flyover)');
			}
		}

		function finalPress() {
			var dontShowChannelInfo = false;
			var audit = 'CH ZAP .finalPress - ';
			if (
				liveTv.channelsForZapping === null ||
				liveTv.channelsForZapping.length === 0 ||
				currentlyZappedChannel === null
			) {
				var msg = currentlyZappedChannel === null ?
					audit + 'ERROR - currentlyZappedChannel not set, cannot determine to which ' +
						'channel I should switch.' :
					audit + 'Cannot be done as there are no available channels. Skipping';
				BS.logger.info(msg);
				currentlyZappedChannel = liveTv.getCurrentChannel();
				dontShowChannelInfo = true;
			}
			var switchToChannel = currentlyZappedChannel;
			clearChFlyover();

			that.switchToChannel(switchToChannel, dontShowChannelInfo, true);
		}

		function clearChFlyover() {
			isFirstTimeZapp = true;
			currentOffset = null;
			currentlyZappedChannel = null;
			chFlyoverActive = 0;
		}

		function igniteTimeoutingPressActions(isFirstZapp) {
			if (liveTv.channelsForZapping === null) {
				BS.logger.trace('LIVETV.igniteTimeoutingPressActions: Note: un-cached flyover ch.'
					+ ' list used!');
			}
			liveTv.channelsForZapping = liveTv.channelsForZapping ||
				getChannelsForZapping(categoriesChannelList);
			everyPress(
				currentOffset, direction, categoriesChannelList, liveTv.channelsForZapping,
				isFirstZapp
			);

			doChangeTimerRef = setTimeout(liveTv.finalizeFlyover = function finalizeFlyover() {
				if (liveTv.channelsForZapping === null && currentlyZappedChannel !== null) {
					liveTv.channelsForZapping = getChannelsForZapping(categoriesChannelList);
					var isCurrentlyZappedChannelInCategory =
						liveTv.channelsForZapping.some(function (ch) {
							if (ch.id === currentlyZappedChannel.id) {
								currentlyZappedChannel = ch;
								return true;
							}
						});
					if (!isCurrentlyZappedChannelInCategory) currentlyZappedChannel = null;
				}
				clearDoChangeTimerRef();
				finalPress();
				liveTv.finalizeFlyover = BS.F;
			}, isFirstZapp ? FLYOVER_CONF.enterPressWindow : FLYOVER_CONF.exitPressWindow);
		}

		function getChannelsForZapping(channels) {
			return channels.filter(function (ch){
				return 	(
					ch.isAcknowledgedByPC(showAgeForbiddenChannels) &&
					liveTv.channelZappingPricingPolicy.isSwitchable(ch)
				);
			});
		}

		liveTv.isChFlyoverActive = function () {
			return chFlyoverActive !== 0;
		};
		liveTv.finalizeFlyover = BS.F;

		liveTv.cancelFlyover = function() {
			clearDoChangeTimerRef();
			liveTv.finalizeFlyover = BS.F;
			clearChFlyover();
			liveTv.switchToChannel(liveTv.getCurrentChannel());
		};

		liveTv.chFlyover = function chFlyover(aDirection) {
			clearDoChangeTimerRef();
			direction = aDirection;
			if (currentOffset === null)
				currentOffset = 0;
			if (typeof direction === 'number') currentOffset = aDirection;
			else if (direction) currentOffset++;
			else currentOffset--;

			if (isFirstTimeZapp === true) {
				BS.perf.start('ch switch');
				igniteTimeoutingPressActions(true);
				isFirstTimeZapp = false;
			} else {
				BS.perf.start('ch switch (flyover)');
				igniteTimeoutingPressActions(false);
			}
		};

		liveTv.updateCategoryChannelList = function (channels) {
			categoriesChannelList = channels;
		};

		liveTv.currentCategoryChannelList = function () {
			return categoriesChannelList;
		};
	};
	liveTv.resetLiveTvStream = function () {
		var currentChannel = liveTv.getCurrentChannel();
		if (!tvLib.isChannel(currentChannel)) {
			BS.logger.trace('LIVE TV .resetLiveTvStream() Current channel not available, switch ' +
				'to next available channel');
			var allCategoryPrms = tvCatRepo.getAllCategory();
			var currentCategoryChannels = liveTv.getCurrentCategory().getChannels();
			var switchToCategory = null;
			q.all([allCategoryPrms, currentCategoryChannels]).spread(function (allCat, channels) {
				if (channels.length) return channels;
				switchToCategory = allCat;
				return allCat.getChannels();
			}).then(function (channels) {
				if (switchToCategory)
					liveTv.setCurrentCategory(switchToCategory);
				liveTv.switchToChannel(channels[0]);
			});
		} else {
			liveTv.setChannel(tvLib.getChannelById(currentChannel.id));
		}
	};
	liveTv.ChannelChangeEvent = function ChannelChangeEvent(channelId, when) {
		var ev = this;
		ev.type = 'ChannelChangeEvent';
		ev.handler = when === 'before' ? 'onBeforeChannelChange' : 'onChannelChange';
		ev.data = channelId || null;
		ev.cancelable = false;
		BS.lastChannelChangeTS = Date.now();
	};
	liveTv.ChannelChangeEvent.prototype = new BS.Event();
	liveTv.ParentalControlEvent = function ParentalControlEvent(action, channelObj) {
		this.type = 'ParentalControlEvent';
		this.handler = 'onParentalControlAction';
		this.data = {
			action: action,
			channel: channelObj
		};
		this.cancelable = false;
	};
	liveTv.ParentalControlEvent.prototype = new BS.Event();
	liveTv._currentCategory = null;
	liveTv._previousCategory = null;
	liveTv._currentChannel = null;
	liveTv._previousChannel = null;
	liveTv.getCurrentCategory = function () {
		return this._currentCategory;
	};
	liveTv.getPreviousCategory = function () {
		return this._previousCategory;
	};
	liveTv.setCurrentCategory = function (cat) {
		var audit = 'LIVETV .setCurrentCategory(%s) '.sprintf(cat.name);
		if (!cat || cat.equals(this._currentCategory)) {
			BS.logger.trace(audit + 'New category will not be set');
		} else {
			BS.logger.trace(audit + 'Setting new category: %s', cat);
			this._previousCategory = this._currentCategory;
			this._currentCategory = cat;
			BS.evMgr.dispatch(new bsMain.TvLibraryUpdated('category-current', {
				'previous': this._previousCategory,
				'new': this._currentCategory
			}));
		}
	};
	liveTv.getCurrentChannel = function () {
		return this._currentChannel;
	};
	liveTv.getPreviousChannel = function () {
		return this._previousChannel;
	};
	liveTv.setCurrentChannel = function (chObj) {
		BS.logger.trace('LIVETV: setting current channel to %s', chObj);
		var currentChObj = this._currentChannel;
		if (currentChObj && showAgeForbiddenChannels && !currentChObj.equals(chObj)) {
			tvLib.resetTemporaryAcknowledgedChannels();
		}
		if (this._previousChannel === null || !chObj.equals(currentChObj)) {
			this._previousChannel = currentChObj && currentChObj.name === 'blankChannel' ?
				chObj : currentChObj;
			BS.evMgr.dispatch(new bsMain.TvLibraryUpdated('channel-current', {
				'previous': this._previousChannel,
				'new': chObj
			}));
		}
		this._currentChannel = chObj;
		if (user.isParentalyUnlocked())
			chObj.temporaryAcknowledge();
	};
	liveTv.markChPreview = function () {
		this._currentChannel.lastChPreview = Date.now();
	};
	liveTv.getLastChPreview = function () {
		return this._currentChannel ? this._currentChannel.lastChPreview : null;
	};
	liveTv.resetNavigation = function (retainChannel) {
		BS.logger.trace('LIVETV .resetNavigation(%s)', retainChannel);
		var that = this;
		tvCatRepo.getAllCategory().then(function (allChsCat) {
			that._currentCategory = allChsCat;
			that._previousCategory = null;
			BS.evMgr.dispatch(new bsMain.TvLibraryUpdated('category-current', {
				'previous': that._previousCategory,
				'new': that._currentCategory
			}));
			if (!retainChannel) {
				return allChsCat.getChannels().then(function (chList) {
					that._currentChannel = chList[0];
					that._previousChannel = null;
					BS.evMgr.dispatch(new bsMain.TvLibraryUpdated('channel-current', {
						'previous': that._previousChannel,
						'new': that._currentChannel
					}));
					liveTv.setChannel(chList[0], false);
				}).done();
			}
		}).done();
	};
	liveTv.commitLastChannel = function () {
		var currentChannel = this.getCurrentChannel();
		var currentCategory = this.getCurrentCategory();
		if (!currentChannel || !currentCategory)
			return q(null);
		return BS.request.Get(
			'/stb/legacy-gateway/PersonalizationService/setLastWatchedChannelAndCategory',
			{accept: 'json', data: {arg0: currentChannel.id, arg1: currentCategory.id},
				timeout: 5e3}
		);
	};
	liveTv.channelStatusIcons = function(channel) {
		var defaultNull = [false, false, false, false, false, false];
		if (channel) {
			try {
				var ch = tvLib.getChannelById(channel.id);
				return [
					ch.recordable,
					ch.autoRecord,
					ch.pauseResume,
					ch.instantRecording,
					!ch.isPlayable(),
					ch.hd
				];
			} catch (e) {}
		}
		return defaultNull;
	};

	BS.evMgr.bind('onShowRepositoryDataChanged', function (ev) {
		if (ev.data.source === 'updated-channel-shows') {
			liveTv.setAutoReminder(liveTv.getCurrentChannel().id);
		}
	});
	BS.evMgr.bind('onChannelChange', function () {
		liveTv.dom.hideChannelPreviewHolder();
		var chan = liveTv.getCurrentChannel();
		if (chan.isPreviewTemporaryEnabled()) liveTv.dom.showAndUpdateChannelPreviewHolder();
	});
	BS.evMgr.bind('onBeforeChannelChange', function () {
		if (liveTv.autoReminderAutoHideTimer !== null) {
			liveTv.dom.hideAutoReminder();
			clearTimeout(liveTv.autoReminderAutoHideTimer);
			liveTv.autoReminderAutoHideTimer = null;
		}
	});
	BS.evMgr.bind('msg:onCommandInvoke', function (ev) {
		var msg = ev.data;
		switch (msg.body.command) {
		case 'live-channel-change':
			var chanId = parseInt(msg.body.arguments[0], 10);
			var resetStack = msg.body.arguments[1] || false;
			var liveTvLastLoaded = am.lastLoaded('liveTv');
			if (!tvLib.isChannel(chanId)) {
				BS.logger.info('LIVETV: live-channel-change: Channel with id %s not found!',
					chanId);
				return;
			}
			if (eval(resetStack)) am.cutOff('liveTv');
			liveTv.switchToChannel(tvLib.getChannelById(chanId), !liveTvLastLoaded,
				liveTvLastLoaded);
			break;
		case 'channels-favorite-change':
		case 'channels-order-change':
		case 'channel-name-change':
		case 'channels-number-change':
			tvLib.update().done();
			break;
		}
	});


	var normalCIB = new BS.App('normalCIB', {
		listenTo: [keys.shortcuts, keys.navigation]
	});
	normalCIB.autoHideTimeout = 6000;
	normalCIB.autoHide = true;
	normalCIB.onInputEvent = function (key) {
		var that = this;
		if (am.isLoaded('pauseAndResume'))
			return true;
		switch (key) {
		case 'ok':
			if (!IS_COLIBRY) {
				am.push(extraCIB);
			}
			break;
		case 'back':
			am.pop();
			break;
		case 'play':
			that.dom.clearAutoHideTimer();
			return true;
		case 'up':
		case 'down':
			am.pop();
			return true;
		default:
			am.pop(keys.shortcuts.indexOf(key) !== -1);
			return true;
		}

	};

	normalCIB.init = function (caller, autoHide) {
		var that = this;
		var chObj = liveTv.getCurrentChannel();
		that.autoHide = autoHide || false;
		that.dom.clearRefreshIntervalTimer();
		that.dom.clearAutoHideTimer();
		if (BS.CompatibilityManager.prototype.hasStreamQualityApi() &&
			!(chObj.isPlayable() && liveTv.isCurrentProgramAllowed(chObj))
		) {
			BS.evMgr.dispatch(new BS.MediaManager.StreamInfoEvent(0, 0, 0));
		}

		that.showsLoaded = false;
		setTimeout(function () {
			if (!that.showsLoaded) that.dom['normalCIBLoadingIndicator'].show();
		}, BS.device.performanceIndex === 'MIN' ? 500 : 250);

		that.dom['nCIB_nextShows'].hide();
		that.dom.showBar();
		that.refreshBar().then(function () {
			if (!am.isLoaded('normalCIB'))
				return;
			that.dom.refreshIntervalTimerRef = setInterval(that.refreshBar.bind(that), 10000);
			if (autoHide && autoHide === true) {
				var selfHide = that.dom.selfHide.bind(that.dom);
				that.dom.autoHideTimer = setTimeout(selfHide, that.autoHideTimeout);
			}
		});
		if (!BS.portal.isOnline) that.dom.nCIBLogoContainer.hide();
		else that.dom.nCIBLogoContainer.show();
	};
	normalCIB.refreshBar = function () {
		var that = this;
		var chObj = liveTv.getCurrentChannel();
		var cCat = liveTv.getCurrentCategory();

		that.dom['nCIB_chanNo'].text(chObj.number.toLocaleString(languageCode));
		that.dom['nCIB_chanName'].text(chObj.name);
		that.dom['nCIB_catName'].text(cCat.name);
		that.dom['nCIB_time'].text(new Date().toFormatedString(_formats.time));
		that.dom.channelLogo.href = chObj.chLogoLink;

		return showService.getShowsForChannel(chObj).then(function (currentShows) {
			that.showsLoaded = true;
			var hasSomeClip = Object.keys(currentShows).some(function(key) {
				return currentShows[key] !== null;
			});
			if (!hasSomeClip) {
				return;
			}
			setShowTitleAndTime(currentShows.previous,
				that.dom['nCIB_prevProgTitle'], that.dom['nCIB_prevProgTime']);
			setShowTitleAndTime(currentShows.current,
				that.dom['nCIB_currProgTitle'], that.dom['nCIB_currProgTime']);
			setShowTitleAndTime(currentShows.next,
				that.dom['nCIB_nextProgTitle'], that.dom['nCIB_nextProgTime']);
			setShowTitleAndTime(currentShows.afterNext,
				that.dom['nCIB_nextNextProgTitle'], that.dom['nCIB_nextNextProgTime']);
			setShowProgress(currentShows.current,
				that.dom['nCIB_progressBg'], that.dom['nCIB_Bg'][0].getBBox().width);
			that.dom['nCIB_nextShows'].show();
		}).finally(function () {
			that.dom['normalCIBLoadingIndicator'].hide();
		});
	};

	normalCIB.blur = function (caller) {
		if (caller !== 'extraCIB')
			return;
		this.dom.hideBar(true);
		this.dom.clearAutoHideTimer();
		liveTv.dom.triggerChannelNameAutoHide(liveTv.getCurrentChannel(), false);
	};

	normalCIB.focus = function (caller) {
		switch (caller) {
		case 'extraCIB':
			this.dom.showBar();
			this.refreshBar();
			liveTv.dom.hideChannelName();
			break;
		default:
			break;
		}
		this.dom.clearAutoHideTimer();
		if (this.autoHide || caller === 'pauseAndResume') {
			this.dom.autoHideTimer = setTimeout(
				this.dom.selfHide.bind(this.dom), this.autoHideTimeout);
		}
	};

	normalCIB.destroy = function () {
		this.dom.clearRefreshIntervalTimer();
		this.dom.clearAutoHideTimer();
		this.dom.hideBar();
	};

	normalCIB.startup = function () {
		var that = this;
		that.dom = new ModuleDom(
			[
				'normalCIB', 'nCIB_time', 'nCIB_chanNo', 'nCIB_chanName', 'nCIB_catName',
				'normalCIBActionBar', 'HLSbar', 'nCIB_nextShows',
				'nCIB_prevProgTitle', 'nCIB_prevProgTime', 'nCIB_currProgTitle',
				'nCIB_currProgTime', 'nCIB_nextProgTitle', 'nCIB_nextProgTime', 'nCIB_setNextShows',
				'nCIB_Bg', 'nCIB_progressBg', 'nCIB_nextNextProgTitle', 'nCIB_nextNextProgTime',
				'normalCIBcsh', 'normalCIBLoadingIndicator', 'nCIBLogoContainer'
			], {
				channelLogo: new ui.Image($('#nCIB_chanPic')),
				barVisible: false,
				autoHideTimer: null,
				refreshIntervalTimerRef: null,
				clearAutoHideTimer: function () {
					if (this.autoHideTimer !== null) {
						clearTimeout(this.autoHideTimer);
						this.autoHideTimer = null;
					}
				},
				clearRefreshIntervalTimer: function () {
					if (this.refreshIntervalTimerRef !== null) {
						clearInterval(this.refreshIntervalTimerRef);
						this.refreshIntervalTimerRef = null;
					}
				},
				selfHide: function () {
					if (am.lastLoaded('normalCIB')) {
						am.pop();

					} else {
						this.clearAutoHideTimer();
						this.autoHideTimer = setTimeout(
							that.dom.selfHide.bind(that.dom), that.autoHideTimeout);
					}
				},
				_refreshIcons: function (chObject) {
					if (!chObject || IS_COLIBRY)
						return;
					that.dom.chFeatureIcons.showIcons([
						chObject.recordable, chObject.autoRecord, chObject.pauseResume,
						chObject.instantRecording, !chObject.isPlayable(), chObject.hd
					]);
				},
				_setActionBar: function (chObj) {
					var buttons;
					var showChPreviewButton = chObj.isPreviewSupported();
					var epgButton;
					var chCatButton;
					if (BS.portal.direction === 'ltr') {
						epgButton = 'left';
						chCatButton = 'right';
					} else {
						epgButton = 'right';
						chCatButton = 'left';
					}

					buttons = [
						['back', 'close'],
						[epgButton, 'EpgColumnView'],
						['yellow', showChPreviewButton ? 'chPreview' : 'subtitlesAndAudio'],
						IS_COLIBRY ? [chCatButton, tr('channelCategories')] :
							['confirm', 'quickPreview']
					];
					normalCIB.actionBar.set(buttons);
				},
				showBar: function () {
					var currCh = liveTv.getCurrentChannel();
					this._refreshIcons(currCh);
					this._setActionBar(currCh);

					this.barVisible = true;
					this.normalCIB.show();
				},
				hideBar: function () {
					if (!this.barVisible)
						return;

					this.barVisible = false;
					this.normalCIB.hide();
				}
			});

		if (BS.CompatibilityManager.prototype.hasStreamQualityApi()) {

			BS.evMgr.bind('onBeforeChannelChange', function () {

				if (media.mediaResource === null)
					return that.dom.HLSbar.attr('xlink:href', '#HLSbar0');

				var streamType = JSON.stringify(media.mediaResource.protocolStack)
					.replace(/'/g, '');

				if (streamType === 'mcast') {
					that.dom.HLSbar.attr('xlink:href', '#HLSbarMulticast');
				} else {
					if (!am.lastLoaded('normalCIB'))
						that.dom.HLSbar.attr('xlink:href', '#HLSbar0');
				}
			});

			BS.evMgr.bind('onStreamInfo', function (ev) {
				var HLSbar = that.dom.HLSbar;
				var quality = ev.data.quality;

				if (quality === 'mcast') {
					HLSbar.attr('xlink:href', '#HLSbarMulticast');
					return;
				}

				if (quality <= 0 && quality > 5) {
					quality = 0;
				}
				HLSbar.attr('xlink:href', '#HLSbar' + quality);
			});

		}

		if (!IS_COLIBRY) {
			that.dom.chFeatureIcons = new ui.StatusIcons($('#normalCIBcsh')[0], [
				'iconChannelRecordable', 'iconChannelTimeshift', 'iconChannelPauseResume',
				'iconChannelInstantRecording', 'iconChannelLock', 'iconChannelHD'
			], 5);
			that.dom.normalCIBcsh.show();
		}

		that.actionBar = new ui.ActionBar(that.dom.normalCIBActionBar);

		BS.evMgr.bind('onChannelChange', function () {
			if (am.isLoaded('normalCIB')) {
				that.refreshBar();
				that.dom._setActionBar(liveTv.getCurrentChannel());
				that.dom._refreshIcons(liveTv.getCurrentChannel());
			}
		});
	};

	var extraCIB = new BS.App('extraCIB', {
		listenTo: [keys.numbers, keys.navigation, keys.shortcuts],
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	extraCIB.currentChannel = null;
	extraCIB.channels = [];
	extraCIB.onInputEvent = function (key) {
		var that = this;
		if (keys.shortcuts.indexOf(key) !== -1) {
			am.pop();
			return true;
		}

		switch (key) {
		case 'back':
			am.pop();

			break;
		case 'up':
		case 'down':
			that.dom.switchChannel(key);

			break;
		case 'right':
			var sm = mm.getApp('ShortcutMenu');
			if (sm && sm.canBeShown())
				am.push(sm);

			break;
		case 'ok':
			liveTv.setChannel(that.currentChannel, false);
			if (!(that.currentChannel instanceof bsMain.MosaicChannel))
				am.pop('ok');
			break;
		case 'green':
			var previousChannel = liveTv.getCurrentChannel();
			liveTv.dom.hideChannelBackground();
			liveTv.switchToChannel(that.currentChannel, false, true);
			that.dom.switchChannel(previousChannel.number);
			break;
		default:
			if (isNaN(parseInt(key)))
				break;

			am.push(mm.getApp('NumberPicker'), key, function (number) {
				extraCIB.dom.switchChannel(number);
			});

			break;
		}
	};

	extraCIB.shortCutMenuShown = false;
	extraCIB.blur = function (caller) {
		if (caller === 'NumberPicker')
			liveTv.dom.hideChannelName();
		if (caller === 'EpgMatrixView')
			extraCIB.dom.hideBar();
		if (caller === 'ShortcutMenu') {
			extraCIB.shortCutMenuShown = true;
			extraCIB.dom.hideBarLeftAni();
		}
	};

	extraCIB.focus = function (caller) {
		if (caller === 'NumberPicker')
			liveTv.dom.showChannelName();
		if (caller === 'EpgMatrixView')
			extraCIB.dom.showBar();
		if (caller === 'ShortcutMenu') {
			extraCIB.shortCutMenuShown = false;
			extraCIB.dom.showBarRightAni();
		}
	};

	extraCIB.init = function () {
		var that = extraCIB;
		that.currentChannel = liveTv.getCurrentChannel();
		that.updateCurrentChannelInfo();
		that.refreshBar();
		that.dom.showBar();
		that.dom.refreshIntervalTimerRef = setInterval(that.refreshBar.bind(that), 10000);

		try {
			that.pip = PipManager.getInstance($('#liveTvPipHolder'));
		} catch (e) {
			if (e === 'pipmanager-pip-disabled-for-skin')
				BS.logger.debug('NOTE: Skin voids PIP support');
			else
				BS.logger.log(e);
		}
		liveTv.getCurrentCategory().getChannels().then(function (chList) {
			that.channels = chList.filter(function pcFilter(chObj) {
				return chObj.isAcknowledgedByPC(liveTv.showAgeForbiddenChannels);
			});
		});
		if (!BS.portal.isOnline) that.dom.eCIBLogoContainer.hide();
		else that.dom.eCIBLogoContainer.show();
	};

	extraCIB.startShowsLoadingIndicator = function () {
		var that = this;
		setTimeout(function () {
			if (!that.showsLoaded) {
				that.dom['eCIB_nextShows'].hide();
				that.dom['extraCIBLoadingIndicator'].show();
			}
		}.bind(this), BS.device.performanceIndex === 'MIN' ? 500 : 250);
	};

	extraCIB.updateCurrentChannelInfo = function () {
		var that = this;
		var currentChannel = that.currentChannel;
		var currentCategory = liveTv.getCurrentCategory();

		if (!currentChannel)
			return;

		that.dom['eCIB_chanNo'].text(currentChannel.number.toLocaleString(languageCode));
		that.dom['eCIB_chanName'].text(currentChannel.name);
		that.dom['eCIB_catName'].text(currentCategory.name);
		that.dom.updateCurrentTime();
		that.dom._refreshIcons(currentChannel);

		that.dom.channelLogo.href = currentChannel.chLogoLink;
	};

	extraCIB.refreshBar = function () {
		var that = extraCIB;
		var currentChannel = that.currentChannel;

		that.dom.updateCurrentTime();

		if (!currentChannel)
			return;

		that.showsLoaded = false;
		showService.getShowsForChannel(currentChannel).then(function(currentShows) {
			if (currentChannel !== that.currentChannel) return;
			that.showsLoaded = true;
			var hasSomeClip = Object.keys(currentShows).some(function(key) {
				return currentShows[key] !== null;
			});
			if (!hasSomeClip) {
				that.dom['eCIB_nextShows'].hide();
				return;
			}
			setShowTitleAndTime(currentShows.previous,
				that.dom['eCIB_prevProgTitle'], that.dom['eCIB_prevProgTime']);
			setShowTitleAndTime(currentShows.current,
				that.dom['eCIB_currProgTitle'], that.dom['eCIB_currProgTime']);
			setShowTitleAndTime(currentShows.next,
				that.dom['eCIB_nextProgTitle'], that.dom['eCIB_nextProgTime']);
			setShowTitleAndTime(currentShows.afterNext,
				that.dom['eCIB_nextNextProgTitle'], that.dom['eCIB_nextNextProgTime']);
			setShowProgress(currentShows.current,
				that.dom['eCIB_progressBg'], that.dom['eCIB_Bg'][0].getBBox().width);
			that.dom['eCIB_nextShows'].show();
		}).finally(function () {
			if (currentChannel !== that.currentChannel) return;
			that.dom['extraCIBLoadingIndicator'].hide();
		}).done();

		if (that.pip && !that.pip.isPlaying && am.lastLoaded(that.id)) {
			if (currentChannel.id !== liveTv.getCurrentChannel().id &&
				currentChannel.isPlayable() &&
				currentChannel instanceof bsMain.VideoChannel &&
				liveTv.isCurrentProgramAllowed(currentChannel)
			) {
				that.dom.playPip(currentChannel);
			} else {
				that.dom.stopPip();
			}
		}
	};

	extraCIB.destroy = function () {
		extraCIB.dom.clearRefreshIntervalTimer();
		extraCIB.dom.hideBar();
		extraCIB.dom.clearPipTimer();
		extraCIB.channelIds = [];
		if (extraCIB.shortCutMenuShown)
			extraCIB.dom['ecib_showBarRightAni'].begin();
	};

	extraCIB.startup = function () {
		var that = this;

		BS.evMgr.bind('onUserParentalStatusChange', function () {
			if (am.lastLoaded('extraCIB')) {
				that.refreshBar();
			}
		});

		that.dom = new ModuleDom(
			[
				'extraCIB', 'eCIB_time', 'eCIB_chanNo', 'eCIB_chanName', 'eCIB_catName',
				'eCIB_nextShows', 'eCIB_setNextShows', 'extraCIBActionBar',
				'ecib_showBarRightAni', 'ecib_hideBarLeftAni', 'eCIB_Bg', 'eCIB_prevProgTitle',
				'eCIB_prevProgTime', 'eCIB_progressBg', 'eCIB_currProgTitle', 'eCIB_currProgTime',
				'eCIB_nextProgTitle', 'eCIB_nextProgTime', 'eCIB_nextNextProgTime',
				'eCIB_nextNextProgTitle', 'extraCIBcsh', 'extraCIBLoadingIndicator',
				'eCIBLogoContainer'
			], {
				channelLogo: new ui.Image($('#eCIB_chanPic')),
				progressHolderChilds: null,
				loadingAniActive: false,
				hideBarLeftAni: function () {
					that.dom['ecib_hideBarLeftAni'].begin();
					liveTv.dom.hideChannelName();
					that.dom.clearShowChNameTimer();
					that.dom.stopPip();
				},
				showChNameTimerRef: null,
				clearShowChNameTimer: function () {
					if (that.dom.showChNameTimerRef !== null) {
						clearTimeout(that.dom.showChNameTimerRef);
						that.dom.showChNameTimerRef = null;
					}
				},
				clearRefreshIntervalTimer: function () {
					if (that.dom.refreshIntervalTimerRef !== null) {
						clearInterval(that.dom.refreshIntervalTimerRef);
						that.dom.refreshIntervalTimerRef = null;
					}
				},
				updateCurrentTime: function () {
					that.dom['eCIB_time'].text(new Date().toFormatedString(_formats.time));
				},
				setPipDelay: 1500,
				pipDelayTimerRef: null,
				clearPipTimer: function () {
					if (that.dom.pipDelayTimerRef !== null) {
						clearTimeout(that.dom.pipDelayTimerRef);
						that.dom.pipDelayTimerRef = null;
					}
				},
				playPip: function (ch) {
					ch = ch || extraCIB.currentChannel;
					that.dom.stopPip();
					if (that.pip && am.lastLoaded(that.id)) {
						that.dom.pipDelayTimerRef = setTimeout((function (ch) {
							return function () {
								that.pip.play(ch);
							};
						})(ch), that.dom.setPipDelay);
					}
				},
				stopPip: function () {
					that.dom.clearPipTimer();
					if (!that.pip)
						return;
					that.pip.stop();
					that.pip.hide();
				},
				showBarRightAni: function () {
					that.dom.clearShowChNameTimer();
					that.dom.showChNameTimerRef = setTimeout(function () {
						liveTv.dom.showChannelName();
					}, 1000);
					that.dom['ecib_showBarRightAni'].begin();
					that.dom.playPip();
				},
				switchChannel: function (directionOrPreviousChannel) {
					if (extraCIB.pip)
						extraCIB.pip.stop();
					var newIndex = directionOrPreviousChannel;
					if (directionOrPreviousChannel instanceof bsMain.Channel) {
						extraCIB.currentChannel = directionOrPreviousChannel;
					} else if (typeof directionOrPreviousChannel !== 'number') {
						extraCIB.currentChannel = findNewChannel(directionOrPreviousChannel);
					} else {
						var ch = extraCIB.channels.filter(function (ch) {
							return ch.number === directionOrPreviousChannel;
						})[0];
						if (ch) {
							extraCIB.currentChannel = ch;
						}
					}

					extraCIB.updateCurrentChannelInfo();
					clearTimeout(extraCIB.switchChannelTmr);
					extraCIB.switchChannelTmr = setTimeout(function () {
						extraCIB.startShowsLoadingIndicator();
						extraCIB.refreshBar();
					}, BS.device.performanceIndex === 'MIN' ? 500 : 250);

					function findNewChannel(direction) {
						var offset = direction === 'up' ? 1 : -1;
						var cIndex = extraCIB.channels.indexOf(extraCIB.currentChannel);
						newIndex = Array.calculateIndex(cIndex + offset, extraCIB.channels.length);
						extraCIB.currentChannel = extraCIB.channels[newIndex];
						var newChannel = extraCIB.channels[newIndex];

						while (!liveTv.channelZappingPricingPolicy.isSwitchable(newChannel)) {
							newIndex += offset;
							newIndex = Array.calculateIndex(newIndex, extraCIB.channels.length);
							if (newChannel === extraCIB.channels[newIndex]) break;
							newChannel = extraCIB.channels[newIndex];
						}

						return newChannel;
					}
				},
				_refreshIcons: function (chObject) {
					if (!chObject)
						return;
					that.dom.chFeatureIcons.showIcons([
						chObject.recordable, chObject.autoRecord, chObject.pauseResume,
						chObject.instantRecording, !chObject.isPlayable(), chObject.hd
					]);
					that.dom.extraCIBcsh.show();
				},
				showBar: function () {
					that.dom.extraCIB.show();
				},
				hideBar: function () {
					that.dom.extraCIB.hide();
					that.pip.hide();
					liveTv.dom.hideChannelName();
					that.dom.clearShowChNameTimer();
				}
			});

		that.dom.chFeatureIcons = new ui.StatusIcons($('#extraCIBcsh')[0], [
			'iconChannelRecordable', 'iconChannelTimeshift', 'iconChannelPauseResume',
			'iconChannelInstantRecording', 'iconChannelLock', 'iconChannelHD'
		], 5);

		new ui.ActionBar(that.dom.extraCIBActionBar).show();
	};

	var PipManager = function (holderRef) {
		if (!('beeSmart' in holderRef))
			throw 'pipmanager-invalid-argument';
		if (holderRef.length === 0)
			throw 'pipmanager-pip-disabled-for-skin';

		var that = this;

		that.dom = {
			holder: null,
			videoFrame: null,
			videoElement: null,
			imageFrame: null,
			noPipFrame: null,
			aniShow: null,
			aniHide: null
		};

		var dom = that.dom;

		dom.holder = holderRef;

		that.id = dom.holder.attr('id');
		that.forceShow = (dom.holder
			.find('.content-holder')
			.attr('force-show', null, NS.bee) || '').trim() === 'true';

		dom.videoFrame = dom.holder.find('.video-frame');
		dom.imageFrame = dom.holder.find('.image-frame');
		dom.noPipFrame = dom.holder.find('.no-pip-image-frame');
		dom.aniShow = dom.holder.find('.ani-show');
		dom.aniHide = dom.holder.find('.ani-hide');

		dom.videoElement = {
			show: function () {
				if (dom.videoFrame.first().length !== 0)
					return;
				var w = dom.videoFrame.attr('width', null, NS.bee);
				var h = dom.videoFrame.attr('height', null, NS.bee);

				dom.videoFrame.append(PipManager.createVideoElement(that.id, w, h));

				return dom.videoElement;
			},
			hide: function () {
				dom.videoFrame.find('video').end();
				dom.videoFrame.text('');
			},
			play: function (url) {
				var currentVolume = misc.dom.getCurrentVolumeLevel();
				dom.videoFrame.first()
					.attr('audio-level', currentVolume === 'mute' ? 0 : currentVolume)
					.attr('href', url, NS.xlink)
					.begin();
			},
			url: function () {
				return dom.videoFrame.first().attr('href', null, NS.xlink);
			}
		};
	};

	PipManager._instances = {};
	PipManager.createVideoElement = function createVideoElement(id, width, height) {
		return (
			'<video  preserveAspectRatio="none" oipf:decoderType="reduced" ' +
			'oipf:decoderPriority="0" xml:id="PipManager-%s" width="%s" height="%s" />'
		).sprintf(id, width, height);
	};
	PipManager.getInstance = function (holderRef) {
		var id = holderRef.attr('id');
		return (id in PipManager._instances) ?
			PipManager._instances[id] :
			(PipManager._instances[id] = new PipManager(holderRef));
	};

	PipManager.prototype = {
		id: null,
		dom: null,
		forceShow: false,
		shown: false,
		show: function () {
			var that = this;
			if (that.shown)
				return;
			that.shown = true;
			that.dom.holder.show();
			that.dom.aniShow.begin();
		},
		hide: function () {
			var that = this;
			if (!that.shown)
				return;

			that.shown = false;
			that.stop();
			that.dom.aniShow.end();
			that.dom.aniHide.begin(function () {
				that.dom.holder.hide();
			});
		},
		stop: function () {
			if (this.isPlaying === false)
				return;
			this.dom.imageFrame.attr('href', '404-image', NS.xlink).hide();
			this.dom.videoElement.hide();
			this.dom.noPipFrame.hide();
			this.isPlaying = false;
			if (this.pipImgRefreshTimer !== null) {
				clearTimeout(this.pipImgRefreshTimer);
				this.pipImgRefreshTimer = null;
			}
		},
		isPlaying: false,
		pipImgRefreshTimer: null,
		play: function (newChObj) {
			var that = this;
			var chanWatchable = liveTv.checkChanStatus(newChObj, false);
			var device = BS.device.info;
			var pipSourceLinks = newChObj.pipSourceLinks;

			if (!pipSourceLinks)
				return;

			that.dom.noPipFrame.hide();

			if (that.pipImgRefreshTimer !== null) {
				clearTimeout(that.pipImgRefreshTimer);
				that.pipImgRefreshTimer = null;
			}

			if (device.hasEnabledPIP === false || pipSourceLinks.anyPlayables() === false) {
				playDynamicImageWithCleanup();
				return;
			}

			if (chanWatchable === false)
				that.hide();

			if (device.hasEnabledPIP === true) {
				pipSourceLinks.getResources(function (mrs) {
					var hasProperVideoMr = false;
					mrs.forEach(function (el) {
						if (el.protocolStack.indexOf('dynamic-image') !== -1)
							return false;

						if (el.src === null)
							return false;

						playVideoPip.call(that, el.src);
						hasProperVideoMr = true;
					});
					if (hasProperVideoMr === false)
						playDynamicImageWithCleanup();
				});
			}
			if (device.hasEnabledPIP === false) {
				playDynamicImageWithCleanup();
			}
			function playVideoPip(url) {
				BS.logger.debug('PIP: VIDEO url to: ' + url);

				if (that.dom.videoElement.url() === url && that.isPlaying === true) {
					BS.logger.debug(
						'PIP: channel already set at liveTv, skipping pip stream change');
					return;
				}

				that.dom.imageFrame.hide();
				that.show();
				that.dom.videoElement.show();
				that.dom.videoElement.play(url);
				that.isPlaying = true;
			}

			function playDynamicImagePip(url) {
				that.show();
				that.dom.videoElement.hide();

				if (url === 'no-pip-img')
					that.dom.noPipFrame.show();

				if (that.pipImgRefreshTimer !== null) {
					clearTimeout(that.pipImgRefreshTimer);
					that.pipImgRefreshTimer = null;
				}

				(function refreshPipImage() {
					that.dom.imageFrame.attr('href', url, NS.xlink).show();
					BS.logger.debug('PIP: DYNAMIC-IMAGE url to:' + url);
					that.pipImgRefreshTimer = setTimeout(refreshPipImage, 10000);
				})();
				that.isPlaying = true;
			}

			function playDynamicImageWithCleanup() {
				pipSourceLinks.getResourcesByProtocol(function (mrs) {
					if (mrs.length !== 0 && mrs[0].src.indexOf('null') === -1) {
						playDynamicImagePip.call(that, mrs[0].src);
						return;
					}

					if (that.shown === true && that.forceShow === false) {
						that.hide();
						return;
					}

					if (that.forceShow === true)
						playDynamicImagePip.call(that, 'no-pip-img');

				}, 'dynamic-image');
			}
		}
	};

	var audioSubtitleSelection = new BS.App('audioSubtitleSelection', {
		helpId: 'audioSubtitleSelection',
		type: 'popup',
		inputMapper: BS.App.portalDirectionKeyMapper,
		listenTo: ['info']
	});
	audioSubtitleSelection.menu = null;
	audioSubtitleSelection.subMenu = null;

	audioSubtitleSelection.onInputEvent = function (keyPressedName) {
		var that = audioSubtitleSelection;
		var currentInfo;

		switch (keyPressedName) {
		case 'back':
		case 'yellow':
		case 'left':
			am.pop();
			break;
		case 'info':
			am.pop();
			return true;
			break;
		case 'up':
		case 'down':
			if (keyPressedName === 'up') {
				that.subMenu.previous();
			} else {
				that.subMenu.next();
			}
			currentInfo = that.subMenu.currentInfo().id;
			if (currentInfo === 'audios' || currentInfo === 'subtitles') {
				if (keyPressedName === 'up') {
					that.subMenu.previous();
				} else {
					that.subMenu.next();
				}
			}

			break;
		case 'ok':
			var currElement = that.subMenu.currentInfo();
			if (currElement.id === 'noResources')
				break;

			var currentChannel = liveTv.getCurrentChannel();
			if (!currElement ||
				(currElement.type === 'audios' && currElement.id === media.audio.id) ||
				(currElement.type === 'subtitles' && currElement.id === media.subtitle.id)
				) {
				var type = currElement.type === 'audios' ? 'Audio' : 'Subtitle';
				BS.logger.trace('LIVETV: %s already set, skipping %s change!'
					.sprintf(type, type.toLowerCase()));
				return;
			}


			that.subMenu.select(function () {
				that.dom.selectItem();
				if (currElement.type === 'audios')
					currentChannel.setCurrentAudio(currElement);
				else
					currentChannel.setCurrentSubtitle(currElement);
			});

			break;
		}
	};
	audioSubtitleSelection.startup = function () {
		var that = this;

		that.dom = new ModuleDom(
			['audioListSelector', 'audioSelectHolderActionBar', 'audioSelectHolder'],
			{
				audioTickElement: $.parseSvg(ui.template('templateSelectedAudioTick', {})),
				subtitleTickElement: $.parseSvg(
					ui.template('templateSelectedSubtitleTick', {})),
				showMenu: function () {
					this.audioSelectHolder.show();
				},
				hideMenu: function () {
					this.audioSelectHolder.hide();
				},
				selectItem: function (index) {
					index = index || that.subMenu.currentIndex();
					var menuItem;
					var tickElement = (that.subMenu.info(index).type === 'audios') ?
						that.dom.audioTickElement : that.dom.subtitleTickElement;
					menuItem = $(that.subMenu.itemElement(index)).filter('.menuItem');
					menuItem.append(tickElement);
				}
			});

		that.actionBar = new ui.ActionBar(that.dom.audioSelectHolderActionBar);
	};

	audioSubtitleSelection.init = function (caller, subtitlesShortcutPressed) {
		var that = this;
		var itemsAndInfos = that.loadResource('Audios', false);
		that.loadResource('Subtitles', subtitlesShortcutPressed || false, itemsAndInfos);
	};

	audioSubtitleSelection.loadResource = function (type, subtitlesShortcutPressed, itemsAndInfos) {
		var that = this;
		var items = [];
		var infos = [];
		var selectedIndex = 1;
		var isAudio = type === 'Audios';
		var resource;
		var itemsSvg = null;
		var previousIndex;

		if (itemsAndInfos) {
			itemsSvg = itemsAndInfos.itemsSvg;
			infos = itemsAndInfos.infos;
			previousIndex = itemsAndInfos.selectedIndex;
		}

		try {
			if (isAudio)
				resource = media.audios;
			else
				resource = media.subtitles;
		} catch (ex) {
			if (ex.keyword === 'no-audios-yet') {
				media._readAudios();
				resource = media.audios;
			} else {
				if (ex.keyword === 'no-subs-yet') {
					media._readSubs();
					resource = media.subtitles;
				}
			}
		}

		if (!that.menu)
			that.menu = new ui.Menu(that.dom.audioListSelector[0]);

		items.push(tr(type).toUpperCase());
		infos.push({
			'id': type.toLowerCase(),
			'title': tr(type).toUpperCase()
		});

		if (resource.length > 1) {
			 if (!isAudio && media.subtitle.id === undefined) {
				 media.subtitle.id = -1;
			 }
			for (var i = 0, len = resource.length; i < len; i++) {
				var item = resource[i];
				if ((isAudio ? media.audio.id : media.subtitle.id) === item.id) {
					selectedIndex = isAudio ? i + 1 : that.subMenu.size() + i + 1;
				}

				item.type = type.toLowerCase();
				items.push(tr(item.title));
				infos.push(item);
			}
		} else {
			if (isAudio) {
				items.push(tr('NoAudData'));
			} else {
				items.push(tr('NoSubData'));
				selectedIndex = that.subMenu.size() + 1;
			}
			infos.push({
				'id': 'noResources',
				'title': 'NoResources',
				'type': type.toLowerCase()
			});
		}

		if (itemsSvg === null) {
			itemsSvg = ui.template('standardMenuTemplate', {
				'text': items.slice(0, 1),
				'selector': that.dom.audioListSelector
			});
		}
		if (!isAudio) {
			itemsSvg = itemsSvg.concat(
				ui.template('standardMenuTemplate', {
					'text': items.slice(0, 1),
					'selector': that.dom.audioListSelector
				})
			);
		}
		itemsSvg = itemsSvg.concat(
			ui.template('standardMenuTemplateIndented', {
				'text': items.slice(1, items.length + 1),
				'selector': that.dom.audioListSelector
			})
		);

		if (!that.subMenu) {
			that.subMenu = that.menu.newMenuItems();
		}
		if (isAudio) {
			that.subMenu.setItems(itemsSvg, infos);
		} else {
			that.subMenu.setItems(itemsSvg, infos).jump(previousIndex, true).show();

		}
		if (subtitlesShortcutPressed) {
			that.subMenu.jump(selectedIndex, true);
		}

		that.dom.selectItem(selectedIndex);
		that.dom.selectItem(previousIndex);
		that.dom.showMenu();

		return {itemsSvg: itemsSvg, infos: infos, selectedIndex: selectedIndex};
	};

	audioSubtitleSelection.destroy = function () {
		this.dom.hideMenu();
	};

	var teletextScreen = new BS.App('teletextScreen', {
		type: 'popup',
		listenTo: ['reload', 'fsTV']
	});
	teletextScreen.lock = false;
	teletextScreen.onInputEvent = function () {
		if (teletextScreen.lock)
			return;
		am.pop();
	};
	teletextScreen.init = function () {
		teletextScreen.lock = true;
		setTimeout(function () {
			teletextScreen.lock = false;
		}, 3000);
		media.teletext = true;
		if (!media.teletext) {
			am.pop();
			ui.generalAlert(tr('noTeletext'));
		}
	};
	teletextScreen.destroy = function () {
		media.teletext = false;
		teletextScreen.lock = false;
	};

	teletextScreen.isReplacable = true;

	BS.evMgr.bind('onBeeSmartReady', function () {
		BS.evMgr.bind('onAudioStream', function () {
			var lenAudio = 0;
			try {
				lenAudio = media.audios.length;
			} catch (ex) {
				if (ex.keyword === 'no-audios-yet') {
					media._readAudios();
					lenAudio = media.audios.length;
				} else
					BS.logger.info('LIVETV: Unable to read AUDIO stream, reason: %s'
						.sprintf(ex.message));
			}

			var isMosaicChannel = liveTv.getCurrentChannel() instanceof bsMain.MosaicChannel;
			if (BS.appMgr.lastLoaded('categoryChannelList') && isMosaicChannel && lenAudio !== 0) {
				media.audio = tvMosaics.getAudioObjectForPID();
			}
		});

		BS.evMgr.bind('onVideoAspectRatioChange', function () {
			liveTv.resetLiveTvStream();
		});
	});

	BS.evMgr.bind('onBeeSmartExit', function () {
		clearInterval(liveTv.chanChecker);
	});

	BS.evMgr.bind('onChannelChange', function () {
		liveTv.chanCheckerFunction();
	});


	var Tv = new BS.Module({
		id: 'Tv',
		isDefault: true,
		requiredLicense: 'livetv',
		mmExtensions: {
			app: tvPanel,
			icon: 'epg',
			title: 'TvModule',
			position: 1,
			offlineReady: true
		},
		startupTasks: [
			{
				name: 'TV interface',
				isCrucial: true,
				payload: function (params, callback) {
					user = BS.portal.user;
					var bsRegionId = user.regionId;
					var bsUserId = user.userId;
					channelCategories = mm.getApp('channelCategories');
					categoryChannelList = mm.getApp('categoryChannelList');
					tvCatRepo = BS.repositories.tvCategoryRepo;

					var showParentalHiddenChannels = BS.config.get('Core.Client.PC_CHANNEL_POLICY');
					if (showParentalHiddenChannels === 2)
						showAgeForbiddenChannels = user.isDefault;
					else
						showAgeForbiddenChannels = showParentalHiddenChannels === 1;

					liveTv.showAgeForbiddenChannels = showAgeForbiddenChannels;
					liveTv.channelZappingPricingPolicy = new bsMain.ChannelZappingPricingPolicy(
						BS.config.get('Core.Client.CHANNEL_ZAPPING_PRICING_POLICY'));

					epgMatrixViewIsAvailable = mm.appExists('EpgMatrixView');
					if (epgMatrixViewIsAvailable)
						epgMatrixViewApp = mm.getApp('EpgMatrixView');
					showRepo = BS.ShowModel.showRepository;
					showService = BS.ShowModel.showService;

					q.all([
						BS.template.get('svg/livetv.svg').then(function () {
							liveTv.alert = liveTv.alert || new ui.Alert({autoHide: 8000});
							return q(true);
						}),
						tvLib.update(
							BS.resourceDataVersions.usrChsResource,
							BS.resourceDataVersions.timeshiftChs,
							BS.resourceDataVersions.channels
						)
					]).then(function whenSynced() {
						var lastCh = null;
						if (user.lastChannelId) {
							try {
								lastCh = tvLib.getChannelById(user.lastChannelId);
							} catch (e) {}
						}

						var INITIAL_CHANNEL = BS.config.get('Core.Client.INITIAL_CHANNEL');
						var initialChannelName = INITIAL_CHANNEL !== -1 ? INITIAL_CHANNEL : null;
						if (initialChannelName !== null) {
							lastCh = tvLib.getChannels().filter(function (chObj) {
								return chObj.originalName === initialChannelName;
							})[0];
						}

						return tvCatRepo.getById(user.lastChannelCategoryId).then(function (cat) {
							return cat instanceof tvCatRepo.DynamicTvCategory ?
								cat.getChannels().then(getInitialCategory) :
								getInitialCategory();

							function getInitialCategory() {
								return cat && lastCh && cat.containsChannel(lastCh.id) ?
									cat : tvCatRepo.getAllCategory();
							}
						}).then(function (cat) {
							initialCategoryId = cat.id;
							if (lastCh) {
								initialChannelId = lastCh.id;
							} else {
								return cat.getChannels().then(function(channels) {
									initialChannelId = channels[0].id || null;
								});
							}
						}).catch(function(ex) {
							BS.logger.log(ex);
						}).finally(callback);

					}).catch(function (x) {
						BS.logger.info('LIVETV.startupTasks: ERROR unable to initialize Live TV');
						callback(x, true);
					}).done();


					(function periodicGranter() {
						function grantVMX(type) {
							var verimatrixDrmUid = BS.device.getMAC().replace(/:/g, '')
								.toUpperCase();

							BS.logger.info('Granting Verimatrix IPTV for STB');
							BS.request.Post(
								'/restapi/rest/%d/%d/%s/access/drm/%s'
									.sprintf(bsRegionId, bsUserId, verimatrixDrmUid,
										verimatrixDrmUid), {
									accept: 'json',
									preventEvent: true,
									data: {
										'drm_network_type': type
									}
								}).then(function (response) {
									var result = response.data ? response.data.data : null;
									var retryOnFailure = 600e6;
									var retryOnSuccess = 0;
									if (result) {
										for (var i = 0; i < result.length; i++) {
											if (result[i]['DRM_VERIMATRIX']) {
												result = result[i]['DRM_VERIMATRIX'];
												retryOnSuccess = result['validPeriod'];
												break;
											}
										}
									}

									retryOnSuccess = retryOnSuccess < 10e3 ?
										retryOnSuccess : (retryOnSuccess - 10e3);

									if (retryOnSuccess) {
										BS.logger.info('LIVETV: VMX for %s will be re-granted in ' +
												'%d ms (%s)', type,	retryOnSuccess,
											new Date(Date.now() + retryOnSuccess));

										setTimeout(
											periodicGranter,
												response.success && retryOnSuccess > 600000 ?
												retryOnSuccess : retryOnFailure);
									} else {
										BS.logger.info('LIVETV: VMX for %s will NOT be re-granted',
											type);
									}
								}).catch(BS.F);
						}

						if (BS.device.info['mcast_enabled'])
							grantVMX('IPTV_NETWORK');

						if (BS.device.info['ott_enabled'])
							grantVMX('OTT_NETWORK');
					})();
				}
			}
		]
	});

	Tv.register(tvPanel);
	Tv.register(liveTv);
	Tv.register(normalCIB);
	Tv.register(extraCIB);
	Tv.register(audioSubtitleSelection);
	Tv.register(teletextScreen);

	Tv.PipManager = PipManager;

	bsMain.TvLibraryUpdated = function (dataType, data) {
		this.data = {
			type: dataType,
			value: data
		};
	};
	bsMain.TvLibraryUpdated.prototype = {
		type: 'TvLibraryUpdated',
		description: 'When new TvLibrary data is available',
		handler: 'onTvLibraryUpdate'
	};
	Object.extend(bsMain.TvLibraryUpdated, BS.Event);

	function setShowProgress(show, domElement, maxWidth) {
		if (show) {
			var passed = Date.now() - show.start;
			var clipLength = show.duration * 60000;
			var percentage = passed / clipLength;
			var progress = percentage || 0;
			domElement.attr('width', (maxWidth * progress).toString());
		} else {
			domElement.attr('width', '0');
		}
	}

	function setShowTitleAndTime(show, domTitle, domTime) {
		domTitle.text(show ? show.getTitle() : '');
		domTime.text(show ? createTime(show, _formats.time) : '');
	}

	function createTime(show, format) {
		return show ?
			new Date(show.start).toFormatedString(format).concat('-',
				new Date(show.end).toFormatedString(format)) : '';
	}

})(
	BeeSmart,
	Q,
	BeeSmart.misc,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	BeeSmart.inputManager,
	$.ModuleDom,
	BeeSmart.InputManager.keyGroups,
	BeeSmart.media,
	BeeSmart.PVR
);

(function (BS, mm) {

	var liveTv = null;

	function NavigationService(fetchService) {
		this._fetchService = fetchService;
	}

	NavigationService.prototype = {
		_fetchService: null,
		currentMosaic: null,
		selectedCell: 0,
		maxX: null,
		maxY: null,
		minX: null,
		minY: null,
		currentCellX: 0,
		currentCellY: 0,
		stepX: null,
		stepY: null,
		cellWidth: null,
		cellHeight: null,
		get mosaic() {
			return this.currentMosaic;
		},
		get matrixX() {
			return parseInt(this.currentMosaic.matrix.split('x')[0]);
		},
		get matrixY() {
			return parseInt(this.currentMosaic.matrix.split('x')[1]);
		},
		get horizontalCellSpace() {
			return this.currentMosaic.horizontalCellSpace;
		},
		get verticalCellSpace() {
			return this.currentMosaic.verticalCellSpace;
		},
		get channelListId() {
			return this.currentMosaic.listChannelId;
		},
		get exitMosaic() {
			return this.currentCellY < 0 || this.currentCellY >= this.maxY - this.minY;
		},
		setSelectedCell: function (newCellPosition) {
			this.selectedCell = newCellPosition;
		},
		initialCalculation: function (videoElement) {
			this._calculateBorderSpace(videoElement);
			this._calculateCellProperties();
			this._calculateStartingCellPosition();
			this._calculateSelectorPosition();
		},
		calculateNewSelectorPosition: function (direction) {
			switch (direction) {
			case 'up':
			case 'down':
				this.selectedCell = direction === 'up' ?
					this._remove(this.selectedCell, this.matrixX) :
					this._add(this.selectedCell, this.matrixX);

				this._calculateSelectorPosition();
				break;
			case 'left':
			case 'right':
				var maxCellNumber = this._getNumberOfCellsPositions() - 1;
				this.selectedCell = direction === 'left' ?
					this._remove(this.selectedCell, 1) : this._add(this.selectedCell, 1);

				if (direction === 'left' && this.selectedCell < 0) {
					this.selectedCell = maxCellNumber;
				} else if (direction === 'right' && this.selectedCell > maxCellNumber) {
					this.selectedCell = 0;
				}
				this._calculateSelectorPosition();
				break;
			}
		},
		_calculateBorderSpace: function (videoElement) {
			var currMosaic = this.currentMosaic;
			var videoWidth = parseInt(videoElement.attr('width'));
			var videoHeight = parseInt(videoElement.attr('height'));

			var _verticalBorderSpace =
				currMosaic.verticalBorderSpace <= 0 ? 0 : currMosaic.verticalBorderSpace;
			var _horizontalBorderSpace =
				currMosaic.horizontalBorderSpace <= 0 ? 0 : currMosaic.horizontalBorderSpace;

			if (videoWidth !== 1280) {
				var perVideoWidthDif = videoWidth * 100 / 1280;
				_horizontalBorderSpace =
					Math.round(_horizontalBorderSpace * perVideoWidthDif / 100);
			}
			this.minX = _horizontalBorderSpace;
			this.minY = _verticalBorderSpace;
			this.maxX = videoWidth - _horizontalBorderSpace;
			this.maxY = videoHeight - _verticalBorderSpace;
		},
		_calculateCellProperties: function () {
			this.cellWidth = (Math.floor(this.maxX - this.minX) - ((this.matrixX - 1) *
				this.horizontalCellSpace)) / this.matrixX;
			this.cellHeight = (Math.floor(this.maxY - this.minY) - ((this.matrixY - 1) *
				this.verticalCellSpace)) / this.matrixY;

			this.stepX = this.cellWidth + this.horizontalCellSpace;
			this.stepY = this.cellHeight + this.verticalCellSpace;
		},
		_calculateStartingCellPosition: function () {
			var index = this._getIndexInMatrixOfPreviousChannel();
			if (index !== -1) {
				this.setSelectedCell(index);
				return;
			}

			var startingPosition = BS.skinConfiguration.mosaicStartingPosition;
			var numberOfCells = this._getNumberOfCellsPositions();

			if (startingPosition === 'topLeft') {
				this.setSelectedCell(0);
			} else if (startingPosition === 'bottomRight') {
				this.setSelectedCell(numberOfCells - 1);
			} else {
				var centerValue = numberOfCells / 2;
				if (centerValue % 1 !== 0) {
					this.setSelectedCell(Math.floor(centerValue));
				} else {
					this.setSelectedCell(0);
				}
			}
		},
		_getIndexInMatrixOfPreviousChannel: function () {
			var lastCh = this._fetchService.previousChannel();
			return lastCh ? this.channelListId.indexOf(lastCh.id.toString()) : -1;
		},
		_calculateSelectorPosition: function () {
			var matrixX = this.matrixX;
			var cellColumn = this.selectedCell -
				(Math.floor(this.selectedCell / matrixX) * matrixX);
			var cellRow = (this.selectedCell - cellColumn) / matrixX;
			this.currentCellX = parseFloat((this.stepX * cellColumn).toFixed(4));
			this.currentCellY = parseFloat((this.stepY * cellRow).toFixed(4));
		},
		_getNumberOfCellsPositions: function () {
			return this.matrixX * this.matrixY;
		},
		_add: function (a, b) {
			return parseFloat((a + b).toFixed(4));
		},
		_remove: function (a, b) {
			return parseFloat((a - b).toFixed(4));
		},
		setCurrentMosaic: function (tvMosaic) {
			this.currentMosaic = tvMosaic;
		}
	};

	BS.MosaicModel.NavigationService = NavigationService;
	BS.MosaicModel.navigationService = new NavigationService({
		previousChannel: fetchPreviousChannel
	});

	function fetchPreviousChannel() {
		liveTv = liveTv || mm.getApp('liveTv');
		return liveTv.getPreviousChannel();
	}
})(
	BeeSmart,
	BeeSmart.modMgr
);


(function (BS, mm, am, ui, em, media) {
	var showRepo, showService, tvCatRepo, navigationService;
	var appEpgAvailable;
	var bsMain = BeeSmart.modMgr.getModule('BeeSmartMain');
	var Tv = BeeSmart.modMgr.getModule('Tv');
	var tvLib = bsMain.tvLibrary;
	var misc = mm.getApp('Misc');
	var liveTv = mm.getApp('liveTv');
	var _mosaicVisibilityAtVod = false;

	em.bind('onBeeSmartReady', function () {
		if (mm.isAllowed('epg')) {
			appEpgAvailable = mm.appExists('EpgMatrixView');
			showRepo = BS.ShowModel.showRepository;
			showService = BS.ShowModel.showService;
			tvCatRepo = BS.repositories.tvCategoryRepo;
			navigationService = BS.MosaicModel.navigationService;
		}
	});

	em.bind('onVideoPlayerExit', function () {
		if (_mosaicVisibilityAtVod && am.isLoaded(tvMosaic.id)) {
			tvMosaic.dom.showMosaic();
			misc.dom.systemMute();
		}
	});

	em.bind('onVideoPlayerStart', function () {
		_mosaicVisibilityAtVod = tvMosaic.dom.isVisible();
		tvMosaic.dom.hideMosaic();
		misc.dom.systemUnMute();
	});

	em.bind('onTvLibraryUpdate', function (ev) {
		if (ev.data.type === 'channel-parental-control' && tvMosaic.dom.isVisible()) {
			tvMosaic.setAudio();
		}
	});

	var tvMosaic = new BS.App('tvMosaics', {
		listenTo: ['menu', 'reload', 'epg', 'volup', 'voldown', 'mute'],
		requiredLicense: 'mosaics'
	});

	tvMosaic._videoState = null;
	tvMosaic.refreshIntervalTimerRef = null;
	tvMosaic._refreshMosaicChListInterval = null;
	tvMosaic._visible = false;
	tvMosaic.hideActionBarTimer = null;

	tvMosaic.startup = function () {
		var r = tvMosaic;
		r.dom = r.dom || {
				mosaicsHolder: $('#mosaicsHolder'),
				tvMosaics: $('#tvMosaics'),
				selector: $('#selector'),
				msRectOut: $('#msRectOut'),
				msChannelNames: $('#msChannelNames'),
				msChName: $('#msChName'),
				msLockedChannels: $('#msLockedChannels'),
				mosaicActionBar: $('#mosaicActionBar'),
				tvMosaicsToggler: $('#tvMosaicsToggler'),
				video: $('#video'),
				mosaicEPG: $('#mosaicEPG'),
				mosaicEpgCurrProgTitle: $('#mosaicEpgCurrProgTitle'),
				mosaicEpgCurrProgTime: $('#mosaicEpgCurrProgTime'),
				mosaicEpgProgressBg: $('#mosaicEpgProgressBg'),
				mosaicEpgChannelName: $('#mosaicEpgChannelName'),
				showMosaic: function () {
					if (r.dom.isVisible()) return;

					r._visible = true;
					r.dom.setMosaicElements();
					r.dom.mosaicsHolder.show();
					r.actionBar.show();
					r.dom.tvMosaicsToggler.trigger('beginEvent', {
						'hideActionBar': r.dom.hideActionBar
					});
				},
				setMosaicElements: function () {
					var videoAttr = r.dom.video;
					var yVideo = videoAttr.attr('y');
					var xVideo = videoAttr.attr('x');
					var parseYVideo = yVideo === '' ? 0 : parseInt(yVideo);
					var parseXVideo = xVideo === '' ? 0 : parseInt(xVideo);
					var thisX = (navigationService.minX) + parseXVideo;
					var thisY = (navigationService.minY) + parseYVideo;

					r.dom.msChName.attr('transform',
						'translate(' + (-100 - thisX) + ',' + (-100 - thisY) + ')');

					r.dom.tvMosaics.attr('transform', 'translate(' + thisX + ',' + thisY + ')');

					if (navigationService.mosaic.epgShown) {
						r.dom.setEpgForMosaic();
					}
				},
				setEpgForMosaic: function () {
					var scaleOfEpgMosaic = navigationService.cellWidth / 560;
					var epgHeight = r.dom.mosaicEPG.first().attr('height') * scaleOfEpgMosaic;

					r.dom.mosaicEPG.attr('transform', 'translate(' +
						(navigationService.currentCellX + (5 * scaleOfEpgMosaic)) + ',' +
						(navigationService.currentCellY +
						(navigationService.cellHeight - epgHeight - (15 * scaleOfEpgMosaic))) +
						') scale(' + scaleOfEpgMosaic + ')');
				},
				moveSelector: function () {
					var mosaicEpg = r.dom.mosaicEPG;
					var mosaicSelector = r.dom.selector;

					r.dom.clearRefreshIntervalTimer();

					mosaicEpg.hide();
					mosaicSelector.attr('from', navigationService.currentCellX + ',' +
						navigationService.currentCellY);
					mosaicSelector.attr('to', navigationService.currentCellX + ',' +
						navigationService.currentCellY);

					r.dom.setEpgForMosaic();

					var currMosaicEpgShown = navigationService.mosaic.epgShown || false;
					mosaicSelector.begin(function () {
						tvMosaic.lock = false;
						if (currMosaicEpgShown) r.dom.setRefreshIntervalTimer();
					});
				},
				clearRefreshIntervalTimer: function () {
					if (r.refreshIntervalTimerRef !== null) {
						clearTimeout(r.refreshIntervalTimerRef);
						r.refreshIntervalTimerRef = null;
					}
				},
				setRefreshIntervalTimer: function () {
					r.dom.clearRefreshIntervalTimer();
					r.dom.setChannelEPG();
					r.refreshIntervalTimerRef = setTimeout(function () {
						r.dom.setRefreshIntervalTimer();
					}, 10000);
				},
				setChannelEPG: function () {
					var chId = r.getChannelId(navigationService.selectedCell);
					var currDate = new Date();

					if (!(chId in showRepo.channels[currDate.getDate()])) {
						return;
					}

					showRepo.loadChannel(chId, currDate).then(function () {
						var channel = tvLib.getChannelById(chId);
						var cClip = showService.getCurrentShow(channel);
						r.dom.mosaicEpgChannelName.text(channel.name);

						if (!cClip) {
							r.dom.mosaicEPG.hide();
						} else {
							var passed = Date.now() - cClip.start;
							var progLength = cClip.duration * 60000;

							var percentage = passed / progLength;

							r.dom.mosaicEpgCurrProgTitle.svg(
								!liveTv.isCurrentProgramAllowed(channel) ?
									tr('ParentalControlRestrictionsInPlace') :
									(cClip ? cClip.title : ''));

							r.dom.tvMosaicsToggler.trigger(
								'setEPGevent', {
									'currClip': cClip,
									'setEpgProgressTime': r.dom.setEpgProgressTime,
									'showEpg': r.dom.showEpg,
									'setBgProgress': function (max) {
										r.dom.mosaicEpgProgressBg.attr('width',
											max * percentage || 0);
									}
								});
						}
					}).done();
				},
				setEpgProgressTime: function (clip, format, divider) {
					r.dom.mosaicEpgCurrProgTime.svg(clip ?
					new Date(clip.start).toFormatedString(format) + divider +
					new Date(clip.end).toFormatedString(format) : '');
				},
				setSelectorValues: function (sWidth, sHeight) {
					r.dom.msRectOut.attr('width', sWidth).attr('height', sHeight);
				},
				setChannelNamesForMosaic: function () {
					r.dom.setRefreshMosaicChListInterval();
					r.dom.msChName.show();
					var channels = r.getChannelList();
					var navService = navigationService;
					var stepX = navService.stepX;
					var stepY = navService.stepY;
					var matrixColumn = 0;
					var matrixRow = 0;
					var pSVG = '';
					channels.map(function (chId) {
						return tvLib.isChannel(chId) ? tvLib.getChannelById(chId) : null;
					}).forEach(function (ch) {
						var channelName = ch === null ? '' : ch.name;

						if (matrixColumn >= navService.matrixX) {
							matrixColumn = 0;
							matrixRow++;
						}

						var el = r.dom.msChName.text(channelName);
						var width = ch ? el[0].getBBox().width + 10 : 0;
						width = width > navService.cellWidth - 10 ?
						navService.cellWidth - 10 : width;

						pSVG += ui.template('templateChMosaic', {
							'x0': matrixColumn * stepX,
							'y0': matrixRow * stepY,
							'x1': ((matrixColumn + 1) * stepX) - (stepX - navService.cellWidth) -
							(navService.cellWidth / 2) - 10 - ((width - 20) / 2),
							'y1': (matrixRow * stepY) + 10,
							'selectorHeight': navService.cellHeight,
							'selectorWidth': navService.cellWidth,
							'width': width,
							'channelName': channelName
						});

						matrixColumn++;
					});

					r.dom.msChannelNames.text('').append($.parseSvg('<g>' + pSVG + '</g>'));
					r.dom.msChName.hide();
				},
				setRefreshMosaicChListInterval: function () {
					r.dom.clearRefreshMosaicChListInterval();
					r.dom.setLockedChannels();
					r.refreshMosaicChListInterval = setTimeout(function () {
						r.dom.setRefreshMosaicChListInterval();
					}, 10000);
				},
				clearRefreshMosaicChListInterval: function () {
					if (r.refreshMosaicChListInterval !== null) {
						clearTimeout(r.refreshMosaicChListInterval);
						r.refreshMosaicChListInterval = null;
					}
				},
				setLockedChannels: function () {
					var channels = r.getChannelList();
					var pSVG = '';
					var matrixColumn = 0;
					var matrixRow = 0;

					channels.forEach(function (chId) {
						if (matrixColumn >= navigationService.matrixX) {
							matrixColumn = 0;
							matrixRow++;
						}

						var key = r.checkChannelStatus(chId, true, true);
						var templateOptions = {
							'x': matrixColumn * navigationService.stepX,
							'y': matrixRow * navigationService.stepY,
							'selectorHeight': navigationService.cellHeight,
							'selectorWidth': navigationService.cellWidth,
							'msg': ''
						};

						var keysToShowBuyAccess = [
							'chNotInProduct', 'chInOtherSubscription', 'chLocked'
						];
						if (keysToShowBuyAccess.indexOf(key) !== -1) {
							templateOptions.msg = tr('mosaicBuyChannel');
							pSVG += ui.template('templateChNotInSubMosaic', templateOptions);
						} else if (key !== false && key !== 'ok') {
							templateOptions.msg = tr(key);
							pSVG += ui.template('templateChLockedMosaic', templateOptions);
						} else if (key === false) {
							templateOptions.msg = tr('chNotAvailable');
							pSVG += ui.template('templateChLockedMosaic', templateOptions);
						}
						matrixColumn++;
					});
					r.dom.msLockedChannels.text('').append($.parseSvg('<g>' + pSVG + '</g>'));
				},
				showEpg: function (delay) {
					setTimeout(function () {
						r.dom.mosaicEPG.show();
					}, delay);
				},
				hideActionBar: function (delay) {
					if (r.hideActionBarTimer) {
						clearTimeout(r.hideActionBarTimer);
					}
					r.hideActionBarTimer = setTimeout(function () {
						r.actionBar.hide();
					}, delay);
				},
				hideMosaic: function () {
					r._visible = false;
					r.dom.mosaicEPG.hide();
					r.dom.mosaicsHolder.hide();
				},
				isVisible: function () {
					return r._visible;
				}
			};
		em.bind('onAudioStream', function () {
			try {
				if (tvMosaic.checkIfMosaicIsRunning() && !am.isLoaded('vodPlayer')) {
					tvMosaic.setAudio();
				}
			} catch (ex) {
				BS.logger.trace('MOSAIC exception %s', ex);
			}
		});

		r.actionBar = r.actionBar || new BS.ui.ActionBar(r.dom.mosaicActionBar);
	};

	tvMosaic.init = function (caller, channel) {
		var r = this;
		misc.dom.systemMute();
		channel = channel ? channel : liveTv.getCurrentChannel();
		navigationService.setCurrentMosaic(channel);

		r.dom.clearRefreshIntervalTimer();
		r.keyLock = false;

		this.setAspectRatio();

		navigationService.initialCalculation(r.dom.video);

		r.dom.setSelectorValues(navigationService.cellWidth, navigationService.cellHeight);
		r.dom.moveSelector();
		r.dom.setChannelNamesForMosaic();
		r.dom.showMosaic();
	};

	tvMosaic.setAspectRatio = function () {
		if (this._videoState) return;
		var video = this.dom.video;
		this._videoState = video.attr('preserveAspectRatio');
		video.attr('preserveAspectRatio', 'none');
	};

	tvMosaic.checkIfMosaicIsRunning = function () {
		return !!(liveTv.getCurrentChannel() instanceof bsMain.MosaicChannel);
	};

	tvMosaic.getChannelList = function () {
		this.checkChannelList();
		return navigationService.channelListId;
	};

	tvMosaic.checkChannelList = function () {
		if (navigationService.channelListId === 0) {
			BS.logger.info('LIVETV: Channels in current mosaic are not set!!!');
			return false;
		}
		return true;
	};

	tvMosaic.getChannelId = function (chPosition) {
		this.checkChannelList();
		return this.getChannelList()[chPosition];
	};

	tvMosaic.checkChannelAudioPid = function () {
		this.checkChannelList();
		for (var i = 0, node;
			 (node = this.getChannelList()[i++]);) {
			if (parseInt(node.audioPid) !== 0)
				return true;
		}
		return false;
	};

	tvMosaic.setAudio = function () {
		try {
			if (!liveTv.checkChanStatus(liveTv.getCurrentChannel())) return;

			var channelStatus = this.checkChannelStatus(
				this.getChannelId(navigationService.selectedCell), null, true);

			if (channelStatus !== 'ok') {
				misc.dom.systemMute();
				BS.logger.info('Mosaic: disabling audio due to ' + channelStatus);
				return;
			}
			try {
				media.audio = this.getAudioObjectForPID();
				misc.dom.systemUnMute();
			} catch (ex) {
				if (ex.keyword === 'no-audios-yet') {
					media._readAudios();
					media.audio = this.getAudioObjectForPID();
					misc.dom.systemUnMute();
				} else {
					BS.logger.info('LIVETV: Unable to change AUDIO stream, reason: %s'.sprintf(
						ex.message));
					misc.dom.systemMute();
				}
			}
		} catch (e) {
			misc.dom.systemMute();
			BS.logger.info('Mosaic: Unable to change audio stream: ' + e);
		}
	};

	tvMosaic.checkChannelStatus = function (channelId, returnMsg, returnKey) {
		if (BS.device.power !== 'on') {
			return;
		}
		if (returnMsg === null) {
			returnMsg = false;
		}
		if (returnKey === null) {
			returnKey = false;
		}
		try {
			return liveTv.checkChanStatus(
				tvLib.getChannelById(channelId), false, returnMsg, returnKey);
		} catch (ex) {
			if (ex.message && ex.message.indexOf('no-channel-of-id') !== -1) {
				return false;
			}
			BS.logger.trace('MOSAIC exception:');
			BS.logger.log(ex);
			return false;
		}
	};

	tvMosaic.getAudioObjectForPID = function () {
		var ap = 0;
		var mosaic = navigationService.mosaic;
		if (mosaic.defaultAudioPID === '' &&
			mosaic.listAudioPids.length === 0) {
			this.setDefAudioAndAudioPids();
		}

		if (mosaic.defaultAudioPID !== '') {
			ap = parseInt(mosaic.defaultAudioPID);
			return media.audios.get(ap, 'id')[0];
		}
		if (this.checkChannelAudioPid() && this.checkChannelList()) {
			ap = parseInt(mosaic.listAudioPids[navigationService.selectedCell]);
			if (ap === 'NaN') {
				BS.logger.info('Mosaic AUDIO pids not defined properly');
				return -1;
			}
			return media.audios.get(ap, 'id')[0];
		}
		return -1;
	};

	tvMosaic.setDefAudioAndAudioPids = function () {
		var _capabilities = media.mediaResource.capabilities;

		var tpAudioPids = _capabilities.match(/mosaic_pids=([\,\d]+)/g);
		var tpDefAudioPid = _capabilities.match(/mosaic_default_audio_pid=([\d]+)/g);

		if (tpAudioPids !== null)
			navigationService.mosaic.listAudioPids =
				tpAudioPids[0].split('mosaic_pids=')[1].split(',').map(function (el) {
					return 1 * el;
				});

		if (tpDefAudioPid !== null)
			navigationService.mosaic.defaultAudioPID =
				tpDefAudioPid[0].split('mosaic_default_audio_pid=')[1];
	};

	tvMosaic.onInputEvent = function (key) {
		if (tvMosaic.lock === true) {
			return;
		}
		switch (key) {
		case 'volup':
		case 'voldown':
		case 'mute':
			return true;
			break;
		case 'reload':
		case 'menu':
		case 'epg':
		case 'chUp':
		case 'chDown':
			return true;
		case 'back':
			if (liveTv.getPreviousChannel()) {
				media.stop();
				am.pop();
			}
			return true;
		case 'up':
		case 'down':
			navigationService.calculateNewSelectorPosition(key);
			if (navigationService.exitMosaic) {
				liveTv.chFlyover(key === 'up');
			} else {
				tvMosaic.lock = true;
				this.dom.moveSelector();
				this.setAudio();
			}
			break;
		case 'left':
		case 'right':
			navigationService.calculateNewSelectorPosition(key);
			tvMosaic.lock = true;
			this.dom.moveSelector();
			this.setAudio();
			break;
		case 'ok':
			try {
				this.checkChannelStatus(this.getChannelId(navigationService.selectedCell));
			} catch (e) {
				return;
			}
			this.exit();
			break;
		default:
			if (isNaN(parseInt(key))) {
				break;
			}
			return true;
		}
	};

	tvMosaic.exit = function () {
		tvCatRepo.getAllCategory().then(function (allChannelsCat) {
			var eventData = {};
			var selectedChannel = tvLib.getChannelById(
				this.getChannelId(navigationService.selectedCell));

			eventData.eventId = misc.eventIds.mosaicSelectionConfirmed;
			eventData.uid = liveTv.getCurrentChannel().uid;
			eventData.relatedUid = selectedChannel.uid;
			eventData.start = Date.now();
			misc.event.write(eventData);

			liveTv.setCurrentCategory(allChannelsCat);
			liveTv.switchToChannel(selectedChannel, false, true);
		}.bind(this)).catch(function (e) {
			BS.logger.info('Mosaic exception: ' + e);
		});
	};

	tvMosaic.destroy = function () {
		if (this._videoState) {
			this.dom.video.attr('preserveAspectRatio', this._videoState);
			this._videoState = null;
		}
		this.cleanup();
	};

	tvMosaic.focus = function () {
		if (this.dom.isVisible()) return;
		am.pop();
	};

	tvMosaic.cleanup = function () {
		this.dom.clearRefreshIntervalTimer();
		this.dom.clearRefreshMosaicChListInterval();
		this.dom.hideMosaic();
		misc.dom.systemUnMute();
	};

	em.bind('onPowerStateChange', function (ev) {
		if (!ev.value && tvMosaic.dom) {
			tvMosaic.dom.hideMosaic();
		}
	});

	Tv.register(tvMosaic);
})(
	BeeSmart,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	BeeSmart.evMgr,
	BeeSmart.media
);

(function (BS, mm, ModuleDom) {
	function PvrProxy () {}
	PvrProxy.prototype = {
		pvr: {
			recordedClips: [],
			autoRecordable: [],
			isInstantRecInProgress: function () {
				return false;
			},
			dom: null
		},
		_init: function () {
			if (mm.appExists('pvr')) {
				this.pvr = mm.getApp('pvr');
			} else {
				this.pvr.dom = this.pvr.dom || new ModuleDom(['chRecordNotice', 'chRecordNoticeIcon',
						'chRecordNoticeText', 'chRecordNoticeShow', 'chRecordNoticeShowAni',
						'chRecordNoticeHide'],
					{
					chNoticeVisible: false,
					showChRecNotice: function (iconUrl, text) {
						this.chRecordNoticeIcon.attr('href', iconUrl, NS.xlink);
						this.chRecordNoticeText
							.text(text.toLocaleString(BS.portal.user.language.label));
						this.chRecordNotice.show();
						if (!this.chNoticeVisible) {
							this.chRecordNoticeShow.trigger('beginEvent', {
								'setRecordNotice': function (txtOffset, rectOffset, showFrom, showTo,
									hideFrom, hideTo) {
									var rect = this.chRecordNotice.first();
									var ani = this.chRecordNoticeShowAni;
									var text = this.chRecordNoticeText;
									var newWidth = parseInt(text[0].getBBox().width + txtOffset, 10);
									var showValue = (BS.portal.direction === 'rtl') ?
										newWidth : 0 - newWidth;
									ani.attr('values', showFrom.concat(showValue, showTo));
									ani.begin();
									ani = this.chRecordNoticeHide;
									ani.attr('values', showValue.toString().concat(hideFrom, hideTo));
									rect.attr('width', newWidth + rectOffset);
								}.bind(this)
							});
						}
						this.chNoticeVisible = true;
					},
					hideChRecNotice: function () {
						if (this.chNoticeVisible) {
							this.chNoticeVisible = false;
							this.chRecordNoticeHide.begin(function () {
								this.chRecordNotice.hide();
							}.bind(this));
						}
					}
				});
			}
		},
		get recordedClips() {
			this._init();
			return this.pvr.recordedClips;
		},
		get autoRecordable() {
			this._init();
			return this.pvr.autoRecordable;
		},
		get dom() {
			this._init();
			return this.pvr.dom;
		},
		isInstantRecInProgress: function() {
			this._init();
			return this.pvr.isInstantRecInProgress.call(this.pvr);
		}
	};
	BS.PvrProxy = PvrProxy;


})(BeeSmart, BeeSmart.modMgr, $.ModuleDom);


(function (BS, q, mm, am, ui, formats) {

	var bsRegionId = null;
	var bsUserId = null;
	var storeService = null;
	var subRepository = null;

	var subscriptionApp = new BS.App('subscriptionApp', {
		type: 'popup',
		listenTo: [BS.InputManager.keyGroups.shortcuts],
		inputMapper: BS.App.portalDirectionKeyMapper
	});

	subscriptionApp.userActionsOnSubscription = {
		Activate: 'activate', Deactivate: 'deactivate', Reactivate: 'reactivate'
	};
	subscriptionApp.init = function (caller, products, jumpToId) {
		var that = this;
		that.dom = that.dom || {
				subscriptionsHolder: $('#subscriptionsHolder'),
				subMenuSelector: $('#subscriptionMenuSelector'),
				descriptionScrollGroup: $('#subDescriptionScrollGroup'),
				descriptionSlider: $('#subDescriptionSlider'),
				descriptionVerticalSlider: $('#subDescriptionVerticalSlider'),
				descriptionText: $('#subDescriptionText'),
				descriptionPrice: $('#subDescriptionPrice'),
				descriptionImg: new BS.ui.Image($('#subDescriptionImg')),
				subscriptionTitle: $('#subTitle'),
				actionBar: $('#subscriptionActionBar'),
				subscriptionActiveText: $('#subscriptionActiveText'),
				updateActionBar: function () {
					var sub = that.subMenu.currentInfo();
					var subStatus = storeService.getSubscriptionStatus(sub);
					that.actionBar.set([
						['back', 'back'],
						['navigation', 'navigation'],
						[null, null],
						subStatus.isActive() && !subStatus.shouldCallOperator() ?
							['confirm', 'unsubscribe'] :
							subStatus.isSubscribeAble() ? ['confirm', 'subscribeNow'] : [null, null]
					]);
				}
			};
		that.subscriptionsForProducts = products;
		var subscriptions = products && products[0] instanceof BS.PurchaseModel.Product ?
			storeService.getSubscriptionsOfProducts(products) : subRepository.subscriptions;
		subscriptions.sort(that.sortByType);

		var lastBasicSub = that.getLastBasicSubscription(subscriptions);
		that.generateMenu(subscriptions, lastBasicSub, jumpToId);

		that.actionBar = that.actionBar || new ui.ActionBar(that.dom.actionBar);
		that.dom.updateActionBar();

		that.dom.subscriptionsHolder.show();
		that.generateSubscriptionDetails(that.subMenu.currentInfo());
	};

	subscriptionApp.sortByType = function (a, b) {
		if (a.type !== b.type) {
			return a.type === BS.PurchaseModel.SubscriptionTypes.Basic ? -1 : 1;
		} else {
			return 0;
		}
	};

	subscriptionApp.getLastBasicSubscription = function (subList) {
		var basicSubs = subList.filter(function (sub) {
			return sub.type === BS.PurchaseModel.SubscriptionTypes.Basic;
		});
		return basicSubs.length > 0 ? basicSubs[basicSubs.length - 1] : null;
	};

	subscriptionApp.generateMenu = function (subList, lastBasicSub, jumpToId) {
		var that = this;
		var tempItems = [];
		var itemsDTOs = [];
		var lastBasicSubId = lastBasicSub ? lastBasicSub.id : null;
		var whereToJump = 0;

		if (subList.length === 0) {
			BS.logger.debug('ERROR: No subscription list passed to generateMenu');
			return;
		}

		if (that.menu) {
			if (that.subMenu)
				that.subMenu.destroy();
			that.menu.destroy();
		}
		that.menu = new ui.Menu(that.dom.subMenuSelector[0]);

		subList.forEach(function (sub, i) {
			itemsDTOs.push(sub);
			var subStatus = storeService.getSubscriptionStatus(sub);
			var extraSub = sub.type === BS.PurchaseModel.SubscriptionTypes.Extra;
			tempItems.push(ui.template('subscriptionMenuTemplate', {
				title: sub.title.encodeEntities(),
				poster: sub.poster ? sub.poster : '-',
				display: {
					line: sub.id === lastBasicSubId ? true : 'none',
					purchasedEl: subStatus.isActiveOrCanceled() ? true : 'none',
					extraSubEl: extraSub ? true : 'none'
				}
			}));
			if (jumpToId && sub.id === jumpToId)
				whereToJump = i;
		});
		that.subMenu = that.menu.newMenuItems().setItems(tempItems, itemsDTOs)
			.jump(whereToJump).show();
	};

	subscriptionApp.generateSubscriptionDetails = function (sub) {
		var userPriceText = this.generateUserPriceText(sub);
		var subscriptionStatus = storeService.getSubscriptionStatus(sub);

		this.dom.subscriptionTitle.text(sub.title);
		this.dom.descriptionText.svg(sub.description);
		this.dom.descriptionPrice.svg(userPriceText);
		this.dom.descriptionImg.href = sub.poster;

		if (subscriptionStatus.isActive()) this.dom.subscriptionActiveText.show();
		else this.dom.subscriptionActiveText.hide();

		this.descrPanel = new ui.ScrollingPanel(
			this.dom.descriptionScrollGroup[0],
			null,
			this.dom.descriptionVerticalSlider[0],
			{},
			this.dom.descriptionSlider[0]
		);
	};

	subscriptionApp.generateUserPriceText = function (sub) {
		var priceDescription = storeService.getPriceItemDescription(sub.purchaseInfo.priceItem);
		var subStatus = storeService.getSubscriptionStatus(sub);

		if (subStatus.isCanceled()) {
			var activeSub = subRepository.getActiveSubscriptionBySubscriptionId(sub.id);
			return '%s <tbreak/> %s %s'.sprintf(priceDescription, tr('vod_availability'),
				new Date(activeSub.availabilityPeriod.to).toFormatedString(formats.dateTime));
		} else if (subStatus.isActive() || subStatus.isSubscribeAble()) {
			return priceDescription;
		} else {
			return tr('callOperatorSubscriptionPurchase');
		}
	};

	subscriptionApp.onInputEvent = function (key) {
		switch (key) {
		case 'down':
		case 'up':
			if (key === 'up') this.descrPanel.moveUp();
			else this.descrPanel.moveDown();
			break;
		case 'left':
		case 'right':
			if (key === 'left')this.subMenu.previous();
			else this.subMenu.next();

			this.generateSubscriptionDetails(this.subMenu.currentInfo());
			this.dom.updateActionBar();
			break;
		case 'back':
		case 'menu':
		case 'reload':
			am.pop();
			break;
		case 'ok':
			var sub = this.subMenu.currentInfo();
			var subStatus = storeService.getSubscriptionStatus(sub);
			var activeSubscription = subRepository.getActiveSubscriptionBySubscriptionId(sub.id);

			if (subStatus.isActive() && !subStatus.shouldCallOperator()) {
				this.applyUserActionOnSubscription(activeSubscription, {
					action: function (sub) {
						return storeService.cancelSubscription(sub);
					},
					subscriptionId: activeSubscription.subscriptionId,
					priceItem: null,
					dialogTitle: tr('subscriptionDeactivateDialogTitle'),
					purchaseDisclaimer: tr('subscriptionDeactivationDisclaimer')
				});
			} else if (subStatus.isCanceled() && subStatus.isSubscribeAble()) {
				this.applyUserActionOnSubscription(activeSubscription, {
					action: function (sub) {
						return storeService.reactivateSubscription(sub);
					},
					subscriptionId: activeSubscription.subscriptionId,
					priceItem: sub.purchaseInfo.priceItem,
					dialogTitle: tr('subscriptionActivateDialogTitle'),
					purchaseDisclaimer: tr('subscriptionActivationDisclaimer')
				});
			} else if (subStatus.isSubscribeAble()) {
				this.applyUserActionOnSubscription(sub,{
					action: function (sub) {
						return storeService.activateSubscription(sub);
					},
					subscriptionId: sub.id,
					priceItem: sub.purchaseInfo.priceItem,
					dialogTitle: tr('subscriptionActivateDialogTitle'),
					purchaseDisclaimer: tr('subscriptionActivationDisclaimer')
				});
			}
			break;
		}
	};

	subscriptionApp.applyUserActionOnSubscription = function (sub, actionData) {
		var that = this;

		am.push(mm.getApp('content_purchase'),
			function () {
				var products = that.subscriptionsForProducts;
				return actionData.action(sub)
					.then(function () {
						that.init(that, products, actionData.subscriptionId);
						return q({message: tr('success'), todo: BS.F});
					}).catch(function (ex) {
						BS.logger.debug('SUBSCRIPTION STORE: User action on subscription failed '
							+ 'because ' + ex.errorMessage);

						return q({
							todo: function () {
								if (storeService.shouldUpdateSubscriptionRepository(ex.errorCode)) {
									that.init(that, products, sub.id);
								}
								var message = storeService.getErrorCodeDescription(ex.errorCode);
								ui.generalAlert(message);
							}
						});
					});
			},
			{
				subscription: sub,
				priceItem: actionData.priceItem,
				dialogTitle: actionData.dialogTitle,
				purchaseDisclaimer: actionData.purchaseDisclaimer
			}
		);
	};

	subscriptionApp.destroy = function () {
		this.dom.subscriptionsHolder.hide();
	};

	new BS.Module(
		{
			id: 'SubscriptionModuleStore',
			mmExtensions: {
				app: subscriptionApp,
				icon: 'subscriptions',
				title: tr('SubscriptionStore'),
				position: 13
			},
			startupTasks: [
				{
					name: 'Subscription Store UI',
					payload: function (params, callback) {
						bsRegionId = BS.portal.user.regionId;
						bsUserId = BS.portal.user.userId;
						storeService = BeeSmart.BeeSmartMain.storeService;
						subRepository = BeeSmart.BeeSmartMain.subscriptionRepository;

						BS.template.get('svg/subscriptions.svg').finally(callback);
					}
				}
			]
		}
	).register(subscriptionApp);
})(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	BeeSmart.portal.local.formats
);


(function (BS, q, em, BeeSmartMain) {

	var bsRegionId;
	var bsUserId;

	em.bind('onBeeSmartLoginSuccess', function () {
		bsRegionId = BS.portal.user.regionId;
		bsUserId = BS.portal.user.userId;
		giftRepo.initialize();
	});


	function Gift(dto) {
		this.id = dto.id;
		this.update(dto);
	}
	Gift.prototype = {
		id: null,
		purchaseGroupId: null,
		sender: null,
		receiver: null,
		accepted: null,
		update: function(dto) {
			this.purchaseGroupId = dto.purchaseGroupId;
			this.sender = dto.sender;
			this.receiver = dto.receiver;
			this.accepted = dto.accepted;
		},
		toString: function () {
			return '%s#%s, %s > %s, purchase-ref: %s [%s]'
				.sprintf('Gift', this.id, this.sender.name,
					this.receiver.name, this.purchaseGroupId, this.accepted ? 'ACP' : '');
		}
	};

	function GiftRepository(){}
	GiftRepository.prototype = {
		list: [],
		idMap: {},
		Gift: Gift,
		add: function (itemObject) {
			if (itemObject.id in this.idMap) {
				this.idMap[itemObject.id].update(itemObject);
			} else {
				this.list.push(itemObject);
				this.idMap[itemObject.id] = itemObject;
			}
		},
		remove: function (itemObject) {
			if (itemObject.id in this.idMap) {
				this.list = this.list.filter(function (item) {
					return item.id !== itemObject.id;
				});
				delete this.idMap[itemObject.id];
			}
		},
		getAll: function (filterAccepted) {
			if (!filterAccepted)
				return this.list;
			return this.list.filter(function (gift){
				return gift.accepted;
			});
		},
		findById: function (id) {
			return this.list.filter(function (item) {
				return item.id === id;
			})[0] || null;
		},
		getGiftByProduct: function (purchaseGroupId) {
			return this.list.filter(function (elm) {
				return elm.purchaseGroupId === purchaseGroupId;
			})[0] || null;
		},
		getGiftsByProduct: function (purchaseGroupId) {
			return this.list.filter(function (elm) {
				return elm.purchaseGroupId === purchaseGroupId;
			});
		},
		initialize: function () {
			var that = this;
			return BS.request
				.Get('/restapi/rest/%d/%d/social/gifts/received'.sprintf(bsRegionId, bsUserId),
					{'accept': 'json'})
				.then(function (response) {
					response.data.forEach(function (giftDto) {
						that.add(new Gift(giftDto));
					});
					return that;
				})
				.catch(onEx)
				.then(function() {
					em.dispatch(new GiftRepositoryInitializedEvent());
				});
			function onEx (x){
				BS.logger.log(x);
				throw x;
			}
		},
		updateAll: function() {
			return this.initialize();
		}
	};

	var giftRepo = new GiftRepository();
	BeeSmartMain.giftRepository = giftRepo;

	var giftService = {
		isGift: function (product) {
			return giftRepo.getGiftByProduct(product.id) !== null;
		},
		isAccepted: function (product) {
			return giftRepo
				.getGiftsByProduct(product.id)
				.filter(function (giftObj) {
					return giftObj.accepted;
				})
				.length > 0;
		},
		acceptGift: function (giftId) {
			return BS.request.Post('/restapi/rest/%d/%d/social/gifts/received'.sprintf(
					bsRegionId, bsUserId), {
				accept: 'json',
				data: {
					'gift_id': giftId
				},
				preventEvent: true
			}).then(function () {
				giftRepo.findById(giftId).accepted = true;
			}).catch(function(ex) {
				BS.logger.info('GIFT SERVICE :: Accepting of %s failed, reason: %s', giftId, ex);
				throw ex;
			});
		},
		rejectGift: function (giftId) {
			return BS.request.Delete('/restapi/rest/%d/%d/social/gifts/received'.sprintf(
					bsRegionId, bsUserId), {
				accept: 'json',
				data: {
					'gift_id': giftId
				},
				preventEvent: true
			}).then(function () {
				giftRepo.remove(giftRepo.findById(giftId));
			}).catch(function(ex) {
				BS.logger.info('GIFT SERVICE :: Accepting of %s failed, reason: %s', giftId, ex);
				throw ex;
			});
		},
		canSendGift: function () {
			var buddyRepo = BS.Contacts.buddyRepository;
			return buddyRepo.getBuddyList(buddyRepo.Filters.confirmed).length > 0;
		},
		sendGift: function (details) {
			var purchaseInfo = details.product.getPurchaseInfoForPriceItem(details.priceItem);
			return BS.request.Put(
				'/restapi/rest/%d/%d/social/gifts/sent'.sprintf(bsRegionId, bsUserId), {
					accept: 'json',
					data: {
						'purchase_group_id': details.product.id,
						'receiving_user_id': details.giftReceiver,
						'price_item_id': details.priceItem.id,
						'offer_version': purchaseInfo.offerVersion,
						'subscription_id': purchaseInfo.subscriptionId
					}
				});
		}
	};
	Object.seal(giftService);
	BeeSmartMain.giftService = giftService;

	function GiftRepositoryInitializedEvent() {
		this.type = 'GiftRepositoryInitialized';
		this.value = new Date();
		this.handler = 'onGiftRepositoryInitialized';
		this.description = 'Gift repository has been initialized';
	}

	GiftRepositoryInitializedEvent.prototype = new BS.Event();

})(
	BeeSmart,
	Q,
	BeeSmart.evMgr,
	BeeSmart.BeeSmartMain
);


(function (BS, NiceException, q) {

	var settingsCategory = new BS.App('Settings', {
		type: 'main',
		isDefault: true,
		helpId: 'sidebar_settings',
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	var sAppSelection = new BS.App('sAppSelection', {
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	var ssDom = null;
	var extraSettingsItems = [];
	var mm = BS.modMgr;
	var am = BS.appMgr;
	var ui = BS.ui;
	var ModuleDom = $.ModuleDom;
	var keyboard = mm.getApp('keyboard');
	var misc = mm.getApp('Misc');
	var showParentalHiddenChannels = null;
	var maxUserPinLength;
	var minUserPinLength;
	var BeeSmartMain = mm.getModule('BeeSmartMain');
	var ChChangeEv = BeeSmartMain.TvLibrary.TvLibraryUpdated;
	var tvLib;
	var pCDApp = null;
	var PinCheckDialog = null;
	var tvCatRepo;
	var languageCode = 'en';

	BS.evMgr.bind('onBeeSmartLoginSuccess', function () {
		languageCode = BS.portal.user.language.label;
	});
	function MmAdapter() {
	}

	MmAdapter.prototype = {
		appId: settingsCategory.id,
		showCModule: function () {
		},
		selectCModule: function () {
		},
		hideActionBar: function () {
		},
		show: function () {
			misc.showPortal('excludeMenu');
		},
		hide: function () {
			misc.hidePortal('excludeMenu');
		},
		isHidden: function () {
			return misc.portalIsHidden();
		}
	};

	BS.evMgr.bind('onBeeSmartReady', function () {
		tvCatRepo = BS.repositories.tvCategoryRepo;
		ChChangeEv = BeeSmartMain.TvLibraryUpdated;
	});

	settingsCategory.onInputEvent = function (key) {
		switch (key) {
		case 'back':
		case 'left':
			am.pop();
			break;
		case 'up':
		case 'down':
			this.currentSubMenu[key === 'up' ? 'previous' : 'next']();
			break;
		case 'right':
		case 'ok':
			var info = this.currentSubMenu.currentInfo();
			if (info.pinTypeToRequire === SettingNode.LOCK_PARENTAL)
				am.push(pCDApp, PinCheckDialog.MODE_CHECK_PARENTAL_PIN);
			else if (info.pinTypeToRequire === SettingNode.LOCK_SYSTEM)
				am.push(pCDApp, PinCheckDialog.MODE_CHECK_SYSTEM_PIN);
			else
				this.pushSelectedApp();

			break;
		}
	};
	settingsCategory.pushSelectedApp = function () {
		var info = this.currentSubMenu.currentInfo();
		var hideSettingModule = info.appArgs ? info.appArgs.hideSettingModule : false;

		this.currentSubMenu.select(function () {
			if (info.children && info.children.length) {
				am.push(sAppSelection, info.children);
				ssDom.subModuleDescrShowHide();
			} else if (info && info.app) {
				am.push(info.app);
				if (hideSettingModule)
					ssDom.settingsModule.hide();
				ssDom.subModuleDescrShowHide();
			} else {
				BS.logger.info('settings error: selection ' + info.title +
					' has no children AND no application defined');
			}
		});
	};

	settingsCategory.getNodes = function getNodes(nodes) {
		var userFlags = 2 | (BS.portal.user.isDefault ? 4 : 0);
		var maxPos = 0;
		var items = [];
		var infos = [];
		var i;
		var p;
		var len;
		var isOffline = !BS.portal.isOnline;

		for (i = 0, len = nodes.length; i < len; i++) {
			p = nodes[i].position;
			maxPos = p > maxPos ? p : maxPos;
		}
		for (i = 0, len = nodes.length; i < len; i++) {
			p = nodes[i].position;
			nodes[i].position = p < 0 ? Math.abs(maxPos + p + 2) : p;
		}
		nodes.sort(function (a, b) {
			return a.position - b.position;
		});
		for (i = 0, len = nodes.length; i < len; i++) {
			var sItem = nodes[i];
			var isLeaf = sItem.isLeaf;
			if (isOffline && !sItem.offlineReady)
				continue;
			if ((sItem.permission & userFlags) == 0 || (sItem.autoHide && isLeaf))
				continue;
			items.push({
				'isLeaf': isLeaf,
				'text': tr(sItem.title)
			});
			infos.push(sItem);
		}
		return [items, infos];
	};
	settingsCategory.init = function () {
		var that = this;
		that.dom = that.dom || new ModuleDom(
				[
					'settingsMenuGroup', 'settingsModule', 'settingsSubMenuGroup',

					'settingsProfileUser', 'settingsChangeLang', 'settingsUserDeviceInfo',
					'settings_change_profile', 'settingsAutologin', 'settingsChannelList',
					'settings_add_user', 'settingsRenameUser', 'settingsChangeSkin',
					'settingsInfoText', 'settingsFavoriteChannels', 'settingsMediaStatus',
					'settingsPcUserSelect', 'settingsMyProfile', 'settingsRecommendation',
					'settingsFlickrUser', 'settings_edit_pin',
					'settingsAuthPin',
					'settingsMenuSelector', 'settingsSubMenuSelector'
				],
				{
					showSettingsModule: function () {
						this.settingsModule.show();
						this.settingsMenuGroup.show();
						this.settingsInfoText.show();
					},
					showSubModule: function (name, titleKeyword) {
						var dref = this[name] || $('#' + name);
						if (this.currSB)
							this.currSB.hide();

						if (name === 'settingsInfoText') {
							misc.dom.navigationPop();

						} else {
							dref.show();
							this.settingsInfoText.hide();
							misc.dom.navigationPush(tr(titleKeyword));
						}

						this.currSB = dref;
					},
					hideSubModule: function () {
						if (this.currSB) {
							this.currSB.hide();
							misc.dom.navigationReset();
						}
					},
					actionBar: function (buttonVector) {
						misc.dom.actionBar.set(buttonVector);
					},
					subModuleDescription: function (desc) {
						this.settingsInfoText.find('textArea').svg(desc);
					},
					subModuleDescrShowHide: function () {
						this.settingsInfoText[am.lastLoaded('Settings') ? 'show' : 'hide']();
					}
				},
				function () {
					if (IS_COLIBRY) {
						$('#currentModuleLogo').attr('href', '#icon_settings', NS.xlink);
						misc.dom.setModuleTitle(tr('settings'));
						var $biDom = $('#use-base-interface-bg');
						$biDom.attr('y', $biDom.attr('colibry-y-offset') || 0);
					}
				}
			);
		ssDom = that.dom;

		tvLib = BeeSmartMain.tvLibrary;
		var menuData = that.getNodes(extraSettingsItems);
		var items = ui.template('settingsModuleMenu', {'items': menuData[0]});
		that.menu = new ui.Menu(ssDom.settingsMenuSelector[0]);
		that.currentSubMenu = that.menu.newMenuItems();
		that.currentSubMenu.setItems(items, menuData[1]).show();
		that.currentSubMenu.jump(0, true);
		ssDom.subModuleDescription(tr(that.currentSubMenu.currentInfo().description));
		that.currentSubMenu.onFinish(function (index, info) {
			ssDom.subModuleDescription(tr(info.description));
		}, 550);
		ssDom.actionBar([
			['back', IS_COLIBRY ? 'billingLivetv' : 'toMainMenu'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'confirm']
		]);
		ssDom.showSettingsModule();

		if (IS_COLIBRY) {
			misc.showPortal('excludeMenu');
		}
	};
	settingsCategory.destroy = function () {
		var that = this;
		ssDom.hideSubModule();
		that.menu.destroy();
		that.menu = null;
		$('#settingsModule, #settingsMenuGroup').hide();

		if (IS_COLIBRY) {
			misc.hidePortal('excludeMenu');
		}
	};
	settingsCategory.focus = function (callingModule, key, pin, result) {
		var info = this.currentSubMenu.currentInfo();
		var hideSettingModule = info.appArgs ? info.appArgs.hideSettingModule : false;
		ssDom.hideSubModule();

		if (hideSettingModule)
			ssDom.showSettingsModule();

		if (callingModule === 'pinCheckDialog') {
			if (result == true)
				this.pushSelectedApp();
		} else
			ssDom.subModuleDescrShowHide();

		ssDom.actionBar([
			['back', 'toMainMenu'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'confirm']
		]);
	};
	settingsCategory.startup = function () {

		showParentalHiddenChannels = BS.config.get('Core.Client.PC_CHANNEL_POLICY');
		maxUserPinLength = BS.config.get('User.MAX_PIN_SIZE');
		minUserPinLength = BS.config.get('User.MIN_PIN_SIZE');

		if (IS_COLIBRY) {
			try {
				misc.registerMainMenuAdapter(new MmAdapter());
			} catch (x) {
				BS.logger.log(x);
			}
		}
	};
	BS.evMgr.bind('onConnectivityChange', function () {
		if (am.isLoaded(settingsCategory) && !am.lastLoaded(settingsCategory)) {
			am.cutOff(settingsCategory);
			settingsCategory.menu.destroy();
			settingsCategory.menu = null;
			settingsCategory.init();
		}
	});

	sAppSelection.onInputEvent = function (keyPressedName) {
		switch (keyPressedName) {
		case 'back':
		case 'left':
			am.pop();
			break;
		case 'up':
			this.currentSubMenu.previous();
			break;
		case 'down':
			this.currentSubMenu.next();
			break;
		case 'right':
		case 'ok':
			this.currentSubMenu.showFocus().then(function () {
				var aApp = this.currentSubMenu.currentInfo();
				if (aApp.pinTypeToRequire == SettingNode.LOCK_PARENTAL)
					am.push(pCDApp, PinCheckDialog.MODE_CHECK_PARENTAL_PIN);
				else if (aApp.pinTypeToRequire == SettingNode.LOCK_SYSTEM)
					am.push(pCDApp, PinCheckDialog.MODE_CHECK_SYSTEM_PIN);
				else
					this.pushSelectedApp();
			}.bind(this));

			break;
		}
	};
	sAppSelection.pushSelectedApp = function () {
		var aApp = this.currentSubMenu.currentInfo();
		try {
			this.currentSubMenu.select(function () {
				am.push(aApp.app, aApp.appArgs);
			});
		} catch (e) {
			BS.logger.info('Desired setting App is not registered in BS or do not exist'
				+ e.message);
		}
	};
	sAppSelection.init = function (caller, children) {
		var that = this;
		var menuData = settingsCategory.getNodes(children);
		var items = ui.template('settingsModuleSubMenu', {'items': menuData[0]});
		var infos = menuData[1];

		if (that.menu)
			that.menu.destroy();

		that.menu = new ui.Menu(ssDom.settingsSubMenuSelector[0]);
		that.currentSubMenu = that.menu.newMenuItems();
		that.currentSubMenu.setItems(items, infos).show();

		ssDom.settingsSubMenuGroup.show();
	};
	sAppSelection.destroy = function () {
		ssDom.settingsSubMenuGroup.hide();
	};
	sAppSelection.focus = function (callerAppId, key, pin, result) {
		if (callerAppId === 'pinCheckDialog') {
			if (result == true)
				this.pushSelectedApp();
		} else {
			ssDom.showSubModule('settingsInfoText', '');
			ssDom.settingsModule.show();
			ssDom.actionBar([
				['back', 'toMainMenu'],
				['vertical', 'select'],
				['empty', null],
				['confirm', 'confirm']
			]);
		}
	};
	sAppSelection.blur = function (callingModule) {
		if (callingModule !== misc.adapterMainMenu.appId && callingModule !== 'pinCheckDialog') {
			ssDom.settingsModule.hide();
		}
	};

	var settings_change_profile = new BS.App(
		'settings_change_profile',
		{helpId: 'settings_change_profile'}
	);
	settings_change_profile.focus = function (caller, arg) {
		if (caller === 'confirmUserChange') {
			mm.getApp(caller).unregister();
			am.pop();
		}
	};
	settings_change_profile.init = function () {
		var user = BS.portal.user
		var infoDialog = new BeeSmartMain.InfoDialog(
			'confirmUserChange',
			{
				onBeforeExit: function (key) {
					if (key === 'ok') {
						if (user.isAutoLoginEnabled)
							settingsAutologin.updateAutoLogin(0);
						am.cutOff('Misc');
						am.pop();
					}
				}
			}
		);
		BeeSmartMain.register(infoDialog);
		am.push(
			infoDialog,
			tr('switchUserTitle'),
			user.isAutoLoginEnabled ?
				tr('autoLoginAlertAndConfirmUserChange') : tr('sett_chProfileConfirm')
		);
	};
	var settingsMediaStatus = new BS.App(
		'settingsMediaStatus',
		{
			helpId: 'settingsMediaStatus',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);

	settingsMediaStatus.autoReminderValue = [0, 3, 5, 10, 15, 20];
	settingsMediaStatus.onInputEvent = function (keyPressedName) {
		var r = settingsMediaStatus;
		switch (keyPressedName) {
		case 'left':
		case 'back':
			index = r.subMenu.currentIndex();
			r.subMenu.showFocus().then(function () {
				r.updateMediaSettings(index);
			});
			am.pop(r.appID);
			break;
		case 'ok':
			var index = r.subMenu.currentIndex();
			r.subMenu.showFocus();
			var currentValue;
			switch (index) {
			case 0:
				currentValue = r.userMediaSettings[0];
				am.push(mediaPopupMenu, tr('set_reminder_time'),
					r.autoReminderValue,
					index, currentValue);
				break;
			case 1:
			case 2:
				r.userMediaSettings[index] = !r.userMediaSettings[index];
				r.dom.setInputFields(index);
				break;
			case 3:
				currentValue = r.userMediaSettings[3];
				var cSkin = BS.portal.skin;
				var arValues = cSkin.getSupportedAspectRatios(BS.device.info);
				am.push(mediaPopupMenu, tr('set_video_ratio'), arValues, index, currentValue);
				break;
			case 4:
				am.push(mm.getApp('mediaResolutionSetter'));
				break;
			}
			break;
		case 'up':
			r.subMenu.previous();
			break;

		case 'down':
			r.subMenu.next();
			break;
		}
	};
	settingsMediaStatus.setChanges = function (index, avaliableArray) {
		var r = settingsMediaStatus;
		var settingFound = false;

		for (var i = 0; i < avaliableArray.length; i++) {
			if (avaliableArray[i] === r.userMediaSettings[index]) {
				settingFound = true;
				if (i < avaliableArray.length - 1) {
					r.userMediaSettings[index] = avaliableArray[i + 1];
				} else {
					r.userMediaSettings[index] = avaliableArray[0];
				}
				r.dom.setInputFields(index);
				break;
			}
		}

		if (!settingFound) {
			r.userMediaSettings[index] = avaliableArray[0];
			r.dom.setInputFields(index);
		}
	};
	settingsMediaStatus.updateMediaSettings = function () {
		var operations = [];
		var outputInfo = [];
		var that = this;
		var currentSettings = {
			autoReminderTime: BS.portal.user.autoReminderTime / 60000,
			autoAudio: BS.portal.user.autoAudio,
			autoSub: BS.portal.user.autoSub,
			videoType: BS.media.videoAspectRatio
		};

		function onResult(s) {
			ui.toggleLoader(false);
			return s;
		}

		if (
			that.userMediaSettings[0] !== currentSettings.autoReminderTime
			|| that.userMediaSettings[1] !== currentSettings.autoAudio
			|| that.userMediaSettings[2] !== currentSettings.autoSub
		) {
			operations.push('updateUserMediaSettings');
			outputInfo.push([
				that.userMediaSettings[2],
				that.userMediaSettings[1],
				that.userMediaSettings[0]
			]);
		}

		if (that.userMediaSettings[3] !== currentSettings.videoType) {
			operations.push('updateUserRatioType');
			outputInfo.push([
				that.userMediaSettings[3].name,
				BS.device.getMAC()
			]);
		}

		for (var i = 0; i < operations.length; i++) {
			ui.toggleLoader(true);
			var operation = operations[i];

			if (operation === 'updateUserRatioType') {
				BS.request.get('PersonalizationService/' + operation,
					function (s, d) {
						if (!onResult(s)) {
							return;
						}
						ui.generalAlert(tr('mediaStatusChange'));
						BS.media.videoAspectRatio = that.userMediaSettings[3];
					},
					outputInfo[i]);
			} else {
				var data = {
					'auto_reminder_time': that.userMediaSettings[0],
					'auto_audio': that.userMediaSettings[1],
					'auto_sub': that.userMediaSettings[2],
					'target_user_id': BS.portal.user.userId
				};

				BS.users.update(data).then(function () {
					ui.generalAlert(tr('mediaStatusChange'));
					var liveTv = mm.getApp('liveTv');
					liveTv.setAutoReminder(liveTv.getCurrentChannel().id);
				}).catch(function (ex) {
					BS.logger.trace('updateMediaSettings unexpected error: %s', ex);
				}).finally(function () {
					ui.toggleLoader(false);
				});
			}
		}
	};
	settingsMediaStatus.init = function () {
		var that = settingsMediaStatus;
		var mediaResol = mm.getApp('mediaResolutionSetter');
		that.dom = that.dom || new ModuleDom(
				['settingsMediaStatusInputFields', 'settingsMediaStatusSelector'],
				{
					setInputFields: function (i) {
						var value = null;
						var userMedSett = that.userMediaSettings;
						if (i === 0) {
							value = userMedSett[i] !== 0 ?
							userMedSett[i].toLocaleString(languageCode)
							+ ' ' + 'min' :
								'off';
						} else if (i === 1 || i === 2) {
							value = userMedSett[i] ? 'on' : 'off';
						} else if (userMedSett[i] instanceof BS.device.info.DisplayAspectRatio) {
							value = userMedSett[i].name;
						} else {
							value = userMedSett[i];
						}
						settingsMediaStatus.inputFields.eq(i).svg(tr(value));
					}
				},
				function () {
					that.menu = new ui.Menu(this.settingsMediaStatusSelector[0]);
					that.subMenu = that.menu.newMenuItems();
					var infos = ['', '', '', '', ''];
					var items = [
						tr('set_reminderTime'),
						tr('set_audioStatus'),
						tr('set_subtitlesStatus'),
						tr('set_videoRatio_')
					];
					if (mediaResol && mediaResol.enabled)
						items.push(tr('set_resolution'));
					items = ui.template('standardMenuTemplate',
						{'text': items, 'selector': this.settingsMediaStatusSelector});
					that.subMenu.setItems(items, infos).show();
					that.inputFields = this.settingsMediaStatusInputFields.find('text');
				}
			);

		that.subMenu.jump(0, true);
		ssDom.showSubModule(this.appID, 'mediaStatus');
		ssDom.actionBar([
			['back', 'saveAndClose'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'changeValue']
		]);

		that.userMediaSettings = [
			BS.portal.user.autoReminderTime / 60000,
			BS.portal.user.autoAudio,
			BS.portal.user.autoSub,
			BS.media.videoAspectRatio
		];
		if (mediaResol && mediaResol.enabled)
			that.userMediaSettings.push(mediaResol.getCurrentMode());
		for (var i = 0; i < that.userMediaSettings.length; i++)
			that.dom.setInputFields(i);
	};
	settingsMediaStatus.focus = function (callingModule, arg1, arg2, arg3) {
		var r = this;
		if (callingModule === 'mediaPopupMenu' && arg1 === 'ok' && typeof(arg3) !== 'undefined') {
			var index = r.subMenu.currentIndex();
			r.userMediaSettings[index] = arg3;
			r.dom.setInputFields(index);
		}
	};

	var mediaResolutionSetter = new BS.App(
		'mediaResolutionSetter',
		{
			helpId: 'mediaResolutionSetter',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	mediaResolutionSetter.enabled = false;
	mediaResolutionSetter.isReplacable = false;
	mediaResolutionSetter.allVideoModes = [
		'STANDARD_PAL_50HZ',
		'STANDARD_NTSC_60HZ',
		'STANDARD_720P_50HZ',
		'STANDARD_720P_60HZ',
		'STANDARD_1080I_50HZ',
		'STANDARD_1080I_60HZ',
		'STANDARD_1080P_50HZ',
		'STANDARD_1080P_60HZ'
	];
	mediaResolutionSetter.setVideoMode = function (mode) {
		try {
			EkiohPlatformInfo.displays[0].standard = EkiohDisplay[mode];
			return true;
		} catch (e) {
			BS.logger.debug('error setting output mode ' + mode,
				e && e.message ? e.message : 'unknown error');
			return false;
		}
	};
	mediaResolutionSetter.getVideoModes = function () {
		return mediaResolutionSetter.allVideoModes;
	};
	mediaResolutionSetter.getCurrentMode = function () {
		var r = mediaResolutionSetter;
		try {
			return r.allVideoModes[EkiohPlatformInfo.displays[0].standard];
		} catch (e) {
			BS.logger.info('Settings error: error getting current output mode', e && e.message ?
				e.message : 'unknown error');
		}
		return 'UNKNOWN';
	};
	mediaResolutionSetter.init = function () {
		var r = mediaResolutionSetter;
		am.push(mediaPopupMenu, tr('selectResolutionTitle'), r.getVideoModes(), 4,
			r.getCurrentMode());
	};
	mediaResolutionSetter.focus = function (caller, arg1, arg2, arg3) {
		var r = mediaResolutionSetter;
		if (caller == 'mediaPopupMenu' && arg1 == 'ok' && typeof(arg3) != 'undefined') {
			var previousMode = r.getCurrentMode();
			var cdDialog = new BeeSmartMain.InfoDialog(
				'confirmResolutionChange',
				{
					onBeforeExit: function (key) {
						if (key != 'ok')
							cdDialog.onCancel();
						else
							cdDialog.onConfirm();
					}
				}
			);
			cdDialog.currentCountdownValue = 20;
			cdDialog.displayCountdownValue = function () {
				var a = tr('confirmResolutionChangeCountdown') +
					' ' +
					cdDialog.currentCountdownValue;

				BS.logger.info(
					'Resolution change confirm countdown value: ' +
					cdDialog.currentCountdownValue
				);
				this.updateText(a);
			};
			cdDialog.onInterval = function () {
				cdDialog.currentCountdownValue--;
				cdDialog.displayCountdownValue();
				if (cdDialog.currentCountdownValue == 0) {
					cdDialog.onInputEvent('back');
					return;
				}
			};
			cdDialog.onCancel = function () {
				BS.logger.info(
					'Resolution change canceled or timeouted, changing back to ' + previousMode
				);
				mediaResolutionSetter.setVideoMode(previousMode);
			};
			cdDialog.onConfirm = function () {
				BS.logger.info('Resolution change confirmed !');
				settingsMediaStatus.userMediaSettings[4] = arg3;
				settingsMediaStatus.dom.setInputFields(4);
			};
			mm.getModule('BeeSmartMain').register(cdDialog);
			am.push(
				cdDialog,
				tr('confirmResolutionChangeTitle'),
				tr('confirmResolutionChangeCountdown')
			);
			cdDialog.displayCountdownValue();
			mediaResolutionSetter.countdownDialog = cdDialog;
			mediaResolutionSetter.setVideoMode(arg3);

		} else if (caller == 'confirmResolutionChange' && mediaResolutionSetter.countdownDialog) {
			mediaResolutionSetter.countdownDialog.unregister();
			mediaResolutionSetter.countdownDialog = null;
			am.pop();

		} else
			am.pop();
	};

	function SettingsChangePinApp(props) {
		BS.App.call(
			this,
			props.appId,
			{
				helpId: props.helpId,
				inputMapper: BS.App.portalDirectionKeyMapper
			}
		);
	}

	SettingsChangePinApp.prototype = {
		onInputEvent: function (key) {
			var that = this;
			if (that.lock)
				return;
			switch (key) {
			case 'red':
				if (key === 'red' && minUserPinLength === 0) {
					that.clearInputFields();
					that.registerAndPushChangePinDialogToStack();
				}
				break;
			case 'left':
			case 'back':
				if (!that.subMenu) {
					am.pop();
					return;
				}
				if (that.subMenu.info(0).value === '' && that.subMenu.info(1).value === '') {
					am.pop();
					return;
				}
				var errorText = that.checkForErrors();
				if (errorText) {
					ui.generalAlert(errorText);
					that.clearInputFields();
					return;
				}
				that.registerAndPushChangePinDialogToStack();
				break;
			case 'up':
			case 'down':
				if (key === 'down')
					that.subMenu.next();
				else
					that.subMenu.previous();
				break;
			case 'blue':
				that.dom.clearInputFields();
				that.subMenu.jump(0);
				break;
			default:
				var index = that.subMenu.currentIndex();
				if (!isNaN(key)) {
					if (index == 0) {
						if (that.subMenu.info(0).value.length < maxUserPinLength) {
							that.subMenu.info(0).value += key;
							that.password.push(that.subMenu.info(0).value.length);
						}
					} else {
						if (that.subMenu.info(1).value.length < maxUserPinLength) {
							that.subMenu.info(1).value += key;
							that.retypePassword.push(that.subMenu.info(1).value.length);
						}
					}
				}
				break;
			}
		},
		registerAndPushChangePinDialogToStack: function () {
			var that = this;
			var infoDialog = new BeeSmartMain.InfoDialog(
				'settings_change_pin_alert',
				{
					onBeforeExit: function (key) {
						if (key === 'ok')
							that.update(that.subMenu.info(0).value);
						return true;
					}
				}
			);
			BeeSmartMain.register(infoDialog);
			am.push(infoDialog, tr(that.controller.dialogTitle),
				tr(that.controller.dialogText));
		},
		checkForErrors: function () {
			var newPin = this.subMenu.info(0).value;
			var controllerCheckError = this.controller.checkForErrors(newPin);
			if (controllerCheckError !== '')
				return controllerCheckError;
			if (newPin === '')
				return tr('enter_new_user_pin');

			if (newPin.length < minUserPinLength)
				return tr('PinTooShort');

			if (newPin != this.subMenu.info(1).value)
				return tr('pinsDoNotMatch');

			return '';
		},
		clearInputFields: function () {
			this.dom.clearInputFields();
			this.subMenu.jump(0);
		},
		init: function (caller, controller) {
			var that = this;
			that.lock = false;

			if (!(controller instanceof ChangePinController))
				throw 'controller-is-not-change-pin-controller';

			that.controller = controller;

			that.dom = that.dom || new ModuleDom(
					[
						'settingsChangePinSelector', 'settingsChangePinMenuItem',
						'settings_pin_text1', 'settings_pin_text2'
					],
					{
						clearInputFields: function () {
							that.password.clear();
							that.retypePassword.clear();
							that.subMenu.info(0).value = '';
							that.subMenu.info(1).value = '';
						},
						showInputFields: function () {
							this.settings_pin_text1.show();
							this.settings_pin_text2.show();
						},
						setActionBar: function () {
							ssDom.actionBar([
								['back', 'saveAndClose'],
								minUserPinLength === 0 ? ['red', 'setEmptyPin'] : ['empty', ''],
								['blue', 'clearField'],
								['numbers', 'changeValue']
							]);
						}
					}, function () {
					}
				);

			var items = [];
			var infos = [];

			if (that.menu)
				that.menu.destroy();

			that.menu = new ui.Menu(that.dom.settingsChangePinSelector[0]);
			that.subMenu = that.menu.newMenuItems();
			that.password = new ui.PasswordField(
				that.dom.settings_pin_text1, {'maxFieldEntries': maxUserPinLength}
			);
			that.retypePassword = new ui.PasswordField(
				that.dom.settings_pin_text2, {'maxFieldEntries': maxUserPinLength}
			);
			items.push(ui.template(
				that.dom.settingsChangePinMenuItem.text(),
				{'itemName': tr(that.controller.enterPin)}
			));
			infos.push({'id': 'newPin1', 'value': ''});
			items.push(ui.template(
				that.dom.settingsChangePinMenuItem.text(),
				{'itemName': tr(that.controller.enterPinAgain)}
			));
			infos.push({'id': 'newPin2', 'value': ''});
			that.subMenu.setItems(items, infos).show();

			that.subMenu.jump(0);
			that.dom.setActionBar();
			that.dom.clearInputFields();
			that.dom.showInputFields();
			ssDom.showSubModule(that.appID, 'changePinTitle');
		},
		update: function (newPin) {
			var that = this;
			ui.toggleLoader(true);
			that.lock = true;
			var promise = that.controller.update(newPin);

			if (!('done' in promise))
				throw 'controller-update-does-not-return-promise';

			promise.done(function () {
				ui.toggleLoader(false);
				setTimeout(function () {
					that.lock = false;
					if (am.isLoaded('settingsPin'))
						am.pop();
				}, 2000);
			});
		},
		focus: function (callingModule) {
			if (callingModule == 'settings_change_pin_alert')
				mm.getApp(callingModule).unregister();
		}
	};
	Object.extend(SettingsChangePinApp, BS.App);

	var changePinApp = new SettingsChangePinApp({
		appId: 'settingsPin',
		helpId: 'settings_change_pin'
	});

	function ChangePinController(props) {
		this.enterPin = props.enterPin;
		this.enterPinAgain = props.enterPinAgain;
		this.dialogTitle = props.dialogTitle;
		this.dialogText = props.dialogText;
	}

	ChangePinController.prototype = {
		update: BS.F,
		checkForErrors: BS.F
	};

	function SystemPinChangeController() {
		ChangePinController.apply(this, arguments);
	}

	SystemPinChangeController.prototype = {
		update: function (newPin) {
			return BS.request.Put('/restapi/rest/%d/%d/profiles'
				.sprintf(BS.portal.user.regionId, BS.portal.user.userId), {
				accept: 'json',
				data: {
					'system_pin': newPin.toArabicNumerals(languageCode),
					'target_user_id': BS.portal.user.userId
				}
			}).then(function () {
				BS.portal.user.pin = newPin.md5();
				ui.generalAlert(tr('PINchanged') + ' ' + tr('ok'));
			}).catch(function (e) {
				BS.logger.info('SETTINGS :: PIN Change failed because %s', e);
				ui.generalAlert(tr('PINchanged') + ' ' + tr('fail'));
			});
		},
		checkForErrors: function (newPin) {
			if (BS.portal.user.pin === newPin.md5())
				return tr('equalEnteredPins');
			return '';
		}
	};

	Object.extend(SystemPinChangeController, ChangePinController);

	var systemPinChangeController = new SystemPinChangeController({
		enterPin: 'enter_new_user_pin',
		enterPinAgain: 'enter_new_user_pin_again',
		dialogTitle: 'sett_chPIN',
		dialogText: 'changePinAlert'
	});

	function ParentalPinChangeController() {
		ChangePinController.apply(this, arguments);
	}

	ParentalPinChangeController.prototype = {
		update: function (newPin) {
			return BS.request.Put('/restapi/rest/%d/%d/profiles'
				.sprintf(BS.portal.user.regionId, BS.portal.user.userId), {
				accept: 'json',
				data: {
					'parental_pin': newPin.toArabicNumerals(languageCode),
					'target_user_id': BS.portal.user.userId
				}
			}).then(function () {
				BS.portal.user.parentalPin = newPin.md5();
				ui.generalAlert(tr('parentalPINchanged') + ' ' + tr('ok'));
			}).catch(function (e) {
				BS.logger.info('SETTINGS :: Parental PIN Change failed because %s', e);
				ui.generalAlert(tr('parentalPINchanged') + ' ' + tr('fail'));
			});
		},
		checkForErrors: function (newPin) {
			if (BS.portal.user.parentalPin === newPin.md5())
				return tr('equalEnteredPins');
			return '';
		}
	};
	Object.extend(ParentalPinChangeController, ChangePinController);

	var parentalPinChangeController = new ParentalPinChangeController({
		enterPin: 'newParentalPin',
		enterPinAgain: 'newParentalPinAgain',
		dialogTitle: 'sett_parentalC',
		dialogText: 'parentalPinChangeAlert'
	});

	var settingsAutologin = new BS.App(
		'settingsAutologin',
		{
			helpId: 'settingsAutologin',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	settingsAutologin.onInputEvent = function (keyPressedName) {
		var r = settingsAutologin;

		switch (keyPressedName) {
		case 'left':
		case 'back':
			if (
			BS.portal.user.isAutoLoginEnabled !== settingsAutologin.subMenu.info(0).value
			) {
				if (
					settingsAutologin.subMenu.info(0).value
				) {
					r.infoDialog = new BeeSmartMain.InfoDialog(
						'settings_change_auto_login_win',
						{
							onBeforeExit: function (key) {
								if (key == 'ok')
									settingsAutologin.updateAutoLogin(1);
								return true;
							}
						}
					);
					BeeSmartMain.register(r.infoDialog);
					am.push(r.infoDialog, tr('autoLogin'), tr('autoLoginAlert'));

				} else {
					settingsAutologin.updateAutoLogin(0);
					am.pop();
				}

			} else
				am.pop();

			break;
		case 'ok':
			r.subMenu.info(0).value = !r.subMenu.info(0).value;
			r.inputFields.eq(0).svg(r.subMenu.info(0).value ? tr('on') : tr('off'));
			r.subMenu.showFocus();
			break;
		}
	};
	settingsAutologin.init = function () {
		var that = settingsAutologin;

		that.dom = that.dom || new ModuleDom(
				[
					'settingsChangeAutologinSelector', 'settingsChangePinMenuItem',
					'settingsAutoLogin'
				],
				{
					clearInputFields: function (index) {
						that.subMenu.info(1).value = BS.portal.user.isAutoLoginEnabled;
						that.inputFields.eq(1).svg(BS.portal.user.isAutoLoginEnabled ?
							tr('on') : tr('off'));
					},
					setActionBar: function () {
						ssDom.actionBar([
							['back', 'saveAndClose'],
							['empty', null],
							['empty', null],
							['confirm', 'changeValue']
						]);
					}
				},
				function () {
					var items = [];
					var infos = [];

					that.inputFields = this.settingsAutoLogin.children();
					that.menu = new ui.Menu(this.settingsChangeAutologinSelector[0]);
					that.subMenu = that.menu.newMenuItems();

					items.push(ui.template(this.settingsChangePinMenuItem.text(),
						{'itemName': tr('autoLogin')}));
					infos.push({'id': 'autoLogin', 'value': BS.portal.user.isAutoLoginEnabled});

					that.inputFields.eq(1).show();
					that.subMenu.setItems(items, infos).show();
				}
			);

		that.inputFields.eq(0).svg(BS.portal.user.isAutoLoginEnabled ? tr('on') : tr('off'));
		that.subMenu.info(0).value = BS.portal.user.isAutoLoginEnabled;
		that.dom.setActionBar();
		that.subMenu.onFinish(function () {
			that.dom.setActionBar();
		});
		ssDom.showSubModule(that.appID, 'autologinTitle');
	};
	settingsAutologin.updateAutoLogin = function (value) {
		var user = BS.portal.user;
		var deviceMac = BS.device.getMAC();
		ui.toggleLoader();
		BS.request.get(
			'PersonalizationService/setAutoLogin', function (s, d) {
				ui.toggleLoader();
				if (!d) {
					ui.generalAlert(tr('AutoLoginChanged') + ' ' + tr('fail'));
				} else {
					if (value) user.setAutoLoginForDevice(deviceMac);
					else user.deleteAutoLoginForDevice(deviceMac);
				}
			},
			[user.pin, value ? 1 : 0]
		);
	};
	settingsAutologin.focus = function (callingModule, result) {
		var that = this;
		if (callingModule == 'settings_change_auto_login_win' && that.infoDialog) {
			that.infoDialog.unregister();
			that.infoDialog = null;
			am.pop();
		}
	};

	var settingsChangeLang = new BS.App(
		'settingsChangeLang',
		{
			helpId: 'settingsChangeLang',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	settingsChangeLang.init = function () {
		var that = settingsChangeLang;

		that.dom = that.dom || new ModuleDom(['settingsLangChangeSelector']);
		ssDom.showSubModule(this.appID, 'changeLangTitle');
		ssDom.actionBar([
			['back', 'back'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'changeLangBtn']
		]);

		ui.toggleLoader(true);
		ui.toggleLoader(false);

		var items = [];
		var infos = [];
		if (that.menu) {
			that.menu.destroy();
			that.menu = null;
		}
		that.menu = new ui.Menu(that.dom.settingsLangChangeSelector[0]);

		BS.languages.getAll().forEach(function (language) {
			if (items.length > 0 && language.label === BS.portal.user.language.label) {
				var tmpName = items[0];
				var tmpLang = infos[0];

				items[0] = language.nativeDescription;
				infos[0] = language;

				items.push(tmpName);
				infos.push(tmpLang);
			} else {
				items.push(language.nativeDescription);
				infos.push(language);
			}
		});

		items = ui.template('standardMenuTemplate',
			{'text': items, 'selector': that.dom.settingsLangChangeSelector});
		that.subMenu = that.menu.newMenuItems().setItems(items, infos).show();
	};
	settingsChangeLang.startup = function () {
	};
	settingsChangeLang.handleLanguageChange = function (newLanguage) {
		var newSkin = BS.portal.user.skin;

		if (newLanguage.displayDirection !== BS.portal.user.language.displayDirection) {
			BS.skins.getAll().some(function (skin) {
				if (skin.displayDirection === newLanguage.displayDirection) {
					newSkin = skin;
					return true;
				}
			})
		}

		var confirmLangChange = new BeeSmartMain.InfoDialog('confirmLangChange', {
			onBeforeExit: function (key) {
				var that = this;
				if (key === 'ok' && that.lock !== true) {
					that.lock = true;
					BS.users.update({
							target_user_id: BS.portal.user.userId,
							language: newLanguage.label, id_skin: newSkin.id
						}
					).catch(function (message) {
						ui.generalAlert(message);
					}).finally(function () {
						that.lock = false;
						am.cutOff('misc');
						am.pop();
					});
				}
			}
		});
		try {
			BeeSmartMain.register(confirmLangChange);
		} catch (e) {
			BS.logger.info('SETTINGS: Registering confirmLangChange failed: ' + e);
		}

		if (newSkin !== BS.portal.user.skin) {
			am.push(confirmLangChange, tr('LanguageChange'),
				tr('changeLanguageAndSkinWarning') + ' ' + newSkin.name);
		} else {
			am.push(confirmLangChange, tr('LanguageChange'),
				tr('changeLangg_warn'));
		}
	};
	settingsChangeLang.onInputEvent = function (keyPressedName) {
		var that = this;

		switch (keyPressedName) {
		case 'up':
		case 'down':
			that.subMenu[keyPressedName == 'down' ? 'next' : 'previous']();
			break;
		case 'left':
		case 'back':
			am.pop();
			break;
		case 'ok':
			var newLanguage = that.subMenu.currentInfo();
			that.subMenu.showFocus().then(function () {
				if (BS.portal.user.language.label === newLanguage.label) {
					ui.generalAlert(tr('languageAlreadySet'));
					return;
				}
				settingsChangeLang.handleLanguageChange(newLanguage);
			});
			break;
		}
	};

	settingsChangeLang.focus = function (callingModule) {
		if (callingModule == 'confirmLangChange') {
			mm.getApp(callingModule).unregister();
		}
	};
	var settingsChangeSkin = new BS.App(
		'settingsChangeSkin',
		{
			helpId: 'settingsChangeSkin',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);

	settingsChangeSkin.handleSkinChange = function (newSkin) {
		var that = this;
		var newLanguage = null;
		if (newSkin.displayDirection !== BS.portal.user.skin.displayDirection) {
			BS.languages.getAll().some(function (language) {
				if (newSkin.displayDirection === language.displayDirection) {
					newLanguage = language;
					return true;
				}
			});
		}

		var infoDialog = new BeeSmartMain.InfoDialog('confirmSkinChange', {
			onBeforeExit: function (key) {
				if (key !== 'ok') return;
				that.subMenu.select(function () {
					var data = {};
					data.target_user_id = BS.portal.user.userId;
					data.id_skin = newSkin.id;
					if (newLanguage) data.language = newLanguage.label;
					BS.users.update(data)
						.then(function () {
							am.cutOff('misc');
							am.pop();
						})
						.catch(function (message) {
							ui.generalAlert(message);
						});
				});
			}
		});
		BeeSmartMain.register(infoDialog);
		if (newLanguage) {
			am.push(infoDialog, tr('changeSkinDialogTitle'),
				tr('changeSkinAndLanguageWarning') + ' ' + newLanguage.nativeDescription);
		} else {
			am.push(infoDialog, tr('changeSkinDialogTitle'), tr('changeSkin_warn'));
		}
	};

	settingsChangeSkin.onInputEvent = function (keyPressedName) {
		switch (keyPressedName) {
		case 'up':
			this.subMenu.previous();
			break;
		case 'down':
			this.subMenu.next();
			break;
		case 'left':
		case 'back':
			am.pop();
			break;
		case 'ok':
			var that = this;
			var selectedSkin = that.subMenu.currentInfo();
			that.subMenu.showFocus().then(function () {
				if (BS.portal.user.skin.id === selectedSkin.id) {
					ui.generalAlert(tr('skinAleradySet'));
					return;
				}
				that.handleSkinChange(selectedSkin);
			});
			break;
		}
	};
	settingsChangeSkin.init = function () {
		var that = settingsChangeSkin;

		that.dom = that.dom || new ModuleDom(['settingsSkinChangeSelector']);
		ssDom.showSubModule(this.appID, 'changeSkinTitle');

		ssDom.actionBar([
			['back', 'back'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'changeSkinBtn']
		]);

		var items = [];
		var infos = [];

		BS.skins.getAll().forEach(function (skin) {
			if (items.length > 0 && skin.keyword === BS.portal.user.skin.keyword) {
				var tmpName = items[0];
				var tmpSkin = infos[0];

				items[0] = skin.name;
				infos[0] = skin;

				items.push(tmpName);
				infos.push(tmpSkin);
			} else {
				items.push(skin.name);
				infos.push(skin);
			}
		});

		items = ui.template('standardMenuTemplate', {
			'text': items,
			'selector': that.dom.settingsSkinChangeSelector
		});
		if (that.menu) {
			that.menu.destroy();
			that.menu = null;
		}
		that.menu = new ui.Menu(that.dom.settingsSkinChangeSelector[0]);

		that.subMenu = that.menu.newMenuItems().setItems(items, infos).show();
	};
	settingsChangeSkin.startup = function () {
	};
	settingsChangeSkin.focus = function (callingModule) {
		if (callingModule == 'confirmSkinChange') {
			mm.getApp(callingModule).unregister();
		}
	};
	var settingsMyProfile = new BS.App(
		'settingsMyProfile',
		{
			helpId: 'settingsMyProfile',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	settingsMyProfile.validateUsername = function (username) {
		var message = null;

		BS.users.all.forEach(function (cUser) {
			if (cUser.name.toLowerCase() === username.toLowerCase() &&
				cUser.userId !== BS.portal.user.userId) {
				message = 'userAlreadyExists';
			}
		});

		return message;
	};
	settingsMyProfile.userCurrentInfos = null;
	settingsMyProfile.editChatProfileEnabled = false;
	settingsMyProfile.subMenus = {};
	settingsMyProfile.onInputEvent = function (key) {
		switch (key) {
		case 'back':
		case 'left':
			var data = settings_my_profile_details.getData();
			var message;

			ui.toggleLoader(true);
			BS.users.update(data)
				.then(function () {
					BS.ui.currentUserAvatar.href = BS.portal.user.avatarLink;
					message = tr('updatePersonalDataSuccess');
				}).catch(function (e) {
					switch (e) {
					case 'no-entries-changed':
						message = tr('noEntriesHasBeenChanged');
						break;
					case 'user-exists':
						message = tr('userAlreadyExists');
						break;
					case 'name-too-long':
						message = '%s %s<tbreak />%s'.sprintf(tr('addUserName'),
							tr('IS_TOO_LONG'), tr('noEntriesHasBeenChanged'));
						break;
					default:
						message = '%s<tbreak />%s'.sprintf(tr('UNKNOWN_ERROR'),
							tr('noEntriesHasBeenChanged'));
						break;
					}
				}).finally(function () {
					ui.toggleLoader(false);
					ui.generalAlert(message);
					am.pop();
				});
			break;
		case 'up':
		case 'down':
			this.subMenus.main[key === 'down' ? 'next' : 'previous']();
			break;
		case 'ok':
		case 'right':
			var item = this.subMenus.main.currentInfo();
			this.subMenus.main.showFocus().then(function () {
				am.push(settings_my_profile_details, item);
			});
			break;
		}
	};
	settingsMyProfile.init = function () {
		var that = settingsMyProfile;
		that.dom = that.dom || new ModuleDom(
				[
					'settings_mp1', 'settingsMPSelector1', 'settingsMPSelector2',
					'settingsMPBirthInputs', 'settingsMPGenderInput',
					'settingsMPSelector1Widen', 'settingsMPSelector1Shorten',
					'settingsMPGeneralInput', 'settingsMPGeneralHolder', 'settings_mp1_menuHolder'
				],
				{
					avatarImage: new ui.Image($('#avatarImage')),
					refreshAvatarList: function (d) {
						var items = [];
						var infos = [];
						var cItemIndex = -1;

						for (var i = 0, len = d.length; i < len; i++) {
							if (that.userCurrentInfos.avatarId === d[i].avatarId) {
								cItemIndex = i;
							}

							items.push(ui.template('settingsMyProfileMenu',
								{'text': d[i].name.toString().encodeEntities()}));
							infos.push(d[i]);
						}
						that.subMenus.avatarSetting.setItems(items, infos, 0, items.length).show();
						if (cItemIndex !== -1) {
							that.subMenus.avatarSetting.jump(cItemIndex);
						} else {
							settingsMyProfile.userCurrentInfos.avatarId = d[0].id;
						}
					}
				},
				function () {
					var dom = this;
					var usedGroup = that.editChatProfileEnabled ?
						[
							'nickname',
							'email',
							'name',
							'pMessage',
							'avatarSetting',
							'phoneNum',
							'address',
							'birthSetting',
							'genderSetting'
						]
						:
						[
							'birthSetting',
							'genderSetting',
							'avatarSetting'
						];

					var mapping = {
						name: 'realName',
						pMessage: 'personalMessage',
						phoneNum: 'myPhone',

						'nickname': 'nickname',
						'email': 'email',
						'avatarSetting': 'avatarSetting',
						'address': 'address',
						'birthSetting': 'birthSetting',
						'genderSetting': 'genderSetting'
					};

					that.inputFields = dom.settingsMPBirthInputs.find('text');

					that.masterMenu = new ui.Menu(dom.settingsMPSelector1[0]);
					that.slaveMenu = new ui.Menu(dom.settingsMPSelector2[0]);
					that.subMenus.birthSetting = that.slaveMenu.newMenuItems();

					that.subMenus.genderSetting = that.slaveMenu.newMenuItems();

					that.subMenus.avatarSetting = that.slaveMenu.newMenuItems();

					var items = [];
					var infos = [];
					that.subMenus.main = that.masterMenu.newMenuItems();

					for (var i in usedGroup) {
						var trKey = i
						=== 'personalMessage' ? 'screenMessage' : mapping[usedGroup[i]];
						items.push(ui.template('settingsMyProfileMenu', {
							'text': tr(trKey)
						}));
						infos.push(usedGroup[i]);
					}
					that.subMenus.main.setItems(items, infos).show();
				}
			);

		var items = [];
		var infos = [];

		that.userCurrentInfos = that.getUserInfoValues();

		var birthTexts = {
			'year': that.userCurrentInfos.birthDate[0],
			'month': that.userCurrentInfos.birthDate[1],
			'day': that.userCurrentInfos.birthDate[2]
		};

		var j = 0;
		for (var i in birthTexts) {
			items.push(ui.template('settingsMyProfileMenu', {'text': tr(i)}));
			infos.push(birthTexts[i]);
			that.inputFields.eq(j).text(birthTexts[i].toLocaleString(languageCode));
			j++;
		}
		that.subMenus.birthSetting.setItems(items, infos);

		items = [ui.template('settingsMyProfileMenu', {'text': tr('gender')})];
		infos = [that.userCurrentInfos.gender ===
		settings_my_profile_details.GENDER_MALE ? tr('male') : tr('female')
		];
		that.subMenus.genderSetting.setItems(items, infos);

		this.subMenus.main.jump(0, true);
		ssDom.showSubModule(this.appID, 'myProfileTitle');
		ssDom.actionBar([
			['back', 'saveAndClose'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'edit']
		]);
	};
	settingsMyProfile.focus = function () {
		ssDom.actionBar([
			['back', 'back'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'edit']
		]);
		settingsMyProfile.dom.settings_mp1.hide();
		settingsMyProfile.dom.settingsMPSelector1Shorten.begin();
	};
	settingsMyProfile.blur = function () {
		settingsMyProfile.dom.settings_mp1.show();
		settingsMyProfile.dom.settingsMPSelector1Widen.begin();
	};
	settingsMyProfile.destroy = function () {
		settingsMyProfile.dom.settings_mp1.hide();
		settingsMyProfile.dom.settingsMPSelector1Shorten.begin();
	};
	settingsMyProfile.saveBasicInfoValues = function (userCurrentInfos) {
		var user = BS.portal.user;
		user.avatarId = userCurrentInfos.avatarId;
		user.avatarLink = userCurrentInfos.avatarLink;
		user.gender = userCurrentInfos.gender;
		user.birthDay = userCurrentInfos.birthDate[0] + '/' +
			userCurrentInfos.birthDate[1] + '/' +
			userCurrentInfos.birthDate[2];
	};
	settingsMyProfile.getUserInfoValues = function () {
		var retVal = {};
		var user = BS.portal.user;

		retVal.avatarId = user.avatarId;

		if (user.birthDate) {
			retVal.birthDate = user.birthDate.split('-');
		} else {
			retVal.birthDate = [1970, 1, 1];
		}
		retVal.gender = user.gender;
		retVal.avatarLink = user.avatarLink;

		if (settingsMyProfile.editChatProfileEnabled && user) {
			retVal.nickname = user.nickname;
			retVal.email = user.email;
			retVal.name = user.name;
			retVal.pMessage = user.pMessage;
			retVal.phoneNum = user.phoneNum;
			retVal.address = user.address;
			retVal.gender = user.gender;
			retVal.avatarId = user.avatarId;
			retVal.avatarLink = user.avatarLink;
		}
		return retVal;
	};
	settingsMyProfile.startup = function () {
		this.editChatProfileEnabled = mm.isAllowed('contacts');
	};

	var settings_my_profile_details = new BS.App('settings_my_profile_details', {
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	settings_my_profile_details.GENDER_MALE = 'M';
	settings_my_profile_details.GENDER_FEMALE = 'F';
	settings_my_profile_details.daysInMonth = function (month, year) {
		if (month == 4 || month == 6 || month == 9 || month == 11) {
			return 30;
		} else if (month == 2) {
			return (((year % 4 == 0) && ( (!(year % 100 == 0)) || (year % 400 == 0))) ? 29 : 28 );
		} else {
			return 31;
		}
	};
	settings_my_profile_details.onInputEvent = function (key) {
		var r = settings_my_profile_details;
		var pr = settingsMyProfile;

		if (r.lock) return;
		switch (key) {
		case 'up':
		case 'down':
			if (r.menu != null) {
				var menu = r.menu[key == 'down' ? 'next' : 'previous']();
				if (r.interfaceType === 'avatarSetting') {
					var avatarLink = menu.currentInfo().resourceLink;
					pr.dom.avatarImage.href = avatarLink;
					if (avatarLink) {
						pr.dom.avatarImage.show();
					} else {
						pr.dom.avatarImage.hide();
					}
					pr.userCurrentInfos.avatarId = menu.currentInfo().avatarId;
				}
			}
			break;

		case 'back':
		case 'left':
			am.pop();
			break;
		case 'ok':
			if (!r.menu)
				return;
			r.menu.showFocus();
			if (r.interfaceType == 'birthSetting') {
				var index = r.menu.currentIndex();
				var info = r.menu.currentInfo();

				if (index == 0) {
					am.push(agePopupMenu, tr('set_birth_year'), new Date().getFullYear() - 100,
						new Date().getFullYear(), info);
				} else if (index == 1) {
					am.push(agePopupMenu, tr('set_birth_month'), 1, 12, info);
				} else {
					var daysInMonth = r.daysInMonth(pr.inputFields.eq(1).text(),
						pr.inputFields.eq(0).text());
					am.push(agePopupMenu, tr('set_birth_day'), 1, daysInMonth, info);
				}
			} else if (r.interfaceType == 'genderSetting') {
				var el = pr.dom.settingsMPGenderInput;
				el.text(el.text() == tr('male') ? tr('female') : tr('male'));

				if (el.text() === tr('male')) {
					pr.userCurrentInfos.gender = r.GENDER_MALE;
				} else {
					pr.userCurrentInfos.gender = r.GENDER_FEMALE;
				}
			}
			break;
		case 'right':
			if (r.interfaceType == 'myPhone') {
				pr.userCurrentInfos['myPhone'] = '';
				pr.dom.settingsMPGeneralInput.text('');
			}
			break;
		default:
			if (isNaN(parseInt(key)))
				return;

			if (r.interfaceType == 'myPhone') {
				if (pr.userCurrentInfos['myPhone'] === null)
					pr.userCurrentInfos['myPhone'] = '';
				if (pr.userCurrentInfos['myPhone'].length > 20)
					return;
				pr.userCurrentInfos['myPhone'] += key.toLocaleString(languageCode);
				;
				pr.dom.settingsMPGeneralInput.text(pr.userCurrentInfos['myPhone']);
			}

		case 'keyboard':
			if (!r.menu && r.interfaceType != 'myPhone') {
				keyboard.enableSpecialChars(['.', '@']);
				am.push(
					keyboard,
					pr.userCurrentInfos[r.interfaceType],
					!isNaN(parseInt(key)) ? key : null
				);
			}
			break;
		}
	};
	settings_my_profile_details.destroy = function () {
		var pr = settingsMyProfile;

		pr.dom.settingsMPBirthInputs.hide();
		pr.dom.settingsMPGenderInput.hide();
		pr.dom.settingsMPGeneralHolder.hide();
		pr.dom.avatarImage.hide();
		misc.dom.navigationPop();
	};
	settings_my_profile_details.focus = function (caller, arg1, arg2, arg3) {
		var r = settings_my_profile_details;
		var pr = settingsMyProfile;

		if (caller == 'keyboard' && arg1 != undefined && arg1.length >= 0 && !r.menu) {
			pr.dom.settingsMPGeneralInput.text(arg1);
			pr.userCurrentInfos[r.interfaceType] = arg1;
		} else if (caller == 'agePopupMenu' ) {
			if (arg1 == 'ok' && arg3) {
				var index = r.menu.currentIndex();
				r.menu.currentInfo(arg3);
				pr.inputFields.eq(index).text(arg3.toLocaleString(languageCode));
				settingsMyProfile.checkValidDate();
			}
		}
	};
	settingsMyProfile.checkValidDate = function () {
		var r = settings_my_profile_details;
		var pr = settingsMyProfile;


		var daysInMonth = r.daysInMonth(pr.inputFields.eq(1).text().toArabicNumerals(
			languageCode),
			pr.inputFields.eq(0).text().toArabicNumerals(languageCode))
			;
		if (parseInt(pr.inputFields.eq(2).text().toArabicNumerals(
				languageCode), 10) > daysInMonth)
			pr.inputFields.eq(2).text(daysInMonth).toArabicNumerals(
				languageCode);

		var d = [parseInt(pr.inputFields.eq(0).text().toArabicNumerals(
			languageCode), 10),
			parseInt(pr.inputFields.eq(1).text().toArabicNumerals(
				languageCode), 10),
			parseInt(pr.inputFields.eq(2).text().toArabicNumerals(
				languageCode), 10)
		];


		pr.userCurrentInfos.birthDate = [
			parseInt(pr.inputFields.eq(0).text(), 10),
			parseInt(pr.inputFields.eq(1).text(), 10),
			parseInt(pr.inputFields.eq(2).text(), 10)
		];
	};
	settings_my_profile_details.init = function (caller, interfaceType) {
		var pr = settingsMyProfile;
		var actionBar = [
			['back', 'saveAndClose'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'changeValue']
		];
		var r = settings_my_profile_details;

		r.interfaceType = interfaceType;

		switch (interfaceType) {
		case 'avatarSetting':
			r.menu = pr.subMenus.avatarSetting;
			pr.dom.refreshAvatarList(BS.avatars.all);
			var avatarLink = r.menu.currentInfo().resourceLink;
			pr.dom.avatarImage.show();
			pr.dom.avatarImage.href = avatarLink;

			actionBar = [
				['back', 'saveAndClose'],
				['vertical', 'select'],
				['empty', null],
				['empty', null]
			];

			break;
		case 'birthSetting':
			r.menu = pr.subMenus.birthSetting;
			r.menu.show();
			pr.dom.settingsMPBirthInputs.show();

			break;
		case 'genderSetting':
			actionBar = [
				['back', 'saveAndClose'],
				['empty', null],
				['empty', null],
				['confirm', 'changeValue']
			];
			r.menu = pr.subMenus.genderSetting;
			r.menu.show();
			var genderText = settingsMyProfile.userCurrentInfos.gender
			== settings_my_profile_details.GENDER_MALE ? tr('male') : tr('female');
			pr.dom.settingsMPGenderInput.text(genderText);
			pr.dom.settingsMPGenderInput.show();

			break;
		default:
			actionBar = r.interfaceType == 'myPhone' ?
				[
					['back', 'saveAndClose'],
					['right', 'clearField'],
					['empty', null],
					['numbers', 'changeValue']
				] :
				[
					['back', 'saveAndClose'],
					['empty', null],
					['empty', null],
					['keyboard', 'changeValue']
				];

			r.menu = null;

			var infoText = pr.userCurrentInfos[interfaceType];

			pr.dom.settingsMPGeneralInput
				.text(infoText ? infoText.toLocaleString(languageCode) : '');
			pr.dom.settingsMPGeneralHolder.show();

			break;
		}

		pr.dom.settings_mp1_menuHolder[r.menu ? 'show' : 'hide']();

		misc.dom.navigationPush(tr(interfaceType));
		ssDom.actionBar(actionBar);
	};
	settings_my_profile_details.gatherSetValues = function (mode) {

		var pr = settingsMyProfile;

		if (pr.userCurrentInfos.gender != settings_my_profile_details.GENDER_MALE
			&& pr.userCurrentInfos.gender != settings_my_profile_details.GENDER_FEMALE) {
			pr.userCurrentInfos.gender = settings_my_profile_details.GENDER_FEMALE;
		}

		var birthYear = pr.userCurrentInfos.birthDate[0];
		var birthMonth = pr.userCurrentInfos.birthDate[1];
		var birthDay = pr.userCurrentInfos.birthDate[2];

		if (mode == 'basic') {
			return [
				birthYear + '/' + birthMonth + '/' + birthDay,
				pr.userCurrentInfos.gender,
				pr.userCurrentInfos.avatarId
			];

		} else if (mode == 'all') {
			return [
				pr.userCurrentInfos.email || '',
				pr.userCurrentInfos.nickname || '',
				pr.userCurrentInfos.myPhone || '',
				1,
				pr.userCurrentInfos.personalMessage || '',
				pr.userCurrentInfos.realName || '',
				pr.userCurrentInfos.avatarId,
				pr.userCurrentInfos.address || '',
				birthYear + '/' + birthMonth + '/' + birthDay,
				pr.userCurrentInfos.gender
			];
		}
	};

	settings_my_profile_details.getData = function () {
		var pr = settingsMyProfile;
		var data = {};
		var birthYear = pr.userCurrentInfos.birthDate[0];
		var birthMonth = pr.userCurrentInfos.birthDate[1];
		var birthDay = pr.userCurrentInfos.birthDate[2];

		data.email = pr.userCurrentInfos.email || '';
		data.nickname = pr.userCurrentInfos.nickname || '';
		data.phone_num = pr.userCurrentInfos.phoneNum || '';
		data.p_message = pr.userCurrentInfos.pMessage || '';
		data.name = pr.userCurrentInfos.name || BS.users.defaultUser.name;
		data.id_avatar = pr.userCurrentInfos.avatarId;
		data.address = pr.userCurrentInfos.address || '';
		data.birth_date = birthYear + '-' + birthMonth + '-' + birthDay;
		data.gender = pr.userCurrentInfos.gender;
		data.target_user_id = BS.portal.user.userId;

		return data;
	};
	var settings_add_user = new BS.App('settings_add_user', {
		helpId: 'settings_add_user',
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	settings_add_user.onInputEvent = function (keyPressedName) {
		var that = this;

		if (that.lock === true) {
			return;
		}

		switch (keyPressedName) {
		case 'blue':
			that.dom.clearAndShowInputFields();
			break;

		case 'up':
		case 'down':
			if (keyPressedName === 'down')
				that.subMenu.next();
			else
				that.subMenu.previous();
			break;

		case 'left':
		case 'back':
			var username = that.subMenu.info(0).value.decodeEntities();
			var pin = that.subMenu.info(1).value;
			var errorMessage = that.validatePin();
			if (errorMessage) {
				BS.logger.trace('SETTINGS: new user not added, reason: %s', errorMessage);
				ui.generalAlert(tr(errorMessage));
				am.pop('back');
				return;
			}

			ui.toggleLoader(true);
			that.lock = true;
			BS.users.add(username, pin).then(function (user) {
				var infoDialog = new BeeSmartMain.InfoDialog(
					'settings_profile_user_added_succ_win',
					{
						onBeforeExit: function (keyPressed) {
							if (keyPressed !== 'ok') {
								return;
							}

							setTimeout(function () {
								mm.getApp('settings_profile_user_added_succ_win').unregister();
								am.pop('ok');
							}, 400);
						},
						buttons: [
							['confirm', 'ok']
						],
						exitKeys: ['ok']
					}
				);
				BeeSmartMain.register(infoDialog);
				var dialogTitle = '%s %s'.sprintf(tr('userAdded'), tr('OK'));
				var dialogBody = BS.skinConfiguration.showDeviceAuthCode ?
					'%s %s'.sprintf(tr('userAuthPin'), user.authPin) : tr('userAdded');
				am.push(infoDialog, dialogTitle, dialogBody);
			}).catch(function (e) {
				var message;
				switch (e) {
				case 'no-entries-changed':
					message = tr('noEntriesHasBeenChanged');
					break;
				case 'user-exists':
					message = tr('userAlreadyExists');
					break;
				case 'name-too-long':
					message = '%s %s<tbreak />%s'.sprintf(tr('addUserName'),
						tr('IS_TOO_LONG'), tr('noEntriesHasBeenChanged'));
					break;
				case 'user-limit-reached':
					message = tr('userLimitReachedError');
					break;
				default:
					message = '%s<tbreak />%s'.sprintf(tr('UNKNOWN_ERROR'),
						tr('noEntriesHasBeenChanged'));
					break;
				}

				that.lock = false;
				ui.generalAlert(message);
				am.pop('back');
			}).finally(function () {
				ui.toggleLoader(false);
			});

			break;
		default:
			var index = that.subMenu.currentIndex();
			if (index > 0) {
				if (!isNaN(keyPressedName)) {
					if (that.subMenu.info(index).value.length < maxUserPinLength) {
						that.subMenu.info(index).value += keyPressedName;
						index === 1 ?
							that.pin.push(that.subMenu.info(index).value.length) :
							that.pinConfirmation.push(that.subMenu.info(index).value.length);
					}
				}
			} else {
				am.push(keyboard, that.dom.addUserUsername.text(), keyPressedName);
			}

			break;
		}
	};
	settings_add_user.validatePin = function () {
		var that = this;
		var pin = that.subMenu.info(1).value;
		var pinConfirmation = that.subMenu.info(2).value;
		if (pin !== pinConfirmation) {
			return 'pinsDoNotMatch';
		}
		if (pin.length < minUserPinLength) {
			return 'pinTooShort';
		}

		return null;
	};
	settings_add_user.validateUsername = function (username) {
		var message = null;

		BS.users.all.forEach(function (user) {
			if (user.userName.toLowerCase() === username.toLowerCase()) {
				message = 'userAlreadyExists';
			}
		});

		return message;
	};
	settings_add_user.init = function () {
		var that = this;

		that.dom = that.dom || new ModuleDom(
				[
					'settingsAddUser', 'settingsNewUserChangePinSelector',
					'settingsAddUserMenuItem', 'addUserPin', 'addUserPinConfirmation',
					'addUserUsername'
				],
				{
					clearAndShowInputFields: function () {
						this.addUserUsername.text('').show();
						this.addUserPin.show();
						this.addUserPinConfirmation.show();
						that.pin.clear();
						that.pinConfirmation.clear();
						that.subMenu.info(0).value = '';
						that.subMenu.info(1).value = '';
						that.subMenu.info(2).value = '';
						this.settingsAddUser.show();
					},
					setUsername: function (username) {
						this.addUserUsername.svg(username);
					}
				}
			);
		ssDom.showSubModule(that.appID, 'addUserTitle');
		ssDom.actionBar([
			['back', 'saveAndClose'],
			['keyboard', 'edit'],
			['blue', 'clearField'],
			['empty', null]
		]);
		that.createMenu();
		that.dom.clearAndShowInputFields();
	};
	settings_add_user.createMenu = function () {
		var that = this;
		var items = [];
		var infos = [];

		if (that.menu) {
			that.menu.destroy();
		}

		that.menu = new ui.Menu(that.dom.settingsNewUserChangePinSelector[0]);
		that.subMenu = that.menu.newMenuItems();
		that.pin = new ui.PasswordField(
			that.dom.addUserPin, {'maxFieldEntries': maxUserPinLength}
		);
		that.pinConfirmation = new ui.PasswordField(
			that.dom.addUserPinConfirmation, {'maxFieldEntries': maxUserPinLength}
		);
		items.push(ui.template(
			that.dom.settingsAddUserMenuItem.text(),
			{'itemName': tr('addUserName')}
		));
		infos.push({'id': tr('addUserName'), 'value': ''});
		items.push(ui.template(
			that.dom.settingsAddUserMenuItem.text(),
			{'itemName': tr('enter_new_user_pin')}
		));
		infos.push({'id': 'newPin1', 'value': ''});
		items.push(ui.template(
			that.dom.settingsAddUserMenuItem.text(),
			{'itemName': tr('enter_new_user_pin_again')}
		));
		infos.push({'id': 'newPin2', 'value': ''});
		that.subMenu.setItems(items, infos).show();
		that.subMenu.jump(0);
	};
	settings_add_user.focus = function (caller, username) {
		var that = this;
		that.lock = false;
		username = username || '';

		switch (caller) {
		case 'keyboard':
			that.dom.setUsername(username);
			that.subMenu.info(0).value = username;
			break;
		}
	};
	settings_add_user.destroy = function () {
		this.dom.settingsAddUser.hide();
	};

	var settingsProfileUser = new BS.App('settingsProfileUser', {
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	settingsProfileUser.ignoreKeys = false;
	settingsProfileUser.onInputEvent = function (keyPressedName) {
		var that = this;
		if (that.ignoreKeys === true)
			return;
		switch (keyPressedName) {
		case 'left':
		case 'back':
			am.pop(that.appID);

			break;
		case 'up':
			this.subMenu.previous();

			break;
		case 'down':
			this.subMenu.next();

			break;
		case 'right':
		case 'ok':
			this.subMenu.showFocus().then(function () {
				if (this.subMenu.currentInfo() === 'addUser') {
					am.push(mm.getApp('settings_add_user'));
				} else {
					mm.getApp('settings_menu_dialog').displayPopupMenu(
						that.subMenu.currentInfo().userId);
				}
			}.bind(this));
			break;
		}
	};
	settingsProfileUser.init = function () {
		var that = settingsProfileUser;
		that.dom = that.dom || new ModuleDom(['settingsUserProfileSelector']);

		that.ignoreKeys = false;
		ssDom.showSubModule(that.appID, 'profileUserTitle');
		ssDom.actionBar([
			['back', 'back'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'more']
		]);
		settingsProfileUser.refreshMenu();
	};
	settingsProfileUser.refreshMenu = function () {
		var that = settingsProfileUser;

		if (that.menu) {
			that.menu.destroy();
		}

		that.menu = new ui.Menu(that.dom.settingsUserProfileSelector[0]);

		var items = [];
		var infos = [];
		if (BS.portal.user.isDefault) {
			that.subMenu = that.menu.newMenuItems();
			items.push({'name': tr('add_new_user'), 'imageLink': '#buddy'});
			infos.push('addUser');
			BS.users.all.forEach(function (user) {
				items.push({
					'name': user.name.toString(),
					'imageLink': ''
				});
				infos.push({
					'userId': user.userId,
					'userName': user.name.toString()
				});
			});
			items = ui.template('settingsProfileUserMenuTemplate',
				{'text': items, 'selector': that.dom.settingsUserProfileSelector});
			that.subMenu.setItems(items, infos).show();
		} else {
			that.subMenu = that.menu.newMenuItems();
			items = [{'name': BS.portal.user.userName, 'imageLink': ''}];
			infos = [{'userId': BS.portal.user.userId}];

			items = ui.template('settingsProfileUserMenuTemplate',
				{'text': items, 'selector': that.dom.settingsUserProfileSelector});
			that.subMenu.setItems(items, infos).show();
		}
	};
	settingsProfileUser.destroy = function () {
		settingsProfileUser.menu.destroy();
		settingsProfileUser.menu = false;
	};
	settingsProfileUser.popupMenuDialogAction = function (action) {
		switch (action) {
		case 'deleteUser':
			var userId = menuListDialog.currentUserId;

			if (userId.length === 0) {
				break;
			}

			var infoDialog = new BeeSmartMain.InfoDialog('settings_profile_user_pop_win', {
				onBeforeExit: function (keyPressed) {
					function unregisterDialog() {
						setTimeout(function () {
							mm.getApp('settings_profile_user_pop_win').unregister();
						}, 400);
					}

					if (keyPressed === 'ok') {
						ui.toggleLoader(true);

						BS.users.removeById(userId).then(function () {
							settingsProfileUser.refreshMenu();
							ui.generalAlert('%s %s'.sprintf(tr('deleteUserTitle'), tr('ok')));
						}).catch(function () {
							ui.generalAlert(tr('usrProfile_failed'));
						}).finally(function () {
							ui.toggleLoader(false);
						});

						unregisterDialog();
					} else if (keyPressed === 'left' || keyPressed === 'back') {
						unregisterDialog();
					}
				}
			});
			BeeSmartMain.register(infoDialog);
			am.push(infoDialog, tr('deleteUserTitle') + '?', tr('deleteUserConfirm'));

			break;
		case 'editUser':
			am.push(mm.getApp('settingsRenameUser'));
			break;
		}
	};
	settingsProfileUser.focus = function (caller, arg, arg2, arg3, arg4) {
		if (caller == 'settings_menu_dialog' && arg == 'ok') {
			this.popupMenuDialogAction(arg3, arg4);
			return;
		}

		settingsProfileUser.ignoreKeys = false;
		ssDom.actionBar([
			['back', 'back'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'more']
		]);

		if ((caller == 'settingsRenameUser' && arg === 'ok')
			|| (caller == 'settings_add_user' && arg === 'ok')) {
			settingsProfileUser.refreshMenu();
		}

		misc.dom.navigationReset();
		ssDom.showSubModule(settingsProfileUser.appID, 'profileUserTitle');
	};

	var SettingsChannelList = function () {
		BS.App.call(
			this,
			'settingsChannelList',
			{
				helpId: 'settingsChannelList',
				inputMapper: BS.App.portalDirectionKeyMapper
			});
	};
	SettingsChannelList.prototype = {
		init: function (callerAppId, args) {
			var that = this;
			if (args.length === 0) {
				throw 'not-enough-arguments';
			}
			that.controller = args[0];
			that.controller.setChannelList(that);

			that.dom = that.dom || new ModuleDom(
					[
						'settingsChangeChannelsSelector', 'templateChannelSwappedHolder',
						'templateChannelRefreshMenu'
					],
					{
						selectFirstSwitchable: function () {
							that.subMenu.jump(0, true);
						},
						createChannelItem: function (channel) {
							var number = channel.number.toLocaleString(languageCode);
							var name = channel.name;
							return this.createItem(number, name);
						},
						createItem: function (number, name, fixedPosition) {
							fixedPosition = fixedPosition || false;
							var swd = that.dom.settingsChangeChannelsSelector.first().next().first()[0];
							return ui.template('templateChannelRefreshMenu', {
								'chName': name.encodeEntities(),
								'chNumber': number,
								'setWidth': function (offset) {
									return typeof swd === 'undefined' ?
										200 :
									swd.getBBox().width - offset;
								},
								'fixedPosition': fixedPosition
							});
						}
					},
					function () {
						that.menu = new ui.Menu(this.settingsChangeChannelsSelector[0]);
						that.subMenu = that.menu.newMenuItems();
					}
				);
			that.controller.getChannels().then(function (videoChannels) {
				var totalVideoChannels = videoChannels.length;
				var appTitle = that.controller.appTitle;
				var items = [];
				var chObj;
				that.infos = [];

				ssDom.showSubModule(that.appID, appTitle);

				for (var i = 0, len = totalVideoChannels; i < len; i++) {
					chObj = videoChannels[i];
					items.push(that.dom.createChannelItem(chObj));
					that.infos.push(chObj);
				}

				that.subMenu.setItems(items, that.infos).show();

				that.dom.selectFirstSwitchable();
				that.controller.init(callerAppId, args);

				if (that.controller.appTitle === 'sett_channels_sortMsg')
					var canReset = BS.skinConfiguration.canResetChannelNumbers === true;
					ssDom.actionBar([
						['back', 'saveAndClose'],
						['vertical', 'select'],
						canReset ? ['red', 'reset_field'] : ['empty', null],
						['confirm', 'selectUserBtn']
					]);
			}).done();
		},
		onInputEvent: function (key) {
			var that = this;
			if (that.lock == true)
				return;
			switch (key) {
			case 'up':
			case 'down':
				if (typeof that.subMenu.currentInfo() === 'undefined')
					break;

				key == 'up' ? that.subMenu.previous() : that.subMenu.next();

				break;
			case 'ok':
				if (typeof that.subMenu.currentInfo() === 'undefined')
					break;
				break;
			}

			that.controller.onInputEvent(key);
		},
		destroy: function (caller, args) {
			this.controller.destroy(caller, args);
			this.lock = false;
		},
		focus: function (caller, args) {
			this.controller.focus(caller, args);
		},
		blur: function (caller, args) {
			this.controller.blur(caller, args);
		}
	};
	Object.extend(SettingsChannelList, BS.App);
	var settingsChannelList = new SettingsChannelList();

	var ListController = function () {
		var that = this;
		this.setChannelList = function (channelList) {
			that.channelList = channelList;
		};
	};
	ListController.prototype = {
		init: BS.F,
		onInputEvent: BS.F,
		destroy: BS.F,
		focus: BS.F,
		blur: BS.F,
		getChannels: function () {
			return tvCatRepo.getAllCategory().post('getChannels').then(function (channels) {
				return channels.filter(ListController.prototype.channelFilter);
			});
		},
		channelFilter: function (ch) {
			return !(ch instanceof BS.TvModel.DvbChannel);
		}
	};

	var FavouritePositionController = function () {
		ListController.call(this);
	};
	FavouritePositionController.prototype = {
		constants: {
			SWITCH: 'switch',
			NORMAL: 'normal'
		},
		appTitle: 'changeFavChList',
		state: 'normal',
		selectedChannel: null,
		selectedIndex: null,
		getChannels: function () {
			return tvCatRepo.getFavoriteCategory().post('getChannels').then(function (channels) {
				return channels.filter(ListController.prototype.channelFilter);
			});
		},
		onInputEvent: function (key) {
			var that = this;
			switch (key) {
			case 'left':
			case 'back':
				that.updateChannelPositions();
				break;
			case 'up':
			case 'down':
				if (that.state === that.constants.SWITCH)
					that.dom.updateSwapChannelLocation();
				break;

			case 'right':
				if (that.state === that.constants.SWITCH) {
					that.dom.toggleSwitchMode(that.selectedIndex, null);
					that.channelList.subMenu.show();
				}
				break;
			case 'ok':
				if (that.state === that.constants.NORMAL) {
					that.channelList.subMenu.showFocus().then(function () {
						that.dom.toggleSwitchMode(
							that.channelList.subMenu.currentIndex(),
							that.channelList.subMenu.currentInfo()
						);
					});
				} else if (that.state === that.constants.SWITCH) {
					that.channelList.subMenu.showFocus().then(function () {
						that.dom.toggleSwitchMode(that.channelList.subMenu.currentIndex(), null);
					});
				}
				break;
			}
		},
		resetSelectedStates: function () {
			var that = this;
			that.selectedChannel = null;
			that.selectedIndex = null;
			that.state = that.constants.NORMAL;
			ssDom.actionBar([
				['back', 'saveAndClose'],
				['vertical', 'select'],
				['empty', null],
				['confirm', 'selectChBtn']
			]);
		},
		updateChannelPositions: function () {
			var that = this;
			var movedChannels = [];
			var newOrder = [];
			var pos;
			var cl = that.channelList;
			var posList = [];
			var posListString;

			for (var i = 0, len = that.infos.length; i < len; i++) {
				pos = i;
				posList.push(that.infos[i].id + '-' + pos);
				newOrder.push(that.infos[i].id);
				if (that.infos[i].position != pos)
					movedChannels.push({channel: that.infos[i], newPosition: pos});
			}

			posListString = posList.join(',');

			if (posListString.length > 0 && that.prevPosList != posListString) {
				that.prevPosList = posListString;
				ui.toggleLoader(true);
				cl.lock = true;

				var userId = BS.portal.user.userId;
				var regionId = BS.portal.user.regionId;
				tvCatRepo.getFavoriteCategory().then(function (favChannelsCat) {
					BS.request.Post(
						'/restapi/rest/%d/%d/profiles/channels/categories/%d'
							.sprintf(regionId, userId, favChannelsCat.id),
						{data: {'list': newOrder.join(',')}}
					).then(function () {
						tvCatRepo.dumpFavourites();
						ui.generalAlert(tr('favouriteChannelOrdersUpdated'));
					}, function (response) {
						BS.logger.debug(
							'There was error when trying to save favourites channel order' +
							response.toString());
					}).finally(function () {
						ui.toggleLoader(false);
						that.lock = false;
						am.pop(that.appID);
					});
				});

			} else
				am.pop(that.appID);
		},
		init: function () {
			var that = this;
			var cl = that.channelList;

			that.dom = that.dom || {};
			that.infos = that.channelList.infos;
			that.prevPosList = '';

			that.dom.updateSwapChannelLocation = that.dom.updateSwapChannelLocation || function () {
					var currIndex = cl.subMenu.currentIndex();
					var swapIndex = that.selectedIndex;
					var childs = cl.dom.settingsChangeChannelsSelector.children();
					var swapChannelG = childs[childs.length - 1];
					if (swapIndex === null) return;
					try {
						ssDom.settingsChannelList.trigger(
							'beginEvent', {
								'currIndex': currIndex,
								'swapIndex': swapIndex,
								'swapChannelG': swapChannelG
							}
						);
					} catch (e) {
					}
				};

			that.dom.toggleSwitchMode = that.dom.toggleSwitchMode || function (index, chan) {
					if (chan) {
						var c = ui.template(
							cl.dom.templateChannelSwappedHolder.text(),
							{
								'direction': 'normal',
								'chNumber': chan.number.toLocaleString(languageCode),
								'channel': chan.name.replace('&', '&amp;', 'g')
							}
						);
						cl.dom.settingsChangeChannelsSelector.append(c);
						that.state = that.constants.SWITCH;
						ssDom.actionBar([
							['back', 'saveChName'],
							['vertical', 'select'],
							['right', 'cancel'],
							['confirm', 'confirm']
						]);
						that.selectedIndex = index;
						that.selectedChannel = chan;
					} else {
						var ch;
						var items = [];
						var newInfos = [];
						var infosLength = that.infos.length;

						cl.dom.settingsChangeChannelsSelector.last().remove();
						that.infos.splice(that.selectedIndex, 1);
						that.infos.splice(index, 0, that.selectedChannel);

						that.state = that.constants.NORMAL;

						for (var i = 0; i < infosLength; i++) {
							ch = that.infos[i];
							newInfos.push(ch);
							items.push(cl.dom.createChannelItem(ch));
						}

						that.infos = newInfos;
						cl.subMenu.setItems(items, that.infos).jump(index).show();

						that.resetSelectedStates();
					}
				};

			that.getChannels().then(function (videoChannels) {
				that.resetSelectedStates();

				if (videoChannels.length === 0) {
					ui.generalAlert(tr('favorites_how_to'));
					cl.lock = false;
				}

				var channelPosArray = videoChannels.map(function (chObj, i) {
					return chObj.id + '-' + i;
				});

				that.prevPosList = channelPosArray.join(',');
			});
		},
		destroy: function () {
			var that = this;
			var cl = that.channelList;
			if (that.state === that.constants.SWITCH) {
				cl.subMenu.select(function () {
					that.dom.toggleSwitchMode(cl.subMenu.currentIndex(), null);
				});
			}
		}
	};
	Object.extend(FavouritePositionController, ListController);
	var favouritePositionController = new FavouritePositionController();

	var ChannelRenamingController = function () {
		ListController.call(this);
	};

	ChannelRenamingController.prototype = {
		constants: {
			NORMAL: 'normal',
			EDIT: 'edit',
			RESET: 'reset'
		},
		appTitle: 'sett_channels_editMsg',
		state: 'normal',
		newChannelName: '',
		selectedIndex: null,
		onInputEvent: function (key) {
			var that = this;
			var ch;

			switch (key) {
			case 'up':
			case 'down':
				ch = that.channelList.subMenu.currentInfo();
				that.refreshActionBar(ch);
				break;
			case 'left':
			case 'back':
				that.exitChannelNames();
				break;
			case 'ok':
			case 'keyboard':
				that.channelList.subMenu.showFocus().then(function () {
					that.showKeyboard();
				});

				break;
			case 'red':
				ch = that.channelList.subMenu.currentInfo();
				if (ch.name !== ch.originalName) {
					that.selectedIndex = that.channelList.subMenu.currentIndex();
					that.updateChannelName(that.channelList.subMenu.currentInfo().originalName);
				}
				break;
			default:
				if (!isNaN(parseInt(key))) {
					that.showKeyboard();
				}
				break;
			}
		},
		showKeyboard: function () {
			var that = this;
			that.selectedIndex = that.channelList.subMenu.currentIndex();
			if (that.state == that.constants.NORMAL) {
				that.state = that.constants.EDIT;
				am.push(keyboard, that.channelList.subMenu.currentInfo().name);
			}
		},
		resetSelectedStates: function (dontRefreshActionBar) {
			var that = this;
			that.selectedIndex = null;
			if (dontRefreshActionBar !== true) {
				that.refreshActionBar();
			}
			that.state = that.constants.NORMAL;
		},
		refreshActionBar: function (ch) {
			var that = this;
			ch = ch || that.channelList.subMenu.currentInfo();
			if (
			(ch.name !== ch.originalName || that.state === that.constants.EDIT) &&
			that.state !== that.constants.RESET
			)
				ssDom.actionBar([
					['back', 'saveAndClose'],
					['vertical', 'select'],
					['red', 'reset_field'],
					['keyboard', 'editChName']
				]);
			else
				ssDom.actionBar([
					['back', 'saveAndClose'],
					['vertical', 'select'],
					['empty', ''],
					['keyboard', 'editChName']
				]);
		},
		exitChannelNames: function () {
			var that = this;
			that.resetSelectedStates();
			am.pop();
		},
		init: function () {
			this.infos = this.channelList.infos;
			this.resetSelectedStates();
		},
		focus: function (caller, word) {
			var that = this;
			switch (caller) {
			case 'ttx':
			case 'keyboard':
				if (word && word != that.channelList.subMenu.currentInfo().name) {
					that.updateChannelName(word);
				} else {
					that.resetSelectedStates(true);
				}
				break;
			}
		},
		updateChannelName: function (newChannelName) {
			var that = this;
			var cl = that.channelList;
			var changedCh = cl.subMenu.currentInfo();
			var items = [];
			var infosLength = that.infos.length;
			var currentIndex = cl.subMenu.currentIndex();
			var info;

			if (changedCh.originalName === newChannelName) {
				that.state = that.constants.RESET;
			}

			ui.toggleLoader(true);
			BS.request.Post('/restapi/rest/%d/%d/profiles/channels/%d/title'
				.sprintf(BS.portal.user.regionId, BS.portal.user.userId, changedCh.id), {
				data: {'label': newChannelName}
			}).then(function () {
				for (var i = 0; i < infosLength; i++) {
					info = that.infos[i];
					if (info.id === changedCh.id) {
						info.custName = newChannelName;
					}
					items.push(cl.dom.createItem(info.number, info.name));
				}
				cl.subMenu.setItems(items, that.infos).jump(currentIndex).show();

				BS.evMgr.dispatch(new ChChangeEv(
					'channel-name',
					{
						channel: changedCh,
						newName: null,
						newCustomName: newChannelName
					}
				));
				ui.generalAlert(tr('channelNameUpdated'));
			}).catch(function () {
				ui.generalAlert(tr('descriptionChanged') + ' ' + tr('fail'));
			}).finally(function () {
				ui.toggleLoader(false);
				that.resetSelectedStates();
			});
		}
	};

	Object.extend(ChannelRenamingController, ListController);
	var channelRenamingController = new ChannelRenamingController();

	var ChannelRenumberingController = function () {
		ListController.call(this);
	};

	ChannelRenumberingController.prototype = {
		appTitle: 'sett_channels_sortMsg',
		selectedIndex: null,
		selectedItem: null,
		channelNumbersMap: {},
		isChanged: false,
		hiddenChannels: [],
		onInputEvent: function (key) {
			var that = this;
			switch (key) {
			case 'left':
			case 'back':
				that.updateChannelNumbers();
				break;
			case 'ok':
				that.channelList.subMenu.showFocus().then(function () {
					that.selectedIndex = that.channelList.subMenu.currentIndex();
					that.selectedItem = that.channelList.subMenu.currentInfo();
					channelNumberDialog.setChannels(that.infos, that.channelNumbersMap);
					am.push(channelNumberDialog);
				});
				break;
			case 'red':
				that.resetChannelNumbers();
				break;
			}
		},
		willChannelNumbersStayInRange: function (newIndex, newNumber) {
			var lastIndex = this.infos.length - 1;
			var maxChannelNumber = BS.skinConfiguration.maxChannelDigits === 4 ? 9999 : 999;
			if (this.selectedIndex > newIndex) lastIndex--;
			return this.channelNumbersMap[this.infos[lastIndex].id] === maxChannelNumber &&
				Math.abs(newIndex - lastIndex) === Math.abs(newNumber
				- this.channelNumbersMap[this.infos[lastIndex].id]);
		},
		init: function () {
			var that = this;
			var cl = that.channelList;
			var info;
			that.setHiddenChannels();
			that.infos = cl.infos;
			that.dom = that.dom || {};
			that.dom.processChannelRenumber = that.dom.processChannelRenumber
				|| function (newNumber) {
					var i;
					var infosLength = that.infos.length;
					var items = [];
					var newIndex;

					for (newIndex = 0; newIndex < infosLength; newIndex++) {
						if (that.channelNumbersMap[that.infos[newIndex].id] >= newNumber)
							break;
					}

					if (that.willChannelNumbersStayInRange(newIndex, newNumber)) {
						ui.generalAlert(tr('ChannelRenumberActionNotAllowed'), 7000);
						that.resetSelectedStates();
						return;
					}

					if (that.selectedIndex < newIndex) newIndex--;
					newIndex = newIndex >= infosLength ? newIndex - 1 : newIndex;

					that.infos.splice(that.selectedIndex, 1);
					that.infos.splice(newIndex, 0, that.selectedItem);
					that.channelNumbersMap[that.selectedItem.id] = newNumber;

					for (i = newIndex + 1; i < infosLength; i++) {
						if (that.channelNumbersMap[that.infos[i].id] === newNumber) {
							that.channelNumbersMap[that.infos[i].id] = ++newNumber;
						} else break;
					}
					for (i = 0; i < infosLength; i++) {
						var info = that.infos[i];
						items.push(cl.dom.createItem(that.channelNumbersMap[info.id].toLocaleString(
							languageCode), info.name));
					}
					cl.subMenu.setItems(items, that.infos).jump(newIndex).show();
					that.isChanged = true;
					that.resetSelectedStates();
				};

			for (var i = 0; (info = that.infos[i]); i++) {
				that.channelNumbersMap[info.id] = info.number;
			}
			this.resetSelectedStates();
		},
		focus: function (caller, word) {
			var that = this;
			switch (caller) {
			case 'channelNumberDialog':
				if (!word) return;
				word = parseInt(word);
				if (word === that.channelNumbersMap[that.selectedItem]) return;
				that.dom.processChannelRenumber(word);
				break;
			case 'settings_reset_channel_order_dialog':
				mm.getApp(caller).unregister();
				break;
			}
		},
		setHiddenChannels: function () {
			this.hiddenChannels = [];
			var originalChannels = tvLib.getChannels(true);
			var channels = tvLib.getChannels();
			this.hiddenChannels = originalChannels.filter(function (ch) {
				return channels.indexOf(ch) === -1;
			});
		},
		resetChannelNumbers: function () {
			if (BS.skinConfiguration.canResetChannelNumbers !== true) {
				BS.logger.trace(
					'User cannot reset channel numbers as "canResetChannelNumbers" is set to: %s',
					BS.skinConfiguration.canResetChannelNumbers
				);
				return;
			}
			var that = this;
			var infoDialog = new BeeSmartMain.InfoDialog(
				'settings_reset_channel_order_dialog',
				{
					onBeforeExit: function (key) {
						if (key === 'ok') {
							var newChannelNumbers = [];
							var channels = that.infos.concat(that.hiddenChannels);
							var channel;

							ui.toggleLoader(true);
							BS.request.Delete('/restapi/rest/%d/%d/profiles/channels/order'
								.sprintf(BS.portal.user.regionId, BS.portal.user.userId))
							.then(function () {
								for (var i = 0, j = channels.length; i < j; i++){
									channel = channels[i];
									if (channel.number !== channel.originalNumber)
										newChannelNumbers.push({
											channel: channel,
											newNumber: channel.originalNumber
										});
								}
								BS.evMgr.dispatch(new ChChangeEv('channel-renumber',
											newChannelNumbers));
								ui.generalAlert(tr('channelOrderResetOk'));
							}).catch(function (e) {
								ui.generalAlert(tr('channelOrderResetFail'));
								BS.logger.debug('SETTINGS: Channel order reset failed: ' +
									e.message);
							}).finally(function () {
								am.pop();
								ui.toggleLoader(false);
							});
						}
					}
				}
			);
			BeeSmartMain.register(infoDialog);
			am.push(infoDialog, tr('resetChannelOrder'), tr('confirmChannelOrderReset'));
		},
		fillEmptySpacesWithHiddenChannels: function (newChannelNumbers) {
			var that = this;
			newChannelNumbers = newChannelNumbers.sort(function (a, b) {
				return a.newNumber - b.newNumber;
			});

			var takenNumbers = newChannelNumbers.map(function (dl) {
				return dl.newNumber;
			});

			var currentNumber = 0;
			var currentIndex = 0;
			while (that.hiddenChannels.length) {
				if (
					typeof takenNumbers[currentIndex] === 'undefined' ||
					takenNumbers[currentIndex] > currentNumber
				) {
					var ch = that.hiddenChannels.shift();
					newChannelNumbers.push({channel: ch, newNumber: currentNumber});
				} else {
					currentIndex++;
				}
				currentNumber++;
			}

			return newChannelNumbers.sort(function (a, b) {
				return a.newNumber - b.newNumber;
			});
		},
		updateChannelNumbers: function () {
			var that = this;
			var channel;

			if (that.isChanged === false) {
				am.pop();
				return;
			}

			ui.toggleLoader(true);

			var newChannelNumbers = [];

			for (var i = 0; (channel = that.infos[i]); i++) {
				newChannelNumbers.push({
					channel: channel,
					newNumber: that.channelNumbersMap[channel.id]
				});
			}

			if (that.hiddenChannels.length) {
				newChannelNumbers = that.fillEmptySpacesWithHiddenChannels(newChannelNumbers);
			}

			var dataList = newChannelNumbers.map(function (cn) {
				return {number: cn.newNumber, channelId: cn.channel.id};
			});

			BS.request.Post('/restapi/rest/%d/%d/profiles/channels/numbers'
				.sprintf(BS.portal.user.regionId, BS.portal.user.userId),
				{
					data: {'json': JSON.stringify(dataList)}
				}).then(function (response) {
				var channel;

					if (response.success) {
						BS.evMgr.dispatch(new ChChangeEv('channel-renumber', newChannelNumbers));
						that.isChanged = false;
						ui.generalAlert(tr('channelOrdersUpdated'));
					} else {
						ui.generalAlert(tr('ChannelOrdersUpdatedFail'));
					}
				}, function () {
					ui.generalAlert(tr('ChannelOrdersUpdatedFail'));
				}).finally(function () {
					ui.toggleLoader(false);
					that.resetSelectedStates();
					am.pop();
				});
		},
		resetSelectedStates: function () {
			var that = this;
			that.selectedIndex = null;
		}
	};

	Object.extend(ChannelRenumberingController, ListController);
	var channelRenumberingController = new ChannelRenumberingController();

	function ChannelNumberDialog() {
		BS.ui.Dialog.apply(this, arguments);
	}

	ChannelNumberDialog.prototype = {
		dom: {},
		isInitialized: false,
		newNumber: '',
		channels: [],
		clearInputFields: function () {
			this.dom.inputField.text('');
			this.newNumber = '';
		},
		setChannels: function (channelList, channelNumberMap) {
			channelNumberMap = channelNumberMap || BS.F;
			var clLength = channelList.length;
			var	channels = {};

			for (var i = 0; i < clLength; i++) {
				var number = channelNumberMap[channelList[i].id];
				channels[number] = channelList[i];
			}
			this.channels = channels;
		},
		init: function (callerAppId) {
			var that = this;
			BS.ui.Dialog.prototype.init.apply(that, arguments);

			if (that.isInitialized === false) {
				var cntSvg = $('#channelNumberDialog').remove().show();
				that.replaceContentWith(cntSvg);
				that.update({title: tr('NewChannelNumber')});
				that.dom.inputField = cntSvg.find('.newChannelNumberInput');
				that.dom.warningField = cntSvg.find('.newChannelNumberWarning');
				that.dom.showWarning = function (num) {
					var text = tr('WarningChannelAlreadyOccupied').replace(/%d/g, '%s')
						.sprintf(num, that.channels[num].name)
						.toLocaleString(languageCode);
					that.dom.warningField.text(text);
					that.dom.warningField.show();
				};
				that.dom.hideWarning = function () {
					that.dom.warningField.hide();
				};
			}

			that.isInitialized = true;
		},
		onInputEvent: function (key) {
			var that = this;
			if (that.lock)
				return;

			that.dom.hideWarning();

			switch (key) {
			case 'back':
				am.pop();
				break;
			case 'ok':
				am.pop(that.newNumber);
				break;
			default:
				if (!isNaN(parseInt(key)) || key === 'left') {
					that.processInput(key);
				}
				break;
			}
		},
		processInput: function (number) {
			var that = this;
			var curInput = that.newNumber;

			if (number === 'left') {
				curInput = curInput.substring(0, curInput.length - 1);
			} else {
				if (curInput.length === BS.skinConfiguration.maxChannelDigits) return;
				curInput += number;
				if (curInput === '00')
					curInput = '0';
				else if (curInput[0] === '0')
					curInput = number;
			}
			that.newNumber = curInput;
			that.dom.inputField.text(that.newNumber.toLocaleString(languageCode));

			if (that.isWarningNeeded(that.newNumber))
				that.dom.showWarning(that.newNumber);
		},
		isWarningNeeded: function (num) {
			return this.channels[num] ? true : false;
		}
	};
	Object.extend(ChannelNumberDialog, BS.ui.Dialog);

	var channelNumberDialog = new ChannelNumberDialog(
		'channelNumberDialog',
		{
			type: 'popup',
			listenTo: [],
			helpId: ''
		},
		{
			x: 390,
			y: 185,
			width: 600,
			height: 300,
			layer: '#dialogs_layer3',
			buttons: [
				['back', 'back'],
				['left', 'clear'],
				['confirm', 'ok']
			],
			exitKeys: ['back', 'ok'],
			onBeforeExit: function () {
				return true;
			}
		}
	);
	channelNumberDialog.destroy = function () {
		var that = this;
		that.clearInputFields();
		that.hide(function () {
			that.__proto__.destroy.call(this);
		});
	};

	var settingsPcUserSelect = new BS.App(
		'settingsPcUserSelect',
		{
			helpId: 'pcUserSelect',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	settingsPcUserSelect.menu = null;
	settingsPcUserSelect.subMenu = null;
	settingsPcUserSelect.onInputEvent = function (keyPressedName) {
		var r = settingsPcUserSelect;
		switch (keyPressedName) {
		case 'up':
		case 'down':
			r.subMenu[keyPressedName == 'up' ? 'previous' : 'next']();

			break;
		case 'right':
		case 'ok':
			var pushParams = [
				r.subMenu.currentInfo().userId,
				r.subMenu.currentInfo().userName
			];
			if (!settings_pc_services.initialize(pushParams))
				ui.generalAlert(tr('UNKNOWN_ERROR'));
			break;
		case 'back':
		case 'left':
			am.pop(r.appID);

			break;
		default:
			break;
		}
	};
	settingsPcUserSelect.generateMenuItems = function () {
		var r = settingsPcUserSelect;
		var macAddr = BS.device.getMAC();

		ssDom.showSubModule(r.appID, 'sett_parentalC');

		if (r.menu)
			r.menu.destroy();

		r.menu = new ui.Menu(r.dom.settings_pc_user_selectSelector[0]);

		var userGetter = function (res) {
			var items = [];
			var infos = [];
			settingsPcUserSelect.subMenu = settingsPcUserSelect.menu.newMenuItems();

			BS.users.all.forEach(function (user) {
				items.push(user.userName.toString().encodeEntities());
				infos.push(user);
			});

			var tempItems = ui.template('standardMenuTemplate',
				{'text': items, 'selector': r.dom.settings_pc_user_selectSelector});
			if (items.length > 0) {
				settingsPcUserSelect.subMenu.setItems(tempItems, infos).show();
			} else {
				am.pop();
				var infoDialog = new BeeSmartMain.InfoDialog(
					'noUsers_dialog',
					{
						buttons: [
							['confirm', 'ok']
						],
						exitKeys: ['back', 'left', 'ok']
					}
				);
				BeeSmartMain.register(infoDialog);
				am.push(infoDialog, tr('sett_users'), tr('userListEmpty'));
			}
		};
		userGetter();

		misc.dom.navigationPop();
		misc.dom.navigationPush(tr('sett_parentalC') + ' : ' + tr('selectUser'));
		r.dom.showMenu();
	};
	settingsPcUserSelect.init = function (args) {
		var that = settingsPcUserSelect;

		that.dom = that.dom || new ModuleDom(
				['settingsPcUserSelect', 'settings_pc_user_selectSelector',
					'settings_pc_servicesSelectorWiden', 'settings_pc_servicesSelectorShorten'
				],
				{
					showMenu: function () {
						this.settingsPcUserSelect.show();
						ssDom.actionBar([
							['back', 'back'],
							['vertical', 'select'],
							['empty', null],
							['confirm', 'selectUser']
						]);
					},
					hideMenu: function () {
						this.settingsPcUserSelect.hide();
						misc.dom.navigationPop();
					}
				}
			);

		this.generateMenuItems();
		this.dom.showMenu();
	};
	settingsPcUserSelect.destroy = function (args) {
		this.dom.hideMenu();
	};
	settingsPcUserSelect.focus = function (callerAppId, args) {

		if (callerAppId == 'noUsers_dialog')
			mm.getApp('noUsers_dialog').unregister();

		this.dom.settings_pc_servicesSelectorShorten.begin();
		this.dom.showMenu();

		var changesObj = settings_pc_services.getChanges();

		if (!changesObj)
			return;

		if (changesObj.changedChannelsObj && changesObj.changedChannelsObj.length)
			BS.request.Post('/restapi/rest/%d/%d/profiles/channels/hidden/%d'.sprintf(
				BS.portal.user.regionId, BS.portal.user.userId, settings_pc_services.userId), {
				accept: 'json',
				data: {
					'list': changesObj.hiddenChannels
				}
			}).complete(function (response) {
				if (!response.success) {
					ui.generalAlert(tr('noEntriesHasBeenChanged') + ' ' + tr('fail'));
				} else
					ui.generalAlert(tr('entriesChanged'));

				if (settings_pc_services.userId == BS.portal.user.userId) {
					BS.evMgr.dispatch(new ChChangeEv(
						'channel-parental-control', changesObj.changedChannelsObj
					));
				}
			});

		if (changesObj.rating !== false)
			BS.request.Put('/restapi/rest/%d/%d/profiles'.sprintf(BS.portal.user.regionId,
				BS.portal.user.userId), {
				accept: 'json',
				data: {
					'age_rating': changesObj.rating,
					'target_user_id': settings_pc_services.userId
				}
			}).complete(function (response) {
				if (!response.success)
					ui.generalAlert(tr('noEntriesHasBeenChanged') + ' ' + tr('fail'));
				else
					ui.generalAlert(tr('entriesChanged'));

				if (settings_pc_services.userId == BS.portal.user.userId) {
					BS.portal.user.setParentalRating(changesObj.rating);
				}

			});
	};
	var settings_pc_services = {
		userId: null,
		channels: null,
		currParentalRate: {newRating: 0, rating: 0},

		getChanges: function () {
			var chList = [];
			var chObjList = [];

			for (var i in settings_pc_services.channels) {
				var chan = settings_pc_services.channels[i];
				if (chan.parentalHidden)
					chList.push(chan.id);

				if (chan.changed)
					chObjList.push({
						channel: tvLib.getChannelById(chan.id),
						wasIgnored: chan.parentalHidden == 1
					});
			}

			if (
				chObjList.length > 0 ||
				(settings_pc_services.currParentalRate.newRating
				!= settings_pc_services.currParentalRate.rating)
			) {
				return {
					'hiddenChannels': chList.join(','),
					'changedChannelsObj': chObjList,
					'rating': settings_pc_services.currParentalRate.newRating
					!= settings_pc_services.currParentalRate.rating ? settings_pc_services.currParentalRate.newRating : false
				}
			}
			return false;
		},
		initialize: function (args) {
			var that = settings_pc_services;
			that.currParentalRate.rating = null;
			that.currParentalRate.newRating = null;

			if (!args || !args[0]) {
				return false;
			}

			that.userId = args[0];

			misc.dom.navigationPush(args[1].length > 27 ? args[1].substring(24, 0) + '...' :
				args[1]);
			settingsPcUserSelect.dom.settings_pc_servicesSelectorWiden.begin();
			if (sAppSelection.currentSubMenu.currentInfo().title == 'toggleParentalChannels') {
				am.push(pcChannelSelect, that.userId);
			} else {
				am.push(pcRatingSelect, that.userId);
			}

			return true;
		}
	};

	var pcChannelSelect = new BS.App(
		'pcChannelSelect',
		{
			helpId: 'pcChannelSelect',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	pcChannelSelect.menu = null;
	pcChannelSelect.subMenu = null;
	pcChannelSelect.onInputEvent = function (keyPressedName) {
		switch (keyPressedName) {
		case 'up':
		case 'down':
			if (pcChannelSelect.subMenu && pcChannelSelect.subMenu.size() > 0)
				pcChannelSelect.subMenu[keyPressedName == 'up' ? 'previous' : 'next']();

			break;
		case 'right':
		case 'ok':
			if (pcChannelSelect.subMenu && pcChannelSelect.subMenu.size() > 0) {
				var index = pcChannelSelect.subMenu.currentIndex();
				pcChannelSelect.subMenu.select(function () {
					pcChannelSelect.dom.toggleHidden(index);
				});
			}

			break;
		case 'back':
		case 'left':
			am.pop();

			break;
		default:
			break;
		}
	};
	pcChannelSelect.startup = function () {
	};
	pcChannelSelect.init = function (caller, userId) {
		pcChannelSelect.currentUserId = userId;

		BS.request.Get('/restapi/rest/%d/%d/profiles/channels/hidden/%d'.sprintf(
			BS.portal.user.regionId, BS.portal.user.userId, userId), {
			accept: 'json', data: {'channel_type': 'ALL'}
		}).complete(function (response) {
			pcChannelSelect.createChannelList(response.data.list);
			pcChannelSelect.dom.showMenu();
		});
	};
	pcChannelSelect.createChannelList = function (parentalHiddenChannelIds) {
		var that = pcChannelSelect;
		var items = [];
		var infos = [];

		that.dom = that.dom || new ModuleDom(
				['settingsPcChannels', 'settings_pc_channelsSelector'],
				{
					showMenu: function () {
						this.settingsPcChannels.show();
						ssDom.actionBar([
							['back', 'saveAndClose'],
							['vertical', 'selectChannel'],
							['empty', null],
							['confirm', 'PcUserToggleChan']
						]);
					},
					hideMenu: function () {
						this.settingsPcChannels.hide();
						misc.dom.navigationPop();
					},
					toggleHidden: function (index) {
						var sChannel = settings_pc_services.channels[index];
						sChannel.parentalHidden = sChannel.parentalHidden == 0 ? 1 : 0;
						var item = that.subMenu.itemElement(index);
						item.firstElementChild.nextElementSibling.setAttribute('xlink:href',
							sChannel.parentalHidden == 0 ? '#blank' : that.parentalHiddenHref);
						settings_pc_services.channels[index].changed = !settings_pc_services.channels[index].changed;
					}
				}
			);

		if (that.menu)
			that.menu.destroy();

		that.menu = new ui.Menu(that.dom.settings_pc_channelsSelector[0]);
		that.subMenu = that.menu.newMenuItems();
		settings_pc_services.channels = [];

		tvLib.getChannels().filter(function (ch) {
			return !(ch instanceof BS.TvModel.DvbChannel) && !(ch
				instanceof BeeSmartMain.MosaicChannel);
		}).forEach(function (chObj) {
			var chanObj = {
				id: chObj.id,
				parentalHidden: parentalHiddenChannelIds.indexOf(chObj.id) !== -1,
				changed: false
			};
			settings_pc_services.channels.push(chanObj);

			infos.push(chanObj);
			items.push(
				ui.template(
					'settingsPcChannelsTemplate',
					{
						'channel': chObj.name.encodeEntities(),
						'setImg': function (href) {
							if (typeof that.parentalHiddenHref === 'undefined')
								that.parentalHiddenHref = href;
							return chanObj.parentalHidden ? href : '#blank';
						}
					}
				)
			);
		});
		that.subMenu.setItems(items, infos).show();
	};
	pcChannelSelect.destroy = function (args) {
		this.dom.hideMenu();
	};
	pcChannelSelect.focus = function (args) {
		ssDom.actionBar([
			['back', 'saveAndClose'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'PcUserToggleChan']
		]);
	};


	var pcRatingSelect = new BS.App(
		'pcRatingSelect',
		{
			helpId: 'pcRatingSelect',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);

	pcRatingSelect.onInputEvent = function (keyPressedName) {
		switch (keyPressedName) {
		case 'left':
		case 'back':
			am.pop();
			break;

		case 'ok':
			var currentRate = parseInt(pcRatingSelect.dom.settings_pc_currRatingValue.text(), 10);
			if (isNaN(currentRate))
				currentRate = 0;
			am.push(ratingPopupMenu, tr('usersPcRating'), 0, 21, currentRate);
			break;
		}
	};
	pcRatingSelect.startup = function () {
	};
	pcRatingSelect.init = function () {
		var that = pcRatingSelect;

		that.dom = that.dom || new ModuleDom(
				['settingsPcRating', 'settings_pc_currRatingValue'],
				{
					showMenu: function () {
						this.settingsPcRating.show();
						this.settings_pc_currRatingValue.text(
							settings_pc_services.currParentalRate.newRating.toString().toLocaleString(
								languageCode));
						ssDom.actionBar([
							['back', 'saveAndClose'],
							['empty', null],
							['empty', null],
							['confirm', 'changeValue']
						]);
					},
					hideMenu: function () {
						this.settingsPcRating.hide();
						misc.dom.navigationPop();
					}
				}
			);
		BS.request.Get('/restapi/rest/%d/%d/profiles/%d'.sprintf(BS.portal.user.regionId,
			BS.portal.user.userId, settings_pc_services.userId), {
			accept: 'json'
		}).complete(function (response) {
			var d = response.data.list[0];
			settings_pc_services.currParentalRate.newRating = d.ageRating;
			settings_pc_services.currParentalRate.rating = d.ageRating;
			that.dom.showMenu();

		});

	};
	pcRatingSelect.destroy = function () {
		this.dom.hideMenu();
	};
	pcRatingSelect.focus = function (callingModule, arg1, arg2, arg3) {
		if (callingModule == 'ratingPopupMenu' && arg1 == 'ok' && typeof(arg3) != 'undefined') {
			pcRatingSelect.dom.settings_pc_currRatingValue.text(arg3);
			var newRate = parseInt(pcRatingSelect.dom.settings_pc_currRatingValue.text(), 10);
			settings_pc_services.currParentalRate.newRating = newRate;
		}
	};

	var settingsRenameUser = new BS.App(
		'settingsRenameUser',
		{
			helpId: 'settingsRenameUser',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	settingsRenameUser.onInputEvent = function (keyPressedName) {
		var that = this;
		switch (keyPressedName) {
		case 'left':
		case 'back':
			var username = settingsRenameUser.dom.renamedUser.text();

			if (username && username.length > 0 && username !== BS.portal.user.userName) {
				var data = {
					name: username,
					target_user_id: BS.portal.user.userId
				};
				that.lock = true;
				BS.users.update(data)
					.then(function () {
						am.pop('ok');
						ui.generalAlert(tr('renameUserSuccess'));
					}).catch(function (e) {
						var message;
						switch (e) {
						case 'user-exists':
							message = tr('userAlreadyExists');
							break;
						case 'name-too-long':
							message = '%s %s<tbreak />%s'.sprintf(tr('addUserName'),
								tr('IS_TOO_LONG'), tr('noEntriesHasBeenChanged'));
							break;
						default:
							message = '%s<tbreak />%s'.sprintf(tr('UNKNOWN_ERROR'),
								tr('noEntriesHasBeenChanged'));
							break;
						}
						that.lock = false;
						ui.generalAlert(message);
						am.pop();
					});
			} else {
				am.pop();
			}
			break;
		case 'ttx':
		case 'keyboard':
			am.push(keyboard, settingsRenameUser.dom.renamedUser.text());
			break;

		case 'down':
			settingsRenameUser.dom.renamedUser.text('');
			break;

		default:
			if (!isNaN(parseInt(keyPressedName, 10)))
				am.push(keyboard, settingsRenameUser.dom.renamedUser.text(), keyPressedName);
			break;
		}
	};
	settingsRenameUser.init = function () {
		var that = settingsRenameUser;

		that.dom = that.dom || new ModuleDom(
				['renamedUser', 'settingsRenameUser', 'sru_name'],
				{
					showMenu: function () {
						this.settingsRenameUser.show();
						this.sru_name.text(BS.portal.user.userName);
					},
					hideMenu: function () {
						this.settingsRenameUser.hide();
					}
				}
			);

		that.dom.showMenu();
		that.dom.renamedUser.text(BS.portal.user.userName);
		ssDom.showSubModule(that.appID, 'renameUserTitle');
		ssDom.actionBar([
			['back', 'saveAndClose'],
			['empty', null],
			['empty', null],
			['keyboard', 'edit']
		]);
	};
	settingsRenameUser.focus = function (caller, word) {
		settingsRenameUser.dom.showMenu();
		switch (caller) {
		case 'keyboard':
			if (word)
				settingsRenameUser.dom.renamedUser.text(word);
			break;
		}
	};
	settingsRenameUser.destroy = function () {
		settingsRenameUser.dom.renamedUser.text('');
	};
	settingsRenameUser.blur = function () {
		settingsRenameUser.dom.hideMenu();
	};
	settingsRenameUser.startup = function () {
	};

	var settingsUserDeviceInfo = new BS.App(
		'settingsUserDeviceInfo',
		{
			helpId: 'settingsUserDeviceInfo',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	settingsUserDeviceInfo.clearLocalStorageTS = null;
	settingsUserDeviceInfo.onInputEvent = function (keyPressedName) {
		switch (keyPressedName) {
		case 'left':
		case 'back':
			am.pop(settingsUserDeviceInfo.appID);
			break;
		case 'up':
			if (settingsUserDeviceInfo.panel)
				settingsUserDeviceInfo.panel.moveUp();
			break;
		case 'down':
			if (settingsUserDeviceInfo.panel)
				settingsUserDeviceInfo.panel.moveDown();
			break;
		case 'red':
			if (this.clearLocalStorageTS !== null && Date.now() - this.clearLocalStorageTS < 1e3) {
				localStorage.clear();
				bmisc.generalAlert('Local storage cleared');
				BS.logger.trace('\n## Local storage cleared');
			}
			this.clearLocalStorageTS = Date.now();
			break;
		}
	};
	settingsUserDeviceInfo.init = function () {
		var that = settingsUserDeviceInfo;

		that.dom = that.dom || new ModuleDom([
				'settingsUserDeviceInfoPanel', 'settingsUserDeviceInfoPanelSliderY',
				'settingsUDIcont',
				'settingsUDItpl', 'settingsUserDeviceInfoUpDownArrows'
			]);
		ui.toggleLoader(true);
		var device = BS.device;
		var sysConf = {
			'userName': BS.portal.user.userName,
			'subscriberUID': null,
			'midleWareVersion': BS.CLIENT_VERSION,
			'ipAdd': device.getIP(),
			'mac': device.getMAC(),
			'model': device.getModel(),
			'swVersion': device.getSwVer(),
			'firmWareVersion': device.getFirmware(),
			'GraphicalEngineVersion': device.clientEngineVersion,
			'infocast': device.getInfCast(),
			'messagingMode': (BS.msgMgr && BS.msgMgr.getMode()) || tr('unknown'),
			'pluginVersion': device.getPluginVersion() || tr('unknown'),
			'usedRecorder': ('recorder' in BS) ? BS.recorder.getName() : tr('unknown')
		};
		var userId = parseInt(BS.portal.user.userId);

		ssDom.showSubModule(this.appID, 'userDeviceInfo');
		ssDom.actionBar([
			['back', 'back'],
			['empty', null],
			['empty', null],
			['empty', null]
		]);

		if (that.panel) {
			that.panel.destroy();
			that.dom.settingsUDIcont.text('');
		}

		BS.request.Get(
			'/stb/legacy-gateway/PersonalizationService/getUserDeviceInfo',
			{accept: 'json', data: {arg0: userId}, preventEvent: true}
		).then(function (response) {
			var result = response.data.result;
			sysConf.subscriberUID = result.subscriberUID;
		}).finally(function () {
			var infoSvg = '';
			var j = 0;
			for (var i in sysConf) {
				infoSvg += ui.template(that.dom.settingsUDItpl.text(), {
					'name': tr(i),
					'value': sysConf[i] || '',
					'setPosition': function (offset) {
						return j * offset;
					}
				});
				j++;
			}
			that.dom.settingsUDIcont.text('').append($.parseSvg('<g>' + infoSvg + '</g>'));
			that.panel = new ui.ScrollingPanel(
				that.dom.settingsUserDeviceInfoPanel[0],
				null,
				that.dom.settingsUserDeviceInfoPanelSliderY[0],
				null,
				that.dom.settingsUserDeviceInfoUpDownArrows[0]
			);
			ui.toggleLoader(false);
		}).done();
	};
	settingsUserDeviceInfo.destroy = function () {
	};
	settingsUserDeviceInfo.startup = function () {
	};


	var settingsFavoriteChannels = new BS.App(
		'settingsFavoriteChannels',
		{
			helpId: 'settingsFavoriteChannels',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	settingsFavoriteChannels.onInputEvent = function (keyPressedName) {
		var that = settingsFavoriteChannels;
		if (that.lock == true)
			return;
		switch (keyPressedName) {
		case 'left':
		case 'back':
			that.update().then(function () {
				am.pop(that.appID);
			});
			break;
		case 'up':
		case 'down':
			keyPressedName == 'up' ? that.subMenu.previous() : that.subMenu.next();
			break;
		case 'ok':
		case 'right':
			var cIndex = that.subMenu.currentIndex();
			var objCh = that.subMenu.currentInfo();
			that.changedChs[objCh.id] = objCh.checked = !objCh.checked;
			that.dom.toggleFavourite(cIndex, !objCh.checked);
			that.subMenu.showFocus(function () {
			});

			break;
		}
	};
	settingsFavoriteChannels.update = function () {
		var that = this;
		var oldFavChList = that.oldFavouritesList;

		var newFavChannelDtos = that.subMenu
			.infoList()
			.filter(function (chDto) {
				return (chDto.id in that.changedChs) ?
					that.changedChs[chDto.id] :
				oldFavChList.indexOf(chDto.id) !== -1;
			})
			.sort(function (a, b) {
				return a.orderNo - b.orderNo;
			})
			.map(function (chObj) {
				return chObj.id;
			});

		if (oldFavChList.sort().reduce(sum, '') ===
			Object.clone(newFavChannelDtos).sort().reduce(sum, ''))
			return q(true);

		return BS.request
			.Post('/restapi/rest/%d/%d/profiles/channels/categories/%d'
				.sprintf(BS.portal.user.regionId, BS.portal.user.userId, that.favCat.id),
				{data: {'list': newFavChannelDtos.join(',')}})
			.then(function () {
				tvCatRepo.dumpFavourites();
				ui.generalAlert(tr('favoriteChannelsUpdated'));
			}, function (x) {
				BS.logger.debug('SETTINGS: Favorite ch. list content change failed due to:');
				BS.logger.log(x);
				that.subMenu.setItems(that.items, that.infos).show();
				ui.generalAlert(tr('favouriteChanged') + ' ' + tr('fail'));
			})
			.finally(function () {
				that.lock = false;
				ui.toggleLoader(false);
			});

		function sum(prev, current) {
			return prev + '' + current;
		}
	};
	settingsFavoriteChannels.destroy = function () {
		this.menu.destroy();
		this.oldFavouritesList = [];
		this.changedChs = this.favCat = null;
		delete this.menu;
		delete this.dom;
	};
	settingsFavoriteChannels.init = function () {
		var that = this;
		var items = [];
		var infos = [];
		this.lock = true;
		this.changedChs = {};
		that.dom = that.dom || new ModuleDom(
				['settingsFavouriteChanSelector', 'okSmallFavoriteTemplate'],
				{
					toggleFavourite: function (index, state) {
						var itemEl = that.subMenu.itemElement(index);
						itemEl.firstElementChild.nextElementSibling.setAttribute('xlink:href',
							state ? '#blank' : that.okSmallHref);
					}
				}, function () {
					that.menu = new ui.Menu(this.settingsFavouriteChanSelector[0]);
					that.subMenu = that.menu.newMenuItems();
				}
			);

		ui.toggleLoader(true);

		q.all([
			tvCatRepo.getAllCategory(),
			tvCatRepo.getFavoriteCategory()
		]).spread(function (allChannelsCat, favChannelsCat) {
			that.favCat = favChannelsCat;
			return q.all([
				allChannelsCat.getChannels(),
				favChannelsCat.getChannels()
			]);
		}).spread(function (allChannels, favouriteChannels) {
			that.oldFavouritesList = favouriteChannels.map(toChannelId);
			allChannels
				.filter(favoritableChannels)
				.map(toChannelDto)
				.forEach(function (ch) {
					infos.push(ch);
					items.push(ui.template('settingsFavoriteChannelsListTemplate', {
						'setLink': function (link) {
							if (typeof that.okSmallHref === 'undefined') that.okSmallHref = link;
							return ch.checked ? link : '#blank';
						},
						'setChannelDescription': function () {
							return ch.name.encodeEntities();
						}
					}));
				});
			that.subMenu.setItems(items, infos).show();
		}).finally(function () {
			this.lock = false;
			ui.toggleLoader(false);
		}.bind(this)).done();

		function favoritableChannels(chObj) {
			return !(chObj instanceof BS.TvModel.DvbChannel);
		}

		function toChannelDto(chObj) {
			var indexInFavCat = that.oldFavouritesList.indexOf(chObj.id);
			return {
				'id': chObj.id,
				'name': chObj.name,
				'orderNo': indexInFavCat === -1 ? 1000 + chObj.number : indexInFavCat + 1,
				'checked': indexInFavCat !== -1
			};
		}

		function toChannelId(chObj) {
			return chObj.id;
		}

		ssDom.showSubModule(this.appID, 'favouriteChList');
		ssDom.actionBar([
			['back', 'saveAndClose'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'selectUserBtn']
		]);
	};


	var settings_system_restart_popup = new BS.App(
		'settings_system_restart_popup',
		{type: 'popup', helpId: 'settings_system_restart_popup'}
	);
	settings_system_restart_popup.onInputEvent = function (keyPressedName) {
	};
	settings_system_restart_popup.init = function () {
		var infoDialog = new BeeSmartMain.InfoDialog(
			'confirmRestartPopup',
			{
				onBeforeExit: function (keyPressed) {
					if (keyPressed == 'ok')
						ui.toggleLoader();
				},
				buttons: [
					['back', 'cancel'],
					['confirm', 'confirm']
				],
				exitKeys: ['back', 'left', 'ok']
			}
		);
		BeeSmartMain.register(infoDialog);
		var restartMsg = tr('restartDeviceAlert');
		try {
			if (BS.recorder.getRecordingsToFinalize().length) {
				restartMsg += tr('warningRunningRecordingWillStop')
					.sprintf('<tbreak/><tspan class="text-description-bold">', '</tspan>');
			}
		} catch (x) {
		}
		am.push(infoDialog, tr('confirmRestartPopupTitle'), restartMsg);
	};
	settings_system_restart_popup.focus = function (caller, args) {
		if (caller == 'confirmRestartPopup')
			mm.getApp('confirmRestartPopup').unregister();
		am.pop();
		if (args == 'ok') {
			if (BS.recorder) {
				BS.recorder.getRecordingsToFinalize().forEach(function (rec) {
					rec.abort();
				});
			}
			mm.getApp('liveTv').commitLastChannel().finally(function () {
				BS.device.reboot();
			});
		}
	};



	var agePopupMenu = new BeeSmartMain.MenuListDialog(
		'agePopupMenu',
		null,
		{
			onBeforeExit: function (key) {
			}
		}
	);
	agePopupMenu.init = function (caller, title, minNum, maxNum, currentValue) {
		BeeSmartMain.MenuListDialog.prototype.init.call(this, title);
		var infos = [];
		var selectedIndex = 0;
		var index = 0;

		for (var i = minNum; i <= maxNum; i++) {
			if (i == currentValue)
				selectedIndex = index;
			infos.push({
				name: i.toLocaleString(languageCode), key: i,
				iconLink: ''
			});
			index++;
		}
		this.fillActionMenu(infos, null, selectedIndex);
	};
	BeeSmartMain.register(agePopupMenu);

	var mediaPopupMenu = new BeeSmartMain.MenuListDialog(
		'mediaPopupMenu',
		null,
		{
			onBeforeExit: function () {
			}
		}
	);
	mediaPopupMenu.init = function (caller, title, arr, index, currentValue) {
		BeeSmartMain.MenuListDialog.prototype.init.call(this, title);
		var infos = [];
		var len = arr.length;
		var selectedIndex = 0;
		var i;
		if (index == 0) {
			for (i = 0; i < len; i++) {
				if (arr[i] == 0) infos.push({name: tr('off'), key: arr[i], imageLink: ''});
				else infos.push({
					name: arr[i].toLocaleString(languageCode)
					+ ' ' + tr('min'), key: arr[i], imageLink: ''
				});
				if (arr[i] == currentValue) selectedIndex = i;
			}
		} else if (index === 4) {
			for (i = 0; i < len; i++) {
				infos.push({name: tr(arr[i]), key: arr[i], imageLink: ''});
				if (arr[i] === currentValue) selectedIndex = i;
			}
		} else {
			for (i = 0; i < len; i++) {
				infos.push({name: tr(arr[i].name), key: arr[i], imageLink: ''});
				if (arr[i] === currentValue) selectedIndex = i;
			}
		}

		this.fillActionMenu(infos, null, selectedIndex);
	};
	BeeSmartMain.register(mediaPopupMenu);

	var ratingPopupMenu = new BeeSmartMain.MenuListDialog(
		'ratingPopupMenu',
		null,
		{
			onBeforeExit: function () {
			}
		}
	);
	ratingPopupMenu.init = function (caller, title, minNum, maxNum, currentValue) {
		BeeSmartMain.MenuListDialog.prototype.init.call(this, title);
		var infos = [];
		var selectedIndex = 0;

		for (var i = minNum; i <= maxNum; i++) {
			if (i == 0)
				infos.push({name: tr('no_parental_limit'), key: i, imageLink: ''});
			else
				infos.push({name: '' + i.toLocaleString(languageCode), key: i, imageLink: ''});

			if (currentValue == i)
				selectedIndex = i;
		}
		this.fillActionMenu(infos, null, selectedIndex);
	};
	BeeSmartMain.register(ratingPopupMenu);

	var menuListDialog = new BeeSmartMain.MenuListDialog('settings_menu_dialog', null,
		{
			onBeforeExit: function (key) {
				switch (key) {
				case 'ok':
					return true;
				}
			}
		}
	);
	menuListDialog.init = function () {
		BeeSmartMain.MenuListDialog.prototype.init.call(this, tr('menutitle_manageUsers'));
	};
	menuListDialog.displayPopupMenu = function (userId) {
		menuListDialog.currentUserId = userId;
		var infos = [];
		if (BS.portal.user.isDefault) {
			if (BS.portal.user.userId !== userId) {
				infos.push({
						iconLink: '',
						key: 'deleteUser',
						name: tr('sett_delUser'),
						app: ''
					}
				);
			} else {
				infos.push({
						iconLink: '',
						key: 'editUser',
						name: tr('sett_renameUser'),
						app: 'settingsRenameUser'
					}
				);
			}
		} else if (BS.portal.user.userId === userId) {
			infos.push({
				imageLink: '', key: 'editUser', name: tr('sett_renameUser'),
				app: 'settingsRenameUser'
			});
		}

		if (infos.length > 0) {
			am.push(this);
			this.fillActionMenu(infos);
		}
	};
	BeeSmartMain.register(menuListDialog);

	var settings_prepaid = new BS.App('settings_prepaid', {
		requiredLicense: 'prepaid',
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	settings_prepaid.onInputEvent = function (keyPressedName) {
		var r = settings_prepaid;
		var userTxt = r.dom.prepaidVaucher.text();

		switch (keyPressedName) {
		case 'left':
		case 'back':
			am.pop();
			break;

		case 'keyboard':
			if (settings_prepaid.canTopUp)
				am.push(keyboard, userTxt);
			break;

		case 'down':
			r.dom.prepaidVaucher.text('');
			break;

		case 'ok':
			if (userTxt && userTxt.length > 0 && settings_prepaid.canTopUp) {
				BS.request.Post(
					'/restapi/rest/%d/%d/prepaid/%d/topup'.sprintf(BS.portal.user.regionId,
						BS.portal.user.userId, userTxt), {
						accept: 'json'
					}).complete(function (response) {
					if (response && response.success && response.data
						&& response.data.resultValue !== 'VOUCHER_NOT_FOUND_EXCEPTION') {
						settings_prepaid.setAccountBalance(response.success, response.data);
						r.dom.prepaidVaucher.text('');
					} else {
						ui.generalAlert(tr(response.data.resultValue));
					}
				});
			}
			break;

		default:
			if (!isNaN(parseInt(keyPressedName, 10)) && settings_prepaid.canTopUp) {
				am.push(keyboard, userTxt, keyPressedName);
			}
			break;
		}
	};
	settings_prepaid.canTopUp = false;
	settings_prepaid.init = function () {
		var that = settings_prepaid;

		that.dom = that.dom || new ModuleDom(
				['settingsPrepaidAddFunds', 'prepaidVaucher', 'settings_prepaidBalance',
					'prepaidAccountBalance'
				],
				{
					show: function () {
						ssDom.showSubModule('settingsPrepaidAddFunds', 'sett_prepaidAddFunds');
					},
					hide: function () {
						ssDom.hideSubModule();
					}
				}
			);

		ui.toggleLoader();
		BS.request.Get('/restapi/rest/%d/%d/prepaid/balance'.sprintf(BS.portal.user.regionId,
			BS.portal.user.userId), {
			accept: 'json'
		}).complete(function (response) {
			that.setAccountBalance(response.success, response.data);
			that.dom.show();
			ui.toggleLoader();
		});

		BS.request.Get('/restapi/rest/%d/prepaid/topup'.sprintf(BS.portal.user.regionId), {
			accept: 'json'
		}).complete(function (response) {
			if (response && response.success) {
				if (response.data) {
					$('#prepaidTopUp').show();
					ssDom.actionBar([
						['back', 'back'],
						['keyboard', 'edit'],
						['empty', null],
						['confirm', 'confirm']
					]);
					settings_prepaid.canTopUp = true;
				} else
					$('#prepaidTopUpUnavail').show();
			} else
				BS.logger.debug('Error requesting "PrepaidService/canUserTopUp"');
		});

		ssDom.actionBar([
			['back', 'back'],
			[null, null],
			['empty', null],
			[null, null]
		]);
	};
	settings_prepaid.setAccountBalance = function (s, d) {
		var text;
		if (!s)
			text = tr('prepaid_account_balance_error');
		else {
			if (d.statusCode == 0) {
				text = Number(d.price).toFixed(2).toLocaleString(languageCode) + ' ' + d.currency;
			} else {
				text = tr(d.resultValue);
			}
		}
		settings_prepaid.dom.settings_prepaidBalance.trigger('setAccountBalance',
			{'balance': text});
	};
	settings_prepaid.destroy = function () {
		settings_prepaid.dom.prepaidVaucher.text('');
		settings_prepaid.dom.hide();
	};
	settings_prepaid.focus = function (caller, word) {
		if (!word)
			return;

		switch (caller) {
		case 'keyboard':
			settings_prepaid.dom.prepaidVaucher.text(word);
			break;
		}
	};
	settings_prepaid.startup = function () {

		BS.request.Get(
			'/restapi/rest/%d/%d/prepaid'.sprintf(BS.portal.user.regionId, BS.portal.user.userId), {
				accept: 'json'
			}).complete(function (response) {
			if (!(response && response.success && response.data.result) || !mm.appExists(
					'settings_prepaid'))
				return;

			nodeExtra.appendChild(
				new SettingNode('sett_prepaidAddFunds', 'sett_prepaidAddFundsMsg',
					['defaultUser', 'subUser'], 1, mm.getApp('settings_prepaid'), null
				)
			);
		});
	};

	var settingsAuthPin = new BS.App(
		'settingsAuthPin',
		{helpId: 'settingsAuthPin'}
	);
	settingsAuthPin.onInputEvent = function (key) {
		if (this.lock) return;

		switch (key) {
		case 'back':
		case 'left':
			am.pop();
			break;
		}
	};
	settingsAuthPin.init = function () {
		var authPin = null;
		var that = this;

		that.lock = true;
		if (!this.dom) {
			this.dom = new ModuleDom(
				[
					'settingsAuthPin', 'authPinText'
				],
				{
					show: function () {
						this.settingsAuthPin.show();
					},
					hide: function () {
						this.settingsAuthPin.hide();
					},
					fill: function (pin) {
						this.authPinText.text(pin);
					}
				}
			);
		}
		ssDom.showSubModule(this.appID, 'AuthPinDisplay');
		ssDom.actionBar([
			['back', 'back'],
			['empty', null],
			['empty', null],
			['empty', null]
		]);
		BS.request.Get('/restapi/rest/%d/%d/profiles/%d'
			.sprintf(BS.regionId, BS.portal.user.userId, BS.portal.user.userId), {
			accept: 'json'
		}).then(function (response) {
			authPin = response.data.list[0].authPin;
		}).catch(function (e) {
			BS.logger.trace('SETTINGS: error getting authPin: ' + e);
		}).finally(function () {
			that.dom.fill(authPin);
			that.dom.show();
			that.lock = false;
		}).done();
	};
	settingsAuthPin.destroy = function () {
		this.dom.hide();
		ssDom.actionBar([
			['back', 'toMainMenu'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'confirm']
		]);
	};

	BS.extend({
		type: 'ModuleConstructor',
		bindToProperty: 'settingsExtensions',
		constructorAction: function (optionsObject) {
			for (var i = 0, len = optionsObject.length; i < len; i++) {
				extraSettingsItems.push(optionsObject[i]);
			}
		},
		destructorAction: function (optionsObject) {
		}
	});

	function SettingNode(title, description, permission, position, appReference, children, autoHide,
		pinTypeToRequire, appArgs, offlineReady) {

		var r = this;
		var permMaps = {
			'defaultUser': 4,
			'subUser': 2
		};
		permission = permission || ['defaultUser', 'subUser'];

		this.app = appReference;
		this.appArgs = appArgs;
		this.title = title;
		this.description = description;
		this.position = position;
		this.children = children || [];
		this.autoHide = autoHide || false;
		this.pinTypeToRequire = pinTypeToRequire || SettingNode.UNLOCKED;
		this.permission = 0;

		for (var i in permission)
			this.permission |= permMaps[permission[i]];

		this.appendChild = function (node) {
			if (!(node instanceof SettingNode))
				throw 'Wrong node type added to "' + title + '" parent SettingNode';

			r.children.push(node);
		};

		this.removeChild = function (nodeId) {
			for (var i in r.children)
				if (r.children[i].app.id == nodeId)
					r.children.splice(i, 1);
		};

		this.__defineGetter__('isLeaf', function () {
			return r.children.length == 0;
		});

		this.__defineGetter__('offlineReady', function () {
			if (r.isLeaf) return offlineReady || false;
			var i;
			for (i = r.children.length - 1; i >= 0; i--) {
				if (r.children[i].offlineReady) return true;
			}
			return false;
		});
	}

	SettingNode.UNLOCKED = 0;
	SettingNode.LOCK_PARENTAL = 1;
	SettingNode.LOCK_SYSTEM = 2;

	var aUsers = ['defaultUser', 'subUser'];
	var oUsers = ['defaultUser', 'subUser'];
	var dUser = ['defaultUser'];
	var nodePersonal;
	var nodeParentalControl;
	var nodeWatchTV;
	var nodeSystem;
	var nodeTVInterface;
	var nodeExtra;
	var nodeManageDevices;
	var nodeSubscription;

	var BeeSmartSettings = new BS.Module({
		id: 'Settings',
		mmExtensions: {
			app: settingsCategory,
			icon: 'settings',
			title: 'settings',
			position: 5,
			offlineReady: true
		},
		settingsExtensions: [
			(nodeTVInterface =
				new SettingNode('sett_tv_interface', 'sett_tv_interfaceMsg', aUsers, 10, null, [
					new SettingNode('sett_chPIN', 'sett_chPin', oUsers, 1, changePinApp, [], false, SettingNode.LOCK_SYSTEM, systemPinChangeController),
					new SettingNode('sett_chLang', 'sett_lang', aUsers, 3, settingsChangeLang),
					new SettingNode('sett_chSkin', 'sett_skin', oUsers, 4, settingsChangeSkin),
					new SettingNode('sett_profileUser', 'sett_profileUser', oUsers, 5, settingsProfileUser),
					new SettingNode('sett_chUser', 'sett_swUser', oUsers, 6, settings_change_profile)
				], false, SettingNode.UNLOCKED)),
			(nodeWatchTV =
				new SettingNode('sett_watch_tv', 'sett_watch_tvMsg', oUsers, 20, null, [
					new SettingNode('set_mediaStat', 'set_media', oUsers, 1, settingsMediaStatus),
					new SettingNode('sett_chFavorites', 'sett_favorites', oUsers, 2, settingsFavoriteChannels),
					new SettingNode('sett_favorite_channels_sort', 'sett_favorite_channels_sortMsg',
						oUsers, 3, settingsChannelList, [], false, SettingNode.UNLOCKED,
						[favouritePositionController])
				], false, SettingNode.UNLOCKED)),
			(nodePersonal =
				new SettingNode('sett_personal', 'sett_personalMsg', oUsers, 30, null, [
					new SettingNode('sett_chPersData', 'sett_profile', oUsers, 1, settingsMyProfile)
				], false, SettingNode.UNLOCKED)),
			(nodeParentalControl =
				new SettingNode('sett_parentalC', 'sett_parentalCmsg', dUser, 40, null, [
					new SettingNode('sett_parentalPin', 'sett_parentalPinmsg', dUser, 1, changePinApp, [], false, SettingNode.UNLOCKED, parentalPinChangeController),
					new SettingNode('toggleParentalChannels', 'toggleParentalChannelsMsg', dUser, 2, settingsPcUserSelect),
					new SettingNode('changeUserRating', 'changeUserRating', dUser, 3, settingsPcUserSelect)
				], false, SettingNode.LOCK_PARENTAL)),
			(nodeSystem =
				new SettingNode('sett_system', 'sett_systemMsg', oUsers, 60, null, [
					new SettingNode('sett_userDevInfo', 'sett_userDevInfoMsg', oUsers, 1, settingsUserDeviceInfo, null, false, SettingNode.UNLOCKED, null, true),
					new SettingNode('sett_systemRestart', 'sett_systemRestartMsg', oUsers, 2, settings_system_restart_popup, null, false, SettingNode.UNLOCKED, null, true)
				], false, SettingNode.UNLOCKED)),
			(nodeExtra = new SettingNode('sett_extras', 'sett_extras_msg', oUsers, 70, null, [], true,
				SettingNode.UNLOCKED))
		],
		startupTasks: [
			{
				name: 'Settings startup',
				payload: function (params, callback) {
					callback();
					pCDApp = mm.getApp('pinCheckDialog');
					PinCheckDialog = pCDApp._constructor;
					BS.template.get('svg/settings.svg');

					if (BS.skinConfiguration.enableAutoLoginMenuItem) {
						nodeTVInterface.appendChild(
							new SettingNode('sett_autologin', 'sett_autologin', dUser, 2,
								settingsAutologin, [], false, SettingNode.LOCK_SYSTEM));
					}
					if (BS.config.get('oauth.consumers.HOME_GROUP_TOTAL_DEVICE_LIMIT') > 0 &&
						BS.skinConfiguration.showDeviceAuthCode) {

						nodeExtra.appendChild(
							new SettingNode('sett_authPin', 'sett_authPin', oUsers, 1, settingsAuthPin,
								[], false, SettingNode.LOCK_SYSTEM));
					}

					if (!!BS.config.get('core.client.livetv.USER_CHANNEL_RENAMING_ENABLED'))
						nodeWatchTV.appendChild(
							new SettingNode('sett_channels_edit', 'sett_channels_editMsg',
								oUsers, 4, settingsChannelList, [], false, SettingNode.UNLOCKED,
								[channelRenamingController]));
					if (!!BS.config.get('core.client.livetv.USER_CHANNEL_RENUMBERING_ENABLED')) {
						if (BS.skinConfiguration.maxChannelDigits === 3) {
							nodeWatchTV.appendChild(
								new SettingNode('sett_channels_sort', 'sett_channels_sortMsg',
									oUsers, 4, settingsChannelList, [], false, SettingNode.UNLOCKED,
									[channelRenumberingController]));
						} else {
							BS.logger.info(
								'[WARN] Channel renumbering feature disabled as skin manifest ' +
								'configuration maxChannelDigits is not 3, but is ' +
								BS.skinConfiguration.maxChannelDigits
							);
						}
					}

					if (BS.skinConfiguration.enableSubscriptionStoreMenuItem) {
						extraSettingsItems.push(new SettingNode('SubscriptionStore',
							'SubscriptionStore', ['defaultUser', 'subUser'], 1,
							mm.getApp('subscriptionApp'), [], false,
							SettingNode.UNLOCKED, {hideSettingModule: true}, false));
					}
				}
			}
		]
	}).register(settingsCategory)
		.register(sAppSelection)
		.register(settings_change_profile)
		.register(settingsMediaStatus)
		.register(settingsAutologin)
		.register(changePinApp)
		.register(settingsChangeLang)
		.register(settingsChangeSkin)
		.register(settingsMyProfile)
		.register(settings_my_profile_details)
		.register(settings_add_user)
		.register(settingsProfileUser)
		.register(settingsPcUserSelect)
		.register(pcChannelSelect)
		.register(pcRatingSelect)
		.register(settingsRenameUser)
		.register(settingsUserDeviceInfo)
		.register(settingsFavoriteChannels)
		.register(settingsChannelList)
		.register(settings_system_restart_popup)
		.register(settings_prepaid)
		.register(mediaResolutionSetter)
		.register(settingsAuthPin)
		.register(channelNumberDialog);

	BeeSmartSettings.SettingNode = SettingNode;
	BeeSmartSettings.nodeRoot = {
		appendChild: function (node) {
			if (!(node instanceof SettingNode))
				throw 'Wrong node type added to "' + title + '" parent SettingNode';
			extraSettingsItems.push(node);
		}
	};

	BeeSmartSettings.nodePersonal = nodePersonal;
	BeeSmartSettings.nodeParentalControl = nodeParentalControl;
	BeeSmartSettings.nodeWatchTV = nodeWatchTV;
	BeeSmartSettings.nodeSystem = nodeSystem;
	BeeSmartSettings.nodeTVInterface = nodeTVInterface;
	BeeSmartSettings.nodeSubscription = nodeSubscription;
	BeeSmartSettings.nodeExtra = nodeExtra;

	BeeSmartSettings.nodeSecurity = nodeParentalControl;
	BeeSmartSettings.nodeProfile = nodePersonal;
	BeeSmartSettings.nodeUsers = nodePersonal;
	BeeSmartSettings.nodeSystem = nodeSystem;
	BeeSmartSettings.nodeExtras = nodeExtra;

	BS.BeeSmartSettings = BeeSmartSettings;

})(BeeSmart, BeeSmart.NiceException, Q);

(function (q, BS, ModuleDom, mm, am, ui, bmisc) {
	var ssDom, misc, BeeSmartMain, keyboard;


	function ConsumerDevice(deviceDto) {
		for (var key in deviceDto) {
			if (key in this && !(this[key] instanceof Function))
				this[key] = deviceDto[key];
		}
	}
	ConsumerDevice.prototype = {
		'userId': null,
		'userName': null,
		'deviceId': null,
		'deviceUid': null,
		'deviceDescription': null,
		'consumerType': null,
		'registrationTimestamp': null,
		'firstScreen': null,
		'isActive': null,
		'isRenameable': null,
		'isDisconnectable': null,
		'hasActions': null,
		getUpdated: function (dto) {
			var newDto = {};
			for (var key in this) {
				if (!(this[key] instanceof Function)){
					newDto[key] = key in dto ? dto[key] : this[key];
				}
			}
			var instance = new ConsumerDevice(newDto);
			Object.freeze(instance);
			return instance;
		}
	};

	ConsumerDevice.factory = function (deviceDto, user, mac) {
		var objDevice = new ConsumerDevice(deviceDto);
		objDevice.isRenameable = objDevice.isActive = deviceDto.deviceUid === mac;
		objDevice.isDisconnectable =
			objDevice.consumerType !== 'STB' &&
			(user.isDefault || (objDevice.userId === user.userId && !objDevice.firstScreen));
		objDevice.hasActions = objDevice.isDisconnectable || objDevice.isRenameable;
		Object.freeze(objDevice);
		return objDevice;
	};

	BS.ConsumerDeviceModel = {};
	BS.ConsumerDeviceModel.ConsumerDevice = ConsumerDevice;
	BS.ConsumerDeviceModel.updateWithRenamed = function (list, device, newDeviceDesc) {
		return list.map(function (aDevice) {
			if (aDevice === this) return aDevice.getUpdated({'deviceDescription': newDeviceDesc});
			return aDevice;
		}, device);
	};
	var cdm = BS.ConsumerDeviceModel;


	var settManageDevices = new BS.App('ManageDevices', {
		helpId: 'settings_manage_devices',
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	settManageDevices.onInputEvent = function (key) {
		var r = settManageDevices;
		switch (key) {
		case 'left':
		case 'back':
			am.pop();
			break;
		case 'up':
		case 'down':
			if (r.subMenu) {
				do {
					if (key === 'up') r.subMenu.previous();
					else r.subMenu.next();
				}
				while (!r.subMenu.currentInfo().consumerType);
			}
			break;
		case 'ok':
			var item = r.subMenu.currentInfo();
			if (item instanceof ConsumerDevice && item.hasActions) {
				am.push(deviceManagePopup, item);
			}
			break;
		default:
			break;
		}
	};
	settManageDevices.init = function () {
		ssDom = mm.getApp('Settings').dom;
		var that = this;
		ssDom.settingsModule.hide();
		ssDom.settingsMenuGroup.hide();
		that.dom = that.dom || new ModuleDom([
			'settingsManageDevices', 'settingsManageDevicesSelector',
			'settingsConsumerDeviceItemTpl', 'settingsConsumerCaptionItemTpl'
		]);
		ssDom.showSubModule(this.appID, 'sett_manageDevices');

		ssDom.actionBar([
			['back', 'back'],
			['empty', null],
			['empty', null],
			['confirm', 'deviceOptions']
		]);
		settManageDevices.rebuildDeviceMenu();
		that.dom.settingsManageDevices.show();
	};
	settManageDevices.focus = function (caller, arg1) {
		if (caller === 'keyboard' && arg1) {
			settManageDevices.deviceRenameRequested(arg1);
		} else if (caller === 'confirmCurrentDeviceDisconnect') {
			mm.getApp('confirmCurrentDeviceDisconnect').unregister();
		}
	};
	settManageDevices.destroy = function () {
		var r = settManageDevices;
		ssDom.settingsModule.show();
		ssDom.settingsMenuGroup.show();
		misc.dom.navigationReset();
		r.dom.settingsManageDevices.hide();
	};
	BS.evMgr.bind('onBeeSmartReady', function () {
		var bss = BS.BeeSmartSettings;
		var SettingNode = bss.SettingNode;

		misc = BS.modMgr.getApp('Misc');
		BeeSmartMain = BS.modMgr.getModule('BeeSmartMain');
		BeeSmartMain.register(deviceManagePopup);
		keyboard = BS.modMgr.getApp('keyboard');

		bss.register(settManageDevices);

		bss.nodeRoot.appendChild(new SettingNode('sett_manageDevices', 'sett_manageDevicesMsg',
			['defaultUser', 'subUser'], 50, settManageDevices, null, false,
			SettingNode.LOCK_SYSTEM));
	});

	settManageDevices.getConsumerDeviceView = function (devObj) {
		var icon = '#icon_stb';
		var type = devObj.consumerType;
		if (type.indexOf('PHONE') !== -1) icon = '#icon_phone';
		else if (type.indexOf('TABLET') !== -1 || type.indexOf('IPAD')
			!== -1) icon = '#icon_tablet';
		else if (type.indexOf('PC') !== -1) icon = '#icon_pc';
		return {
			'title': devObj.deviceDescription,
			'description': tr('manageDeviceRegisteredAt') + ': ' +
			new Date(devObj.registrationTimestamp)
				.toFormatedString(BS.portal.local.formats.dateTime),
			'icon': icon
		};
	};
	settManageDevices.prmsDevicesFetch = function () {
		var user = BS.portal.user;
		return BS.request.Get('/restapi/rest/%d/%d/devices'
			.sprintf(user.regionId, user.userId), {
			accept: 'json',
			preventEvent: true
		}).then(function (response) {
			return response.data.map(function (dto) {
				return ConsumerDevice.factory(dto, user, BS.device.MAC);
			});
		});
	};
	settManageDevices.prmsMaxDevicesFetch = function () {
		var user = BS.portal.user;
		return BS.request.Get('/restapi/rest/%d/%d/devices/limitations'
			.sprintf(user.regionId, user.userId), {
			accept: 'json',
			preventEvent: true
		}).then(function (response) {
			return response.data;
		});
	};

	settManageDevices.rebuildDeviceMenu = function (jumpToIdx, deviceList, maxDevices) {
		ui.toggleLoader(true);
		var that = this;
		var infos = [];
		var stbList = [];
		var mobileList = [];
		jumpToIdx = jumpToIdx || 1;

		var tplItem = that.dom.settingsConsumerDeviceItemTpl.text();
		var tplCaption = that.dom.settingsConsumerCaptionItemTpl.text();

		q.allSettled([
			deviceList ? q(deviceList) : that.prmsDevicesFetch(),
			maxDevices ? q(maxDevices) : that.prmsMaxDevicesFetch()
		]).spread(function (prmsDevices, prmsMaxDevices) {
			var rjPrms = [prmsDevices, prmsMaxDevices]
				.filter(function (prms) {
					return 'rejected' === prms.state;
				});

			if (rjPrms.length !== 0) {
				am.pop();
				ui.generalAlert(tr('errorRetrievingDeviceList'));
				return;
			}

			that.deviceList = prmsDevices.value;
			that.maxDevices = prmsMaxDevices.value;
			if (that.menu) {
				that.menu.destroy();
				that.menu = null;
			}
			that.deviceList.forEach(function (device) {
				switch (device.consumerType) {
				case 'STB':
				case 'ANDROID_STB':
				case 'ANDROID_TV':
					stbList.push(device);
					break;
				case 'IPHONE':
				case 'IPAD':
				case 'ANDROID_PHONE':
				case 'ANDROID_TABLET':
					mobileList.push(device);
					break;
				default:
					BS.logger.debug('Discarding device type ' + device.consumerType +
						'cause it is not meant to be shown');
				}
			});
			var sortDevices = function (list) {
				list.sort(function (a, b) {
					return a.isActive ? -1 : b.isActive ? 1 : 0;
				});
			};
			sortDevices(stbList);
			sortDevices(mobileList);

			that.menu = new ui.Menu(that.dom.settingsManageDevicesSelector[0]);
			infos.push({
				title: tr('stbTitle'), description: tr('maxDevicesDescription')
					.sprintf(that.maxDevices.connectedStbDevices, that.maxDevices.maxStbDevices)
			});
			infos = infos.concat(stbList);
			infos.push({
				title: tr('mobileTitle'), description: tr('maxDevicesDescription')
					.sprintf(that.maxDevices.connectedMobileDevice,
						that.maxDevices.maxMobileDevices)
			});
			infos = infos.concat(mobileList);
			var items = infos.map(function (info) {
				if (info instanceof ConsumerDevice) {
					var viewDto = settManageDevices.getConsumerDeviceView(info);
					return tplItem.sprintf(viewDto.icon, viewDto.title, viewDto.description);
				} else {
					return tplCaption.sprintf(info.title, info.description);
				}
			});

			if (jumpToIdx && jumpToIdx >= infos.length) jumpToIdx = infos.length - 1;
			that.subMenu = that.menu.newMenuItems().setItems(items, infos).jump(jumpToIdx).show();
			that.subMenu.onFinish(that.menuOnFinish);

		}).done(function () {
			ui.toggleLoader(false);
		});
	};
	settManageDevices.deviceRenameRequested = function (newName) {
		var device = settManageDevices.subMenu.currentInfo();
		var that = this;
		BS.request.Put('/restapi/rest/%d/%d/devices/%d'.sprintf(BS.portal.user.regionId,
			BS.portal.user.userId, device.deviceId), {
			accept: 'json',
			data: {'device_desc': newName}
		}).then(function () {
			that.rebuildDeviceMenu(
				that.subMenu.currentIndex(),
				that.deviceList = cdm.updateWithRenamed(that.deviceList, device,
					newName),
				that.maxDevices);
			ui.generalAlert(tr('deviceRenameOk'));
		}, function () {
			ui.generalAlert(tr('deviceRenameErr'));
		});
	};
	settManageDevices.menuOnFinish = function (index, info) {
		if (info instanceof ConsumerDevice && info.hasActions) {
			ssDom.actionBar([['back', 'back'], ['empty', null], ['empty', null],
				['confirm', 'deviceOptions']
			]);
		} else ssDom.actionBar([['back', 'back'], ['empty', null], ['empty', null],
			['empty', null]]);
	};


	var deviceManagePopup = new BS.MenuListDialog('deviceManagePopup', null,
		{onBeforeExit: onPopupBeforeExit});

	function onPopupBeforeExit(key) {
		var currentDevice = this.actionMenu.currentInfo().deviceInfo;
		switch (this.actionMenu.currentInfo().key) {
		case 'disconnectDevice':
			if (key === 'ok') disconnectDevice(currentDevice);
			break;
		case 'renameDevice':
			if (key === 'ok') {
				setTimeout(function () {
					am.push(keyboard, this.deviceDescription);
				}.bind(currentDevice), 250);
			}
			break;
		}
	}

	function disconnectDevice(device) {
		var promise = q();
		if (device.isActive) promise = mm.getApp('liveTv').commitLastChannel();
		return promise.then(function () {
			BS.request.Delete('/restapi/rest/%d/%d/devices/%d'.sprintf(
				BS.portal.user.regionId,
				BS.portal.user.userId,
				device.deviceId
			), {
				accept: 'json',
				data: {'target_user_id': device.userId}
			}).then(function () {
				this.rebuildDeviceMenu(
					this.subMenu.currentIndex(),
					this.deviceList.filter(function (aDevice) {
						return aDevice === device;
					})
				);
				ui.generalAlert(tr('deviceDisconnectOk'));

			}.bind(settManageDevices), function () {
				ui.generalAlert(tr('deviceDisconnectErr'));
			});
		});
	}


	deviceManagePopup.init = function (caller, device) {
		var infos = [];
		BeeSmartMain.MenuListDialog.prototype.init.call(this, tr('deviceOptions'));
		if (device.isDisconnectable) {
			infos.push({name: tr('disconnectDevice'), key: 'disconnectDevice', iconLink: '',
				'deviceInfo': device});
		}
		if (device.isRenameable) {
			infos.push({name: tr('renameDevice'), key: 'renameDevice', iconLink: '',
				'deviceInfo': device});
		}
		this.fillActionMenu(infos, null, 0);
	};


})(
	Q,
	BeeSmart,
	$.ModuleDom,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	BeeSmart.misc
);

(function (BS) {
	var mm = BS.modMgr;
	var am = BS.appMgr;
	var em = BS.evMgr;
	var ui = BS.ui;
	var ModuleDom = $.ModuleDom;
	var BeeSmartMain = mm.getModule('BeeSmartMain');
	var bss = BS.BeeSmartSettings;
	var ssDom;
	var recommendVodAllowed;
	var recommendLiveTvAllowed;


	var recommendationSetup = new BS.App(
		'settingsRecommendation',
		{
			helpId: 'SettingsRecommendation',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	recommendationSetup.startValues = [];
	recommendationSetup.onInputEvent = function (keyPressedName) {
		var that = this;
		switch (keyPressedName) {
		case 'left':
		case 'back':
			am.pop(that.appID);

			break;
		case 'up':
		case 'down':
			if (keyPressedName === 'up') that.subMenu.previous();
			else that.subMenu.next();
			that.dom.setActionBar(that.subMenu.currentInfo().id);

			break;
		case 'ok':
			that.dom.toggleValue();

			break;
		case 'blue':
			that.subMenu.select(function () {
				var infoDialog = new BeeSmartMain.InfoDialog(
					'settings_delete_recommendation',
					{
						onBeforeExit: function (keyPressed) {
							if (keyPressed === 'ok') {
								ui.toggleLoader(true);
								BS.request.get(
									'PersonalizationService/clearRecommendData',
									function (s) {
										var whichTr = that.subMenu.currentInfo().id === 'vod' ?
											tr('clearVodRecommendation') :
											tr('clearTvRecommendation');
										ui.toggleLoader(false);

										if (s) ui.generalAlert(whichTr + ' ' + tr('ok'));
										else ui.generalAlert(whichTr + ' ' + tr('fail'));
									},
									[that.subMenu.currentInfo().id]
								);
							}
						}
					}
				);
				BeeSmartMain.register(infoDialog);
				am.push(infoDialog, tr('clearTvRecommendation') + '?',
					tr(that.subMenu.currentInfo().id + 'DeleteConfirm'));
			});
			break;
		default:
			break;
		}
	};
	recommendationSetup.focus = function (caller) {
		if (caller === 'settings_delete_recommendation')
			mm.getApp('settings_delete_recommendation').unregister();
	};
	recommendationSetup.destroy = function () {
		var r = recommendationSetup;
		var changedValues = [];
		for (var j = 0; j < r.subMenu.size(); j++) {
			if (r.subMenu.info(j).value !== r.startValues[j].value) {
				changedValues.push({
					id: r.startValues[j].id,
					value: r.subMenu.info(j).value
				});
			}
		}
		r.dom.saveValues(changedValues);
	};
	recommendationSetup.init = function () {
		var that = recommendationSetup;
		ssDom = mm.getApp('Settings').dom;

		that.dom = that.dom || new ModuleDom(
			['recommendationSetup', 'settingsRecommendationSelector',
				'settingsRecommendationInputFields'
			],
			{
				setActionBar: function (id) {
					var ps = {
						'tv': [
							['back', 'saveAndClose'],
							['vertical', 'select'],
							['blue', 'clearTvRecommendation'],
							['confirm', 'changeValue']
						],
						'vod': [
							['back', 'saveAndClose'],
							['vertical', 'select'],
							['blue', 'clearVodRecommendation'],
							['confirm', 'changeValue']
						]
					};
					if (!id || !ps[id])
						return;
					ssDom.actionBar(ps[id]);
				},
				toggleValue: function () {
					var swappedValue = that.subMenu.currentInfo().value === false;
					this.settingsRecommendationInputFields.children()
						[that.subMenu.currentIndex()].textContent = swappedValue === true ?
							tr('on') : tr('off');
					that.subMenu.currentInfo().value = swappedValue;
				},
				saveValues: function (changedValues) {
					var dataToSend = {};
					var value;

					for (var i = 0; i < changedValues.length; i++) {
						value = changedValues[i].value;
						if ('tv' === changedValues[i].id)
							dataToSend['tv_recommend'] = value;
						if ('vod' === changedValues[i].id)
							dataToSend['vod_recommend'] = value;
					}

					if (changedValues.length > 0) {
						ui.toggleLoader(true);
						dataToSend['target_user_id'] = BS.portal.user.userId;

						BS.users.update(dataToSend).then(function() {
							ui.generalAlert(tr('userServicesRecommendationUpdated'));
						}).catch(function(ex) {
							BS.logger.trace('Recommendations unexpected exception %s', ex);
						}).finally(function() {
							ui.toggleLoader(false);
						});
					}
				},
				createMenu: function () {
					var items = [];
					var infos = [];
					var textChildren = this.settingsRecommendationInputFields.find('text');
					var currChild = 0;

					if (that.subMenu) that.subMenu.destroy();
					if (that.menu) that.menu.destroy();
					that.menu = new ui.Menu(this.settingsRecommendationSelector[0]);
					that.subMenu = that.menu.newMenuItems();

					for (var i = 0; i < textChildren.length; i++)
						textChildren[i].textContent = '';
					if (recommendLiveTvAllowed) {
						items.push(tr('tvRecommendation'));
						infos.push({'id': 'tv', 'value': BS.portal.user.tvRecommend});
						textChildren[currChild++].textContent = BS.portal.user.tvRecommend ?
							tr('on') : tr('off');
					}

					if (recommendVodAllowed) {
						items.push(tr('vodRecommendation'));
						infos.push({'id': 'vod', 'value': BS.portal.user.vodRecommend});
						textChildren[currChild++].textContent = BS.portal.user.vodRecommend ?
							tr('on') : tr('off');
					}
					items = ui.template('standardMenuTemplate',
						{'text': items, 'selector': this.settingsRecommendationSelector});
					that.subMenu.setItems(items, infos).show();
				}
			}
		);

		that.dom.createMenu();

		if (that.subMenu)
			that.subMenu.jump(0, true);

		ssDom.showSubModule(that.appID, 'sett_recommendation_title');

		that.dom.setActionBar(that.subMenu.currentInfo().id);

		that.startValues = [];

		for (var j = 0; j < that.subMenu.size(); j++)
			that.startValues[j] = new Object({
				'id': that.subMenu.info(j).id,
				'value': that.subMenu.info(j).value
			});
	};
	em.bind('onBeeSmartReady', function () {
		recommendVodAllowed = mm.isAllowed('recommendvod');
		recommendLiveTvAllowed = mm.isAllowed('recommendlivetv');
		if (recommendVodAllowed || recommendLiveTvAllowed) {
			bss.nodePersonal.appendChild(
				new bss.SettingNode('sett_recommendation', 'sett_recommendationCmsg',
					['defaultUser', 'subUser'], 3, recommendationSetup)
			);
		}
	});

	bss.register(recommendationSetup);


})(BeeSmart);

(function (BS, q, mm, am, em) {

	var BeeSmartMain = mm.getModule('BeeSmartMain');



	function TvShow(props) {

		this.id = props.id;
		this._channel = props.channelId;
		this.start = props.start;
		this.end = this.start + props.duration * 60000;
		this.duration = props.duration;
		this.title = props.title;
		if (props.genres) this.genres = props.genres;
		var desc = props.description;
		if (desc !== null && typeof desc !== 'undefined') {
			this.description = desc;
		}
		this.rating = props.ageRating || 0;
		this.recordable = props.recordable;
		this._pictureLink = props.imageUrl
			? BS.ShowModel.pictureRepository.put(props.imageUrl)
			: null;
		this.seriesUid = props.seriesId || null;
		this.barred = !!props.barred;
		this.seasonNumber = props.seasonNumber || null;
		this.episodeNumber = props.episodeNumber || null;
		this.subheading = props.subheading || null;
	}

	TvShow.tvLib = BeeSmartMain.tvLibrary;

	TvShow.captions = {
		pcTitle: null,
		pcDescription: null
	};
	TvShow.isForbiddenChTempAllowed = function (chObj, userObj) {
		return chObj.isAcknowledgedByPC(false) === false && (
				chObj.isTemporaryAcknowledged() === true ||
				userObj.isParentalyUnlocked()
			);
	};
	TvShow.tvShowViewPurchaseService = null;
	TvShow.showRemindersRepository = null;
	TvShow.prototype = {
		id: null,
		title: null,
		description: null,
		start: null,
		end: null,
		rating: null,
		barred: false,
		recordable: true,
		seriesUid: null,
		genres: [],
		viewable: true,
		_channel: null,
		_pictureLink: null,

		channel: function () {
			return TvShow.tvLib.isChannel(this._channel)
				? TvShow.tvLib.getChannelById(this._channel)
				: null;
		},
		isRecordable: function () {
			return this.recordable;
		},
		picture: function () {
			if (this.isShowAllowed() === false) {
				BS.logger.trace('TvShow.picture() exception, show has parental lock');
				throw 'parental-lock';
			}
			return this._pictureLink;
		},
		isTvShowBroken: function () {
			return this instanceof BrokenTvShow;
		},
		hasStarted: function () {
			return this.start < Date.now();
		},
		isShowAllowed: function () {
			var channel = this.channel();
			return (
				channel &&
				channel.isAcknowledgedByPC(false) &&
				BS.portal.user.checkParentalLimit(this.rating) &&
				!channel.parentallyLocked()
			) || BS.portal.user.isParentalyUnlocked();
		},
		getTitle: function () {
			return this.isShowAllowed() ? this.title : TvShow.captions.pcTitle;
		},
		getDescription: function () {
			var dfr = q.defer();
			var that = this;
			if (that.isShowAllowed()) {
				if (that.isMetadataMissing()) {
					var qParams = {language: BS.portal.user.language.label};
					try {
						qParams.v = BS.resourceDataVersions.epgChannels[that._channel];
					} catch (x) {
						BS.logger.debug('TvShow: no version param will be set for' +
							' /restapi/rest/%s/tvprogram/%d' +
							' due to:\n' + x);
					}

					BS.request.Get('/restapi/rest/%s/tvprogram/%d'.sprintf(BS.regionId, that.id), {
						accept: 'json',
						data: qParams
					}).then(function (response) {
						that.genres = response.data.genres || [];
						that.description = response.data.description || '';
						that.seasonNumber = response.data.seasonNumber || '';
						that.episodeNumber = response.data.episodeNumber || '';
						that.subheading = response.data.subheading || '';

						dfr.resolve(that.description.escapedBeeText());
					}).catch(function () {
						that.seasonNumber = '';
						that.episodeNumber = '';
						that.subheading = '';

						dfr.resolve(tr('noDescPresent'));
					}).done();


				} else {
					dfr.resolve(that.description.escapedBeeText());
				}
			} else {
				dfr.resolve(TvShow.captions.pcDescription);
			}

			return dfr.promise;
		},
		toString: function (typeName) {
			var date = new Date(this.start);
			var feats = [];
			if (!this.isRecordable()) feats.push('NOREC');
			if (this.rating) feats.push('R' + this.rating);
			if (TvShow.tvShowViewPurchaseService &&
				TvShow.tvShowViewPurchaseService.canOfferSale(this)
			) feats.push('PURCHASE');
			if (TvShow.tvShowViewPurchaseService &&
				TvShow.tvShowViewPurchaseService.isShowPurchased(this)
			) feats.push('MY');
			if (!this.isShowAllowed()) feats.push('PC');
			var channel = this.channel();
			return '%s#%s(%s,%s,%d min) [%s] %s/%s...'.sprintf(
				typeName || 'TvShow',
				this.id,
				this._channel,
				date.toFormattedString('dd.HH:mm', false),
				this.duration,
				feats.join(','),
				channel ? channel.originalName : '>null<',
				this.title.substring(0, 10)
			);
		},
		isMetadataMissing: function () {
			return this.seasonNumber === null || this.episodeNumber === null ||
				this.subheading === null || this.description === null;
		},
		generateTitle: function () {
			var title = this.getTitle();
			var subheading = this.subheading;
			var seasonNumber = this.seasonNumber;
			var episodeNumber = this.episodeNumber;
			var metadata = '';
			var space = ' ';

			if (title.indexOf(TvShow.captions.pcTitle) === -1) {
				if (seasonNumber && episodeNumber && subheading) {
					metadata = tr('programTitleFull').sprintf(seasonNumber, episodeNumber, subheading);
				} else if (!subheading && seasonNumber && episodeNumber) {
					metadata = tr('programTitleSENumbers').sprintf(seasonNumber, episodeNumber);
				} else if (subheading && (!seasonNumber || !episodeNumber)) {
					metadata = tr('programTitleSubheading').sprintf(subheading);
					space = '';
				}
			}

			return '%s%s%s'.sprintf(title, space, metadata);
		}
	};

	function TvShowRepr(tvShowObj) {
		TvShow.call(this, tvShowObj);
	}

	TvShowRepr.onGenerateMarkup = function() {};
	TvShowRepr.domRoot = null;
	TvShowRepr.showCorners = {
		'left': 'ekioh:rx1="5" ekioh:ry1="5" ekioh:rx2="0" ekioh:ry2="0" ekioh:rx3="0" ekioh:ry3="0" ekioh:rx4="5" ekioh:ry4="5"',
		'right': 'ekioh:rx1="0" ekioh:ry1="0" ekioh:rx2="5" ekioh:ry2="5" ekioh:rx3="5" ekioh:ry3="5" ekioh:rx4="0" ekioh:ry4="0"',
		'neutral': 'rx="5" ry="5"'
	};
	TvShowRepr.ownStyles = {'sellable': 'sellable', 'reminder': 'reminder',
		'purchased': 'purchased', 'error': 'error', 'selected': 'selected'};
	TvShowRepr.directions = {'rtl': 0, 'ltr': 1};
	TvShowRepr.prototype = {
		hasRoundedCorners: false,
		_cssCls: null,
		get cssCls() {
			return this._cssCls || [];
		},
		set cssCls(newCssCls) {
			this._cssCls = newCssCls;
		},
		_domReference: null,
		$dom: function $dom(noCache) {
			var svgId = 'P' + this.id;
			if (noCache === true)
				return (this._domReference = getDomReference());
			if (this._domReference === null || !('0' in this._domReference))
				this._domReference = getDomReference();
			return this._domReference;

			function getDomReference() {
				return $(
					TvShowRepr.domRoot ? TvShowRepr.domRoot.getElementById(svgId) : ('#' + svgId)
				);
			}
		},
		$domDeReference: function $deDom() {
			this._domReference = null;
		},
		cssClasses: function showsCssClasses() {
			var clss = [];
			var ownSts = TvShowRepr.ownStyles;
			for (var i = 0, cls; (cls = this.cssCls[i++]);) {
				if (!(cls in ownSts)) clss.push(cls);
			}
			if (TvShow.showRemindersRepository &&
				TvShow.showRemindersRepository.containsId(this.id)
			) clss.push(TvShowRepr.ownStyles.reminder);
			if (TvShow.tvShowViewPurchaseService &&
				TvShow.tvShowViewPurchaseService.canOfferSale(this)
			) clss.push(TvShowRepr.ownStyles.sellable);
			if (TvShow.tvShowViewPurchaseService &&
				TvShow.tvShowViewPurchaseService.isShowPurchased(this)
			) clss.push(TvShowRepr.ownStyles.purchased);
			if (this._error) clss.push(TvShowRepr.ownStyles.error);
			if (clss.length) this.cssCls = clss;
			else this.cssCls = null;
			return clss;
		},
		select: function selectShow() {
			return this.markStyle(TvShowRepr.ownStyles.selected);
		},
		deselect: function deselectShow() {
			return this.unmarkStyle(TvShowRepr.ownStyles.selected);
		},
		redrawTitle: function () {
			BS.logger.trace('EPG/PC: redraws title %s', this);
			this.$dom().last().text(this.getTitle());
		},

		markStyle: function (cls) {
			if (this.addStyle(cls)) {
				this.$dom().addClass(cls);
			}
			return this;
		},
		unmarkStyle: function (cls) {
			if (this.removeStyle(cls)) {
				this.$dom().removeClass(cls);
				BS.logger.trace('UNMARK: ' + cls + ' | ' + this + ' -> ' + this.cssCls);
			}
			return this;
		},
		addStyle: function(cls) {
			if (this.cssCls.length === 0) this.cssCls = [];
			if (this.cssCls.indexOf(cls) === -1) {
				this.cssCls.push(cls);
				return true;
			}
			return false;
		},
		removeStyle: function(cls) {
			if (this.cssCls.indexOf(cls) !== -1) {
				this.cssCls = this.cssCls.filter(function (value) {
					return cls !== value;
				});
				if (this.cssCls.length === 0) this.cssCls = null;
				return true;
			}
			return false;
		},
		generateMarkup: function generateMarkup(viewContextDay, epgUiDetails) {
			TvShowRepr.onGenerateMarkup(this);
			var day = viewContextDay.getDate();
			var end = this.end;
			var midnight1 = (
				new Date(viewContextDay.getFullYear(), viewContextDay.getMonth(), day)
			).valueOf();
			var midnight2 = midnight1 + 86400000;
			var marginWidth = epgUiDetails.TVSHOW_LEFT_MARGIN + epgUiDetails.TVSHOW_RIGHT_MARGIN;
			var showStart = this.start < midnight1 ? midnight1 : this.start;
			var showEnd = end > midnight2 ? midnight2 : end;
			var showDuration = Math.round((showEnd - showStart) / 60000);
			var width = Math.round(showDuration * epgUiDetails.HALF_HOUR_LENGTH / 30);
			var posWidth = width < marginWidth ? 0 : width - marginWidth;
			var showPosX = Math.round(
				((showStart - midnight1) / 1800000) * epgUiDetails.HALF_HOUR_LENGTH
			);
			var posX = showPosX + epgUiDetails.TVSHOW_LEFT_MARGIN;
			var showTitle = showDuration > 15;
			var corners;

			if (epgUiDetails.EPG_DIRECTION === TvShowRepr.directions.rtl) {
				posX = 6236 - posWidth - showPosX - epgUiDetails.TVSHOW_LEFT_MARGIN;
			}
			if (epgUiDetails.TVSHOW_CORNER_RADIUS > 0) {
				if (showStart !== this.start) {
					if (showEnd !== end) {
						corners = '';
					} else {
						if (epgUiDetails.EPG_DIRECTION === TvShowRepr.directions.rtl) {
							corners = TvShowRepr.showCorners.left;
						} else {
							corners = TvShowRepr.showCorners.right;
						}
					}

				} else if (showEnd !== end) {
					if (epgUiDetails.EPG_DIRECTION === TvShowRepr.directions.rtl) {
						corners = TvShowRepr.showCorners.right;
					} else {
						corners = TvShowRepr.showCorners.left;
					}

				} else {
					corners = TvShowRepr.showCorners.neutral;
				}
				this.hasRoundedCorners = true;
			}
			var classes = this.cssClasses();
			var appClass = classes.length ? ' class="' + classes.join(' ') + '"' : '';

			var markup = ''.concat(
				'<g id="P', this.id, '" transform="translate(', posX, ',0)"', appClass,
				'><rect height="', epgUiDetails.TVSHOW_HEIGHT, '" width="', posWidth.toString(),
				this.hasRoundedCorners ? '" ' + corners + '/>' : '"/>'
			);

			if (showTitle) {
				markup = markup.concat(
					'<text x="5" y="', epgUiDetails.TVSHOW_TEXT_OFFSET, '" width="',
					(posWidth < 10 ? 0 : posWidth - 10).toString(), '">',
					this.getTitle().encodeEntities(), '</text>'
				);
			}

			return markup.concat('</g>');
		},
		destroy: function () {
			this.$domDeReference();
			if (TvShowRepr.showRepository)
				delete TvShowRepr.showRepository.tvShowsMap[this.id];
		},
		toString: function () {
			return TvShow.prototype.toString.apply(this, ['TvShowRepr']);
		}
	};
	TvShowRepr.showRepository = null;
	Object.extend(TvShowRepr, TvShow);

	function BrokenTvShow(channelId) {
		TvShowRepr.call(this, {
			'id': --BrokenTvShow.brokenTvShowIndex,
			'channelId': channelId,
			'start': Date.now(),
			'duration': 864000000,
			'title': tr('TvShowDataNotAvailableTitle'),
			'description': tr('TvShowDataNotAvailableDescription')
		});
	}
	BrokenTvShow.brokenTvShowIndex = 0;
	BrokenTvShow.prototype = {
		_error: true,
		getTitle: function () { return this.title; },
		getDescription: function () { return q(this.description); },
		toString: function () {
			return TvShow.prototype.toString.apply(this, ['BrokenTvShow']);
		}
	};
	Object.extend(BrokenTvShow, TvShowRepr);

	function ChannelCacheDescriptor(id, tvShowIds, day, fresh, stillLoading, error) {
		this.id = id;
		this.showIdList = tvShowIds || [];
		this.forDay = day;
		this.timestamp = Date.now();
		this.fresh = typeof fresh === 'undefined' ? true : fresh;
		this.loading = typeof stillLoading === 'undefined' ? false : stillLoading;
		this.error = typeof error === 'undefined' ? false : error;
	}
	ChannelCacheDescriptor.rootDom = null;
	ChannelCacheDescriptor.showRepository = null;
	ChannelCacheDescriptor.prototype = {
		id: null,
		drawn: false,
		timestamp: null,
		fresh: true,
		showIdList: [],
		loading: false,
		forDay: null,
		error: false,
		get svgId() {
			return 'epgshowchan_' + this.id;
		},
		cleanMatrixView: function cleanMatrixView() {
			var audit = 'CH CACHE DESC .cleanMatrixView() ';
			var showRepo = ChannelCacheDescriptor.showRepository;
			var ids = [];
			for (var i = 0, id; (id = this.showIdList[i++]);) {
				if (showRepo.containsId(id)) showRepo.getById(id).$domDeReference();
				else ids.push(id);
			}
			if (ids.length) {
				BS.logger.debug(audit + 'Inconsistent this.showIdList with showRepo for: %s',
					ids.join(', '));
			}

			if (this.isDrawn()) {
				getDom(this.svgId).remove();
			}
			this.drawn = false;

			return this;

			function getDom(svgId) {
				return $(ChannelCacheDescriptor.rootDom !== null ?
					ChannelCacheDescriptor.rootDom.getElementById(svgId) :
					document.getElementById(svgId)
				);
			}
		},
		drawOnMatrixView: function drawOnMatrixView() {
			this.drawn = true;
			return this;
		},
		generateMarkup: function generateMarkup(position, epgUiDetails) {
			var showRepo = ChannelCacheDescriptor.showRepository;
			var ret = ''.concat('<g id="epgshowchan_', this.id,
				'" class="epg-ch" transform="translate(', epgUiDetails.EPG_ROW_X_OFFSET,',',
				(position * epgUiDetails.EPG_ROW_HEIGHT).toString(), ')">');

			var markup = '';

			var i = this.showIdList.length;
			while (i--) {
				var id = this.showIdList[i];
				markup = showRepo.getById(id).generateMarkup(this.forDay, epgUiDetails)
					.concat(markup);
			}

			return ret.concat(markup, '</g>');
		},
		destroy: function cleanChannelView() {
			var audit = 'CH CACHE DESC .destroy() ';
			BS.logger.trace(audit + '#%d channel cache @ day %s (# shows %d)'
					.sprintf(this.id, this.forDay.toShortString(), this.showIdList.length)
			);
			this.showIdList = [];
			this.drawn = false;
			this.toReload();
			return this;
		},
		loadingInProgress: function () {
			return this.loading === true && this.fresh === true;
		},
		isDrawn: function () {
			return this.drawn;
		},
		eachShow: function (it) {
			var showRepo = ChannelCacheDescriptor.showRepository;
			for (var i = 0, pId; (pId = this.showIdList[i++]);)
				it.call(this, showRepo.getById(pId));
			return this;
		},
		isFresher: function (timestamp) {
			return this.timestamp >= timestamp && this.fresh === true;
		},
		isToReload: function () {
			return this.loading === false && this.fresh === false;
		},
		toReload: function () {
			this.fresh = false;
			return this;
		},
		toString: function (verbose) {
			if (!verbose)
				return 'ChannelCacheDescriptor#%d (%s)/%s%s/%d'.sprintf(this.id,
					this.showIdList.length, this.fresh ? '' : 'DIRTY|',
					new Date(this.forDay).toFormattedString('dd.MM.yyyy', false), this.timestamp);
			var res = this.toString();
			var showRepo = ChannelCacheDescriptor.showRepository;
			res += '\r\n[\r\n';
			this.showIdList.map(function(pid) {
				return showRepo.containsId(pid) ? showRepo.getById(pid) : (pid + ' does not exist');
			}).forEach(function(show) {
				res += '  ';
				res += typeof show === 'string' ? show : show.toString();
				res += '\r\n';
			});
			res += ']\r\n';
			return res;
		}
	};

	function TvShowRepository(pictureRepository) {
		this.tvShowsMap = {};
		this.channels = {};
		this.loadChanPromises = {};
		this.cachedAllResponses = {};
		this.loadAllPromises = {};
		this.pictureRepository = pictureRepository;
	}

	TvShowRepository.DataChangedEvent = function DataChangedEvent(date, source, channels) {
		this.data = { date: date, source: source, channels: channels };
	};
	TvShowRepository.DataChangedEvent.prototype = {
		handler: 'onShowRepositoryDataChanged',
		type: 'ShowRepositoryDataChangedEvent',
		description: 'When tv show repository has new shows or some shows have been updated'
	};
	Object.extend(TvShowRepository.DataChangedEvent, BS.Event);

	TvShowRepository.tvLib = BeeSmartMain.tvLibrary;

	TvShowRepository.prototype = {
		epgPageSizes: {
			'UNKNOWN': 1200,
			'MIN': null,
			'MID': null,
			'MAX': null
		},
		tvShowsMap: {},
		channels: {},
		cachedAllResponses: {},
		loadChanPromises: {},
		loadAllPromises: {},
		brokenChannelCacheDescriptors: [],
		pictureRepository: null,
		getById: function(id) {
			return this.tvShowsMap[id];
		},
		containsId: function(id) {
			return id in this.tvShowsMap;
		},
		getDescriptor: function(date, channelId) {
			var day = date.getDate();
			if (day in this.channels && channelId in this.channels[day])
				return this.channels[day][channelId];
			return null;
		},
		tvShowFactory: function(props) {
			var ShowType = IS_COLIBRY ? TvShow : TvShowRepr;
			return new ShowType(props);
		},
		clearCachedResponses: function() {
			this.cachedAllResponses = {};
		},
		loadAllForToday: function() {
			return this.loadAllForDate(new Date());
		},
		loadAllForDate: function(date) {
			var dfr = q.defer();
			var that = this;
			var forDate = date || new Date();
			var epgDay = forDate.getDate();
			var audit = 'TV SHOW REPO .loadAllForDate(%s) '.sprintf(epgDay);

			if (epgDay in that.loadAllPromises)
				return that.loadAllPromises[epgDay];
			that.loadAllPromises[epgDay] = dfr.promise;

			var t1 = Date.now();
			var callback = function loadWholeDayEpgCbkWrapper(dateObj, status) {
				if (epgDay in that.loadAllPromises)
					delete that.loadAllPromises[epgDay];
				BS.logger.debug(audit + 'Done in %d ms'.sprintf(Date.now() - t1));
				dfr.resolve({ date: dateObj, status: status });
			};

			var getEpgData = function (page, pageSize) {
				var cacheKey = epgDay + '_' + page;
				var reqData = {
					'date': forDate.toFormattedString('yyyy-MM-dd', false),
					'time_zone': Date.getUTCOffset(),
					'language': BS.portal.user.language.label
				};

				if (pageSize === 1200) {
					reqData['page_size'] = pageSize;
					reqData['page'] = page || 1;
				}

				try {
					var chVersions = BS.resourceDataVersions.epgChannels;
					var versions = [];
					for (var i in chVersions) {
						if (chVersions.hasOwnProperty(i))
							versions.push(chVersions[i]);
					}
					versions.sort();
					versions.reverse();
					reqData.v = versions[0];
				} catch (x) {
					BS.logger.debug(audit + 'No version param will be set for' +
						' /restapi/rest/%s/tvprogram due to:\n' + x);
				}

				BS.request.Get('/restapi/rest/%s/tvprogram'.sprintf(BS.regionId), {
					'accept': 'json',
					'timeout': 50000,
					'data': reqData,
					'noCachedData': cacheKey in that.cachedAllResponses
				}).then((function (fDate) { return function (r) {
						BS.logger.trace(audit + 'Headers: %s \nHTTP status: %d ',
							Object.serialize(r.headers), r.status);

						var epgDay = fDate.getDate();
						if (
							cacheKey in that.cachedAllResponses &&
							r.lastModified === that.cachedAllResponses[cacheKey]
						) {
							BS.logger.debug(audit + ' ALL SHOWS cache HIT');
							callback(fDate, 'cached');
							return;
						} else {
							BS.logger.debug(
								audit + 'ALL SHOWS to store in cache (ts: %s)!!', r.lastModified
							);
							that.cachedAllResponses[cacheKey] = r.lastModified;
						}

						var d = r.data.list;
						var tvShow = null;
						var chRatings = [];
						var chs = that.channels[epgDay] || (that.channels[epgDay] = {});
						var eChs = [];
						if (page === 1) {
							TvShowRepository.tvLib.getChannels().forEach(function (ch) {
								if (ch.id in chs) {
									chs[ch.id].showIdList = [];
									chs[ch.id].fresh = true;
								} else {
									chs[ch.id] = new ChannelCacheDescriptor(ch.id, [], fDate);
								}
								chs[ch.id].timestamp = r.lastModified;

								if (TvShow.isForbiddenChTempAllowed(ch, BS.portal.user))
									chRatings.push(ch.id);
							});
						}
						var ingestedShowsCount = 0;
						for (var i = 0, showData; (showData = d[i++]);) {
							if (!(showData.channelId in chs)) {
								eChs.push(showData.channelId);
								continue;
							}
							showData.description = null;
							tvShow = that.tvShowFactory(showData);
							that.tvShowsMap[tvShow.id] = tvShow;
							if (tvShow._channel in chs) {
								chs[tvShow._channel].showIdList.push(tvShow.id);
							}
							if (chRatings.indexOf(tvShow._channel) !== -1) tvShow.redrawTitle();
							ingestedShowsCount++;
						}

						if (eChs.length) {
							eChs = (eChs.sort()).filter(filterDuplicates);
							BS.logger.info(audit + 'Inconsistency of getChannelList and OA ' +
								'show list detected for following channel ids: %s', eChs);
						}

						BS.logger.info(audit + 'Just got fresh %d shows', ingestedShowsCount);

						if (r.data.nextPageLink !== null) {
							getEpgData(page + 1, pageSize);
						} else {
							var chIds = TvShowRepository.tvLib.getChannels().map(toId);
							em.dispatch(new TvShowRepository.DataChangedEvent(
								date, 'load-all', chIds
							));
							callback(fDate, 'fresh');
						}
					}; })(Object.clone(forDate))
				).catch((function (fDate) {
						return function (ex) {
							BS.logger.info(audit + 'Failed: %s', ex);
							callback(fDate, 'failed');
						};
					})(Object.clone(forDate))).done();
			};
			getEpgData(1, that.epgPageSizes[BS.device.performanceIndex]);

			return dfr.promise;

			function filterDuplicates(v, i, o) {
				return i > -1 && v !== o[i - 1] ? v : false;
			}
		},
		loadChannel: function(chId, date) {
			date = date || new Date();
			var that = this;
			var dfr;
			var epgDay = parseInt(date.getDate());
			var audit = 'TV SHOW REPO .loadChannel(%s, %d) '.sprintf(chId, epgDay);
			BS.logger.trace(audit);

			if (
				parseInt(chId, 10) === 0 ||
				isNaN(parseInt(chId, 10)) ||
				chId === BS.TvModel.BlankChannel.id
			) {
				return q.delay(0).then(function () {
					return { channelId: chId, date: date };
				});
			}

			var chs = this.channels[epgDay];
			if (chs && chs[chId] && chs[chId].isToReload() === false) {
				BS.logger.trace(audit + 'Pure cache hit %s', chs[chId]);
				return q.delay(0).then(function () {
					return { channelId: chId, date: date, showIdList: chs[chId].showIdList };
				});

			} else if (chs && chs[chId] && chs[chId].loadingInProgress()) {
				BS.logger.trace(audit + 'Called during channel data loading for %s', chs[chId]);
				return this.loadChanPromises[chId][epgDay];

			} else {
				dfr = q.defer();
				if (!this.loadChanPromises[chId])
					this.loadChanPromises[chId] = {};

				if (!this.loadChanPromises[chId][epgDay]) {
					this.loadChanPromises[chId][epgDay] = dfr.promise.finally(function () {
						delete this.loadChanPromises[chId][epgDay];
						if (Object.isEmpty(this.loadChanPromises[chId]))
							delete this.loadChanPromises[chId];
					}.bind(this));
				}

				BS.logger.trace(audit + 'Not cached 1 (%s)', chs ? chs[chId] : 'unavailable');
				chs = chs || (this.channels[epgDay] = {});

				if (chId in chs) {
					chs[chId].fresh = true;
					chs[chId].loading = true;
					BS.logger.trace(audit + 'Not cached 2.1');
				} else {
					chs[chId] = new ChannelCacheDescriptor(chId, [], date, true, true);
					BS.logger.trace(audit + 'Not cached 2.2');
				}

				var qParams = {
					'channel_id': chId,
					'date': '%d-%02d-%02d'.sprintf(
						date.getFullYear(), date.getMonth() + 1, date.getDate()),
					'time_zone': Date.getUTCOffset(),
					'language': BS.portal.user.language.label
				};
				try {
					qParams.v = BS.resourceDataVersions.epgChannels[chId];
				} catch (x) {
					BS.logger.debug(audit + 'No version param will be set for' +
						' /restapi/rest/%s/tvprogram due to:\n' + x);
				}

				BS.request.Get('/restapi/rest/%s/tvprogram'.sprintf(BS.regionId), {
					accept: 'json',
					preventEvent: true,
					data: qParams
				}).then(
					dataGetterCallback,
					function () { return dataGetterCallback({data:{list: []}}); }
				).done();

				BS.logger.trace(audit + 'Not cached 3 (fresh || loading) -> (%b || %b)',
					chs[chId].fresh, chs[chId].loading);
			}

			return dfr.promise;

			function dataGetterCallback(result) {
				var tempIDs = [];
				var i, len;
				var shows = result.data.list;
				if (result.success) {
					BS.logger.trace(audit + 'Success: not cached 4, chs count: %d'
						.sprintf(shows.length));
				} else {
					shows = [false];
					BS.logger.trace(audit + 'Http error: not cached 4');
				}

				var toAllow = TvShow
					.isForbiddenChTempAllowed(TvShowRepository.tvLib.getChannelById(chId, true),
						BS.portal.user);
				for (i = 0, len = shows.length; i < len; i++) {
					var tvShow = null;
					if (shows[i]) {
						tvShow = that.tvShowFactory(shows[i]);
					} else {
						tvShow = new BrokenTvShow(chId);
						that.brokenChannelCacheDescriptors.push({channelId: chId, day: epgDay});
					}
					that.tvShowsMap[tvShow.id] = tvShow;
					tempIDs.push(tvShow.id);
					if (toAllow)
						tvShow.redrawTitle();
				}

				chs[chId].showIdList = tempIDs;
				chs[chId].fresh = true;
				chs[chId].loading = false;

				BS.logger.trace(
					audit + 'Channel updated/added with shows %s'.sprintf(chs[chId])
				);

				dfr.resolve({ channelId: chId, date: date, showIdList: tempIDs });
				that.loadChanPromises[chId][date.getDate()] = null;
			}
		},
		cleanupCache: function() {
			var audit = 'TV SHOW REPO .cleanupCache() ';
			var that = this;
			var ts = Date.now();
			var tmp = [];
			var pId;
			BS.logger.trace(audit + 'CleanupCache A initiated');

			var currentDayOfMonth = new Date().getDate();

			for (var dayOfMonth in that.channels) {
				if (that.channels.hasOwnProperty(dayOfMonth)) {
					delete that.cachedAllResponses[dayOfMonth];
					if (+dayOfMonth !== currentDayOfMonth) {
						BS.logger.trace(audit + 'Cache of day %d cleanup'.sprintf(dayOfMonth));
						Object.eachKey(this.channels[dayOfMonth], function(chId) {
							this[chId].destroy();
						});
						delete this.channels[dayOfMonth];
					}
				}
			}

			var today0Ts = new Date();
			today0Ts.setHours(0, 0, 0, 0);
			today0Ts = today0Ts.valueOf();
			var tomorrow0Ts = new Date(today0Ts + 864e5).valueOf();
			var pLinksCount = that.pictureRepository.size;

			var deletedCount = 0;
			for (pId in this.tvShowsMap)
				if (this.tvShowsMap.hasOwnProperty(pId))
					tmp.push(this.tvShowsMap[pId]);

			for (var i = 0, tvShow; (tvShow = tmp[i++]);) {
				if (tvShow.end < today0Ts || tvShow.start > tomorrow0Ts) {
					that.pictureRepository.removeByValue(tvShow._pictureLink);
					tvShow.destroy();
					deletedCount++;
				}
			}

			BS.logger.debug(
				audit + 'CleanupCache A end. Statistics:' +
				'\n* Show repository size: %d (delta %d)' +
				'\n* Picture repository links size: %d (delta %d)' +
				'\n* ======= Time used for cleanup %dms',
				tmp.length - deletedCount,
				deletedCount,
				pLinksCount,
				pLinksCount - that.pictureRepository.size,
				Date.now() - ts
			);
		},
		cleanBrokenChannelCacheDescriptors: function () {
			this.brokenChannelCacheDescriptors.forEach(function (d) {
				if (d.day in this.channels) {
					var chs = this.channels[d.day][d.channelId];
					chs.cleanMatrixView();
					chs.destroy();
				}
			}.bind(this));

			BS.logger.trace(
				'TV SHOW REPO .cleanBrokenChannelCacheDescriptors() ' +
					'Cleared %d ChannelCacheDescriptor objects with BrokenTvShows',
				this.brokenChannelCacheDescriptors
			);
			this.brokenChannelCacheDescriptors = [];
		},
		clearChannels: function(channelIds) {
			this.clearCachedResponses();
			channelIds.forEach(function (channelId) {
				for (var day in this.channels) {
					if (!this.channels.hasOwnProperty(day))
						continue;

					var chcd = this.channels[day][channelId];
					if (!chcd)
						continue;
					chcd.cleanMatrixView();
					chcd.eachShow(this._correctlyDestroyShow.bind(this));
					chcd.destroy();
				}
			}.bind(this));
		},
		clearChannel: function(channelId, timestamp) {
			var audit = 'TV SHOW REPO .clearChannel(%s, %d) '.sprintf(channelId, timestamp);
			var that = this;
			for (var day in this.channels) {
				if (!this.channels.hasOwnProperty(day))
					continue;
				if (!(channelId in this.channels[day]))
					continue;

				var chcd = this.channels[day][channelId];
				if (chcd.isFresher(timestamp))
					continue;

				var ts = Date.now();
				var pLinksCount = this.pictureRepository.size;
				var deletedCount = 0;
				BS.logger.debug(audit + ' Clearing for day %s', day);


				chcd.cleanMatrixView();
				chcd.eachShow(correctlyDestroyShow);
				chcd.destroy();

				BS.logger.debug(
					audit + 'Completed for day %s. Statistics:' +
					'\n* Show repository delta: %d' +
					'\n* Picture repository links size: %d (delta %d)' +
					'\n* ======= Time used for cleanup %dms',
					day,
					deletedCount,
					pLinksCount,
					pLinksCount - this.pictureRepository.size,
					Date.now() - ts
				);
			}

			function correctlyDestroyShow(tvShow) {
				if (tvShow) {
					that._correctlyDestroyShow(tvShow);
					deletedCount++;
				}
			}
		},
		_correctlyDestroyShow: function(tvShow) {
			if (tvShow) {
				this.pictureRepository.removeByValue(tvShow._pictureLink);
				tvShow.destroy();
			}
		}
	};

	function PictureRepository() {}
	PictureRepository.prototype = {
		length: 0,
		list: {},
		put: function (pictureLink) {
			var picStrRef = pictureLink;
			if (picStrRef in this.list) {
				this.list[picStrRef].count++;
				return this.list[picStrRef].link;
			} else {
				this.list[picStrRef] = {
					count: 0,
					link: picStrRef
				};
				this.length++;
				return picStrRef;
			}
		},
		removeByValue: function (item) {
			if (item in this.list) {
				this.list[item].count--;
				if (this.list[item].count === 0) {
					delete this.list[item];
					this.length--;
				}
			}
		},
		get size() {
			return this.length;
		}
	};

	if (!BS.ShowModel)
		BS.ShowModel = {};
	BS.ShowModel.TvShow = TvShow;
	BS.ShowModel.TvShowRepr = TvShowRepr;
	BS.ShowModel.BrokenTvShow = BrokenTvShow;
	BS.ShowModel.ChannelCacheDescriptor = ChannelCacheDescriptor;

	BS.ShowModel.TvShowRepository = TvShowRepository;
	BS.ShowModel.PictureRepository = PictureRepository;

	BS.ShowModel.pictureRepository = new PictureRepository();

	var tvShowRepo = new TvShowRepository(BS.ShowModel.pictureRepository);
	BS.ShowModel.showRepository = tvShowRepo;

	TvShowRepr.showRepository = tvShowRepo;
	ChannelCacheDescriptor.showRepository = tvShowRepo;

	em.bind('onBeeSmartReady', function () {
		BS.backgroundService.addTask(function () {
			if (am.isLoaded('EpgMatrixView')) {
				BS.logger.trace('Epg Cleaner will not clear as Matrix EPG is shown on the screen');
				return;
			}
			tvShowRepo.cleanBrokenChannelCacheDescriptors();
		}, {
			interval: 60e3,
			name: 'Broken Tv Show Channel Cache descriptor cleaner'
		});
	});

	em.bind('onShowRemindersRepositoryInitialized', function(ev) {
		TvShow.showRemindersRepository = ev.data;
	});

	em.bind('onShowRemindersRepositoryAdded', function(ev) {
		var reminder = ev.data;
		var tvShow = tvShowRepo.getById(reminder.id);
		if (tvShow)
			tvShow.markStyle('reminder');
	});

	em.bind('onShowRemindersRepositoryRemoved', function(ev) {
		var reminder = ev.data;
		var tvShow = tvShowRepo.getById(reminder.id);
		if (tvShow)
			tvShow.unmarkStyle('reminder');
	});

	em.bind('onDayChange', function () {
		if (IS_COLIBRY === true) {
			tvShowRepo.cleanupCache();
		}
	});

	em.bind('onEpgChanged', function (ev) {
		var audit = 'TV SHOW MODEL Event:onEpgChanged';
		var chIds = ev.data;
		var currentDate = new Date();

		BS.logger.debug(audit + 'Shows changed for %d channels', chIds.length);
		if (chIds.length > 10) {
			BS.logger.debug(audit + 'Doing refresh based on whole day EPG method');
			tvShowRepo.clearChannels(chIds);
			tvShowRepo.loadAllForToday().done();
			return;
		}

		BS.logger.debug(audit + 'Doing refresh based on per channel EPG method', chIds.length);
		chIds.forEach(function (channelId) {
			var timestamp = ev.data[channelId];
			tvShowRepo.clearChannel(channelId, timestamp);
		});

		var prmsChLoads = chIds.map(function (chId) {
			return function () {
				var dfr = q.defer();
				try {
					tvShowRepo.channels[currentDate.getDate()][chId].toReload();
					if (am.isLoaded('EpgMatrixView')) {
						return tvShowRepo.loadChannel(chId, currentDate);
					}
					dfr.resolve();
				} catch (x) {
					BS.logger.log(x);
					dfr.reject(x);
				}
				return dfr.promise;
			};
		});

		q.allSettled(prmsChLoads).finally(function () {
			em.dispatch(new BS.ShowModel.TvShowRepository.DataChangedEvent(
				new Date(), 'updated-channel-shows', chIds));
		}).done();
	});

	new BS.Module({
		id: 'EpgModel',
		requiredLicense: 'epg && livetv',
		startupTasks: [
			{
				name: 'EPG Model all day request',
				payload: function (params, callback) {
					TvShow.captions.pcTitle = tr('parentalControl_label').encodeEntities();
					TvShow.captions.pcDescription = tr('parentalControl_locked').encodeEntities();
					TvShow.tvShowViewPurchaseService = BS.ShowModel.tvShowViewPurchaseService;

					tvShowRepo.loadAllForToday().then(function loadAllCbk() {
						callback();
						var n = new Date();
						var tomorrow;
						var timeWindow = BS.config.get('Core.Client.FRESH_CONTENT_START');
						var mdt = new Date(n.getYear() + 1900, n.getMonth(),
							n.getDate() + 1).valueOf();

						var untilBigCall =
							Math.round(mdt - n.valueOf() - (timeWindow * Math.random())) - 30e3;
						if (untilBigCall <= 0)
							untilBigCall = Math.round((mdt - n.valueOf()) * Math.random());

						(function theBigEpgCall(countDownTimeMs) {
							BS.logger.debug('EPG MODEL .startupTask Schedule load all day epg ' +
								'call in %d s', countDownTimeMs / 1000);
							setTimeout(function () {
								theBigEpgCall(24 * 3600e3);
								(tomorrow = new Date()).setDate(tomorrow.getDate() + 1);
								tvShowRepo.loadAllForDate(tomorrow).done();
							}, countDownTimeMs);
						})(untilBigCall);
					}).done();
				}
			}
		]
	});

	function toId(i) { return i.id; }

})(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.evMgr
);

(function (BS, q, mm, am, em, bmisc, PVR, NiceException) {

	var BeeSmartMain = mm.getModule('BeeSmartMain');

	function getMaxDaysOffset() {
		return BS.config.get('Epg.Client.MAX_DAYS_OFFSET');
	}

	function isRecordingAdoptionEnabled() {
		return PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.Adopt);
	}

	function isEpisodeAdoptionEnabled() {
		return PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.AdoptEpisode);
	}

	function isSeriesRecordingEnabled() {
		return PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.Series);
	}

	function toId(el) { return el.id; }

	function isBroadpeakWorkaroundEnabled(showRecording, skinConfiguration) {
		var start = parseInt(showRecording.start, 10);
		var end = parseInt(showRecording.end, 10);
		if (!skinConfiguration.workarounds.enableBroadpeakPlayNowParameter) return;
		var endDelta = skinConfiguration.workarounds.broadpeakPlayNowParameterDeltaInSeconds || 0;
		return start < Date.now() && (end + endDelta * 1e3) > Date.now();
	}

	function applyBroadpeakPlayNow(mediaResources) {
		function addQueryParam(srcUrl) {
			return srcUrl.indexOf('?') !== -1
				? (srcUrl + '&pl=nw')
				: (srcUrl + '?pl=nw');
		}
		return mediaResources.map(function (mr) {
			if (!BS.media.VendorMediaResources.isOtt(mr)) {
				mr.src = addQueryParam(mr.src);
			}
			return mr;
		});
	}

	function ShowService(showRepository, tvShowViewPurchaseService, liveTvApp, pvrProxy) {
		this.showRepository = showRepository;
		this.tvShowViewPurchaseService = tvShowViewPurchaseService;
		this.liveTvApp = liveTvApp;
		this.pvrProxy = pvrProxy;
	}

	ShowService.prototype = {
		showRepository: null,
		tvShowViewPurchaseService: null,
		showRemindersRepository: null,
		liveTvApp: null,
		pvrProxy: null,
		getCapabilities: function (show) {
			var isWatchChannelSupported = true;
			var cChan = this.liveTvApp.getCurrentChannel();
			var currentShow = this.getCurrentShow(cChan);
			if ((show && cChan.equals(show.channel())) || am.isLoaded('EpgColumnView') ||
				(currentShow && this.tvShowViewPurchaseService.canOfferSale(currentShow))
			) isWatchChannelSupported = false;

			var emptyObj = {
				watchable: isWatchChannelSupported,
				parentalRestriction: false,
				reminder: false,
				pvr: 'unrecordable',
				channel: 'unlicensed',
				play: false,
				descriptionPresent: false,
				recommendToFriend: false,
				showPurchase: false,
				series: null,
				adoptEpisode: false
			};

			var channel = 'normal';
			var pvr = 'unrecordable';
			var reminder = false;
			var play = false;
			var parentalRestriction = !show.isShowAllowed();
			var ch = show.channel();
			var isPurchasable = ch.isPurchasable(BS.config
				.get('Purchase.Client.CH_PURCHASE_ENABLED'));
			var showPurchase = false;
			var series = null;
			var adoptEpisode = false;

			if (!ch.broadcasting)
				return emptyObj;

			if (ch.isPurchased()) channel = 'unlocked';
			else if (isPurchasable) channel = 'unlocked';
			else if (!isPurchasable) channel = 'unlocked';

			emptyObj.channel = channel;

			if (!show || show.isTvShowBroken()) {
				return emptyObj;
			}

			var unRecordable = !show.isRecordable() || !ch.isPlayable();
			var start = show.start.valueOf();
			var end = show.end.valueOf();
			var existingRecording = this.pvrProxy.recordedClips[show.id];
			var now = Date.now();
			var offset = 1e4;
			var descriptionPresent = show.title ? true : false;
			var recommendToFriend = show.title && mm.isAllowed('mediasharing') ? true : false;
			var timelinePosition = 'recording';

			var showRec = PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.Program);
			var catchUpRec = PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.CatchUp);
			var startOverTv = PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.StartOver);
			var localRecCheck = PVR.featurePolicy
				.isFeatureAvailable(PVR.RecordingFeatures.LocallyPersisted) ?
				ch.localRecordable :
				true;

			if ((end + offset) < now) {
				timelinePosition = 'past';
			} else if ((start - offset) > now) {
				timelinePosition = 'future';
			}

			var aRecClip = false;
			var aRecTime = ch.isTimeshifted() ? ch.autoRecExpiration : false;
			var aRecCond = aRecTime === true ? getMaxDaysOffset() * 86400000 : aRecTime;

			if (
				aRecTime &&
				show &&
				show.isRecordable() &&
				show.start < now &&
				show.start > (now - aRecCond)
			) aRecClip = true;

			if (existingRecording && timelinePosition === 'past' && !unRecordable) {
				play = 'manRecorded';
			} else if (aRecClip && (channel === 'normal' || channel === 'unlocked')) {
				if (timelinePosition === 'recording') {
					if (startOverTv && !show.barred)
						play = 'playAutoRecordedInProgress';
				} else {
					play = 'playAutoRecorded';
				}
			}

			if (ch.autoRecord && !unRecordable) {
				if (catchUpRec) {
					if (
						(
							(timelinePosition === 'future' || timelinePosition === 'past') &&
							existingRecording
						) ||
						(
							(timelinePosition === 'recording' && startOverTv) &&
							ch.recordable &&
							showRec &&
							aRecClip &&
							existingRecording &&
							isRecordingAdoptionEnabled()
						)
					) {
						pvr = 'deleteRecording';

					} else if (timelinePosition === 'future' && !ch.recordable) {
						pvr = 'unrecordable';

					} else if (
						timelinePosition === 'future' &&
						ch.recordable &&
						showRec &&
						localRecCheck
					) {
						pvr = 'recordable';

					} else if (
						isRecordingAdoptionEnabled() &&
						(
							timelinePosition === 'past' ||
							(timelinePosition === 'recording' && !show.barred)
						) &&
						aRecClip && !existingRecording
					) {
						pvr = 'adoptAutoRec';
					}

				} else {
					pvr = 'unlicensed';
					play = false;
				}

			} else if (ch.recordable && !ch.autoRecord && !unRecordable) {
				if (showRec) {
					if (existingRecording) {
						if (
							timelinePosition === 'past' ||
							timelinePosition === 'recording'
						) {
							play = timelinePosition === 'past' ?
								'manRecorded' : 'playAutoRecordedInProgress';
							pvr = 'deleteRecording';
						} else if (timelinePosition === 'future') {
							pvr = 'cancelable';
						}

					} else if (!existingRecording) {
						if (timelinePosition === 'past' || timelinePosition === 'recording') {
							pvr = 'unrecordable';
						} else if (timelinePosition === 'future' && localRecCheck) {
							pvr = 'recordable';
						}
					}
				} else {
					pvr = 'unlicensed';
				}
			} else {
				pvr = 'channelUnrecordable';
				if (existingRecording) {
					if (timelinePosition === 'past')
						pvr = 'deleteRecording';
					else if (timelinePosition === 'future')
						pvr = 'cancelable';
				}
			}


			if (this.tvShowViewPurchaseService.canOfferSale(show)) {
				showPurchase = true;
				pvr = 'unrecordable';
				play = false;
			}

			if (this.showRemindersRepository) {
				if (this.showRemindersRepository.containsId(show.id)) {
					reminder = 'unset';
				} else {
					reminder = timelinePosition === 'future' &&
					['normal', 'unlocked'].indexOf(channel) !== -1 ? 'set' : false;
				}
			}

			if (!mm.appExists('pvr'))
				pvr = 'unlicensed';

			if (show.seriesUid &&
				pvr === 'recordable' &&
				isSeriesRecordingEnabled() && !BS.recorder.isSeriesScheduled(show.seriesUid,
					show._channel) &&
				timelinePosition === 'future' && showRec
			) {
				series = 'recordSeries';
			} else if (
				IS_COLIBRY !== true &&
				show.seriesUid &&
				BS.recorder.isSeriesScheduled(show.seriesUid, show._channel)
			) {
				series = 'deleteSeries';
				if (isEpisodeAdoptionEnabled() &&
					timelinePosition === 'past' &&
					existingRecording &&
					existingRecording.partOfSeries === show.seriesUid
				) {
					adoptEpisode = true;
					pvr = null;
				} else if (timelinePosition !== 'past') {
					pvr = null;
				}
			}
			return {
				watchable: isWatchChannelSupported && !parentalRestriction,
				parentalRestriction: parentalRestriction && this.liveTvApp.showAgeForbiddenChannels,
				reminder: !parentalRestriction && reminder,
				pvr: !parentalRestriction && pvr,
				channel: channel,
				play: !parentalRestriction && play,
				possibleRecordingType: play || null,
				descriptionPresent: !parentalRestriction && descriptionPresent &&
					!am.isLoaded('epgTvShowDetails') && !am.isLoaded('tvShowDetails'),
				recommendToFriend: !parentalRestriction && recommendToFriend && IS_COLIBRY !== true,
				showPurchase: !parentalRestriction && showPurchase,
				series: !parentalRestriction && series,
				adoptEpisode: !parentalRestriction ? adoptEpisode : false
			};
		},
		getNextShow: function (channel) {
			return this.getNextShowAfter(channel);
		},
		getNextShowAfter: function (channel, afterShow, afterDate) {
			afterDate = afterDate || new Date();
			var forDay = afterDate.getDate();
			var showRepo = this.showRepository;
			var chs = showRepo.channels[forDay];
			var channelId = channel.id;

			if (!(chs && chs[channelId])) {
				return null;
			}

			var showIdList = chs[channelId].showIdList;
			var nextShow = null;
			var referenceShow = afterShow ? showRepo.getById(afterShow.id) : null;
			var show;
			for (var i = 0; i < showIdList.length; i++) {
				if (!(show = showRepo.getById(showIdList[i])))
					continue;

				if (!referenceShow) {
					if (show.start < afterDate.valueOf())
						continue;

				} else {
					if (show.start < referenceShow.end)
						continue;
				}

				if (nextShow && nextShow.start < show.start)
					continue;

				nextShow = show;
			}
			return nextShow;
		},
		getPreviousShowBefore: function (channel, beforeShow, beforeDate) {
			beforeDate = beforeDate || new Date();
			var day = beforeDate.getDate();
			var showRepo = this.showRepository;
			var chs = showRepo.channels[day];
			var channelId = channel.id;

			if (!(chs && chs[channelId]))
				return null;

			var showIdList = chs[channelId].showIdList;
			var prevShow = null;
			var referenceShow = beforeShow ? showRepo.getById(beforeShow.id) : null;
			var show;

			for (var i = showIdList.length - 1; i >= 0; i--) {
				if (!(show = showRepo.getById(showIdList[i])))
					continue;

				if (!referenceShow) {
					if (show.end >= beforeDate.valueOf())
						continue;

				} else {
					if (show.end > referenceShow.start)
						continue;
				}

				if (prevShow && prevShow.start >= show.end)
					continue;

				prevShow = show;
			}

			return prevShow;
		},
		getCurrentShow: function (channel) {
			var currentDate = new Date();
			var day = currentDate.getDate();
			var now = currentDate.getTime();
			var doStackTrace = true;
			var shows = [];
			var channelId;
			try {
				channelId = channel.id;
				shows = this.showRepository.getDescriptor(currentDate, channelId).showIdList;
			} catch (x) {
				return null;
			}
			for (var i = 0; i < shows.length; i++) {
				var show = this.showRepository.getById(shows[i]);
				if (!show) {
					BS.logger.trace('SHOW SRV .getCurrentShow(%d) Show not found on channel that ' +
						'should have this show!\n' + 'Show inconsistency id: %d, day: %d',
						channelId, shows[i], day);
					if (doStackTrace) {
						BS.logger.debug(Error.getJsStack());
						BS.logger.debug('NOTE: Only one stack trace is printed');
					}
					doStackTrace = false;
					continue;
				}

				if (show.start > now)
					break;

				if ((show.start <= now) && (show.end > now))
					return show;
			}

			return null;
		},
		nextShowRetrievedStorage: {},
		nextShowResponseDefaultValidityMins: 30,
		retrieveNextShowOnChannel: function (channel) {
			if (!channel) {
				return q(null);
			}
			var that = this;
			return that.showRepository.loadChannel(channel.id, new Date()).then(function () {
				var storage = that.nextShowRetrievedStorage || {};
				var show = that.getNextShow(channel);
				if (show)
					return show;

				var now = Date.now();

				var chId = channel.id;
				if (!storage[chId]) {
					storage[chId] = {};
					storage[chId].time = null;
					storage[chId].tvShow = null;
				}
				if (!storage[chId].time || storage[chId].time < now) {
					storage[chId].time = now + that.nextShowResponseDefaultValidityMins * 60 * 1000;
				} else {
					return storage[chId].tvShow || null;
				}

				var tomorrow = new Date(new Date().setDate(new Date().getDate() + 1));
				return that.showRepository.loadChannel(chId, tomorrow).then(function () {
					var show = that.getNextShowAfter(channel, null, tomorrow);
					if (show) {
						storage[chId].tvShow = show;
						storage[chId].time = new Date(show.end).getTime() + 5000;
						return show;
					}

					storage[chId].tvShow = null;
					storage[chId].time = new Date().getTime() +
						that.nextShowResponseDefaultValidityMins * 60000;
					return null;
				});
			});
		},
		getShowsAround: function (currentShow) {
			return this.getShowsForChannel(currentShow.channel(), currentShow);
		},
		getShowsForChannel: function getShowsForChannel(channel, currentShow, allowShowsLoading) {
			var showRepo = this.showRepository;
			allowShowsLoading = allowShowsLoading !== false;
			currentShow = currentShow || null;
			var today = currentShow ? new Date(currentShow.start) : new Date();
			var yesterday = new Date(new Date().setDate(today.getDate() - 1));
			var tomorrow = new Date(new Date().setDate(today.getDate() + 1));

			var chsDescriptorList = [
				showRepo.channels[yesterday.getDate()],
				showRepo.channels[today.getDate()],
				showRepo.channels[tomorrow.getDate()]
			];

			var res = { previous: null, current: null, next: null, afterNext: null };

			if (!isChannelDescriptorValid(chsDescriptorList[1])) {
				return loadChannelAndRetryForDate.call(this, today);
			}

			var showIds = chsDescriptorList.reduce(function (list, chs) {
				if (!chs || !chs[channel.id])
					return list;
				return list.concat(chs[channel.id].showIdList);
			}, []);

			var totalShows = showIds.length;
			for (var i = 0; i < totalShows; i++) {
				var show = showRepo.getById(showIds[i]);
				if (!show || (i > 0 && showIds[i - 1] === showIds[i]))
					continue;

				if (res.current || (currentShow === null && show.start > today.getTime())) {
					if (res.next === null) {
						res.next = show;
						continue;
					} else if (res.afterNext === null) {
						res.afterNext = show;
						continue;
					} else {
						break;
					}
				}

				if (currentShow !== null) {
					if (show.id === currentShow.id) {
						res.current = show;
						continue;
					}
				} else if (show.start <= today.getTime() && show.end > today.getTime()) {
					res.current = show;
					continue;
				}

				if (!res.current) {
					res.previous = show;
				}
			}

			if (res.previous === null && !isChannelDescriptorValid(chsDescriptorList[0])) {
				return loadChannelAndRetryForDate.call(this, yesterday);
			}

			if ((res.next === null || res.afterNext === null) &&
				!isChannelDescriptorValid(chsDescriptorList[2])
			) {
				return loadChannelAndRetryForDate.call(this, tomorrow);
			}

			return q(res);

			function isChannelDescriptorValid(chs) {
				return chs && chs[channel.id] && chs[channel.id].fresh;
			}

			function loadChannelAndRetryForDate(date) {
				if (allowShowsLoading === false)
					return q(res);
				return showRepo.loadChannel(channel.id, date).then(function () {
					return this.getShowsForChannel(channel, currentShow, false);
				}.bind(this));
			}
		},
		getShowsInRange: function (start, end, chId) {
			var that = this;
			var dfr = q.defer();
			var DAY_SECS = 86400000;
			if ((end - start >= DAY_SECS) || (end - start < 0) || !chId) {
				dfr.reject(new Error('find-shows-in-range-invalid-arguments'));
				return dfr.promise;
			}

			var prmsloadChs = [];
			prmsloadChs.push(this.showRepository.loadChannel(chId, start));
			if (start.getDate() !== end.getDate()) {
				prmsloadChs.push(this.showRepository.loadChannel(chId, end));
			}

			return q.all(prmsloadChs).then(function (results) {
				return results[0].showIdList
					.concat(results[1] ? results[1].showIdList : [])
					.map(function (showId) {
						return that.showRepository.getById(showId);
					})
					.filter(function (objShow) {
						return (start > objShow.start && start < objShow.end) ||
							(end > objShow.start && end < objShow.end) ||
							(start <= objShow.start && end >= objShow.end) ||
							(start > objShow.start && end < objShow.end);
					});
			});
		},
		getShowRecProperties: function (tvShow) {
			var caps = this.getCapabilities(tvShow);
			var recObj;
			var result = {
				title: tvShow.getTitle(),
				id: tvShow.id,
				uid: tvShow.id,
				channelId: tvShow.channel().id,
				description: '',
				duration: tvShow.duration * 60,
				channel: tvShow.channel().id,
				assetType: 'recordedAssetAuto',
				recObjType: 'auto'
			};

			if (caps.possibleRecordingType === 'playAutoRecorded') {
			} else if (caps.possibleRecordingType === 'playAutoRecordedInProgress') {
				recObj = BS.recorder.getRecording('clipId', tvShow.id);

				result.pauseActivatedTime = tvShow.start;
				result.streamMaxOffset = Math.floor((Date.now() - tvShow.start));
				result.assetType = 'recordedAssetAutoInProgress';
				result.assetLocation = recObj ? recObj.residesOn : null;

				if (recObj && recObj.residesOn === 'local-device')
					recObj.updateVodPlayerOptions(result);

			} else if (caps.possibleRecordingType === 'manRecorded') {
				recObj = BS.recorder.getRecording('clipId', tvShow.id);
				result = {
					title: recObj.title,
					description: recObj.description || ' ',
					duration: parseInt((recObj.end - recObj.start) / 1000, 10),
					id: recObj.recordId,
					uid: recObj.recordId,
					assetType: 'recordedAsset',
					streamStartOffset: 0,
					streamMaxOffset: 0,
					assetLocation: recObj.residesOn,
					recObjType: caps.series === 'deleteSeries' ? 'series' : 'manual'
				};

				if (recObj.residesOn === 'local-device')
					recObj.updateVodPlayerOptions(result);

			} else {
				result = null;
			}

			return result;
		},

		playShowRecording: function (showRecOptions) {
			if (showRecOptions.assetLocation === 'local-device') {
				am.push(mm.getApp('vodPlayer'), showRecOptions);
				return q();
			}

			return this.updateShowRecOptionsWithRecordingData(showRecOptions)
				.then(function (showRecOptions) {
					am.push(mm.getApp('vodPlayer'), showRecOptions);
				})
				.catch(function (ex) {
					if (!(ex instanceof NiceException))
						BS.logger.debug(
							'TV SHOW SRV .playShowRecording({channelId: %s, id: %s}) ERROR: No '
							+ 'playback data available for this video asset! (%s)',
							showRecOptions.channelId, showRecOptions.id, ex);
				});
		},
		notifyUserOfInsufficientQuotaSpace: function (msg) {
			var infoDialog = new BeeSmartMain.InfoDialog(
				'overNpvrQuota',
				{
					onBeforeExit: function (key) {
						if (key === 'left' || key === 'back') {
							setTimeout(function () {
								mm.getApp('overNpvrQuota').unregister();
							}, 400);
						}
					},
					buttons: [
						['back', 'cancel']
					],
					exitKeys: ['left', 'back']
				}
			);
			BeeSmartMain.register(infoDialog);
			am.push(infoDialog, tr('overNpvrQuotaTitle'), msg);
		},
		updateShowRecOptionsWithRecordingData: function (showRecOptions) {
			var assetType = showRecOptions.assetType;
			var dataValues;
			var isCuTV = ['recordedAssetAuto', 'recordedAssetAutoInProgress']
				.indexOf(assetType) !== -1;
			if (isCuTV && showRecOptions.channelId) {
				dataValues = {
					'channel_id': showRecOptions.channelId,
					'program_id': showRecOptions.id
				};
			} else {
				dataValues = {'recording_id': showRecOptions.uid};
			}

			var url = '/restapi/rest/%d/%d/recordings'.sprintf(
				BS.regionId, BS.portal.user.userId);
			return BS.request.Get(url, {
				accept: 'json',
				data: dataValues
			}).then(function (response) {
				var data = response.data.list[0];
				if (showRecOptions.seekToTime) {
					showRecOptions.jumpToTime = showRecOptions.seekToTime - data.startAsLong - 3e3;
				}

				if (isBroadpeakWorkaroundEnabled(data, BS.skinConfiguration) && isCuTV) {
					data.mediaResources = applyBroadpeakPlayNow(data.mediaResources);
				}

				showRecOptions.assetURLs =
					new BS.media.VendorMediaResources(data.mediaResources);
				showRecOptions.id = response.data.list[0].idRecording;
				showRecOptions.duration = (data.endAsLong - data.startAsLong) * 0.001;

				if (assetType === 'recordedAssetAuto' || assetType === 'recordedAsset') {
					showRecOptions.streamMaxOffset = showRecOptions.duration * 1000;
				} else if (assetType === 'recordedAssetAutoInProgress') {
					showRecOptions.pauseActivatedTime = data.startAsLong;
					showRecOptions.streamMaxOffset = Date.now() - data.startAsLong;
				}
				return showRecOptions;
			});
		}
	};

	function TvShowViewPurchaseService(showRepository, productRepository, storeService) {
		this.purchasedShows = {};
		this.showsForSale = {};
		this.showRepository = showRepository;
		this.productRepository = productRepository;
		this.storeService = storeService;
	}

	TvShowViewPurchaseService.prototype = {
		purchasedShows: {},
		showsForSale: {},
		showRepository: null,
		productRepository: null,
		storeService: null,
		isShowPurchased: function (tvShow) {
			return tvShow.id in this.purchasedShows;
		},
		canOfferSale: function (tvShow) {
			return tvShow.id in this.showsForSale && !this.isShowPurchased(tvShow)
				&& !tvShow.isTvShowBroken();
		},
		purchaseShowView: function (tvShow) {
			var that = this;
			var products = that.productRepository.findByItemId(tvShow.id, 'show-view');
			if (that.storeService.getPriceItemsCount(products) > 1) {
				am.push(mm.getApp('priceListDialog'), products);
				return;
			}
			am.push(mm.getApp('content_purchase'), this.completeShowViewPurchase.bind(this), {
				product: products[0],
				priceItem: products[0].priceList[0],
				dialogTitle: tr(products[0].isPreOrder() ? 'PreOrderShowView' : 'PurchaseShowView')
			});
		},
		completeShowViewPurchase: function (options) {
			var that = this;
			var product = options.content.product;
			var priceItem = options.content.priceItem;
			return that.storeService.purchaseProduct(product, priceItem).then(function () {
				product.items.map(toId).forEach(function (id) {
					that.purchasedShows[id] = id;
					var show = that.showRepository.getById(id);
					if (show)
						show.markStyle('purchased');
				});
				return q({
					message: tr('success'),
					todo: BS.F
				});

			}).catch(function (ex) {
				var error = ex.data.errors[0];
				var audit = 'TV SHOW VIEW PURCHASE SRV .completeShowViewPurchase([%s]) '
					.sprintf(product.items.map(toId));
				BS.logger.debug(audit + 'Show purchase failed because ' + error.errorMessage);
				if (error.errorCode === 500)
					throw ex;
				return q({
					todo: function () {
						var message = that.storeService.getErrorCodeDescription(
							error.errorCode);
						BS.ui.generalAlert(message);
					}
				});
			});
		},
		updateShowViewProducts: function () {
			var prodRepo = this.productRepository;
			return prodRepo.updateAllProductsOfType('show-view', false).then(function () {
				var showMap = {};
				var purchasedShowMap = {};
				prodRepo.findByType('show-view').forEach(function (product) {
					product.items.forEach(function (contentItem) {
						showMap[contentItem.id] = product.id;
					});
				});
				prodRepo.findByType('show-view', 'purchased-product').forEach(function (product) {
					product.items.forEach(function (contentItem) {
						purchasedShowMap[contentItem.id] = product.id;
					});
				});
				this.showsForSale = showMap;
				this.purchasedShows = purchasedShowMap;
			}.bind(this));
		}
	};

	if (!BS.ShowModel) {
		throw new Error('You should load Show Model first!');
	}

	BS.ShowModel.TvShowViewPurchaseService = TvShowViewPurchaseService;
	BS.ShowModel.tvShowViewPurchaseService = new TvShowViewPurchaseService(
		BS.ShowModel.showRepository,
		BeeSmartMain.productRepository,
		BeeSmartMain.storeService
	);

	BS.ShowModel.ShowService = ShowService;
	BS.ShowModel.showService = new ShowService(
		BS.ShowModel.showRepository,
		BS.ShowModel.tvShowViewPurchaseService,
		undefined,
		new BS.PvrProxy()
	);

	em.bind('onShowRemindersRepositoryInitialized', function (ev) {
		BS.ShowModel.showService.showRemindersRepository = ev.data;
	});

	em.bind('onBeeSmartReady', function () {
		BS.ShowModel.showService.liveTvApp = mm.getApp('liveTv');
	});

	em.bind('onStoreServiceInitialized',
		BS.ShowModel.tvShowViewPurchaseService.updateShowViewProducts.bind(
			BS.ShowModel.tvShowViewPurchaseService)
	);

	em.bind('onShowRepositoryDataChanged', function (ev) {
		if (ev.data.source !== 'load-all' || IS_COLIBRY === true || !BeeSmartMain.portalReady)
			return;
		BS.ShowModel.tvShowViewPurchaseService.updateShowViewProducts();
	});

})(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.evMgr,
	BeeSmart.misc,
	BeeSmart.PVR,
	BeeSmart.NiceException
);

(function (BS, mm, am, ui, em, bmisc, ModuleDom, formats) {

	var BeeSmartMain = mm.getModule('BeeSmartMain');
	var tvLib = BeeSmartMain.tvLibrary;
	var languageCode;

	function getAutoreminderSwitchTime() {
		return BS.config.get('Core.Client.REMINDER_AUTO_SWITCH_TIME');
	}


	function ShowRemindersRepository(fetchService, channelSwitcher) {
		this.fetchService = fetchService;
		this.channelSwitcher = channelSwitcher;
	}

	ShowRemindersRepository.DataChangedEvent = function DataChangedEvent(reminder, action) {
		if (!(action in this.handlers)) {
			throw new TypeError('action param not valid, got %s, expected [%s]'.sprintf(
				action, ['add','remove'].join(', ')
			));
		}
		this.handler = this.handlers[action];
		this.data = reminder;
	};
	ShowRemindersRepository.DataChangedEvent.prototype = {
		handlers: {
			'add': 'onShowRemindersRepositoryAdded',
			'remove': 'onShowRemindersRepositoryRemoved'
		},
		handler: 'onShowRemindersRepositoryAdded',
		type: 'ShowRemindersRepositoryDataChangedEvent',
		description: 'When reminders are added or removed from ShowRemindersRepository'
	};
	Object.extend(ShowRemindersRepository.DataChangedEvent, BS.Event);

	ShowRemindersRepository.RepositoryInitializedEvent = function (repository) {
		this.data = repository;
	};
	ShowRemindersRepository.RepositoryInitializedEvent.prototype = {
		handler: 'onShowRemindersRepositoryInitialized',
		type: 'ShowRemindersRepositoryInitializedEvent',
		description: 'When ShowRemindersRepository is initialized'
	};
	Object.extend(ShowRemindersRepository.RepositoryInitializedEvent, BS.Event);

	ShowRemindersRepository.prototype = {
		fetchService: null,
		channelSwitcher: null,
		list: [],
		map: {},
		initializeInProgress: false,
		add: function(reminder) {
			this.list.push(reminder);
			this.map[reminder.id] = reminder;
			em.dispatch(new ShowRemindersRepository.DataChangedEvent(reminder, 'add'));
		},
		getById: function(id) {
			return this.map[id];
		},
		getAll: function() {
			return this.list;
		},
		containsId: function(id) {
			return typeof this.getById(id) !== 'undefined';
		},
		remove: function(reminder) {
			this.removeById(reminder.id);
		},
		removeById: function(id) {
			var reminder = this.getById(id);
			if (reminder) {
				if (reminder.autoSwitchRef !== null) {
					clearTimeout(reminder.autoSwitchRef);
					reminder.autoSwitchRef = null;
				}
				this.list = this.list.filter(function(r) { return r.id !== id; });
				delete this.map[id];
				em.dispatch(new ShowRemindersRepository.DataChangedEvent(reminder, 'remove'));
			}
		},
		clear: function () {
			this.list.forEach(function(reminder) {
				this.remove(reminder);
			}.bind(this));
		},
		initialize: function() {
			BS.logger.trace('SHOW REMINDER REPOSITORY .initialize()');
			this.initializeInProgress = true;
			return this.fetchService.all().then(function(reminderList) {
				this.clear();
				if (!reminderList || reminderList.length === 0)
					return;

				var now = Date.now();
				reminderList.forEach(function(reminderDto) {
					var reminder = {
						start: parseInt(reminderDto.start, 10),
						earlyWarning: reminderDto.activationTime,
						id: reminderDto.idProgram,
						title: reminderDto.title,
						channel: reminderDto.idChannel,
						channelId: reminderDto.idChannel,
						autoSwitchRef: null,
						callback: function () {
							BS.appMgr.cutOff('liveTv');
						}
					};

					var chTriggerTimeout = reminderDto.start.valueOf() - now -
						reminderDto.activationTime *  60000;
					var autoSwitchTimerRef = null;
					if (reminderDto.type === 'AUTOSWITCH' && this.channelSwitcher) {
						autoSwitchTimerRef = setTimeout(
							this.channelSwitcher(reminder.channelId),
							chTriggerTimeout > 0 ? chTriggerTimeout : 0
						);
					}
					reminder.autoSwitchRef = autoSwitchTimerRef;

					this.add(reminder);
				}.bind(this));
			}.bind(this)).delay(250).finally(function() {
				em.dispatch(new ShowRemindersRepository.RepositoryInitializedEvent(this));
				this.initializeInProgress = false;
			}.bind(this));
		}
	};

	BS.ShowReminders = {};
	BS.ShowReminders.ShowRemindersRepository = ShowRemindersRepository;
	BS.ShowReminders.showRemindersRepository = new ShowRemindersRepository({
		all: fetchAllReminders
	}, channelSwitcher);

	var updateRemindersTimer = null;
	BS.evMgr.bind('msg:onResourceChanged', function resourceChangedHandler(ev) {
		var message = ev.data.body;
		switch (message.resource) {
		case 'REMINDERS':
			BS.logger.trace('Event:msg:onResourceChanged REMINDERS Received');
			if (!updateRemindersTimer) {
				updateRemindersTimer = new BS.Utils.Timer(function () {
					BS.backgroundService.runOnce(function () {
						return BS.ShowReminders.showRemindersRepository.initialize();
					}, 'Reminders Update');
					updateRemindersTimer = null;
				}, 10e3);
			}
			updateRemindersTimer.reset();
			break;
		}
	});

	function channelSwitcher(channelId) {
		return function () {
			if (reminder.reminderPushCondition()) {
				reminder.popNecessaryLayers();
				BS.appMgr.push(mm.getApp('reminderAutoSwitch'), channelId);
			}
		};
	}


	function fetchAllReminders() {
		var url = '/restapi/rest/%d/%d/tvprogram/reminders'
			.sprintf(BS.regionId, BS.portal.user.userId);
		return BS.request.Get(url, {
			accept: 'json'
		}).then(function(response) {
			return response.data;
		}).catch(function(ex) {
			BS.logger.info('ERROR! getting list of reminders');
			BS.logger.log(ex);
		});
	}

	function CustomReminderDialog() {
		try {
		var callingModule = arguments[0];
		var appDetails = null;
		var properties = arguments[2];

		if (!appDetails) {
			appDetails = {
				type: 'popup',
				listenTo: [BS.InputManager.keyGroups.shortcuts]
			};
		}

		if (!properties) properties = {};
		if (properties) {
			if (typeof properties.x === 'undefined') properties.x = 390;
			if (typeof properties.y === 'undefined') properties.y = 185;
			if (typeof properties.width === 'undefined') properties.width = 500;
			if (typeof properties.height === 'undefined') properties.height = 220;
			if (typeof properties.layer === 'undefined')
				properties.layer = '#dialogs_layer2';
			if (typeof properties.buttons === 'undefined')
				properties.buttons = [
					['back', 'cancel'],
					['red', 'autoSwitchCh'],
					['confirm', 'ok']
				];
			if (typeof properties.exitKeys === 'undefined')
				properties.exitKeys = ['back', 'left', 'ok'];
		}

		var newArguments = [];
		newArguments[0] = callingModule;
		newArguments[1] = appDetails;
		newArguments[2] = properties;
		BS.ui.Dialog.apply(this, newArguments);
		} catch (Ex) {
			BS.logger.log(Ex);
		}
	}
	CustomReminderDialog.autoSwitch = false;
	CustomReminderDialog.reminderTime = 5;
	CustomReminderDialog.timeStep = 5;
	CustomReminderDialog.showObj = null;
	CustomReminderDialog.showRemindersRepository = BS.ShowReminders.showRemindersRepository;
	CustomReminderDialog.prototype = {
		dom: {
			setTime: function () {
				if (CustomReminderDialog.reminderTime > 55) {
					var hours = Math.floor(CustomReminderDialog.reminderTime / 60);
					var minutes = CustomReminderDialog.reminderTime % 60;

					this.textField.svg(hours.toLocaleString(languageCode) + tr('hours') + ' ' + minutes + tr('min'));
				} else {
					this.textField.svg(CustomReminderDialog.reminderTime.toLocaleString(languageCode) + tr('min'));
				}
			},
			setAutoSwitch: function (arg) {
				CustomReminderDialog.autoSwitch = arg;
				this.autoSwitchText[arg ? 'show' : 'hide']();
			}
		},
		isInitialized: null,
		init: function (_title) {
			var that = this;
			BS.ui.Dialog.prototype.init.apply(that);
			if (!that.isInitialized) {
				var cntSvg = $('#customReminderDialog').remove().show();
				that.replaceContentWith(cntSvg);
				that.isInitialized = true;
				that.dom.textField = cntSvg.find('.reminderTime');
				that.dom.autoSwitchText = cntSvg.find('.autoSwitchText');
			}
			CustomReminderDialog.reminderTime = 5;
			that.dom.setTime();
			that.dom.setAutoSwitch(false);
			that.update({ title: _title });
		},
		onInputEvent: function (keyPressedName) {
			switch (keyPressedName) {
			case 'back':
			case 'left':
			case 'ok':
				BS.ui.Dialog.prototype.onInputEvent.call(this, keyPressedName, null,
					keyPressedName);
				break;
			case 'red':
				this.dom.setAutoSwitch(!CustomReminderDialog.autoSwitch);
				break;
			case 'up':
			case 'down':
				var timeDifference = (
						this.showObj.start.valueOf() - (new Date()).valueOf()
					) / 60000;
				if (keyPressedName === 'up')
					CustomReminderDialog.reminderTime += CustomReminderDialog.timeStep;
				else
					CustomReminderDialog.reminderTime -= CustomReminderDialog.timeStep;

				var timeMod = timeDifference % 5;

				if (CustomReminderDialog.reminderTime < 0) {
					if (timeMod !== 0)
						timeDifference -= timeMod;

					CustomReminderDialog.reminderTime = timeDifference;
				} else if (CustomReminderDialog.reminderTime > timeDifference) {
					CustomReminderDialog.reminderTime = 0;
				}
				this.dom.setTime();
				break;
			}
		}
	};
	Object.extend(CustomReminderDialog, BS.ui.Dialog);

	var customReminderSetup = new CustomReminderDialog('customReminderSetup', null, {
		onBeforeExit: function (key) {
			if (key !== 'ok') {
				return true;
			}

			var show = this.showObj;
			var channel = show.channel();
			var channelId = channel.id;
			var clipTitle = show.title;
			var crd = CustomReminderDialog;
			var chTriggerTimeout = show.start.valueOf() - Date.now() - crd.reminderTime * 60000;
			var autoSwitchTimerRef = null;
			var collision = false;
			var diff;

			if (chTriggerTimeout < 0) {
				ui.generalAlert(tr('fail') + '\n' + '\n' + tr('reminderSetForPast'));
				return false;
			}

			var allReminders = crd.showRemindersRepository.getAll();
			for (var i = 0, len = allReminders.length; i < len; i++) {
				var rem = allReminders[i];
				diff = Math.abs((rem.start / 60000 - rem.earlyWarning) - (show.start.valueOf() /
					60000 - crd.reminderTime));

				if (diff < 1 && (rem.autoSwitchRef && crd.autoSwitch)) {
					collision = true;
					ui.generalAlert(
						tr('fail') + '<tbreak/><tbreak/>' + tr('reminderAutoSwitchCollision')
					);
					return false;
				}
			}

			if (crd.autoSwitch && !collision) {
				autoSwitchTimerRef = setTimeout(
					channelSwitcher(channelId),
					chTriggerTimeout > 0 ? chTriggerTimeout : null
				);
			}

			var reminderObj = {
				start: show.start.valueOf(),
				earlyWarning: crd.reminderTime,
				id: show.id,
				title: clipTitle,
				channel: channel.id,
				channelId: channelId,
				autoSwitchRef: autoSwitchTimerRef,
				callback: function () {
					BS.appMgr.cutOff('liveTv');
				}
			};

			if (!collision) {
				crd.showRemindersRepository.add(reminderObj);
				var reminderType = crd.autoSwitch ? 'autoswitch' : 'normal';
				var url = '/restapi/rest/%d/%d/tvprogram/reminders/%s'
					.sprintf(BS.regionId, BS.portal.user.userId, show.id);
				BS.request.Post(url, {
					accept: 'json',
					data: {
						'reminder_type': reminderType,
						'reminder_offset': crd.reminderTime
					}
				}).catch(function (response) {
					var show = customReminderSetup.showObj;

					if (!('success' in response)) {
						BS.logger.log(response);
					}

					if (!response.success) {
						crd.showRemindersRepository.removeById(show.id);
						customReminderSetup.showObj = null;
					}
				});
			}
		}
	});
	customReminderSetup.init = function (caller, _clip) {
		this.showObj = _clip;
		CustomReminderDialog.prototype.init.call(this, tr('reminderSetTitle'));
	};
	BeeSmartMain.register(customReminderSetup);

	var reminderAutoSwitch = new BS.App('reminderAutoSwitch', {
		type: 'popup',
		helpId: 'reminderAutoSwitch',
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	reminderAutoSwitch.timerRef = null;
	reminderAutoSwitch.chanId = null;
	reminderAutoSwitch.onInputEvent = function (keyPressedName) {
		switch (keyPressedName) {
		case 'back':
		case 'left':
			reminderAutoSwitch.dom.clearIntervalTimer();
			am.pop('reminderAutoSwitchFailed');

			break;
		case 'ok':
			this.switchAction();

			break;
		}
	};
	reminderAutoSwitch.init = function (caller, channelId) {
		var that = this;
		if (channelId === null || am.isLoaded('pauseAndResume')) {
			am.pop();
			return;
		}

		that.dom.clearTimerRef();
		that.dom.clearIntervalTimer();

		that.chanId = channelId;

		that.countdown = 0;
		that.dom.showMenu();
		that.dom.setAutoRemText(tr('autoSwitchingIn') + ' ' + getAutoreminderSwitchTime());

		that.interval = setInterval(function () {
			that.countdown++;
			that.dom.setAutoRemText(
				tr('autoSwitchingIn') + ' ' + (getAutoreminderSwitchTime() - that.countdown)
			);

			if (that.countdown === getAutoreminderSwitchTime()) {
				that.switchAction();
			}
		}, 1000);

	};
	reminderAutoSwitch.switchAction = function () {
		var that = this;
		var liveTv = mm.getApp('liveTv');
		that.dom.clearIntervalTimer();

		if (!am.isLoaded('pauseAndResume')) {
			if (tvLib.isChannel(that.chanId)) {
				var chObj = tvLib.getChannelById(that.chanId);
				liveTv.switchToChannel(chObj);
				if (am.lastLoaded('liveTv'))
					liveTv.showChannelName(chObj.position, that.chanId);

				am.pop(true);

			} else {
				that.timerRef = setTimeout(function () {
					am.pop(false);
				}, 5000);
				that.dom.setAutoRemText(tr('reminderWontAutoSwitch'));
			}
		} else {
			that.timerRef = setTimeout(function () {
				am.pop(false);
			}, 5000);
			that.dom.setAutoRemText(tr('reminderWontAutoSwitch'));
		}
	};
	reminderAutoSwitch.destroy = function () {
		this.dom.hideMenu();
		this.chanId = null;
		this.dom.clearTimerRef();
	};

	reminderAutoSwitch.startup = function () {
		reminderAutoSwitch.dom = new ModuleDom(
			[
				'reminderAutoSwitchGroup', 'reminderAutoSwitchCountdownText',
				'reminderAutoSwitchGroupShow', 'reminderAutoSwitchGroupHide',
				'reminderAutoSwitchGroupActionBar'
			], {
				showMenu: function () {
					this.reminderAutoSwitchGroup.show();
					this.reminderAutoSwitchGroupShow.begin();
				},
				hideMenu: function () {
					this.reminderAutoSwitchGroupHide.begin(function () {
						reminderAutoSwitch.dom.reminderAutoSwitchGroup.hide();
					});
				},
				setAutoRemText: function (text) {
					reminderAutoSwitch.dom.reminderAutoSwitchCountdownText.svg(text);
				},
				clearTimerRef: function () {
					if (reminderAutoSwitch.timerRef !== null) {
						clearTimeout(reminderAutoSwitch.timerRef);
						reminderAutoSwitch.timerRef = null;
					}
				},
				clearIntervalTimer: function () {
					if (reminderAutoSwitch.interval !== null) {
						clearInterval(reminderAutoSwitch.interval);
						reminderAutoSwitch.interval = null;
					}
				}
			});

		this.actionBar = new ui.ActionBar(this.dom.reminderAutoSwitchGroupActionBar);
	};

	var reminder = new BeeSmartMain.MenuListDialog('reminder', null, {
		height: 380,
		onBeforeExit: function (key) {
			var that = this;
			switch (key) {
			case 'ok':
				this.aMenu.currentMenuItems().select(function () {
					var chan = that.aMenu.currentMenuItems().currentInfo().channelId;
					mm.getApp('liveTv').switchToChannel(tvLib.getChannelById(chan), false, false);
				});
				return true;
			}
		}
	});
	reminder.tvShows = [];
	reminder.init = function (caller, tvShows) {
		var pushObj = ui.template('reminderMenuItemsTemplate', {
			'tvShows': tvShows.map(function (remObj) {
				var chTitle;
				try {
					chTitle = tvLib.getChannelById(remObj.channel).name;
				} catch (x) {
					chTitle = '';
				}
				return {id: remObj.id, title: remObj.title, start: remObj.start, channel: chTitle};
			}),
			'setStartText': function (start, now, timeFormat) {
				if (start > now)
					return reminder.timeLeft(start, now);
				return '%s %s %s: %s'.sprintf(tr('hasBeenStarted'), tr('at'),
					tr('time'), new Date(start).toFormatedString(timeFormat));
			}
		});
		this.tvShows = tvShows;

		BeeSmartMain.MenuListDialog.prototype.init.call(this, tr('customReminder'), false, {
			'holder': 'reminderListDialog',
			'selector': 'reminderListSelector'
		});

		this.updateTvShowList();
		this.fillActionMenu(tvShows, pushObj);
	};

	reminder.onInputEvent = function (key) {
		var _super = BS.ui.Dialog.prototype.onInputEvent.bind(this);
		switch (key) {
		case 'up':
		case 'down':
			BeeSmartMain.MenuListDialog.prototype.onInputEvent.call(this, key);
			break;
		case 'ok':
			_super(key, true);
			break;
		default:
			BS.ui.Dialog.prototype.onInputEvent.call(this, key);

			break;
		}
	};

	reminder.timeLeft = function (start, now) {
		var diff = start - now;
		var hours = Math.floor(diff / 3600000);
		var minutes = Math.round((diff % 3600000) / 60000);
		return tr('startingIn').concat(
			' ', hours >= 1 ?
				hours.toString().concat(tr('hours'), minutes.toString(), tr('min')) :
				minutes.toString().concat(tr('min'))
		);
	};

	reminder.updateTvShowList = function () {
		var tvShows = this.tvShows;
		var now = Date.now();
		var j = 0;

		tvShows.forEach(function(show) {
			var minutesLeft = reminder.timeLeft(show.start, now);

			if (show.start > now) {
				$('#reminder' + j + 'Start').svg(minutesLeft);

			} else {
				var startedAt = new Date(show.start);
				$('#reminder' + j + 'Start')
					.svg('%s:%s'.sprintf(tr('alreadyStartedAt'),
						startedAt.toFormatedString(formats.time)));
			}
			j++;
		});
	};

	reminder.checkReminder = function (forceCheck) {
		var now = Math.round((new Date()).valueOf() / 60000);
		var tempReminders = BS.ShowReminders.showRemindersRepository.getAll().filter(function(rem) {
			var remTriggerTime = Math.round(rem.start / 60000) - rem.earlyWarning;
			if (forceCheck)
				return true;

			if (remTriggerTime === now && rem.autoSwitchRef === null) {
				BS.ShowReminders.showRemindersRepository.remove(rem);
				return true;
			}
			if (remTriggerTime < now) {
				BS.ShowReminders.showRemindersRepository.remove(rem);
			}
		});

		if (tempReminders.length) {
			reminder.popNecessaryLayers();
			am.push(mm.getApp('reminder'), tempReminders);
		}

		return tempReminders;
	};

	reminder.onInterval = function () {
		reminder.updateTvShowList();
	};

	reminder.reminderPushCondition = function () {
		if (am.isLoaded('pauseAndResume'))
			return false;

		var canBeLastLoaded = [
			'reminder', 'liveTv', 'vodPlayer', 'audioSubtitleSelection', 'EpgColumnView',
			'clipBookmarks', 'categoryChannelList', 'channelCategories'
		];
		return canBeLastLoaded.some(function(appId) {
			return am.lastLoaded(appId);
		});
	};

	reminder.popNecessaryLayers = function () {
		if (am.isLoaded('pauseAndResume'))
			return;

		var popLayers = [
			'reminder', 'audioSubtitleSelection', 'EpgColumnView',
			'clipBookmarks', 'categoryChannelList', 'channelCategories'
		];

		for (var i = 0; i < popLayers.length; i++) {
			if (am.lastLoaded(popLayers[i]) && popLayers[i] === 'reminder') {
				reminder.hide();
				am.pop();
				continue;
			}

			if (am.lastLoaded(popLayers[i]))
				am.pop(popLayers[i]);
		}
	};

	var periodicReminderStateChecker = function () {
		if (!am.isLoaded('beeSmartLockDialog')) {
			reminder.checkReminder();
		} else {
			BS.logger.debug('REMINDERS Event:onBeeSmartReady Skipped custom reminder selection ' +
				'when interface is locked!');
		}
		setTimeout(periodicReminderStateChecker, 60e3);
	};

	var stackChangeEventHandler = BS.evMgr.bind('onAppStackChange', function (ev) {
		if (ev.data.appId === 'liveTv') {
			periodicReminderStateChecker();
			stackChangeEventHandler.unbind();
		}
	});

	em.bind('onShowRemindersRepositoryRemoved', function(ev) {
		if (BS.ShowReminders.showRemindersRepository.initializeInProgress) return;
		var reminder = ev.data;
		BS.request.Delete('/restapi/rest/%d/%d/tvprogram/reminders/%s'
			.sprintf(BS.regionId, BS.portal.user.userId, reminder.id), {
			accept: 'json'
		}).done();
	});

	BeeSmartMain.register(reminder);

	var EpgRemindersModule = new BS.Module({
		id: 'EpgReminders',
		requiredLicense: 'epg && livetv',
		startupTasks: [
			{
				name: 'initialize Show Reminders Repository and UI',
				payload: function (params, callback) {
					languageCode = BS.portal.user.language.label;
					var tasks = [
						BS.ShowReminders.showRemindersRepository.initialize(),
						BS.template.get('svg/show_reminders.svg')
					];
					Q.allSettled(tasks).finally(callback).done();
				}
			}
		]
	});

	EpgRemindersModule.register(customReminderSetup);
	EpgRemindersModule.register(reminderAutoSwitch);

})(
	BeeSmart,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	BeeSmart.evMgr,
	BeeSmart.misc,
	$.ModuleDom,
	BeeSmart.portal.local.formats
);

(function (BS, q, mm, am, ui, bmisc, ModuleDom, formats) {

	var BeeSmartMain = mm.getModule('BeeSmartMain');
	var tvLib = BeeSmartMain.tvLibrary;
	var showService = BS.ShowModel.showService;
	var remindersRepo = BS.ShowReminders ? BS.ShowReminders.showRemindersRepository : null;
	var tvCatRepo = BS.repositories.tvCategoryRepo;
	var prodRepo = BeeSmartMain.productRepository;
	var storeService = BeeSmartMain.storeService;
	var tvShowViewPurchaseService = BS.ShowModel.tvShowViewPurchaseService;

	function TvShowMenu() {
		BeeSmartMain.MenuListDialog.apply(this, ['tvShowMenu', null, { onBeforeExit: BS.F }]);
	}
	TvShowMenu.prototype = {
		tvShow: null,
		ExtraItems: new BeeSmartMain.MenuListDialog.ActionList(),
		matrixViewApp: null,
		liveTvApp: null,
		PinCheckDialog: null,
		pinCheckDialogApp: null,
		display: function (args) {
			var that = this, i, node;
			var mld = BeeSmartMain.MenuListDialog;
			var ActionItem = mld.ActionItem;
			var ActionList = mld.ActionList;
			var ActionContent = ActionList.ActionContent;
			var caps = args[0];
			var keys = [];

			var itemMapping = new ActionList();
			var optionsOrder = BS.skinConfiguration.epgMenuListOrder;
			for (i = 0; (node = optionsOrder[i++]);) {
				if (caps[node] === true)
					keys.push(node);
				else
					keys.push(caps[node]);
			}
			that.tvShow = args[1];
			that.lock = false;

			var itemKeys = {
				'watchable': new ActionItem({
					key: 'watchChannel',
					iconLink: '#icon_watchChannel',
					name: tr('watchChannel'),
					callback: function () {
						if (!am.isLoaded('liveTv'))
							return;
						var chanId = that.tvShow.channel().id;
						var promise = q();
						if (args[2]) {
							that.liveTvApp.setCurrentCategory(args[2]);
						} else {
							promise = tvCatRepo.getAllCategory().then(function (cat) {
								that.liveTvApp.setCurrentCategory(cat);
							});
						}
						promise.finally(function () {
							am.cutOff('liveTv');
							that.liveTvApp.switchToChannel(tvLib.getChannelById(chanId));
						});
					}
				}),
				'parentalRestriction': new ActionItem({
					key: 'parentalRestriction',
					iconLink: '#iconParentalRestriction',
					name: tr('parentalRestriction'),
					callback: function () {
						am.push(
							that.pinCheckDialogApp,
							that.PinCheckDialog.MODE_CHECK_PARENTAL_PIN,
							'allowed'
						);
					}
				}),
				'set': new ActionItem({
					key: 'setReminder',
					iconLink: '#iconTvShowReminderSet_menu',
					name: tr('setReminder'),
					callback: function () {
						if (remindersRepo)
							am.push(mm.getApp('customReminderSetup'), that.tvShow);
					}
				}),
				'unset': new ActionItem({
					key: 'unsetReminder',
					iconLink: '#iconTvShowReminderUnset_menu',
					name: tr('unsetReminder'),
					callback: function () {
						if (remindersRepo) {
							var reminderObj = remindersRepo.getById(that.tvShow.id);
							remindersRepo.removeById(reminderObj.id);
						}
					}
				}),
				'manRecorded': new ActionItem({
					key: 'playRec',
					iconLink: '#iconTvShowPlayableNormal',
					name: tr('playRecording'),
					callback: function () {
						that.lock = true;
						var showRecProps = showService.getShowRecProperties(that.tvShow);
						if (showRecProps) {
							if (that.tvShow.isShowAllowed()) {
								that.lockMatrixView(true);
								ui.toggleLoader(true);
								showService.playShowRecording(showRecProps).finally(function () {
									that.lockMatrixView(false);
									ui.toggleLoader(false);
									that.lock = false;
								});
							} else {
								am.push(
									that.pinCheckDialogApp,
									that.PinCheckDialog.MODE_CHECK_PARENTAL_PIN,
									'playRecording'
								);
								that.lock = false;
							}
						}
					}
				}),
				'playAutoRecorded': new ActionItem({
					key: 'playAutoRec',
					iconLink: '#iconTvShowPlayableNormal',
					name: tr('playRecording'),
					callback: function () {
						itemKeys.manRecorded.callback();
					}
				}),
				'playAutoRecordedInProgress': new ActionItem({
					key: 'playAutoRecInProgress',
					iconLink: '#iconTvShowPlayableNormal',
					name: tr('playRecording'),
					callback: function () {
						itemKeys.manRecorded.callback();
					}
				}),
				'recordable': new ActionItem({
					key: 'recordable',
					iconLink: '#iconChannelRecordable_menu',
					name: tr('record'),
					callback: function () {
						if (that.tvShow.isShowAllowed()) {
							am.push(mm.getApp('pvr'), that.tvShow, 'recordable');
						} else {
							am.push(
								that.pinCheckDialogApp,
								that.PinCheckDialog.MODE_CHECK_PARENTAL_PIN
							);
						}
					}
				}),
				'adoptAutoRec': new ActionItem({
					key: 'adoptAutoRec',
					iconLink: '#iconTvShowAdoptAutoRec',
					name: tr('adoptAutoRec'),
					callback: function () {
						if (that.tvShow.isShowAllowed()) {
							am.push(mm.getApp('pvr'), that.tvShow, 'adoptAutoRec');
						} else {
							am.push(
								that.pinCheckDialogApp,
								that.PinCheckDialog.MODE_CHECK_PARENTAL_PIN
							);
						}
					}
				}),
				'deleteRecording': new ActionItem({
					key: 'deleteRecording',
					iconLink: '#iconTvShowRecordingDelete',
					name: tr('deleteRecording'),
					callback: function () {
						that.lock = true;
						mm.getApp('pvr').deleteRecordedClip(that.tvShow.id, null,function () {
							that.lock = false;
						});
					}
				}),
				'cancelable': new ActionItem({
					key: 'deleteRecording',
					iconLink: '#iconTvShowRecordingDelete',
					name: tr('cancelRecording'),
					callback: function () {
						itemKeys.deleteRecording.callback();
					}
				}),
				'locked': new ActionItem({
					key: 'chUnlock',
					iconLink: '#iconChannelUnlocked_menu',
					name: tr('unlock'),
					callback: function () {
						var chId = that.tvShow.channel().id;
						var products = prodRepo.findByItemId(chId, 'live').filter(function(p) {
							return p.purchaseInfo.isInUsersSubscription();
						});

						var clientPurchaseDisabled = products.some(function (p) {
							return !p.clientPurchaseEnabled;
						});

						if (clientPurchaseDisabled) {
							storeService.showCallOperatorDialog(products.filter(function (p) {
								return !p.clientPurchaseEnabled;
							})[0]);
							return;
						}

						if (storeService.getPriceItemsCount(products) > 1)
							am.push(mm.getApp('priceListDialog'), products);
						else {
							am.push(
								mm.getApp('content_purchase'),
								that.liveTvApp.purchaseChannel.bind(that.liveTvApp),
								{
									channelId: chId,
									product: products[0],
									priceItem: products[0].priceList[0],
									dialogTitle: tr(products[0].isPreOrder() ?
										'ChannelPreOrderDialogTitle' : 'channelPurchaseDialogTitle')
								}
							);
						}
					}
				}),
				'descriptionPresent': new ActionItem({
					key: 'showDescription',
					iconLink: '#iconTvShowDescription',
					name: tr('showDescription'),
					callback: function () {
						am.push(epgTvShowDetails, that.tvShow, args[2]);
					}
				}),
				'recordSeries': new ActionItem({
					key: 'scheduleSeriesRec',
					iconLink: '#iconChannelRecordable_menu',
					name: tr('scheduleSeriesRec'),
					callback: function () {
						am.push(mm.getApp('pvr'), that.tvShow, 'series');
					}
				}),
				'deleteSeries': new ActionItem({
					key: 'deleteSeries',
					iconLink: '#iconTvShowRecordingDelete',
					name: tr('deleteSeries'),
					callback: function () {
						that.lock = true;
						mm.getApp('pvr').deleteSeries(
							that.tvShow.seriesUid,
							that.tvShow._channel,
							function () {
								that.lock = false;
							}
						);
					}
				}),
				'adoptEpisode': new ActionItem({
					key: 'adoptEpisode',
					iconLink: '#iconTvShowAdoptAutoRec',
					name: tr('adoptEpisode'),
					callback: function () {
						am.push(mm.getApp('pvr'), that.tvShow, 'adoptEpisode');
					}
				}),
				'recommendToFriend': new ActionItem({
					key: 'recommendToFriend',
					iconLink: '#recordingRecommend-big',
					name: tr('recommendToFriend'),
					callback: function () {
						var buddyListDialog = mm.getApp('recommendShowDialog');
						am.push(buddyListDialog, tr('recommend_content_to'), true);
					}
				})
			};


			itemKeys.showPurchase = new ActionItem({
				key: 'showPurchase',
				iconLink: '#icon_purchase',
				name: tr('epg_payPerView'),
				callback: function () {
					tvShowViewPurchaseService.purchaseShowView(that.tvShow);
				}
			});

			for (i = 0; i < keys.length; i++) {
				if (keys[i] in itemKeys) {
					itemMapping.addActionItem(itemKeys[keys[i]]);
				}
			}

			that.ExtraItems.setData(new ActionContent({
				id: 'TvShow',
				obj: that.tvShow
			}));

			itemMapping.concatActionLists(that.ExtraItems);

			am.push(this);
			this.fillActionMenu(itemMapping.getList());
		},
		onInterval: function (date) {
			if (this.matrixViewApp)
				this.matrixViewApp.onInterval(date);
		},
		init: function () {
			if (!this.matrixViewApp && mm.appExists('EpgMatrixView'))
				this.matrixViewApp = mm.getApp('EpgMatrixView');
			if (!this.liveTvApp)
				this.liveTvApp = mm.getApp('liveTv');
			if (!this.PinCheckDialog) {
				this.pinCheckDialogApp = mm.getApp('pinCheckDialog');
				this.PinCheckDialog = this.pinCheckDialogApp._constructor;
			}
			BeeSmartMain.MenuListDialog.prototype.init.call(this, tr('programOptions'));
		},
		displayable: function (caps) {
			return true;
			return 	!!caps.showPurchase ||
					!!caps.watchable ||
					!!caps.recommendToFriend ||
					caps.reminder ||
					!!caps.play ||
					caps.pvr === 'recordable' ||
					caps.pvr === 'deleteRecording' ||
					caps.channel === 'locked' ||
					!!caps.series ||
					!!caps.adoptEpisode ||
					!!caps.parentalRestriction ||
					!!caps.descriptionPresent;
		},
		focus: function (caller, arg, arg1, arg2) {
			var that = this;
			switch (caller) {
			case 'vodPlayer':
				that.liveTvApp.setChannel();

				break;
			case 'deleteUserRecording':
				if (!arg || arg !== 'back')
					am.pop();
				break;
			case 'pinCheckDialog':
				if (arg2 && arg2 === 'pvr' && that.tvShow)
					am.push(mm.getApp('pvr'), that.tvShow);
				else if (arg2 && arg2 === 'playRecording' && that.tvShow.id) {
					var showRecProperties = showService.getShowRecProperties(that.tvShow);
					if (showRecProperties) {
						that.lockMatrixView(true);
						ui.toggleLoader(true);
						showService.playShowRecording(showRecProperties).finally(function () {
							that.lockMatrixView(false);
							ui.toggleLoader(false);
						});
					}
				}
				if (!arg)
					am.pop();

				break;
			}
		},
		lockMatrixView: function (lock) {
			if (this.matrixViewApp)
				this.matrixViewApp.lock = lock;
		}
	};

	Object.extend(TvShowMenu, BeeSmartMain.MenuListDialog);

	BeeSmartMain.register(new TvShowMenu());

	var epgTvShowDetails = new BS.App('epgTvShowDetails', {
		listenTo: ['info'],
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	epgTvShowDetails.descrPanel = null;

	epgTvShowDetails.onInputEvent = function (keyPressedName) {
		if (this.lock && keyPressedName !== 'back') return;
		switch (keyPressedName) {
		case 'up':
			if (this.descrPanel)
				this.descrPanel.moveUp(true);
			break;
		case 'down':
			if (this.descrPanel)
				this.descrPanel.moveDown(true);
			break;

		case 'left':
			if (this.previousShow) {
				this.loadShow(this.previousShow).done();
			}
			break;
		case 'right':
			if (this.nextShow) {
				this.loadShow(this.nextShow).done();
			}
			break;

		case 'info':
		case 'back':
			am.pop();

			break;
		case 'ok':
			if (this.showMenuAvailable)
				mm.getApp('tvShowMenu')
					.display([this.showCapabilities, this.currentShow, this.category]);
			break;
		}
	};
	epgTvShowDetails.blur = function (caller) {
		if (caller === 'vodPlayer') {
			this.dom.epgTvShowDetails.hide();
		}
	};
	epgTvShowDetails.focus = function (caller, keyPress, arg1, arg2) {
		if (caller === 'priceListDialog' && keyPress === 'ok' && arg2) {
			showContentPurchase(arg2.product, arg2.priceItem);
		}
		if (caller === 'vodPlayer') {
			this.dom.showModule();
			this.dom.setTvShowDetails(this.currentShow, this.currentShow.channel());
		}

		this.showCapabilities = showService.getCapabilities(this.currentShow);
		this.showMenuAvailable = mm.getApp('tvShowMenu').displayable(this.showCapabilities);
	};
	epgTvShowDetails.init = function (caller, showObj, cat, callback) {
		this.category = cat;
		callback = callback || function () {};
		this.loadShow(showObj).finally(callback).done();
	};

	epgTvShowDetails.loadShow = function (show) {
		this.lock = true;
		ui.toggleLoader(true);
		this.currentShow = show;
		this.showCapabilities = showService.getCapabilities(show);
		this.showMenuAvailable = mm.getApp('tvShowMenu').displayable(this.showCapabilities);
		this.dom.ab.set([
			['back', 'back'],
			['vertical', 'programInfoScrolling'],
			['empty', null],
			this.showMenuAvailable ? ['confirm', 'more'] : ['empty', null]
		]);
		var cCh = null;
		try {
			cCh = show.channel();
		} catch (ex) {
			BS.logger.trace('epgTvShowDetails exception %s', ex);
		}
		if (!IS_COLIBRY) {
			this.statusIcons.showIcons(mm.getApp('liveTv').channelStatusIcons(cCh));
			this.dom.epgTvShowDetailsStatusIcons.first().text(cCh ? cCh.name : '');
			this.dom.epgTvShowDetailsStatusIcons.show();
		}
		if (am.isLoaded('EpgMatrixView')) {
			$('#matrixEpgHolderToggler').trigger('endEvent');
		}

		return q.all([
			showService.getShowsAround(show),
			show.getDescription()]
		).spread(function(shows) {
			this.previousShow = shows.previous;
			this.nextShow = shows.next;
			this.dom.setTvShowDetails(show, cCh);
			this.dom.showModule();
			this.dom.updateLeftRightArrows();
		}.bind(this)).delay(0).then(function () {
			this.descrPanel = new ui.ScrollingPanel(
				this.dom.epgTvShowDetailsContent[0],
				null,
				this.dom.epgTvShowDetailsScroller[0],
				null,
				this.dom.epgTvShowDetailsUpDownArrows[0]
			);
		}.bind(this)).catch(function(ex) {
			BS.logger.trace('epgTvShowDetails exception %s', ex);
		}).finally(function () {
			this.lock = false;
			ui.toggleLoader(false);
		}.bind(this));
	};

	epgTvShowDetails.destroy = function () {
		this.category = null;
		this.dom.hideModule();

		if (am.isLoaded('EpgMatrixView')) {
			$('#matrixEpgHolderToggler').trigger('beginEvent');
		}
	};

	epgTvShowDetails.startup = function () {
		var that = this;
		var $leftRightArrows = $('#epgTvShowLeftRightArrows');
		that.dom = new ModuleDom(
			[
				'epgTvShowDetails', 'epgTvShowDetailsToggler', 'epgTvShowDetailsStatusIcons',
				'epgTvShowDetailsContent', 'epgTvShowDetailsScroller',
				'epgTvShowDetailsContentText', 'epgTvShowDetailsTitle',
				'epgTvShowDetailsSubtitle', 'epgTvShowDetailsUpDownArrows'
			], {
				leftArrow: $leftRightArrows.find('.left'),
				rightArrow: $leftRightArrows.find('.right'),
				epgTvShowDetailsImg: new ui.Image($('#epgTvShowDetailsImg')),
				showModule: function () {
					that.dom.epgTvShowDetails.show();
				},
				hideModule: function () {
					that.dom.epgTvShowDetails.hide();
					if (that.descrPanel) {
						that.descrPanel.destroy();
						that.descrPanel = null;
					}
					that.dom.epgTvShowDetailsToggler.trigger('hide');
				},
				setTvShowDetails: function (tvShow, channel) {
					var genres = [];
					if (tvShow.genres) {
						genres = tvShow.genres.map(function (genre) {
							return tr('GENRE_' + genre);
						});
					}
					var maximumRating = BS.config.get('User.MAXIMUM_RATING');
					var showRating = tvShow.rating;
					var showStart = tvShow.start;
					var showEnd = tvShow.end;
					var showInfo = {
						'start': new Date(showStart) || null,
						'end': new Date(showEnd) || null,
						'duration': (tvShow.duration !== '') ?
							(tr('progDuration').concat(': ', tvShow.duration
								.toLocaleString(BS.portal.user.language.label),
								'', tr('min'))) :
							null,
						'genre': genres.length ?
							tr('progGenre').concat(': ', genres.join(', ')) : null,
						'rating': (showRating ? tr('ageLimit') + ': ' +
						(showRating > maximumRating ? maximumRating :
							tvShow.rating) + ' ' + tr('ageLimitYears') : null)
					};

					that.dom.epgTvShowDetailsToggler.trigger('show', {
						'tvShow': tvShow,
						'channel': channel,
						'tvShowInfo': function (list, format) {
							var features = [];
							format = format || formats.time;
							list.forEach(function (key) {
								if (!showInfo[key])
									return;

								if (showInfo[key] instanceof Date) {
									var trKey = '';
									switch (key) {
									case 'start':
										trKey = tr('progStartAt');
										break;
									case 'end':
										trKey = tr('progEndAt');
										break;
									}
									showInfo[key] = trKey.concat(': ',
										showInfo[key].toFormatedString(format));
								}

								features.push(showInfo[key]);
							});

							return features;
						},
						'tvShowDesc': function (list, callback) {
							var tvShowDesc = '';
							callback = callback || BS.F;
							for (var i = 0, node;
								 (node = list[i++]);)
								tvShowDesc += callback(node);
							return tvShowDesc;
						}
					});
				},
				updateLeftRightArrows: function () {
					if (that.previousShow)
						that.dom.leftArrow.show();
					else
						that.dom.leftArrow.hide();
					if (that.nextShow)
						that.dom.rightArrow.show();
					else
						that.dom.rightArrow.hide();
				}
			});
		that.statusIcons = new ui.StatusIcons(
			that.dom.epgTvShowDetailsStatusIcons[0], [
				'iconChannelRecordable', 'iconChannelTimeshift', 'iconChannelPauseResume',
				'iconChannelInstantRecording', 'iconChannelLock', 'iconChannelHD'
			]);
		that.dom.ab = new BS.ui.ActionBar($('#epgProgDescButtons')).show();

		BS.evMgr.bind('onConnectivityChange', function () {
			var oldHref = that.dom.epgTvShowDetailsImg.href;
			that.dom.epgTvShowDetailsImg.destroy();
			if (BS.portal.connectivity === BS.portal.CONNECTIVITIES.ONLINE_CONNECTED) {
				that.dom.epgTvShowDetailsImg = new ui.Image($('#epgTvShowDetailsImg'));
			} else {
				that.dom.epgTvShowDetailsImg = new ui.Image($([]));
			}
			that.dom.epgTvShowDetailsImg.href = oldHref;
		});
	};

	var recommendShowDialog = new BeeSmartMain.MenuListDialog('recommendShowDialog', null, {
		onBeforeExit: function (key) {
			var that = this;
			switch (key) {
			case 'ok':
				ui.toggleLoader(true);
				var selectedBuddyIds = [];
				var buddyUnselected = false;
				var list = this.actionMenu.infoList();
				var changed = false;
				var highlightedBuddyId = that.actionMenu.currentInfo().key;

				list.forEach(function (buddy) {
					if (buddy.selected) {
						selectedBuddyIds.push(buddy.key);
						if (buddy.selected === true) {
							changed = true;
						}
					}
					if (buddy.selected === false) {
						buddyUnselected = true;
						changed = true;
					}
				});

				if (changed === false && selectedBuddyIds.indexOf(highlightedBuddyId) === -1) {
					selectedBuddyIds.push(highlightedBuddyId);
					changed = true;
				}

				if (!changed) {
					ui.toggleLoader(false);
					return;
				}

				selectedBuddyIds = selectedBuddyIds.sort();
				setTimeout(function () {
					var tvShowMenu = mm.getApp('tvShowMenu');
					BS.request.Post('/restapi/rest/%d/%d/social/recommendations'
						.sprintf(BS.regionId, BS.portal.user.userId), {
						accept: 'json',
						data: {
							RECOMMENDATION_TYPE: 'tv',
							CONTENT_ID: tvShowMenu.tvShow.id,
							FRIEND_USER_PROFILE_ID_LIST: selectedBuddyIds.toString()
						}
					}).then(function () {
						ui.generalAlert('%s %s'.sprintf(tr('recommendToFriend'), tr('ok')));
					}).catch(function (result) {
						ui.generalAlert(tr('UNKNOWN_ERROR'));
						BS.logger.trace('RECOMMEND SHOW DLG Recommending tv show failed: %s',
							(result && result.data) ? result.data.errors[0].errorMessage :
								'unknown exception');
					}).finally(function () {
						ui.toggleLoader(false);
					});
				}, 10);
			}
		}
	});

	recommendShowDialog.init = function (_caller, _title, _isMultiple) {
		var that = this;
		ui.toggleLoader(true);
		BeeSmartMain.MenuListDialog.prototype.init.call(this, _title, _isMultiple);
		setTimeout(function () {
			var tvShowMenu = mm.getApp('tvShowMenu');
			BS.request.Get('/restapi/rest/%s/%s/social/buddies/status/tv'
					.sprintf(BS.regionId, BS.portal.user.userId),
				{
					accept: 'json',
					data: {'content_id': tvShowMenu.tvShow.id}
				}).then(function (result) {
					ui.toggleLoader(false);
					var buddyList = result.data.map(function(buddyDto) {
						return {
							name: buddyDto['prop_messaging_profile_nickname'] || '',
							key: buddyDto['prop_home_group_user_id'] || '',
							selected: buddyDto.linkedToSelectedContent || 0,
							imageLink: buddyDto.avatarLink || ''
						};
					});
					that.fillActionMenu(buddyList);
				}).done();
		}, 10);
	};

	BeeSmartMain.register(recommendShowDialog);

	function showContentPurchase(product, priceItem) {
		var liveTv = mm.getModule('Tv').getApp('liveTv');
		var tvShowMenu = mm.getApp('tvShowMenu');
		var showViewService = tvShowViewPurchaseService;
		var isShowView = product.type === 'show-view';
		var titleTr = isShowView
			? product.isPreOrder() ? 'PreOrderShowView' : 'PurchaseShowView'
			: product.isPreOrder() ? 'ChannelPreOrderDialogTitle' : 'channelPurchaseDialogTitle';
		am.push(
			mm.getApp('content_purchase'),
			isShowView
				? showViewService.completeShowViewPurchase.bind(showViewService)
				: liveTv.purchaseChannel,
			{
				channelId: tvShowMenu.tvShow.channel().id,
				product: product,
				priceItem: priceItem,
				dialogTitle: tr(titleTr)
			}
		);
	}

	var ShowCommonAppsModule = new BS.Module({
		id: 'ShowCommonApps',
		requiredLicense: 'epg && livetv',
		startupTasks: [
			{
				name: 'Show Common Apps interfaces',
				payload: function (params, callback) {
					BS.template.get('svg/show_common_apps.svg').finally(callback);
				}
			}
		]
	});
	ShowCommonAppsModule.register(epgTvShowDetails);
	ShowCommonAppsModule.showContentPurchase = showContentPurchase;
})(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	BeeSmart.misc,
	$.ModuleDom,
	BeeSmart.portal.local.formats,
	BeeSmart.PVR
);

(function (BS, q, mm, am, ui, em, ModuleDom) {

	var misc = mm.getApp('Misc');
	var tvCatRepo = BS.repositories.tvCategoryRepo;
	var showService = BS.ShowModel.showService;

	var tvRecommendations = new BS.App('tvRecommendations', {
		inputMapper: BS.App.portalDirectionKeyMapper
	});

	(function () {
		var menuHandler = false;
		var menuItems = false;
		var actionBarTimer = null;

		tvRecommendations.onInputEvent = function (keyPressedName) {
			if (this.lock)
				return;

			switch (keyPressedName) {
			case 'up':
				if (menuItems) {
					menuItems.previous();
					this.dom.setActionBar();
				}
				break;
			case 'down':
				if (menuItems) {
					menuItems.next();
					this.dom.setActionBar();
				}
				break;
			case 'left':
			case 'back':
				am.pop();
				break;
			case 'right':
			case 'ok':
				if (!menuItems)
					return;
				var item = menuItems.currentInfo();
				if (item.senderName) {
					item.content.recommendedBy = item.senderName;
				}
				menuItems.select(function () {
					am.push(tvShowDetails, item.content);
				});
				break;
			}
		};
		tvRecommendations.init = function (caller, type) {
			var that = this;
			that.dom = that.dom || new ModuleDom(['tvRecommendations', 'tvRecommendationsMenu'], {
				showModule: function () {
					_setActionBar();
					this.tvRecommendations.show();
				},
				hideModule: function () {
					this.tvRecommendations.hide();
				},
				setActionBar: function () {
					clearActionBarTimer();
					actionBarTimer = setTimeout(_setActionBar, 350);
				}
			}, function () {
				menuHandler = new ui.Menu($('#tvRecommendationsMenuSelector')[0]);
			});

			misc.dom.navigationPush(tr('tvRecommendations'));
			ui.toggleLoader(true);
			that.lock = that;

			if (menuItems !== false) {
				menuItems.destroy();
				menuItems = false;
			}

			q
				.try(function () {
					return type === 'friendly'
						? getBuddyRecommendations()
						: getSystemRecommendations();
				})
				.then(mapContentToTvShow)
				.then(filterUnavailableContent)
				.then(function generateRecommendationsMenu(recommendations) {
					if (recommendations.length === 0) {
						ui.generalAlert(tr('tvRecommendationsNoResults'));
						return;
					}
					var now = new Date();
					var dayStart = (new Date(
						now.getFullYear(), now.getMonth(), now.getDate())
					).getTime();
					var tomorrowStart = dayStart + 86400000;
					var tomorrowEnd = tomorrowStart + 86400000;
					var svgItems = recommendations.map(function (recommendation) {
						var templateId = 'tvRecommendationsItemTemplate';
						return ui.template(templateId, getTemplateDataObject(recommendation));
					});

					menuItems = menuHandler
						.newMenuItems()
						.setItems(svgItems, recommendations)
						.show();

					function getTemplateDataObject(recommendation) {
						var content = recommendation.content;
						return {
							'senderName': recommendation.senderName,
							'imageLink': recommendation.shared === 1 ? '#recordingRecommend' : '',
							'getChannel': function () {
								return content.channel().name.encodeEntities();
							},
							'setTime': function (timeFormat) {
								return new Date(parseInt(content.start, 10))
									.toFormatedString(timeFormat);
							},
							'setDate': function (dateFormat) {
								var start = parseInt(content.start, 10);
								if (start >= dayStart && start < tomorrowStart)
									return tr('today');
								if (start >= tomorrowStart && start < tomorrowEnd)
									return tr('tomorrow');
								return new Date(start).toFormatedString(dateFormat);
							},
							'setTitle': function () {
								return content.title.encodeEntities();
							}
						};
					}
				})
				.catch(function(ex) {
					BS.logger.info('TV RECOMMENDATIONS .init() exception:');
					BS.logger.log(ex);
					ui.generalAlert(tr('tvRecommendationsNoResults'));
				})
				.finally(function() {
					tvRecommendations.dom.showModule();
					that.lock = false;
					ui.toggleLoader(false);
				})
				.done();

			function getSystemRecommendations() {
				var url = '/restapi/rest/%d/%d/system-recommendations/tv'
					.sprintf(BS.portal.user.regionId, BS.portal.user.userId);
				return BS.request.Get(url, {
					data: { language: BS.portal.language.label }
				}).then(function (response) {
					return response.data.list.map(toRecommendation);
					function toRecommendation(tvShowDto) {
						return { content: tvShowDto, shared: 0, senderName: '' };
					}
				});
			}

			function getBuddyRecommendations() {
				var url = '/restapi/rest/%d/%d/social/recommendations/received/tv'
					.sprintf(BS.portal.user.regionId, BS.portal.user.userId);
				return BS.request.Get(url).then(function (response) {
					return response.data.filter(function (recommendation) {
						recommendation.content.id = recommendation.content.idProgram;
						recommendation.content.channelId = recommendation.content.idChannel;
						return recommendation.shared === 1;
					});
				});
			}

			function mapContentToTvShow(recommendations) {
				return recommendations.map(function (recommendation) {
					recommendation.content = new BS.ShowModel.TvShow(recommendation.content);
					return recommendation;
				});
			}

			function filterUnavailableContent(recommendations) {
				return recommendations.filter(function (recommendation) {
					var tvShow = recommendation.content;
					var isShowAllowed = tvShow.isShowAllowed();
					var isChannelVisible = recommendation.content.channel() !== null;

					if (!isChannelVisible) {
						BS.logger.debug('Hiding program %s due to not available channel', tvShow);
					} else if (!isShowAllowed) {
						BS.logger.debug('Hiding program %s due to parental lock', tvShow);
					}

					return isShowAllowed && isChannelVisible;
				});
			}

		};
		tvRecommendations.destroy = function () {
			this.dom.hideModule();
			clearActionBarTimer();
			if (menuItems) {
				menuItems.destroy();
				menuItems = false;
			}
			this.dom.destroy();
			this.dom = null;
			misc.dom.navigationPop();
		};
		tvRecommendations.blur = function () {
			this.dom.hideModule();
		};
		tvRecommendations.focus = function () {
			if (!menuItems)
				am.pop();
			else {
				tvRecommendations.dom.showModule();
			}
		};

		function clearActionBarTimer() {
			if (actionBarTimer !== null) {
				clearTimeout(actionBarTimer);
				actionBarTimer = null;
			}
		}

		function actionBarResetSwitch() {
			actionBarTimer = null;
			misc.dom.actionBar.set([
				['back', 'toLiveTvMenu'],
				['vertical', 'select'],
				['empty', null],
				['confirm', 'programDetails']
			]);
		}

		function actionBarSetSwitch() {
			misc.dom.actionBar.set([
				['back', 'toLiveTvMenu'],
				['vertical', 'select'],
				['right', 'switchToChannel'],
				['confirm', 'programDetails']
			]);
			actionBarTimer = setTimeout(
				actionBarResetSwitch,
				menuItems.currentInfo().end - Date.now()
			);
		}

		function _setActionBar() {
			if (menuItems) {
				var show = menuItems.currentInfo();
				var now = Date.now();

				if ((show.start <= now) && (show.end > now)) {
					misc.dom.actionBar.set([
						['back', 'toLiveTvMenu'],
						['vertical', 'select'],
						['right', 'switchToChannel'],
						['confirm', 'programDetails']
					]);
					actionBarTimer = setTimeout(actionBarResetSwitch, show.end - now);

				} else {
					misc.dom.actionBar.set([
						['back', 'toLiveTvMenu'],
						['vertical', 'select'],
						['empty', null],
						['confirm', 'programDetails']
					]);
					if (now < show.start)
						actionBarTimer = setTimeout(actionBarSetSwitch, show.start - now);
				}
				tvRecommendations.dom.tvRecommendationsMenu.show();

			} else {
				misc.dom.actionBar.set([
					['back', 'toLiveTvMenu'],
					['empty', null],
					['empty', null],
					['empty', null]
				]);
				tvRecommendations.dom.tvRecommendationsMenu.hide();
			}
		}

	})();


	var tvShowDetails = new BS.App('tvShowDetails', {
		inputMapper: BS.App.portalDirectionKeyMapper
	});

	(function () {
		var show = null;
		var programDescription = false;
		var tvShowMenuDisplayable = true;
		var tvShowMenu = null;

		tvShowDetails.onInputEvent = function (keyPressedName) {
			switch (keyPressedName) {
			case 'up':
				programDescription.moveUp();
				break;
			case 'down':
				programDescription.moveDown();
				break;
			case 'back':
			case 'left':
				am.pop();
				break;
			case 'right':
			case 'ok':
				if (tvShowMenuDisplayable) {
					tvCatRepo.getAllCategory().then(function(allChCat) {
						tvShowMenu.display([showService.getCapabilities(show), show, allChCat]);
					});
				}
				break;
			}
		};
		tvShowDetails.focus = function (caller, arg, arg1, arg2) {
			switch (caller) {
			case 'priceListDialog':
				if (arg === 'ok' && arg2) {
					mm.getModule('ShowCommonApps')
						.showContentPurchase(arg2.product, arg2.priceItem);
				}
				break;
			default:
				tvShowMenuDisplayable = tvShowMenu.displayable(showService.getCapabilities(show));
				break;
			}
		};
		tvShowDetails.init = function (caller, showObj) {
			if (!tvShowMenu)
				tvShowMenu = mm.getApp('tvShowMenu');
			misc.dom.navigationPush(tr('programDetails'));
			tvShowMenuDisplayable = tvShowMenu.displayable(showService.getCapabilities(showObj));
			programDescription.setProgram(showObj);
			show = showObj;
			this.dom.showModule();
		};

		tvShowDetails.destroy = function () {
			this.dom.hideModule();
			misc.dom.navigationPop();
			programDescription.setProgram(null);
		};

		tvShowDetails.startup = function () {
			tvShowDetails.dom = new ModuleDom(['tvShowDetails'], {
				upDownArrows: $('#tvShowDetailsUpDownArrows'),
				showModule: function () {
					misc.dom.actionBar.set([
						['back', 'toWhatsOn'],
						['vertical', 'programInfoScrolling'],
						['empty', null],
						tvShowMenuDisplayable ? ['confirm', 'more'] : ['empty', null]
					]);
					this.tvShowDetails.show();
				},
				hideModule: function () {
					this.tvShowDetails.hide();
				}
			}, function () {
				var title = this.tvShowDetails.first().next();
				var date = title.next();
				var content = date.next();
				var scroller = content.next();
				var icons = scroller.next();

				programDescription = new ui.ProgramDescription(
					title[0],
					content[0],
					content.first().first().next()[0],
					scroller[0],
					this.upDownArrows[0],
					icons[0],
					date[0],
					null
				);
			});
		};

	})();

	var TvRecommendationsModule = new BS.Module({
		id: 'TvRecommendations',
		requiredLicense: 'epg && livetv',
		startupTasks: [
			{
				name: 'Tv Recommendation interface',
				payload: function (params, callback) {
					BS.template.get('svg/tv_recommendations.svg').finally(callback);
				}
			}
		]
	});

	TvRecommendationsModule.register(tvRecommendations);
	TvRecommendationsModule.register(tvShowDetails);

})(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	BeeSmart.evMgr,
	$.ModuleDom
);

(function (BS, q, mm, am, ui, em,  ModuleDom, keys, formats, PVR) {
	var liveTv = mm.getApp('liveTv');
	var misc = mm.getApp('Misc');
	var mmPvr = null;
	var BeeSmartMain = mm.getModule('BeeSmartMain');
	var tvLib = BeeSmartMain.tvLibrary;
	var user = null;
	var epgOperationDelay;
	var tvCatRepo = BS.repositories.tvCategoryRepo;
	var TvShowRepr = BS.ShowModel.TvShowRepr;
	var languageCode;

	function getMaxDaysOffset() {
		return BS.config.get('Epg.Client.MAX_DAYS_OFFSET');
	}

	var epg = new BS.App('EpgMatrixView', {
		listenTo: [keys.shortcuts],
		helpId: 'epg',
		inputMapper: function (inputKey) {
			var keyMapper = {'left': 'right', 'right': 'left'};
			if (BS.portal.direction === TvShowRepr.directions.rtl &&
				(
					epg.isCategoryChangeActive() ||
					epg.isDateChangeActive()
				) ||
				epg.EPG_DIRECTION === TvShowRepr.directions.rtl
			) return keyMapper[inputKey];
		}
	});

	BS.evMgr.bind('onBeeSmartLoginSuccess', function () {
		user = BS.portal.user;
		languageCode = user.language.label;
	});

	var TvShow = BS.ShowModel.TvShow;
	var BrokenTvShow = BS.ShowModel.BrokenTvShow;
	var showRepo = BS.ShowModel.showRepository;
	var showService = BS.ShowModel.showService;

	epg.dom = null;
	epg.currentSubMenu = null;

	(function () {
		var currentShowIndex = -1;
		var currentTick = 0;
		var currentShows = [];
		var currentShow = null;
		var midnight1 = null;
		var maxTick = 0;
		var menu = null;
		var statusIcons = false;
		var numberOfTicks = 48;


		var currentCategory = null;
		var tvCategories = null;
		var tvCategoriesExpiry = null;
		var allCatObj = null;

		var currentDate = null;
		var keysLocked = false;
		var dom = {};
		var isCategoryChangeActive = false;
		var isDateChangeActive = false;
		var dayChangeOffset = 0;
		var statusIconsTimer = false;
		var descSetDelayTmrRef = null;
		var descShownFor = null;
		var portalWasHidden = null;
		var mainMenuWasHidden = null;

		BS.evMgr.bind('onBeeSmartReady', function () {

			BS.evMgr.bind('onShowRepositoryDataChanged', function () {
				if (!am.isLoaded('EpgMatrixView'))
					return;
				dom.redrawMatrixView().then(function () {
					lookupShows();
					selectShowOnCurrentTick();
				});
			});

			BS.evMgr.bind('onUserParentalStatusChange', function () {
				q.delay(am.isLoaded('EpgMatrixView') ? 50 : 1500).then(function () {
					var t1 = Date.now();
					dom.clearMatrix();
					if (am.isLoaded('EpgMatrixView'))
						dom.redrawMatrixView();

					if (currentShow) epg.setDescription(currentShow, true);
					else epg.flushDescription();
					var deltaT = Date.now() - t1;
					BS.logger.trace('EPG MATRIX Event:onUserParentalStatusChange Whole epg ' +
						'iteration index time %d ms\n', deltaT);
				});
			});

			var firstChannelChange = true;
			BS.evMgr.bind('onChannelChange', function () {
				if (epg.channelChangeTimerRef) {
					clearTimeout(epg.channelChangeTimerRef);
					epg.channelChangeTimerRef = null;
				}
				epg.channelChangeTimerRef = firstChannelChange || setTimeout(function () {
						if (am.isLoaded(epg) || !epg.currentSubMenu)
							return;

						var ltvCategory = liveTv.getCurrentCategory();
						if (ltvCategory === currentCategory &&
							epg.jumpToChannelItem(liveTv.getCurrentChannel())) {
							epg.onMenuMove(true);
						} else {
							showMenu(ltvCategory);
						}
					}, epgOperationDelay * 13);
				firstChannelChange = false;
			});

			BS.evMgr.bind('onCategoryChanged', function (ev) {
				if (ev.data.scope === 'favorite' &&
					currentCategory.type === tvCatRepo.CategoryTypes.FAVORITE
				) {
					epg.refreshMenuOnInit = true;
				}
			});

			BS.evMgr.bind('onTvLibraryUpdate', function (ev) {
				if (ev.data.type === 'category-current') {
					if (currentCategory === null) {
						currentCategory = liveTv.getCurrentCategory();
						if (!am.isLoaded(epg))
							showMenu(currentCategory);
					}
				}
			});

			BS.evMgr.bind('onDvbCategoryChanged', function () {
				epg.refreshMenuOnInit = true;
			});

			BS.evMgr.bind('onTvLibraryUpdate', function (ev) {
				var t1 = new Date();
				if (ev.data.type === 'category-current') {
					if (currentCategory === null) {
						currentCategory = liveTv.getCurrentCategory();
						if (!am.isLoaded(epg))
							showMenu(currentCategory);
					}
				}
				if (ev.data.type === 'channel-video' || ev.data.type === 'channel-renumber') {
					epg.refreshMenuOnInit = true;
				}

				try {
					if (ev.data.type === 'channel-parental-control') {
						var cds = showRepo.channels;
						Object.eachKey(cds, function(day) {
							ev.data.value.forEach(function (chgObj) {
								cds[day][chgObj.channel.id].eachShow(function (pObj) {
									pObj.redrawTitle();
								});
							});
						});
						if (currentShow)
							epg.setDescription(currentShow);
					}
				} catch (x) {
				}

				BS.logger.trace('EPG MATRIX Event:onTvLibraryUpdate Whole epg iteration index ' +
					'time %d ms\n', Date.now() - t1);
			});

			BS.evMgr.bind('onDayChange', function () {
				if (am.isLoaded('EpgMatrixView')) {
					return;
				}
				dom.clearMatrix();
				showRepo.cleanupCache();
				currentDate = new Date();
			});

		});

		epg.startup = function epgStartup() {
			epg.alert = new ui.Alert({
				autoHide: 3500
			});

			epg.tvShowMenu = mm.getApp('tvShowMenu');

			var oldHide = epg.alert.hide;
			epg.alert.hide = function () {
				keysLocked = true;
				return oldHide.apply(this, arguments).done(function () {
					keysLocked = false;
				});
			};

			epg.backgroundMatrixViewRedrawTask = BS.backgroundService.addTask(function () {
				if (am.lastLoaded(epg)) return;
				var channel = epg.backgroundMatrixViewRedrawTask.channel;
				return dom.redrawMatrixView().then(function () {
					lookupShows();
					selectShowOnCurrentTick();
				}).delay(epgOperationDelay).then(function () {
					if (am.isLoaded(epg))
						epg.setPip(channel);
				});
			}, {
				name: 'EPG Matrix View redraw',
				interval: 24*60*60*1000
			});

			dom = new ModuleDom(
				[
					'matrixEpgHolder', 'epgFrame', 'epgDate', 'epgWatchedDate', 'epgWatchedCat',
					'epgTime', 'epgButtons', 'epgChannelList', 'epgRulerProgress',
					'noChannelsNoticeHolder', 'matrixEpgHolderToggler', 'epgCapabilitiesButton',
					'epgGraphicProperties', 'epgRuler', 'epgDescription', 'epgDescriptionSetter',
					'epgDescriptionHolder', 'epgCatChangeToggler', 'epgDateChangeToggler',
					'epgPipHolder', 'epgStatusIcons', 'indicate-waiting', 'indicate-impatient',
					'epgChannelListMenuSelector', 'dateChangeBg', 'dateChangeAni', 'catChangeBg',
					'catChangeAni'
				], {
					lockEpgCapsButton: function lockEpgCapsButton(lockIt) {
						if (lockIt)
							this.epgCapabilitiesButton.hide();
						else
							this.epgCapabilitiesButton.show();
					},
					onMenuFinishAction: function onMenuFinishAction(index, channelObj) {
						if (!am.lastLoaded(epg)) {
							epg.backgroundMatrixViewRedrawTask.channel = channelObj;
							BS.backgroundService.runTask(epg.backgroundMatrixViewRedrawTask);
							return;
						}
						dom.redrawMatrixView().then(function () {
							lookupShows();
							selectShowOnCurrentTick();
						}).delay(epgOperationDelay).then(function () {
							if (am.isLoaded(epg))
								epg.setPip(channelObj);
						}).done();
					},
					setCurrCatName: function setCurrCatName(catId) {
						this.epgWatchedCat.svg(tvCategories.filter(function (cat) {
							return cat.id === catId;
						})[0].name.encodeEntities());
					},
					setCEpgDate: function setCEpgDate() {
						this.epgTime.svg(new Date().toFormatedString(formats.time));
						this.epgDate.svg(new Date().toFormatedString(formats.date));
					},
					toggleCatChange: function toggleCatChange() {
						isCategoryChangeActive = !isCategoryChangeActive;
						tvCategories.some(function (cat, index) {
							if (cat.id === currentCategory.id)
								epg.tmpCatIdx = index;
						}, this);
						if (isCategoryChangeActive) {
							this.epgCatChangeToggler.trigger('beginEvent');
							if (epg.currentSubMenu)
								epg.currentSubMenu.hideSelector();
						} else {
							this.epgCatChangeToggler.trigger('endEvent');
							if (epg.currentSubMenu) {
								epg.currentSubMenu.showSelector();
								epg.jumpToChannelItem(liveTv.getCurrentChannel());
							}
							dom.redrawMatrixView();
						}
						dom.setCurrCatName(currentCategory.id);
					},
					toggleDateChange: function toggleDateChange() {
						isDateChangeActive = !isDateChangeActive;
						if (isDateChangeActive) {
							dayChangeOffset = parseInt(currentDate.getTime() / 86400000) - parseInt(
									Date.now() / 86400000);
							this.epgDateChangeToggler.trigger('beginEvent');
							if (epg.currentSubMenu)
								epg.currentSubMenu.hideSelector();
						} else {
							this.epgDateChangeToggler.trigger('endEvent');
							if (epg.currentSubMenu)
								epg.currentSubMenu.showSelector();
						}
						var newDate = new Date(new Date().setDate(new Date().getDate() +
							dayChangeOffset));
						this.setCEpgDate(newDate);
						this.epgWatchedDate.text(newDate.toFormatedString(formats.date));
					},
					noChannelsNotice: function (mode) {
						if (mode === 'show') {
							var msg = currentCategory.type === tvCatRepo.CategoryTypes.FAVORITE ?
								'favorites_how_to' : 'noChannelsNotice';
							this.noChannelsNoticeHolder.show().first().text(tr(msg));
							this.epgRuler.hide();
							this.epgChannelList.hide();
							this.epgDescriptionHolder.hide();
							this.epgStatusIcons.hide();
						} else {
							this.noChannelsNoticeHolder.hide();
							this.epgRuler.show();
							this.epgChannelList.show();
							this.epgDescriptionHolder.show();
							this.epgStatusIcons.show();
						}
					},
					scrollToX: (function () {
						var currentScrollX = 0;
						return function scrollToX(newX) {
							if (newX === currentScrollX)
								return false;

							this.epgRuler.attr('scrollX', newX, NS.ekioh);
							this.epgFrame.attr('scrollX', newX, NS.ekioh);
							currentScrollX = newX;
							return true;
						};
					})(),
					scrollToY: (function () {
						var currentScrollY = 0;
						return function scrollToY(newY) {
							if (newY === currentScrollY) return false;
							this.epgFrame.attr('scrollY', newY, NS.ekioh);
							currentScrollY = newY;
							return true;
						};
					})(),
					clearMatrix: function clearMatrix(forDay) {
						forDay = forDay || currentDate;
						var dayNumber = forDay.getDate();
						BS.logger.debug('EPG: clearMatrix for day: ' + dayNumber);
						if (!(dayNumber in showRepo.channels)) {
							return;
						}
						var chs = showRepo.channels[dayNumber];
						for (var i in chs)
							chs[i].cleanMatrixView();
					},
					isRedrawingForDay: 0,
					redrawMatrixView: function redrawMatrixView() {
						var audit = 'EPG MATRIX .redrawMatrixView() ';
						var msg1 = 'Already redrawing for this day, ignore redrawMatrixView call';
						var msg2 = 'Channel %s already drawn for date %s';
						var msg3 = 'All data received but date changed, just continue';
						var msg4 = 'Redraw ended for date %d we draw %d new channel(s) in %d ms';
						var cTime = Date.now();
						if (!epg.currentSubMenu)
							return q(null);
						if (this.isRedrawingForDay &&
							currentDate.getDate() === this.isRedrawingForDay) {
							BS.logger.debug(msg1);
							return q(null);
						}

						this.isRedrawingForDay = currentDate.getDate();
						var limits = epg.getMenuDisplayIndexes();
						var first = limits.first;
						var last = limits.last;
						var svgHeadEk = '<svg xmlns:ekioh="http://www.ekioh.com/2007/ekioh">';
						var svgHead = '<svg>';
						var chCache = showRepo.channels[currentDate.getDate()];
						var drawnChs = [];
						var allPromises = [];

						BS.logger.trace(audit + ' from %d > %d', first, last);

						var waitTmr = new BS.Utils.Timer(function () {
							dom['indicate-waiting'].begin();
						}, 100);

						for (var i = first; i <= last; i++) {
							var info = epg.currentSubMenu.info(i);
							if (
							!info ||
							(chCache && chCache[info.id] && (chCache[info.id]).isDrawn())
							) {
								BS.logger.trace(audit + msg2, info.name, currentDate.getDate());
								continue;
							}

							drawnChs.push(info.id);
							allPromises.push(showRepo.loadChannel(info.id, currentDate)
								.then(onChannelDataGet.bind({position: i})));
						}

						return q
							.allSettled(allPromises)
							.spread(doneLoading.bind({'chs': drawnChs, 'day': currentDate}))
							.catch(function (ex) { BS.logger.log(ex); });

						function doneLoading() {
							if (waitTmr.tid) waitTmr.clear();
							else dom['indicate-waiting'].end();

							if (this.day.getDate() !== currentDate.getDate())
								BS.logger.debug(audit + msg3);

							BS.logger.trace(audit + msg4,
								this.day.getDate(), this.chs.length, Date.now() - cTime
							);

							if (this.chs.length) {
								em.dispatch(new epg.EpgEvent('view-redrawn', {
									channels: this.chs,
									day: this.day
								}));
							}

							epg.dom.isRedrawingForDay = 0;
							BS.logger.trace('EPG MATRIX .redrawMatrixView() doneLoading() Done');
							return q(this.chs);
						}

						function onChannelDataGet(data) {
							var audit = 'EPG MATRIX .redrawMatrixView() onChannelDataGet() ';
							var date = data.date;
							var channelId = data.channelId;

							if (date.getDate() !== currentDate.getDate()) {
								BS.logger.trace(audit + 'date changed, ignore drawing channel ' +
									'id %d on position %d for day %d!',
									channelId, this.position, date.getDate());
							} else {
								BS.logger.trace(
									audit + 'drawing channel id %d on position %d for day %d!',
									channelId, this.position, date.getDate());

								BS.perf.start('draw channel shows');
								var markup = showRepo.channels[date.getDate()][channelId]
									.drawOnMatrixView()
									.generateMarkup(this.position, epg);
								markup = (epg.TVSHOW_CORNER_RADIUS ? svgHeadEk : svgHead) +
									markup + '</svg>';
								var cDom = parseXML(markup, document);
								dom.epgFrame[0].appendChild(cDom.firstChild);

								BS.perf.stop('draw channel shows', 'chId=%s', channelId);
							}
						}
					},
					setRulerProgress: function setRulerProgress(time) {
						var dirFactor = epg.EPG_DIRECTION === TvShowRepr.directions.rtl ? -1 : 1;
						var dirOffset = epg.EPG_DIRECTION === TvShowRepr.directions.rtl ? 48 : 0;
						var newWidth = (dirOffset + dirFactor * time / 1800) * epg.HALF_HOUR_LENGTH;
						this.epgRulerProgress.attr('x2', newWidth.toString());
					}
				});

			epg.dom = dom;
			dom.actionBar = new ui.ActionBar(dom.epgButtons).show();

			var epgGraphicProperties = dom.epgGraphicProperties;

			epg.HALF_HOUR_LENGTH = parseInt(epgGraphicProperties.attr('half-hour-length',
				null, NS.bee));
			epg.TVSHOW_LEFT_MARGIN = parseInt(epgGraphicProperties.attr('tv-show-left-margin',
				null, NS.bee));
			epg.TVSHOW_RIGHT_MARGIN = parseInt(epgGraphicProperties.attr(
				'tv-show-right-margin', null, NS.bee));
			epg.TVSHOW_HEIGHT = parseInt(epgGraphicProperties.attr('tv-show-height', null, NS.bee));
			epg.TVSHOW_TEXT_OFFSET = parseInt(epgGraphicProperties.attr('tv-show-text-offset',
				null, NS.bee));
			epg.EPG_ROW_HEIGHT = parseInt(epgGraphicProperties.attr('epg-row-height',
				null, NS.bee));
			epg.EPG_ROW_X_OFFSET = parseInt(epgGraphicProperties.attr('epg-row-x-offset',
				null, NS.bee)) || 0;
			var attrCCR = epgGraphicProperties.attr('tv-show-corner-radius', null, NS.bee);
			epg.TVSHOW_CORNER_RADIUS = attrCCR === '' ? 5 : parseInt(attrCCR);
			epg.EPG_DIRECTION = epgGraphicProperties.attr('epg-direction', null, NS.bee)
				=== 'rtl' ? TvShowRepr.directions.rtl : TvShowRepr.directions.ltr;

			if (menu)
				menu.destroy();
			if (statusIcons)
				statusIcons.destroy();

			menu = new ui.Menu($('#epgChannelListMenuSelector')[0]);

			var timelinePoints = [];
			var cDateTime = new Date();
			cDateTime.setHours(0, 0, 0, 0);

			do {
				timelinePoints.push(cDateTime.toFormatedString(formats.time));
				cDateTime.setTime(cDateTime.valueOf() + 1800000);
			} while (timelinePoints.length < 49);

			if (epg.EPG_DIRECTION === TvShowRepr.directions.rtl)
				timelinePoints.reverse();

			var rulerArr = ui.template('matrixViewRulerTemplate', {
				'timelinePoints': timelinePoints,
				'setRulerX': function (i) { return i * epg.HALF_HOUR_LENGTH; }
			});

			dom.epgRulerProgress[0].parentNode.insertBefore($.parseSvg(rulerArr),
				dom.epgRulerProgress[0]);

			var matrixWidth = parseInt(dom.epgRuler.attr('width'));
			maxTick = numberOfTicks - (matrixWidth / epg.HALF_HOUR_LENGTH) + 1;
			statusIcons = new ui.StatusIcons(epg.dom.epgStatusIcons[0], [
				'iconChannelRecordable', 'iconChannelTimeshift', 'iconChannelPauseResume',
				'iconChannelInstantRecording', 'iconChannelLock', 'iconChannelHD'
			], 15);

			BS.ShowModel.TvShowRepr.domRoot = dom.epgFrame[0];
			BS.ShowModel.ChannelCacheDescriptor.domRoot = dom.epgFrame[0];

			currentDate = new Date();
		};

		epg.onInputEvent = function epgOnInputEvent(keyPressedName) {
			if (keysLocked) {
				dom['indicate-impatient'].begin();
				return;
			}

			if (isCategoryChangeActive) {
				epg.onInputEventCategoryChange(keyPressedName);
				return;
			}
			if (isDateChangeActive) {
				epg.onInputEventDateChange(keyPressedName);
				return;
			}

			switch (keyPressedName) {
			case 'info':
				if (currentShow) {
					am.push(mm.getApp('epgTvShowDetails'), currentShow, currentCategory);
				}
				break;
			case 'reload':
				break;
			case 'right':
				if (!epg.alert.isHidden()) {
					epg.alert.hide().then(function () {
						epg.selectShowOnRight();
					});
					break;
				}
				epg.selectShowOnRight();

				break;
			case 'left':
				if (!epg.alert.isHidden()) {
					epg.alert.hide().then(function () {
						epg.selectShowOnLeft();
					});
					break;
				}
				epg.selectShowOnLeft();

				break;
			case 'up':
			case 'chUp':
				if (!epg.alert.isHidden()) {
					epg.alert.hide().then(function () {
						epg.currentSubMenu.previous();
						epg.onMenuMove(true);
					});
					break;
				}
				epg.currentSubMenu.previous();
				epg.onMenuMove(true);

				break;
			case 'down':
			case 'chDown':
				if (!epg.alert.isHidden()) {
					epg.alert.hide().then(function () {
						epg.currentSubMenu.next();
						epg.onMenuMove(true);
					});
					break;
				}
				epg.currentSubMenu.next();
				epg.onMenuMove(true);

				break;
			case 'menu':
				return true;
				break;
			case 'epg':
			case 'back':
				if (am.interuptable()) {
					if (am.lastLoaded('epgTvShowDetails')) {
						am.pop();
					} else {
						am.pop(epg);
					}
				}

				break;
			case 'yellow':
				dom.toggleDateChange();

				break;
			case 'green':
				dom.toggleCatChange();

				break;
			case 'ok':
				var show = currentShow || new BrokenTvShow(epg.currentSubMenu.currentInfo().id);
				var capabilities = showService.getCapabilities(show);
				if (!epg.tvShowMenu.displayable(capabilities))
					return;
				epg.tvShowMenu.display([capabilities, show, currentCategory]);

				break;
			case 'record':
				if (!currentShow || currentShow.isTvShowBroken() ||
					showService.getCapabilities(currentShow).pvr !== 'recordable') return;

				if (currentShow.isShowAllowed()) {
					if (mm.appExists('pvr')) {
						am.push(mm.getApp('pvr'), currentShow);
					}
				} else {
					am.push(mm.getApp('pinCheckDialog'));
				}

				break;
			case 'play':
				if (!currentShow) return;
				if (!currentShow.isShowAllowed()) {
					BS.logger.trace('Show is parentally locked and will not be played.');
					return;
				}

				var pProps = showService.getShowRecProperties(currentShow);
				if (pProps === null) return;

				ui.toggleLoader(true);
				keysLocked = true;
				showService.playShowRecording(pProps).finally(function () {
					keysLocked = false;
					ui.toggleLoader(false);
				}).done();

				break;
			case 'fsTV':

				return true;
			default:
				if (isNaN(parseInt(keyPressedName, 10)))
					break;
				am.push(mm.getApp('NumberPicker'), keyPressedName, function (number) {
					var chPromise = currentCategory.getChannelByNumber(number);
					var allCatPromise = tvCatRepo.getAllCategory();
					q.all([chPromise, allCatPromise]).spread(function (chObj, allChCat) {
						if (!chObj && currentCategory.id !== allChCat.id) {
							allChCat.getChannelByNumber(number).then(function (chObj) {
								if (!chObj) return;
								liveTv.setCurrentCategory(allChCat);
								showMenu(allChCat).then(function () {
									dom.setCurrCatName(allChCat.id);
									navigateMatrixToAndSwitchChannel(chObj);
								});
							});
						} else if (currentCategory.id !== liveTv.getCurrentCategory().id) {
							liveTv.setCurrentCategory(currentCategory);
							navigateMatrixToAndSwitchChannel(chObj);
						} else {
							navigateMatrixToAndSwitchChannel(chObj);
						}
						function navigateMatrixToAndSwitchChannel(chObj) {
							epg.jumpToChannelItem({'id': chObj.id});
							epg.onMenuMove(true);
							liveTv.switchToChannel(chObj, true);
						}
					});
				});

				break;
			}
		};

		epg.tmpCatIdx = 0;
		epg.onInputEventCategoryChange = function (key) {
			if (keysLocked) {
				return;
			}
			switch (key) {
			case 'left':
			case 'right':
				var maxIndex = tvCategories.length -1;

				this.tmpCatIdx += (key === 'right' ? 1 : -1);
				if (this.tmpCatIdx > maxIndex) {
					this.tmpCatIdx = 0;
				} else if (this.tmpCatIdx < 0) {
					this.tmpCatIdx = maxIndex;
				}

				dom.setCurrCatName(tvCategories[this.tmpCatIdx].id);
				break;
			case 'ok':
				keysLocked = true;
				epg.flushDescription();
				tvCatRepo.getById(tvCategories[this.tmpCatIdx].id).then(function (cat) {
					return showMenu(cat).then(function () {
						dom.noChannelsNotice(cat.isEmpty ? 'show' : 'hide');
						if (!epg.currentSubMenu || !epg.currentSubMenu.size())
							return;

						if (epg.jumpToChannelItem(liveTv.getCurrentChannel()))
							epg.setPip(liveTv.getCurrentChannel());

						dom.toggleCatChange();
						epg.onMenuMove(true);
					});
				}).finally(function () {
					keysLocked = false;
				}).done();

				break;
			case 'green':
			case 'back':
				var prmsChangeDone = q(true);
				if (!epg.currentSubMenu || !epg.currentSubMenu.size()) {
					dom.noChannelsNotice('hide');
					prmsChangeDone = showMenu(allCatObj).then(function () {
						if (epg.jumpToChannelItem(liveTv.getCurrentChannel()))
							epg.onMenuMove(true);
					});
				}

				prmsChangeDone.then(function () {
					dom.toggleCatChange();
				});

				break;
			}
		};

		epg.onInputEventDateChange = function (key) {
			var newDate;
			switch (key) {
			case 'left':
			case 'right':
				var offsetDays = key === 'right' ? 1 : -1;
				newDate = new Date();
				var tmpCDS = dayChangeOffset + offsetDays;
				if (tmpCDS < -1 * getMaxDaysOffset() || tmpCDS > getMaxDaysOffset())
					return;
				newDate.setDate(new Date().getDate() + (dayChangeOffset += offsetDays));
				dom.setCEpgDate(newDate);
				dom.epgWatchedDate.text(newDate.toFormatedString(formats.date));

				break;
			case 'ok':
				BS.perf.start('epg day change');
				newDate = new Date(new Date().setDate(new Date().getDate() + dayChangeOffset));
				if (newDate && newDate.getDate() !== currentDate.getDate()) {
					epg.setDateAndTick(newDate, newDate.getHours() * 2);
					dom.toggleDateChange();
					dom.redrawMatrixView().then(function redrawMVCbk() {
						lookupShows();
						selectShowOnCurrentTick();
					}).finally(function () {
						BS.perf.stop('epg day change');
					});
				} else {
					dom.toggleDateChange();
				}

				break;
			case 'yellow':
			case 'back':
				dayChangeOffset = 0;
				dom.toggleDateChange();
				dom.epgWatchedDate.text(currentDate.toFormatedString(formats.date));

				break;
			}
		};

		epg.setPip = function (chViewObj, ignorePCCheck) {
			if (!epg.pip || !BS.portal.isOnline)
				return;
			var chObj = tvLib.getChannelById(chViewObj.id);
			var pcAckCombined = !chObj.parentallyLocked() && chObj.isAcknowledgedByPC(false) ?
				true : TvShow.isForbiddenChTempAllowed(chObj, user);

			if (
				chObj instanceof BeeSmartMain.VideoChannel &&
				chObj.isPlayable() &&
				(ignorePCCheck || pcAckCombined)
			) {
				epg.pip.play(chObj);
			} else {
				epg.pip.stop();
			}
		};

		epg.setDescription = function setDescription(showObj, forceChange) {
			if (!forceChange && (!showObj || descShownFor === showObj.id)) {
				return;
			}
			descShownFor = showObj.id;
			var chObj = showObj.channel();
			var unRecordable = !showObj.isRecordable() || !chObj.isPlayable();
			var recorded = mmPvr && mmPvr.recordedClips && mmPvr.recordedClips[showObj.id];
			var now = Date.now();
			var startInFuture = (showObj.start - 1000) > now;
			var endInPast = (showObj.end + 1000) < now;
			var aRecTime = mmPvr && mmPvr.autoRecordable && mmPvr.autoRecordable[chObj.id];
			var aRecCond = aRecTime !== true ? aRecTime : getMaxDaysOffset() * 86400000;
			var aRecClip = aRecTime && showObj.isRecordable() && showObj.start < now &&
				showObj.start > (now - aRecCond);
			var channelLocked = !chObj.isPlayable();
			var maxRating = BS.config.get('User.MAXIMUM_RATING');

			var catchUp = PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.CatchUp);
			var tvShowRecFeature =
				PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.Program);

			var recordable =
				startInFuture && !recorded &&
				tvShowRecFeature && !unRecordable &&
				chObj.recordable &&
				(
					chObj.autoRecord &&
					catchUp || !chObj.autoRecord
				);

			var playable =
				recorded &&
				endInPast &&
				!unRecordable || aRecClip && !channelLocked || chObj.autoRecord &&
				!unRecordable &&
				catchUp && !(endInPast && recorded) && !(
					startInFuture &&
					(
						recorded || !chObj.recordable || chObj.recordable &&
						tvShowRecFeature
					)
				) &&
				aRecClip || chObj.recordable && !chObj.autoRecord && !unRecordable &&
				tvShowRecFeature &&
				recorded &&
				endInPast;

			var dataOrder = {
				'duration': '%d %s'.sprintf(showObj.duration, tr('min')),
				'start': new Date(showObj.start).toFormatedString(formats.time),
				'end': new Date(showObj.end).toFormatedString(formats.time),
				'rating': showObj.rating !== 0 ?
					(showObj.rating > maxRating ? maxRating : showObj.rating) : null,
				'recordable': recordable ? tr('pRecordable') : null,
				'playable': playable ? tr('pPlayable') : null,
				'recommendedBy': showObj.recommendedBy || null
			};
			var title = epg.dom.epgDescription.first();
			var descrTxtRef = title.next();
			var iconsHolderRef = descrTxtRef.next().first();
			var iconsTemplateRef = iconsHolderRef.next();
			var imgHolderRef = new ui.Image(descrTxtRef.next().next());
			var lockedContentRef = descrTxtRef.next().next().next();
			descrTxtRef.text('');
			showObj.getDescription().then(function() {
				epg.dom.epgDescriptionSetter.trigger('begin', {
					'tvShow': showObj,
					'tvShowFeatures': function (icon, len, format) {
						var j = 0;
						var features = [];
						for (var i in icon) {
							if (!icon.hasOwnProperty(i))
								continue;
							if (!dataOrder[i])
								continue;
							j++;
							if (j >= len)
								continue;
							if (dataOrder[i] instanceof Date)
								dataOrder[i] = dataOrder[i].toFormatedString(format);
							if (i === 'duration') {
								dataOrder[i] = dataOrder[i].toLocaleString(languageCode);
							}
							features.push({
								data: dataOrder[i],
								icon: icon[i]
							});
						}
						return features;
					},
					'iconsSvg': function (data) {
						return $.parseSvg(ui.template(iconsTemplateRef.text(), {
							'tvShowFeatures': data
						}));
					},
					'title': title,
					'description': descrTxtRef,
					'iconsHolderRef': iconsHolderRef,
					'imgHolderRef': imgHolderRef,
					'lockedContentRef': lockedContentRef
				});
			}).catch(function(ex) {
				BS.logger.trace('EPG: error getting program metadata: %s', ex);
			});
		};

		epg.flushDescription = function flushDescription() {
			descShownFor = null;
			var title = epg.dom.epgDescription.first();
			var descriptionTxtRef = title.next();
			var iconsHolderRef = descriptionTxtRef.next().first();
			var imgHolderRef = descriptionTxtRef.next().next();
			var lockedContentRef = descriptionTxtRef.next().next().next();

			title.text('');
			descriptionTxtRef.text('');
			iconsHolderRef.text('');
			imgHolderRef.attr('href', 'blank', NS.xlink);
			lockedContentRef.hide();
		};

		epg.isDateChangeActive = function () {
			return isDateChangeActive;
		};

		epg.isCategoryChangeActive = function () {
			return isCategoryChangeActive;
		};

		epg.onInterval = function onInterval() {
			var secondsSinceMidnight = new Date().daySeconds();
			if (new Date().getDate() === currentDate.getDate() &&
				secondsSinceMidnight % 15 === 0) {
				em.dispatch(new epg.EpgEvent('interval', {
					'frequency': 'very-often',
					'epgDate': currentDate
				}));
				dom.setRulerProgress(secondsSinceMidnight);
			}
			if ((secondsSinceMidnight % 300) === 0) {
				em.dispatch(new epg.EpgEvent('interval', {
					'frequency': 'fairly-often',
					'epgDate': currentDate
				}));
			}
			if (secondsSinceMidnight % 30 === 0) {
				em.dispatch(new epg.EpgEvent('interval', {
					'frequency': 'often',
					'epgDate': currentDate
				}));
				dom.setCEpgDate(currentDate);
			}
		};

		epg.setDateAndTick = function setDateAndTick(newDate, newTick) {
			var audit = 'EPG MATRIX .setDateAndTick(%d, %d)'.sprintf(newDate.getDate(), newTick);
			BS.logger.trace(audit);
			var now = new Date();
			var newMidnight1 = new Date(newDate.getFullYear(), newDate.getMonth(),
				newDate.getDate()).getTime();

			unexposeShow(currentShow);

			newDate.setMinutes(now.getMinutes());
			newDate.setHours(now.getHours());
			newTick = (typeof newTick === 'number') ? newTick : currentTick;
			scrollToNewTick(newTick, true);
			currentShow = null;
			currentShowIndex = -1;

			if (newMidnight1 !== midnight1) {
				BS.logger.trace(audit + 'Displayed epg day is changed from %s to %s',
					newMidnight1.toString(), midnight1.toString());
				setTimeout((function(forDate) {
					return function() { dom.clearMatrix(forDate); };
				})(currentDate), 50);
				midnight1 = newMidnight1;
				currentDate = newDate;
				dom.epgWatchedDate.text(newDate.toFormatedString(formats.date));
			}
			lookupShows();
			dom.setCEpgDate(currentDate);

			if (now.getDate() !== newDate.getDate()) {
				if (now < newDate) {
					dom.setRulerProgress(0);
				} else {
					dom.setRulerProgress(86400);
				}
			} else {
				dom.setRulerProgress(now.daySeconds());
			}
		};

		epg.selectShowOnLeft = function selectShowOnLeft() {
			var nextTick = currentTick <= 1 ? -1 :
				currentTick >= maxTick ? maxTick - 1 : currentTick - 1;
			var nextShow = null;
			var nextShowIndex = -1;
			var rangeStart = midnight1 + (nextTick * 1800000);
			var show;
			var newTick;

			if (!currentShow) {
				var rangeEnd = midnight1 + (currentTick * 1800000);

				for (var i = currentShows.length - 1; i >= 0; i--) {
					show = showRepo.getById(currentShows[i]);
					if (!show) {
						BS.logger.trace('EPG MATRIX .selectShowOnLeft() Cannot dereference show ' +
							'with ID ' + currentShows[i]);
					} else if (isShowInRange(show, rangeStart, rangeEnd)) {
						nextShow = show;
						nextShowIndex = i;
						newTick = nextShow.start < midnight1 ? 0 : (nextShow.start -
						midnight1) / 1800000;
						if (newTick > nextTick)
							nextTick = newTick;
						break;
					}
				}

			} else {
				if (currentShow.start <= rangeStart) {
					nextShowIndex = currentShowIndex;
				} else {
					show = showRepo.getById(currentShows[currentShowIndex - 1]);
					if (show && (show.end > rangeStart)) {
						nextShowIndex = currentShowIndex - 1;
						nextShow = show;
						newTick = nextShow.start < midnight1 ? 0 : (nextShow.start -
						midnight1) / 1800000;
						if (newTick > nextTick) nextTick = newTick;
					}
				}
			}

			BS.logger.trace('EPG MATRIX .selectShowOnLeft() currentTick: %d currentShowIndex: %d' +
				'nextTick: %d nextShowIndex: %d',
				currentTick, currentShowIndex, nextTick, nextShowIndex);
			scrollToTickAndShow(nextTick, nextShowIndex);
		};

		epg.selectShowOnRight = function selectShowOnRight() {
			var nextTick = currentTick === 0 ? 2 :
				currentTick >= maxTick ? numberOfTicks : currentTick + 1;
			var nextShow = null;
			var nextShowIndex = -1;
			var rangeEnd = midnight1 + (nextTick * 1800000);
			var show;

			if (!currentShow) {
				var rangeStart = midnight1 + (currentTick * 1800000);
				for (var i = 0; i < currentShows.length; i++) {
					show = showRepo.getById(currentShows[i]);
					if (!show) {
						BS.logger.trace('EPG MATRIX .selectShowOnRight() Cannot dereference show ' +
							'with ID ' + currentShows[i]);
					} else if (isShowInRange(show, rangeStart, rangeEnd)) {
						nextShow = show;
						nextShowIndex = i;
						nextTick = (nextShow.start - midnight1) / 1800000;
						break;
					}
				}
			} else {
				if (currentShow.end > rangeEnd) {
					nextShowIndex = currentShowIndex;

				} else {
					show = showRepo.getById(currentShows[currentShowIndex + 1]);
					if (show && (show.start <= rangeEnd)) {
						nextShowIndex = currentShowIndex + 1;
						nextShow = show;
						nextTick = (nextShow.start - midnight1) / 1800000;
					}
				}
			}

			BS.logger.trace('EPG MATRIX .selectShowOnRight() currentTick: %d currentShowIndex: %d' +
				' nextTick: %d nextShowIndex: %d',
				currentTick, currentShowIndex, nextTick, nextShowIndex);
			scrollToTickAndShow(nextTick, nextShowIndex);
		};

		epg.getMenuDisplayIndexes = function getMenuDisplayIndexes() {
			if (!epg.currentSubMenu) {
				return { 'first': 0, 'last': 0 };
			}

			var preDisplayHowManyBot = 1;
			var preDisplayHowManyTop = 0;
			var first = epg.currentSubMenu.topIndex();
			var last = epg.currentSubMenu.bottomIndex();

			first = first - preDisplayHowManyTop >= 0 ? first - preDisplayHowManyTop : 0;
			last = last + preDisplayHowManyBot < epg.currentSubMenu.size() - 1 ?
			last + preDisplayHowManyBot : epg.currentSubMenu.size() - 1;

			return { 'first': first, 'last': last };
		};

		epg.onMenuMove = function onMenuMove(dontAnimate) {
			var channelSelectorDom;
			var that = this;
			if (statusIconsTimer !== false)
				clearTimeout(statusIconsTimer);

			statusIconsTimer = setTimeout(function () {
				statusIconsTimer = false;
				if (am.isLoaded(epg)) {
					statusIcons.showIcons(
						liveTv.channelStatusIcons(epg.currentSubMenu.currentInfo()));
				}
			}, epgOperationDelay * 1.5);

			dom.scrollToY(epg.currentSubMenu.topIndex() * epg.EPG_ROW_HEIGHT, dontAnimate);

			unexposeShow(currentShow);
			currentShow = null;
			currentShowIndex = -1;
			lookupShows();
			selectShowOnCurrentTick();

			channelSelectorDom = that.dom.epgChannelListMenuSelector.next().first()
				.find('.currentChannel');
			if (channelSelectorDom.length > 1 ||
				channelSelectorDom.text().indexOf(liveTv.getCurrentChannel().name) === -1) {
				$(channelSelectorDom[0]).removeClass('currentChannel');
			}

		};

		epg.switchToChannelIndex = function switchToChannelIndex(chIndex) {
			if ((chIndex < 0) || (chIndex >= epg.currentSubMenu.size()))
				return;

			epg.unmarkCurrentChannel();
			epg.currentSubMenu.jump(chIndex);
			epg.onMenuMove(true);
			epg.switchToCurrentChannel();
			epg.markCurrentChannel(epg.currentSubMenu.currentInfo().id);
		};

		epg.switchToCurrentChannel = function () {
			if (am.isLoaded('EpgMatrixView')) {
				liveTv.switchToChannel(
					tvLib.getChannelById(epg.currentSubMenu.currentInfo().id), true
				);
			}
		};

		epg.jumpToChannelItem = function (chObj) {
			var menuItems = epg.currentSubMenu.infoList();
			var success = false;
			var chDto = menuItems.filter(function (chDto) {
				return chDto.id === chObj.id;
			})[0];
			if (chDto) {
				success = true;
				epg.currentSubMenu.jump(menuItems.indexOf(chDto));
			}
			return success;
		};

		epg.unmarkCurrentChannel = function () {
			if (!epg.currentSubMenu)
				return;
			var toRemove = this.dom.epgChannelListMenuSelector.next().first()
				.find('.currentChannel');
			for (var i = 0; i < toRemove.length; i++) {
				$(toRemove[i]).removeClass('currentChannel');
			}
		};

		epg.markCurrentChannel = function markCurrentChannel(chanId) {
			if (!epg.currentSubMenu)
				return;
			var infos = epg.currentSubMenu.infoList();
			for (var i = 0; i < infos.length; i++) {
				if (infos[i].id === chanId) {
					$($(epg.currentSubMenu.itemElement(i)).find('text')[0])
						.addClass('currentChannel');
					return;
				}
			}
		};

		epg.getCurrentShownChannels = function getCurrentShownChannels() {
			var limits = epg.getMenuDisplayIndexes();
			var shownChannels = [];
			for (var i = limits.first; i <= limits.last; i++) {
				var info = epg.currentSubMenu.info(i);
				if (!info) continue;
				shownChannels.push(info.id);
			}
			return shownChannels;
		};

		epg.init = function epgInit(caller, currentChannel) {
			BS.perf.start('epg init');
			var now = new Date();
			var cCh = currentChannel || liveTv.getCurrentChannel();
			var ltvCategory = liveTv.getCurrentCategory();

			midnight1 = new Date(now.getYear() + 1900, now.getMonth(), now.getDate()).valueOf();
			currentDate = new Date();

			portalWasHidden = misc.portalIsHidden();
			mainMenuWasHidden = misc.adapterMainMenu.isHidden();

			if (!portalWasHidden)
				misc.hidePortal();
			if (!mainMenuWasHidden)
				misc.adapterMainMenu.hide();

			keysLocked = true;

			var refreshedMenu = false;
			if (epg.refreshMenuOnInit) {
				epg.currentSubMenu = null;
			}
			epg.refreshMenuOnInit = false;

			var prmsOnFreshCat = tvCategories && tvCategoriesExpiry > Date.now() ?
				q() :
				tvCatRepo.getAll().then(function (categories) {
					tvCategories = categories.filter(epgCatsFilter).map(catToDto);
					allCatObj = categories.filter(allFilter)[0];
					tvCategoriesExpiry = tvCatRepo.cacheExpires();
				});

			dom.epgWatchedDate.text(currentDate.toFormatedString(formats.date));
			dom.matrixEpgHolderToggler.trigger('beginEvent');

			return prmsOnFreshCat
				.then(function () {
					currentCategory = tvCategories.some(idFilter, {id: ltvCategory.id}) ?
						ltvCategory : allCatObj;
					return currentCategory.getChannels();
				})
				.then(function (channels) {
					var objChannelSet = null;
					var catHash = channels.reduce(function (prev, curr) {
						return prev.concat(curr.number + curr.name);
					}, '');
					dom.setCurrCatName(currentCategory.id);
					if (epg.currentSubMenu === null || catHash !== showMenu.lastCatHash) {
						dom.clearMatrix();
						refreshedMenu = true;
						return showMenu(currentCategory);
					}
					return q(objChannelSet);
				})
				.then(function (objChannelSet) {
					epg.setDateAndTick(now, now.daySeconds() / 1800);
					epg.unmarkCurrentChannel();
					if (!objChannelSet)
						epg.jumpToChannelItem(cCh);
					epg.markCurrentChannel(cCh.id);
				})
				.delay(500)
				.then(function () {
					var eventData = {};
					eventData.eventId = misc.eventIds.epgSwitchedOn;
					eventData.start = Date.now();
					misc.event.write(eventData);
					statusIcons.showIcons(
						liveTv.channelStatusIcons(epg.currentSubMenu.currentInfo())
					);
					dom.scrollToY(epg.currentSubMenu.topIndex() * epg.EPG_ROW_HEIGHT, true);
					em.dispatch(new epg.EpgEvent('interval', {
						'frequency': 'fairly-often',
						'epgDate': currentDate
					}));
				})
				.finally(function () {
					keysLocked = false;
					BS.perf.stop('epg init', 'refreshedMenu=%s', refreshedMenu);
				}).done();

			function allFilter(dto) {
				return dto.type === tvCatRepo.CategoryTypes.ALL_CHANNELS;
			}

			function idFilter(cat) {
				return cat.id === this.id;
			}

			function catToDto(cat) {
				return {
					id: cat.id,
					name: cat.name,
					isTypeAll: tvCatRepo.CategoryTypes.ALL_CHANNELS === cat.type
				};
			}

			function epgCatsFilter(cat) {
				return cat.isLeaf;
			}
		};

		epg.destroy = function () {
			dom.matrixEpgHolderToggler.trigger('endEvent');
			if (!portalWasHidden)
				misc.showPortal();
			if (!mainMenuWasHidden)
				misc.adapterMainMenu.show();

			if (
				currentDate.getDate() !== (new Date()).getDate() ||
				!liveTv.getCurrentCategory().equals(currentCategory)
			) {
				dom.clearMatrix();
			}
			currentDate = new Date();
			if (currentShow)
				unexposeShow(currentShow);
			currentShow = null;
			currentShowIndex = -1;
			currentShows = [];

			if (isDateChangeActive) {
				epg.onInputEventDateChange('back');
			}
			if (isCategoryChangeActive) {
				epg.onInputEventCategoryChange('back');
			}

			dom.matrixEpgHolderToggler.trigger('endEvent');
			if (epg.pip) {
				epg.pip.hide();
			}
			misc.event.write({'eventId': misc.eventIds.epgSwitchedOff, 'start': Date.now()});

			showRepo.cleanupCache();
			showRepo.cleanBrokenChannelCacheDescriptors();
		};

		epg.focus = function (caller, arg, arg1, arg2) {
			switch (caller) {
			case 'priceListDialog':
				if (arg === 'ok' && arg2) {
					mm.getModule('ShowCommonApps')
						.showContentPurchase(arg2.product, arg2.priceItem);
				}
				break;
			case 'content_purchase':
				var newMarkedChannel = epg.tvShowMenu.tvShow.channel().id;
				if (liveTv.getCurrentChannel().id === newMarkedChannel) {
					epg.unmarkCurrentChannel();
					epg.markCurrentChannel(newMarkedChannel);
				}
				break;
			case 'vodPlayer':
			case 'EpgMatrixView':
				dom.matrixEpgHolderToggler.trigger('beginEvent');
				dom.onMenuFinishAction(
					epg.currentSubMenu.currentIndex(),
					epg.currentSubMenu.currentInfo()
				);
				break;
			case 'pinCheckDialog':
				if (arg === 'ok' && arg2 && typeof arg2 === 'boolean')
					am.push(mm.getApp('pvr'), epg.tvShowMenu.tvShow, 'recordable');

				var pProps = showService.getShowRecProperties(epg.tvShowMenu.tvShow);

				if (arg2 === 'playRecording') {
					if (pProps) {
						am.pop();
						keysLocked = true;
						ui.toggleLoader(true);
						showService.playShowRecording(pProps).finally(function () {
							keysLocked = false;
							ui.toggleLoader(false);
						}).done();
					}
				} else if (arg === 'ok' && arg2 === 'allowed') {
					epg.flushDescription();
					epg.setDescription(currentShow);
					epg.setPip(tvLib.getChannelById(currentShow._channel), true);
				}

				break;
			case 'pvr':
				if (arg && arg !== true) {
					epg.alert.show(arg);
					keysLocked = true;
					setTimeout(function () {
						keysLocked = false;
					}, 3500);
				}
				break;
			case 'epgTvShowDetails':
				if (epg.pip) {
					epg.pip.show();
					epg.pip.play(epg.currentSubMenu.currentInfo());
				}
				break;
			case 'beeSmartLockDialog':
				epg.setPip(tvLib.getChannelById(currentShow._channel));
				break;
			}
		};

		epg.blur = function epgBlur(appId) {
			if (appId === 'vodPlayer') {
				dom.matrixEpgHolderToggler.trigger('endEvent');
				if (epg.pip) {
					epg.pip.stop();
				}

			} else if (appId === 'epgTvShowDetails' || appId === 'beeSmartLockDialog') {
				if (epg.pip) {
					epg.pip.stop();
				}
			}
		};

		function showMenu(newCategory) {
			if (currentCategory !== newCategory)
				dom.clearMatrix();

			return newCategory.getChannels().then(function (channels) {
				channels = channels.filter(function (chObj) {
					return chObj.isAcknowledgedByPC(liveTv.showAgeForbiddenChannels);
				});
				var catHash = channels.reduce(function (prev, curr) {
					return prev.concat(curr.number + curr.name);
				}, '');
				var doRegenerateMenu = epg.currentSubMenu === null ||
					catHash !== showMenu.lastCatHash;
				showMenu.lastCatHash = catHash;
				BS.logger.trace('EPG MATRIX showMenu() doRegenerateMenu: %s, %s > %s',
					doRegenerateMenu, currentCategory, newCategory);

				currentCategory = newCategory;

				if (!doRegenerateMenu) {
					epg.currentSubMenu.show();
					return;
				}

				BS.logger.trace('EPG MATRIX showMenu() currentCategory: %s', currentCategory);

				if (epg.currentSubMenu) epg.currentSubMenu.destroy();

				var newSubMenu = menu.newMenuItems();
				var infos = channels.map(chViewDtoMapper);
				newSubMenu.setItems(infos.map(chViewMapper), infos);
				newSubMenu.onFinish(dom.onMenuFinishAction, epgOperationDelay);
				epg.currentSubMenu = newSubMenu.show();

			}).finally(function () {
				var cChObj = liveTv.getCurrentChannel();
				epg.unmarkCurrentChannel();
				epg.markCurrentChannel(cChObj.id);
				epg.jumpToChannelItem(cChObj);
				return q(cChObj);
			});

			function chViewDtoMapper(chObj) {
				return {
					'id': chObj.id, 'number': chObj.number.toLocaleString(languageCode),
					'name': chObj.name.encodeEntities(),
					'img': chObj.chLogoLink
				};
			}

			function chViewMapper(chDto) {
				return ui.template('epgMatrixMenuTemplate', chDto);
			}
		}

		function lookupShows() {
			try {
				currentShows = showRepo.channels[currentDate.getDate()][epg.currentSubMenu
						.currentInfo().id].showIdList || [];
			} catch (x) {
				currentShows = [];
			}
			return currentShows;
		}

		function exposeShow(cShow) {
			if (!am.isLoaded('EpgMatrixView')) {
				return;
			}
			if (cShow) {
				cShow.select();
				epg.dom.lockEpgCapsButton(
					!epg.tvShowMenu.displayable(showService.getCapabilities(cShow))
				);
			}
			if (descSetDelayTmrRef !== null) {
				clearTimeout(descSetDelayTmrRef);
				descSetDelayTmrRef = null;
			}

			descSetDelayTmrRef = setTimeout(function () {
				descSetDelayTmrRef = null;
				if (cShow !== currentShow || !cShow) {
					epg.flushDescription();
					return;
				}
				epg.setDescription(cShow);
			}, epgOperationDelay * 2);
		}

		function unexposeShow(cShow) {
			try {
				cShow.deselect();
			} catch (x) {
			}
		}

		function scrollToNewTick(newTick, dontAnimate) {
			BS.logger.trace(
				'EPG MATRIX .scrollToNewTick(%d, %s) currentTick: %d newTick: %d ' +
				'currentShow: %s currentShows#=%d', newTick, dontAnimate, currentTick, newTick,
				(currentShow ? currentShow.id : '/'), currentShows.length
			);
			if (newTick < 0)
				newTick = 0;
			else if (newTick > numberOfTicks)
				newTick = numberOfTicks;
			if (newTick === currentTick)
				return;

			var moveToTick = newTick >= 1 ? (newTick > maxTick ? maxTick : newTick) - 1 :
					0,
				newX = moveToTick * epg.HALF_HOUR_LENGTH;

			if (epg.EPG_DIRECTION === TvShowRepr.directions.rtl) {
				newX = (maxTick - (moveToTick === maxTick ? 0 : 1) - moveToTick) *
					epg.HALF_HOUR_LENGTH;
			}

			dom.scrollToX(newX, dontAnimate);
			currentTick = newTick;
		}

		function selectShowOnCurrentTick() {
			try {
				var i, show = null;
				var newShow = false;
				var tickTime = (currentTick * 1800000) + midnight1;
				var totalCurrentShows = currentShows.length;

				BS.logger.trace(
					'EPG MATRIX .selectShowOnCurrentTick() currentTick: %d currentTickTime: %d ' +
					'currentShow: %s currentShows#: %d',
					currentTick, tickTime, (currentShow ? currentShow.id : '/'), totalCurrentShows
				);

				for (i = 0; i < totalCurrentShows; i++) {
					show = showRepo.getById(currentShows[i]);
					if (!show) {
						BS.logger.trace(
							'EPG MATRIX .selectShowOnCurrentTick() Cannot dereference show with' +
							' ID ' + currentShows[i]
						);
						continue;
					}
					if (show.start > tickTime)
						break;

					if ((show.start <= tickTime) && (show.end > tickTime)) {
						newShow = show;
						break;
					}
				}
				if ((currentTick === 48) && !newShow && show) {
					if ((show.start <= tickTime) && (show.end >= tickTime)) {
						newShow = show;
						i--;
					}
				}

				if (newShow !== currentShow) {
					unexposeShow(currentShow);
					if (newShow) {
						currentShow = newShow;
						currentShowIndex = i;
					} else {
						currentShow = null;
						currentShowIndex = -1;
					}
				}
				exposeShow(currentShow);
			} catch (e) {
				BS.logger.info('Error: ' + e);
				BS.logger.log(e);
			}
		}

		function changeToNextDate(direction) {
			var newDate = Object.clone(currentDate);
			newDate.setDate(newDate.getDate() + direction);
			var tmpCDS = Math.round((newDate - new Date()) / 86400000);
			if (tmpCDS < -1 * getMaxDaysOffset() || tmpCDS > getMaxDaysOffset()) {
				dom['indicate-impatient'].begin();
				return;
			}
			keysLocked = true;
			epg.setDateAndTick(newDate, direction < 0 ? numberOfTicks : 0);
			epg.dom.redrawMatrixView().then(function () {
				lookupShows();
				selectShowOnCurrentTick();
			}).finally(function () {
				keysLocked = false;
			});
			BS.logger.trace('EPG MATRIX .changeToNextDate(%s) newDate: %s', direction,
				newDate.toDateString());
		}

		function isShowInRange(show, startTime, endTime) {
			if (show.start < startTime) {
				if (show.end > startTime)
					return true;

			} else if (show.start < endTime)
				return true;

			return false;
		}

		function scrollToTickAndShow(nextTick, nextShowIndex) {
			if (nextTick < 0)
				changeToNextDate(-1);
			else if (nextTick >= numberOfTicks)
				changeToNextDate(1);
			else {
				if (nextShowIndex < 0) {
					unexposeShow(currentShow);
					currentShow = null;
					currentShowIndex = -1;
				} else if (currentShowIndex !== nextShowIndex) {
					unexposeShow(currentShow);
					currentShowIndex = nextShowIndex;
					exposeShow(currentShow = showRepo.getById(currentShows[currentShowIndex]));
				}
				scrollToNewTick(nextTick);
			}
		}

		epg.EpgEvent = function (type, params) {
			this.handler = this.typesHandlers[type];
			if (type === 'interval') {
				this.data = {
					'frequency': params.frequency,
					'epgDate': params.epgDate
				};
			}
			if (type === 'view-redrawn') {
				this.data = {
					'channels': params.channels,
					'day': params.day
				};
			}
		};
		epg.EpgEvent.prototype = {
			typesHandlers: {
				'interval': 'onEpgMatrixInterval',
				'view-redrawn': 'onEpgMatrixRedrawn'
			},
			type: 'EpgEvent',
			description: 'When something happens in EPG that other modules should know about'
		};
		Object.extend(epg.EpgEvent, BS.Event);


	})();

	function adaptUIForLAStatus() {
		if (BS.portal.isOnline) {
			$('#LAModeDisableAnimations').find('animate').begin();
		}
		else {
			$('#LAModeEnableAnimations').find('animate').begin();
			if (epg.pip)
				epg.pip.stop();
		}
	}

	BS.evMgr.bind('onConnectivityChange', adaptUIForLAStatus);

	var EpgModule = new BS.Module({
		id: 'EpgMatrixViewModule',
		requiredLicense: 'epg && livetv',
		startupTasks: [
			{
				name: 'EPG interface',
				payload: function (params, callback) {
					epgOperationDelay = BS.device
						.checkPerformanceIndex(BS.device.consts.performance.MID) ? 300 : 600;

					try {
						mmPvr = BS.modMgr.getApp('pvr');
					} catch (ex) {
					}

					BS.template.get('svg/epg_matrix_view.svg').then(function () {
						try {
							epg.pip = mm.getModule('Tv').PipManager.getInstance($('#epgPipHolder'));
						} catch (e) {
							BS.logger.debug(e);
						}
						adaptUIForLAStatus();
					}).finally(callback);
				}
			}
		]
	});

	EpgModule.register(epg);

})(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	BeeSmart.evMgr,
	$.ModuleDom,
	BeeSmart.InputManager.keyGroups,
	BeeSmart.portal.local.formats,
	BeeSmart.PVR
);

(function (BS, q, mm, am, ui, em, ModuleDom, keys, formats, PVR) {

	var liveTv = mm.getApp('liveTv');
	var showService = BS.ShowModel.showService;
	var showRepo = BS.ShowModel.showRepository;
	var BeeSmartMain = mm.getModule('BeeSmartMain');
	var tvShowMenu = mm.getApp('tvShowMenu');
	var languageCode;

	function getMaxDaysOffset() {
		return BS.config.get('Epg.Client.MAX_DAYS_OFFSET');
	}

	function MenuCacheValidator(chId, showId, date, parentalLock) {
		this.currentChannelId = chId;
		this.currentShowId = showId;
		this.forDate = date;
		this.parentalLock = parentalLock;
	}

	MenuCacheValidator.prototype = {
		currentChannelId: null,
		currentShowId: null,
		forDate: null,
		parentalLock: false,
		isMenuCacheValid: function () {
			var currCh = liveTv.getCurrentChannel();
			var currShow = showService.getCurrentShow(currCh);
			var cDate = new Date().toFormatedString(formats.date);
			var parentalLock = liveTv.isCurrentProgramAllowed(currCh);

			return this.currentChannelId === currCh.id &&
				columnEPG.daysOffset === 0 &&
				this.currentShowId === (currShow ? currShow.id : '-') &&
				this.forDate === cDate &&
				this.parentalLock === parentalLock;
		}
	};

	var columnEPG = new BS.App('EpgColumnView', {
		helpId: 'listEPG',
		listenTo: [
			Array.remove(
				Object.clone(keys.shortcuts),
				keys.shortcuts.indexOf('reload'),
				keys.shortcuts.indexOf('menu')
			)
		],
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	columnEPG.timeOut = null;
	columnEPG.menuCacheValidator = null;
	columnEPG.daysOffset = 0;
	columnEPG.catchupTvShowIds = [];
	columnEPG.lock = false;

	columnEPG.onChannelLoad = function (forDate, showIds, jumpToEnd, callback) {
		callback = callback || BS.F;
		ui.toggleLoader(false);
		var clips = [];
		var that = this;
		var cDate = Date.now();
		var currCh = liveTv.getCurrentChannel();
		var timeFormat = formats.time;
		var items = ' ';
		var isCuTvEnabled = currCh.isTimeshifted() &&
			PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.CatchUp);

		if (!showIds) {
			var infoDialog = new BeeSmartMain.InfoDialog('columnEPGLoadingError', {
				buttons: [['confirm', 'ok']],
				onBeforeExit: function () {
					am.pop();
				}
			});
			BeeSmartMain.register(infoDialog);
			am.push(infoDialog, tr('UNKNOWN_ERROR'), tr('UNKNOWN_ERROR'));
			return;
		}

		that.dom.setEpgTexts(currCh, forDate);

		if (that.menu) {
			that.menu.destroy();
			that.menu = null;
			that.m = null;
			that.catchupTvShowIds = [];
		}

		that.menu = new ui.Menu(that.dom.listEpgMenuSelector[0]);

		for (var i = 0, len = showIds.length; i < len; i++) {
			var cShow = showRepo.getById(showIds[i]);
			clips.push(cShow);

			if (isCuTvEnabled && cShow.start > cDate - currCh.autoRecExpiration
				&& cShow.start < cDate){
				that.catchupTvShowIds.push(cShow.id);
			}

			items += ui.template('templateListEpgMenuItems', {
				'cClip': cShow,
				'cClipStart': new Date(cShow.start).toFormatedString(timeFormat),
				'cClipTitle': cShow.getTitle().encodeEntities(),
				'isClipBroadcasting': cDate > cShow.start && cDate < cShow.end,
				'step': i * that.dom.selectorStep
			});
		}
		that.m = that.menu.newMenuItems().setItems(items, clips).show();

		if (that.m.size() === 0) {
			that.dom.showListEpgEmptyText();
		} else {
			that.dom.hideListEpgEmptyText();
			if (!that.dom.isMenuSelectorVisible()) {
				that.dom.showMenuSelector();
			}
		}

		if (jumpToEnd) {
			that.m.jump(that.m.size() - 1, true);
		}

		BS.logger.trace('COLUMN EPG .onChannelLoad(%s, ...) Creating listEPG menu finished in ' +
			'%d ms', forDate.getDate(), Date.now() - cDate);
		callback();
	};

	columnEPG.startup = function () {
		var that = this;
		that.dom = new ModuleDom(
			[
				'listEpgHolder', 'listEpgDate', 'listEpgMenuSelector',
				'templateListEpgMenuItems', 'listEpgDescription', 'listEpgDescriptionHolder',
				'listEpgDescriptionShow', 'listEpgDescriptionHide', 'listEpgEmpty',
				'listEpgHolderActionBar', 'listEpgChannel', 'listEpgDescriptionShowAni',
				'listEpgDescriptionImg', 'listEpgDescriptionTextTitle', 'listEpgDescriptionText',
				'listEpgLoading', 'setCuTvRect', 'listEpgChImage', 'listEpgDescriptionImgLocked'
			], {
				selectorStep: parseInt($('#listEpgMenuSelector').attr('selectorStep',null,NS.bee)),
				showMenu: function () {
					this.listEpgHolder.show();
				},
				hideMenu: function () {
					this.hideDescription();
					columnEPG.dom.listEpgHolder.hide();
				},
				jumpToCurrentShow: function () {
					if (columnEPG.m && columnEPG.m.size && columnEPG.m.size() > 0) {
						var jumpIndex = 0;
						var cDate = new Date().getTime();
						var infos = columnEPG.m.infoList();
						for (var i = 0, len = infos.length; i < len; i++) {
							var cClip = infos[i];
							if (cClip.start <= cDate && cClip.end >= cDate) {
								jumpIndex = i;
								break;
							}
						}
						columnEPG.m.jump(jumpIndex, true);
					}
				},
				showListEpgEmptyText: function () {
					this.listEpgEmpty.show();
				},
				hideListEpgEmptyText: function () {
					this.listEpgEmpty.hide();
				},
				showListEpgLoadingNotification: function () {
					this.listEpgLoading.show();
				},
				hideListEpgLoadingNotification: function () {
					this.listEpgLoading.hide();
				},
				showMenuSelector: function () {
					this.listEpgMenuSelector.show();
				},
				hideMenuSelector: function () {
					this.listEpgMenuSelector.hide();
				},
				isMenuSelectorVisible: function () {
					return this.listEpgMenuSelector.visible().length > 0;
				},
				setEpgTexts: function (channel, forDate) {
					var that = this;
					that.listEpgChannel.text(
						channel.number.padToLength(BS.skinConfiguration.maxChannelDigits)
							.toLocaleString(languageCode) + '. ' + channel.name);
					that.listEpgDate.text(forDate.toFormatedString(formats.date));
				},
				descriptionVisible: false,
				showDescription: function (clip) {
					var dom = that.dom;
					if (dom.descriptionVisible) {
						return;
					}
					try {
						dom.listEpgDescriptionImgLocked.hide();
						dom.listEpgDescriptionImg.attr('xlink:href', clip.picture());
					} catch (ex) {
						dom.listEpgDescriptionImg.attr('xlink:href', '-');
						dom.listEpgDescriptionImgLocked.show();
					}
					dom.descriptionVisible = true;
					dom.listEpgDescriptionText.text('');
					dom.listEpgDescriptionTextTitle.text(clip.getTitle());
					clip.getDescription().then(function (txt) {
						dom.listEpgDescriptionText.svg(txt);
					});
					dom.listEpgDescriptionHide.end();
					dom.listEpgDescriptionHolder.show();

					dom.listEpgDescriptionShow.trigger('beginEvent', {
						'setHolderPosition': function (bgHeight, menuYOffset, holderX) {
							var dom = that.dom;
							var holder = dom.listEpgDescription;
							var bgPosition = ((that.m.currentIndex() - that.m.topIndex()) *
								dom.selectorStep) + 31 - (bgHeight / 2) + menuYOffset;

							holder.attr('transform',
								'translate(' + holderX + ',' + bgPosition + ')');
							return bgPosition;
						},
						'beginAnimation': function () {
							that.dom.listEpgDescriptionShowAni.begin();
						}
					});
				},
				hideDescription: function () {
					if (!this.descriptionVisible)
						return;
					this.descriptionVisible = false;
					this.listEpgDescriptionShow.end();
					this.listEpgDescriptionHide.begin(function () {
						that.dom.listEpgDescriptionHolder.hide();
					});
				},
				hideCatchUpTvNotification: function () {
					that.dom['setCuTvRect'].trigger('updateHeight',
						{'topCuTvIndex': null, 'bottomCuTvIndex': null});
				},
				showCatchUpTvNotification: function (){
					if (that.m === null)
						return;

					var bIndex = that.m.bottomIndex();
					var tIndex = that.m.topIndex();
					var menuSize = that.m.size();
					var cShow;
					var topCuTvIndex = null;
					var bottomCuTvIndex = null;

					if (bIndex > (menuSize - 1)) {
						bIndex = menuSize - 1;
					}
					if (that.catchupTvShowIds.length > 0) {
						for (var i = 0, len = bIndex - tIndex; i <= len; i++) {
							cShow = that.m.infoList()[tIndex + i];

							if (that.catchupTvShowIds.indexOf(cShow.id) !== -1) {
								if (topCuTvIndex === null) {
									topCuTvIndex = i;
									bottomCuTvIndex = i;
								} else {
									bottomCuTvIndex = i;
								}
							}
						}
					}
					that.dom['setCuTvRect'].trigger('updateHeight',
						{'topCuTvIndex': topCuTvIndex, 'bottomCuTvIndex': bottomCuTvIndex});
				}
			});
		that.actionBar = new ui.ActionBar(that.dom.listEpgHolderActionBar);
	};

	columnEPG.changeDate = function (forDate, jumpToEnd) {
		var that = this;

		return showRepo.loadChannel(liveTv.getCurrentChannel().id, forDate)
			.then(function (data) {
				var dfr = q.defer();
				that.onChannelLoad(forDate, data.showIdList, jumpToEnd, function () {
					dfr.resolve(true);
				});
				return dfr.promise;
			});
	};
	columnEPG.currentItemState = function (key) {
		var currentMenuIndex = this.m === null ? null : this.m.currentIndex();
		var state;
		if (
			currentMenuIndex === null ||
			this.m.size() === 0 ||
			((this.m.size() - currentMenuIndex === 1) && key === 'down') ||
			(currentMenuIndex === 0 && key === 'up')
		) {
			state = 'changeDate';

			if (columnEPG.daysOffset === getMaxDaysOffset() && key === 'down' ||
				(columnEPG.daysOffset * -1) === getMaxDaysOffset() && key === 'up') {
				state = 'onEdge';
			}
		}
		return state;
	};
	columnEPG.getFollowingDate = function (key) {
		var state = columnEPG.currentItemState(key);

		if (state === 'changeDate') {
			if (key === 'down') {
				columnEPG.daysOffset++;
			} else if (key === 'up') {
				columnEPG.daysOffset--;
			}

			var date = new Date();
			date.setDate(date.getDate() + columnEPG.daysOffset);

			return date;
		}
		return null;
	};
	columnEPG.onInputEvent = function (keyPressedName) {
		var that = this;
		var dateToLoad;
		var prms = q(true);
		if (that.lock) return;
		switch (keyPressedName) {
		case 'info':
			if (!that.m || that.m.size() === 0) break;
			var tvShow = that.m.currentInfo();
			if (tvShow) {
				that.dom.hideMenu();
				am.push(mm.getApp('epgTvShowDetails'), tvShow, liveTv.getCurrentCategory());
			}
			break;
		case 'up':
		case 'down':
			that.lock = true;
			that.dom.hideDescription();
			dateToLoad = that.getFollowingDate(keyPressedName);

			if (dateToLoad) {
				prms = that.changeDate(dateToLoad, keyPressedName === 'up');
			}
			prms.then(function() {
				var hasMenu = that.m && that.m.size && that.m.size() > 0;
				if (!hasMenu) {
					throw 'no-menu';
				}
				if (that.currentItemState(keyPressedName) === 'onEdge') {
					throw 'on-edge';
				}
				if (keyPressedName === 'up') {
					that.m.previous();
				} else {
					that.m.next();
				}
			}).catch(function(ex) {
				if (['no-menu', 'on-edge'].indexOf(ex) === -1) {
					BS.logger.trace('columnEPG unexpected exception %s', ex);
				}
			}).finally(function() {
				that.dom.showCatchUpTvNotification();
				that.lock = false;
			}).done();
			break;
		case 'epg':
			am.pop();

			break;
		case 'right':
			if (that.dom.descriptionVisible)
				that.dom.hideDescription();
			else
				am.pop();

			break;
		case 'left':
			var hasMenu = that.m && that.m.size && that.m.size() > 0;
			if (hasMenu) {
				that.dom.showDescription(that.m.currentInfo());
			}
			break;
		case 'red':
		case 'back':
			am.pop();

			break;
		case 'ok':
			var caps, show;
			if (!that.m || !that.m.size() || !tvShowMenu.displayable(
					caps = showService.getCapabilities(show = that.m.currentInfo()))
			) return;

			am.pop();
			tvShowMenu.display([caps, show]);

			break;
		}
	};
	columnEPG.init = function () {
		BS.perf.start('epg column view open');
		var that = this;
		var cDate = new Date();
		var currCh = liveTv.getCurrentChannel();
		if (this.menuCacheValidator && this.menuCacheValidator.isMenuCacheValid()) {
			BS.logger.trace('COLUMN EPG .init() Displaying valid listEPG menu');
			that.dom.showCatchUpTvNotification();
			that.dom.showMenu();
			return;
		}
		if (that.menu) {
			that.menu.destroy();
			that.menu = null;
			that.m = null;
			that.catchupTvShowIds = [];
		}
		that.dom.setEpgTexts(currCh, cDate);
		that.dom.hideListEpgEmptyText();
		that.dom.showListEpgLoadingNotification();
		that.dom.showMenu();
		that.daysOffset = 0;

		showRepo.loadChannel(currCh.id, cDate).then(function (data) {
			var dfr = q.defer();
			that.onChannelLoad(cDate, data.showIdList, false, function () {

				that.dom.hideListEpgLoadingNotification();
				that.dom.jumpToCurrentShow();
				that.dom.showCatchUpTvNotification();
				var show = showService.getCurrentShow(currCh);
				var forDate = cDate.toFormatedString(formats.date);
				that.menuCacheValidator = new MenuCacheValidator(currCh.id, show ? show.id : -1,
					forDate, liveTv.isCurrentProgramAllowed(currCh));
				dfr.resolve(true);
			});
			return dfr.promise;
		}).finally(function () {
			BS.perf.stop('epg column view open', 'totalShows=%d', that.m.size());
		}).done();
	};
	columnEPG.destroy = function () {
		this.dom.hideCatchUpTvNotification();
		if (this.timeOut)
			clearTimeout(this.timeOut);
		this.dom.hideMenu();
	};
	columnEPG.focus = function (caller) {
		if (caller === 'columnEPGLoadingError')
			mm.getApp('columnEPGLoadingError').unregister();
		else if (caller === 'epgTvShowDetails')
			this.dom.showMenu();
	};
	em.bind('onDayChange', function () {
		if (am.lastLoaded('EpgColumnView'))
			am.pop('EPGfullScreenOnDayChange');
	});
	em.bind('onShowRepositoryDataChanged', function (ev) {
		var chIds = ev.data.channels;
		if (columnEPG.menuCacheValidator &&
			chIds.indexOf(columnEPG.menuCacheValidator.currentChannelId) !== -1) {
			columnEPG.menuCacheValidator = null;
			BS.logger.debug('COLUMN EPG Event:onShowRepositoryDataChanged ' +
				'Resetting current column EPG menu data');
		}
	});

	var EpgColumnViewModule = new BS.Module({
		id: 'EpgColumnViewModule',
		requiredLicense: 'epg && livetv',
		startupTasks: [
			{
				name: 'EPG Column View interface',
				payload: function (params, callback) {
					languageCode = BS.portal.user.language.label;
					BS.template.get('svg/epg_column_view.svg').finally(callback);
				}
			}
		]
	});
	EpgColumnViewModule.register(columnEPG);

})(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	BeeSmart.evMgr,
	$.ModuleDom,
	BeeSmart.InputManager.keyGroups,
	BeeSmart.portal.local.formats,
	BeeSmart.PVR
);

(function (BS, q, BeeSmartMain) {

	var errors = {
		noDvbProviderArg:
			new TypeError('dvbProvider should be instance of TvModel.DvbProvider'),
		noTvLibraryArg:
			new TypeError('tvLibrary should be instance of TvLibrary'),
		noChannelScannerArg:
			new TypeError('channelScanner should be instance of TvModel.DvbChannelScanner'),
		noTvShowScannerArg:
			new TypeError('tvShowScanner should be instance of TvModel.DvbTvShowScanner')
	};

	function DvbChannel(p) {
		p = DvbChannel.DvbChannelDtoToChannelDto(p);
		BeeSmartMain.Channel.apply(this, [p]);
		if ('resources' in p)
			this.mediaResources = new BS.media.VendorMediaResources(p.resources);
	}

	DvbChannel.DvbChannelDtoToChannelDto = function (obj) {
		var channelDto = JSON.parse(JSON.stringify(obj));
		channelDto.number = (BS.skinConfiguration.maxChannelDigits === 4 ? 9999 : 999) + obj.number;
		channelDto.id = obj.number * -1;
		channelDto.resources = [{
			protocolStack: obj.protocolStack,
			protocol: 'dvb',
			src: obj.src
		}];
		channelDto.ageRating = 0;
		return channelDto;
	};

	DvbChannel.prototype = {
		type: 'dvb',
		pipStreams: [],
		isPlayable: function(){return true;},
		isPurchased: function(){return true;},
		parentallyLocked: function(){return false;},
		toString: function() {
			return 'DvbChannel#%s, num:%d, %s, mrs:[%s]'
					.sprintf(this.id, this.number, this.name, this.mediaResources.toString());
		}
	};
	Object.extend(DvbChannel, BeeSmartMain.Channel);
	BS.TvModel.DvbChannel = DvbChannel;



	function DvbTvShow() { BS.ShowModel.TvShow.apply(this, arguments); }
	DvbTvShow.prototype = {
		getDescription: function () {
			return this.isShowAllowed()
				? q(this.description.escapedBeeText())
				: q(BS.ShowModel.TvShow.captions.pcDescription);
		},
		toString: function () {
			return BS.ShowModel.TvShow.prototype.toString.apply(this, ['DvbTvShow']);
		},
		isMetadataMissing: function () { return false; }
	};
	Object.extend(DvbTvShow, BS.ShowModel.TvShow);

	function DvbTvShowRepr() { BS.ShowModel.TvShowRepr.apply(this, arguments); }
	DvbTvShowRepr.prototype = DvbTvShow.prototype;
	DvbTvShowRepr.prototype.toString = function () {
		return BS.ShowModel.TvShow.prototype.toString.apply(this, ['DvbTvShowRepr']);
	};
	Object.extend(DvbTvShowRepr, BS.ShowModel.TvShowRepr);

	function dvbTvShowFactory(props) {
		var ShowType = IS_COLIBRY ? DvbTvShow : DvbTvShowRepr;
		return new ShowType(props);
	}

	function DvbChannelScanner() {}
	DvbChannelScanner.prototype = {
		startScan: function (statusCallback) {},
		stopScan: function () {},
		get channels () { return null; },
		clearChannels: function () {}
	};
	BS.TvModel.DvbChannelScanner = DvbChannelScanner;

	function DvbTvShowScanner() {}
	DvbTvShowScanner.prototype = {
		getForChannel: function (dvbChannel, forDate) {}
	};
	BS.TvModel.DvbTvShowScanner = DvbTvShowScanner;

	function DvbProvider(channelScanner, tvShowScanner) {
		if (!channelScanner || !(channelScanner instanceof DvbChannelScanner)) {
			throw errors.noChannelScannerArg;
		}
		if (!tvShowScanner || !(tvShowScanner instanceof DvbTvShowScanner)) {
			throw errors.noTvShowScannerArg;
		}
		this.channelScanner = channelScanner;
		this.tvShowScanner = tvShowScanner;
		if (this.channelScanner.channels && this.channelScanner.channels.length > 0)
			this.scanCompleted = true;
	}
	DvbProvider.prototype = {
		channelScanner: null,
		tvShowScanner: null,
		scanCompleted: false,
		dvbCategory: null,
		isDvbChannel: isDvbChannel,
		stopScan: function() { this.channelScanner.stopScan(); },
		scanForChannels: function(statusCallback) {
			statusCallback = statusCallback || function() {};
			var dfr = q.defer();
			this.channelScanner.startScan(function(ev) {
				statusCallback.apply(this, arguments);
				if (ev.type === 'failed') {
					dfr.reject('dvb-scan-failed');
				} else if (ev.type === 'succeeded' || ev.type === 'canceled') {
					dfr.resolve();
				}
			}.bind(this));
			return dfr.promise;
		},
		updateTvLibraryAndDvbCategory: function(tvLib) {
			if (!tvLib || !(tvLib instanceof BeeSmartMain.TvLibrary))
				throw errors.noTvLibraryArg;

			tvLib.getChannels().filter(this.isDvbChannel).forEach(function (ch) {
				tvLib.removeChannel(ch);
			});

			var dvbChannels = this.channelScanner.channels.map(function(dvbChDto) {
				return new DvbChannel(dvbChDto);
			});
			dvbChannels.forEach(function(dvbCh) { tvLib.addChannel(dvbCh); });

			if (dvbChannels.length && tvLib.isChannel(BS.TvModel.BlankChannel.id)) {
				tvLib.removeChannel(tvLib.getChannelById(BS.TvModel.BlankChannel.id));
			} else if (dvbChannels.length === 0 && tvLib.getChannels().length === 0) {
				tvLib.addChannel(tvLib.channelReconstitutionFactory(BS.TvModel.BlankChannel.props));
			}

			this.dvbCategory.channelIds = dvbChannels.map(function(dvbCh) { return dvbCh.id; });
			BS.evMgr.dispatch(new DvbCategoryChangedEvent());
		},
		getTvShows: function(dvbChannel, forDate) {
			forDate = forDate || new Date();
			return this.tvShowScanner.getForChannel(dvbChannel, forDate);
		}
	};

	function DvbCategoryChangedEvent() {}
	DvbCategoryChangedEvent.prototype = {
		handler: 'onDvbCategoryChanged',
		type: 'DvbCategoryChanged',
		_defaultAction: function () {}
	};
	Object.extend(DvbCategoryChangedEvent, BS.Event);

	BS.TvModel.DvbProvider = DvbProvider;

	BS.TvModel.activeDvbProvider = null;
	BS.TvModel.isDvbActivated = false;
	BS.TvModel.activateDvb = function(dvbProvider, tvCatRepo, tvLibrary, tvShowRepo) {
		if (!dvbProvider || !(dvbProvider instanceof DvbProvider)) throw errors.noDvbProviderArg;
		tvCatRepo = tvCatRepo || BS.repositories.tvCategoryRepo;
		tvLibrary = tvLibrary || BeeSmartMain.tvLibrary;
		tvShowRepo = tvShowRepo || BS.ShowModel.showRepository;
		BS.TvModel.activeDvbProvider = dvbProvider;
		BS.TvModel.isDvbActivated = true;
		dvbProvider.dvbCategory = tvCatRepo.activateDvbCategory();
		decorateTvShowRepository(tvShowRepo, tvLibrary);
	};

	function decorateTvShowRepository(tvShowRepo, tvLib) {
		BS.logger.debug('DVB decorateTvShowRepository(%s)', tvShowRepo);

		var showRepoLoadChannel = tvShowRepo.loadChannel;
		tvShowRepo.loadChannel = function(chId, forDate) {
			forDate = forDate || new Date();
			var ch = tvLib.isChannel(chId) ? tvLib.getChannelById(chId) : null;
			if (!isDvbChannel(ch))
				return showRepoLoadChannel.apply(tvShowRepo, arguments);

			var audit = 'DVB SHOW REPO .loadChannel(%s, %s) '.sprintf(chId, forDate.getDate());

			try {
				var epgDay = parseInt(forDate.getDate());
				if (parseInt(chId, 10) === 0 || isNaN(parseInt(chId, 10))) {
					return q.delay(0).then(function () {
						return q({channelId: chId, date: forDate});
					});
				}

				var chs = this.channels[epgDay] || (this.channels[epgDay] = {});

				BS.logger.trace(audit + ' Not cached');

				var shows = BS.TvModel.activeDvbProvider.getTvShows(ch, forDate);
				var tempIDs = [];

				for (var i = 0, len = shows.length; i < len; i++) {
					var show = dvbTvShowFactory(shows[i]);
					this.tvShowsMap[show.id] = show;
					tempIDs.push(show.id);
				}

				if (chId in chs) {
					chs[chId].cleanMatrixView();
					chs[chId].destroy();
				} else {
					chs[chId] = new BS.ShowModel.ChannelCacheDescriptor(chId, [], forDate);
				}

				chs[chId].showIdList = tempIDs;
				chs[chId].fresh = true;
				chs[chId].loading = false;

				BS.logger.trace(audit + 'Channel updated/added with programs %s', chs[chId]);
				return q({
					channelId: chId,
					date: forDate,
					showIdList: tempIDs
				});

			} catch (ex) {
				BS.logger.info(audit + 'Error');
				BS.logger.log(ex);
				return q({
					channelId: chId,
					date: forDate,
					showIdList: []
				});
			}
		};
	}

	function isDvbChannel(ch) { return ch && ch instanceof DvbChannel; }

	BS.evMgr.bind('onTvLibraryUpdate', function liveTvUpdate(ev) {
		switch (ev.data.type) {
		case 'channel-video':
			if (BS.TvModel.isDvbActivated)
				BS.TvModel.activeDvbProvider.updateTvLibraryAndDvbCategory(BeeSmartMain.tvLibrary);
			break;
		}
	});

})(
	BeeSmart,
	Q,
	BeeSmart.BeeSmartMain
);

(function (BS, q, BeeSmartMain, mm, am) {

	var dvbScanApp = new BS.App('SettDVBChannelScan', {});

	dvbScanApp.onInputEvent = function (keyPressedName) {
		switch (keyPressedName) {
		case 'left':
		case 'back':
			am.pop();
			break;
		}
	};

	dvbScanApp.startup = function() {
		if (!dvbScanApp.alert) {
			dvbScanApp.alert = new BS.ui.Alert({
				autoHide: 3500
			});
		}
	};

	dvbScanApp.init = function () {
		var doScanDialog = new BeeSmartMain.InfoDialog('doScanDVBT', {
			onBeforeExit: function (key) {
				if (key !== 'back' && key !== 'ok' && key !== 'left')
					return;

				setTimeout(function () {
					mm.getApp('doScanDVBT').unregister();
					am.pop();
					if (key === 'ok') {
						performScan();
					}
				}, 400);
			},
			buttons: [
				['back', 'back'],
				['confirm', 'ok']
			]
		});
		BeeSmartMain.register(doScanDialog);
		am.push(
			doScanDialog,
			tr('DVB-T_Scan_title'),
			tr('DVB-T_Scan')
		);
	};

	dvbScanApp.destroy = BS.F;

	dvbScanApp.updateTvLibrary = function() {
		BS.TvModel.activeDvbProvider.updateTvLibraryAndDvbCategory(BeeSmartMain.tvLibrary);
		changeFromBlankChannelIfPossible();
	};

	dvbScanApp.showAlertScanCompleted = function(newChannels) {
		this.alert.show(tr('DVB-T_Found_channels').sprintf(newChannels));
	};
	dvbScanApp.showAlertScanCanceled = function() {
		this.alert.show(tr('DVB-T_Scan_canceled'));
	};
	dvbScanApp.showAlertScanFailed = function() {
		this.alert.show(tr('DVB-T_Scan_failed'));
	};

	BS.evMgr.bind('onBeeSmartReady', function() {
		if (BS.TvModel.isDvbActivated) {
			BS.BeeSmartSettings.nodeWatchTV.appendChild(
				new BS.BeeSmartSettings.SettingNode(
					tr('dvb_scan'), tr('dvb_scan_msg'), ['defaultUser', 'subUser'], 5,
					dvbScanApp, null, false, BS.BeeSmartSettings.SettingNode.UNLOCKED,
					null, true
				)
			);
			var tvLib = BeeSmartMain.tvLibrary;
			BS.TvModel.activeDvbProvider.updateTvLibraryAndDvbCategory(tvLib);
		}
	});

	var appStackChangeHandler = BS.evMgr.bind('onAppStackChange', function(ev) {
		if (ev.data.appId !== 'liveTv' || ev.data.action !== 'push') return;
		appStackChangeHandler.unbind();
		if (BS.TvModel.isDvbActivated) {
			var tvLib = BeeSmartMain.tvLibrary;
			var allChannels = tvLib.getChannels();
			var dvbChannels = allChannels.filter(function (ch) {
				return ch instanceof BS.TvModel.DvbChannel;
			});

			if (dvbChannels.length === 0 && BS.portal.isEmbedded) {
				BS.logger.info(
					'No DVB-T channels cached in stb at boot, performing initial DVB-T scan'
				);
				dvbModule.startScan();
				return;
			}
			BS.logger.info('Found %s DVB-T channels cached in stb at boot, skipping initial' +
				' DVB-T scan', dvbChannels.length);
		}
	});

	BS.evMgr.bind('onAppStackChange', function (ev) {
		var data = ev.data;
		if (!BS.TvModel.activeDvbProvider) return;
		if (!data || (data.appId !== 'EpgMatrixView'))
			return;
		if ((data.action !== 'pop') && (data.action !== 'cutOff'))
			return;
		var chs = BS.ShowModel.showRepository.channels;
		if (!chs)
			return;
		var dvbChannels = BeeSmartMain.tvLibrary.getChannels()
			.filter(BS.TvModel.activeDvbProvider.isDvbChannel);
		Object.eachKey(chs, function(day) {
			dvbChannels.forEach(function(ch) {
				if (ch.id in chs[day])
					chs[day][ch.id].cleanMatrixView();
			});
		});
	});

	function performScan() {
		var scanningDialog = getScanningDialog();
		BS.media.stop();
		am.push(scanningDialog, tr('DVB-T_Scan_title'), tr('DVB-T_Scan_progress'));
		BS.TvModel.activeDvbProvider.scanForChannels(function(ev) {
			if (ev.type === 'scanning') {
				if (ev.foundChannels) {
					scanningDialog.updateText(
						'<tspan>%s</tspan><tbreak/><tspan>%s</tspan>'.sprintf(
							tr('DVB-T_Scan_progress'),
							tr('DVB-T_Found_channels').sprintf(ev.foundChannels)
						)
					);
				}
				return;
			}

			if (ev.type === 'succeeded') {
				dvbScanApp.showAlertScanCompleted(ev.foundChannels);
			}
			if (ev.type === 'canceled') {
				dvbScanApp.showAlertScanCanceled();
			}
			if (ev.type === 'failed') {
				dvbScanApp.showAlertScanFailed();
			}

			dvbScanApp.updateTvLibrary();

			if (am.lastLoaded(scanningDialog)) {
				am.pop();
			}
		});
	}

	function getScanningDialog() {
		var scanningDialog = new BeeSmartMain.InfoDialog('scanningDVBT', {
			onBeforeExit: function (key) {
				if (key === 'ok') {
					BS.TvModel.activeDvbProvider.stopScan();
				}
			},
			buttons: [['confirm', 'stop']],
			exitKeys: ['ok']
		});
		var superDestroy = scanningDialog.destroy;
		scanningDialog.destroy = function () {
			superDestroy.apply(this, arguments);
			scanningDialog.unregister();
		};
		BeeSmartMain.register(scanningDialog);
		return scanningDialog;
	}

	function changeFromBlankChannelIfPossible(allChannels, dvbChannels) {
		var tvLib = BeeSmartMain.tvLibrary;
		allChannels = allChannels || tvLib.getChannels();
		dvbChannels = dvbChannels || allChannels.filter(function (ch) {
			return ch instanceof BS.TvModel.DvbChannel;
		});
		try {
			var liveTv = mm.getApp('liveTv');
			var channelBeforeUpdate = liveTv.getCurrentChannel();
			if (dvbChannels.length > 0 &&
				channelBeforeUpdate instanceof BS.TvModel.BlankChannel
			) {
				liveTv.setChannel(dvbChannels[0], true);
			} else {
				liveTv.resetLiveTvStream();
			}
		} catch (ex) {
			BS.logger.log(ex);
		}
	}

	var dvbModule = new BS.Module({
		id: 'DVB'
	}).register(dvbScanApp);
	dvbModule.startScan = performScan;

})(
	BeeSmart,
	Q,
	BeeSmart.BeeSmartMain,
	BeeSmart.modMgr,
	BeeSmart.appMgr
);


(function (BS, q, mm, BeeSmartMain, prodRepo, em) {
	var bsRegionId;
	var bsUserId;
	var newMarkMillis;

	em.bind('onStoreServiceInitialized', function () {
		var user = BS.portal.user;
		bsRegionId = user.regionId;
		bsUserId = user.userId;
		newMarkMillis = BS.config.get('Core.Client.Vod.NEW_MOVIES_MARK_HOURS') * 36e5;
	});

	function VodModelService(productRepository, categoryRepository, storeService, giftRepository,
							 contentMediaRepository) {
		this.productRepository = productRepository;
		this.storeService = storeService;
		this.categoryRepository = categoryRepository;
		this.giftRepository = giftRepository;
		this.contentMediaRepository = contentMediaRepository;
		this.updatedMovies = {};
		this._getContentsOfCategoryPromiseCache = {};
	}

	VodModelService.prototype = {
		productRepository: null,
		storeService: null,
		categoryRepository: null,
		giftRepository: null,
		contentMediaRepository: null,
		Movie: Movie,
		MultivariantProduct: MultivariantProduct,
		updatedMovies: {},
		getGiftCategorySize: function() {
			return this.giftRepository.getAll().filter(function(gift) {
				return !gift.accepted;
			}).length;
		},
		multivariantProductAggregator: function(products) {
			BS.logger.trace('VOD MODEL SERVICE :: MV AGGR :: Called with %d products',
				products.length);
			if (products.length === 0) {
				return q([]);
			}
			var that = this;
			var t0 = Date.now();

			var pmap = {};
			var mediaIds = products.reduce(function(list, p) {
				if (p.isSingle()) {
					var id = p.items[0].id;
					var key = 'm' + id;
					if (!(key in list)) {
						list.push(id);
						list[key] = id;
					}
				}
				return list;
			}, []);

			return that.getContentMediasByIds(mediaIds).then(function(medias) {
				var mediaToInfoIdMap = medias.reduce(function(map, m) {
					if (!(m.contentInfoId in map))
						map[m.id] = m.contentInfoId;
					return map;
				}, {});

				var aggregatedProducts = products.reduce(function(newList, p) {
					if (p.isSingle() && contentInfoIdFromProduct(p) in pmap) {
						var firstItemIndex = pmap[contentInfoIdFromProduct(p)];
						if (!(newList[firstItemIndex] instanceof MultivariantProduct)) {
							newList[firstItemIndex] = multivariantProductFactory(
								newList[firstItemIndex]
							);
						}
						newList[firstItemIndex].addProduct(p);
						return newList;
					}

					newList.push(p);
					if (p.isSingle())
						pmap[contentInfoIdFromProduct(p)] = newList.length - 1;

					return newList;
				}, []);

				BS.logger.trace(
					'VOD MODEL SERVICE :: MV AGGR :: Completed with %d products in %d ms',
					aggregatedProducts.length, Date.now() - t0
				);
				aggregatedProducts.totalProducts = products.length;
				return aggregatedProducts;

				function contentInfoIdFromProduct(p) {
					return mediaToInfoIdMap[p.items[0].id];
				}
			});
		},
		_getContentsOfCategoryPromiseCache: {},
		getMyContentSize: function() {
			return this.productRepository.findByType('on-demand', 'purchased-product').length;
		},
		getContentsOfCategory: function (category) {
			var that = this;
			var promise;
			var pageSize;
			var categoryIds = that.categoryRepository.Category.onDemandIds;
			var maxNumber = BS.skinConfiguration.onDemandCategories.maxNumberOfItemsFetched;

			if (category.id in this._getContentsOfCategoryPromiseCache) {
				return this._getContentsOfCategoryPromiseCache[category.id];
			}

			if (category.id === categoryIds.MY_VOD) {
				promise = q(that.productRepository.findByType('on-demand', 'purchased-product'));
			} else if (category.id === categoryIds.GIFTS) {
				promise = that.getGiftCategoryContents();
			} else if (category.id === categoryIds.FAVOURITE) {
				promise = that.getFavourites();
			} else if (category.id === categoryIds.MOST_PURCHASED){
				pageSize = maxNumber[categoryIds.MOST_PURCHASED] || 6;
				promise = that.storeService.getMostPurchasedProducts('on-demand', pageSize);
			} else if (category.id === categoryIds.RECOMMENDED) {
				pageSize = maxNumber[categoryIds.RECOMMENDED] || 6;
				promise = that.storeService.getRecommendedProducts('on-demand', pageSize);
			} else if (category.id === categoryIds.MOST_WATCHED) {
				pageSize = maxNumber[categoryIds.MOST_WATCHED] || 6;
				promise = that.getMostWatchedMovies(pageSize);
			} else {
				promise = that.storeService.getContentsOfCategory(category);
			}

			promise = promise.then(function(products) {
				if (category.id === categoryIds.GIFTS ||
					category.id === categoryIds.MOST_WATCHED ||
					BS.skinConfiguration.disableMultivariants === true
				) return products;
				return that.multivariantProductAggregator(products);
			});

			this._getContentsOfCategoryPromiseCache[category.id] = promise;

			this._getContentsOfCategoryPromiseCache[category.id].finally(function() {
				delete this._getContentsOfCategoryPromiseCache[category.id];
			}.bind(this));

			return this._getContentsOfCategoryPromiseCache[category.id].catch(function (ex) {
				BS.logger.info(
					'VOD MODEL SERVICE: Could not get contents of category %s Reason:',
					category.title
				);
				BS.logger.log(ex);
				return q([]);
			});
		},
		getGiftCategoryContents: function() {
			var that = this;
			var ids = that.giftRepository.getAll().filter(function(gift) {
				return !gift.accepted;
			}).map(function(gift) {
				return gift.purchaseGroupId;
			});

			if (ids.length === 0)
				return q([]);

			return this.storeService.getProductsByIdList(ids);
		},
		getProductsOfMovie: function(movie) {
			var that = this;
			if (movie instanceof Movie === false)
				throw 'movie param is not instance of Movie';
			var promise = q();
			if (!movie.isLinked() && movie.getMedias().length === 0) {
				promise = that.getContentMediasByProduct(movie);
			}
			return promise.then(function() {
				if (movie.id in that.updatedMovies)
					return true;

				var mediaIds = movie.getMedias().map(toId);
				return prodRepo.updateProductsOfItems(mediaIds, 'on-demand', true);

			}).then(function(success) {
				if (!success) {
					throw 'Something bad happened in update!';
				}
				that.updatedMovies[movie.id] = true;
				return that.multivariantProductAggregator(that.getProducts(movie));
			}).catch(function(ex) {
				BS.logger.info('VOD MODEL SERVICE :: Could not get products of movie, Reason %s', ex);
				return [];
			});
		},
		getContentsOfProduct: function (product) {
			var ids = product.items.map(toId);
			return this.getMoviesWithMediaIds(ids)
				.then(function(movies) {
					movies.forEach(function(movie) {
						movie.linkToProduct(product);
					});
					return q(movies);
				});
		},
		getMostWatchedMovies: function(limit) {
			return this.getMostWatchedContentInfos(limit).then(function(infos) {
				return infos.map(function(i) { return new Movie(i); });
			});
		},
		getMoviesWithMediaIds: function(contentMediaIds) {
			var that = this;
			var ids = contentMediaIds;
			var contentMediaList = [];
			var contentInfoToMediaMap = {};
			return that.getContentMediasByIds(ids).then(function(medias) {
				contentMediaList = medias;
				medias.forEach(function(m) {
					contentInfoToMediaMap[m.contentInfoId] = m;
				});
				var ids = medias.map(function(m) { return m.contentInfoId; });
				return that.getContentInfosByIds(ids);
			}).then(function(contentInfoList) {
				return contentInfoList.map(function(info) {
					return new Movie(info, contentInfoToMediaMap[info.id]);
				});
			}).catch(function(ex) {
				BS.logger.info(
					'VOD MODEL SERVICE :: Could not get movie variations with ids %s, Reason: %s',
					ids.join(','), ex
				);
				BS.logger.log(ex);
			});
		},
		getMovieWithId: function(id) {
			return this.getContentInfosByIds([id], true).then(function(contentInfos) {
				if (!contentInfos.length)
					throw 'no-content-info-has-been-found';
				return new this.Movie(contentInfos[0]);
			}.bind(this));
		},
		getProducts: function(content) {
			if (content instanceof MultivariantProduct) {
				return this.productRepository.findByIds(
					content.items.map(toId), 'on-demand');
			} else if (content instanceof Movie && !content.isLinked()) {
				var mediaIds = content.getMedias().map(toId);
				return this.productRepository.findByItemIds(mediaIds, 'on-demand');
			} else {
				var productId = content instanceof Movie ? content.linkedProduct.id : content.id;
				var product = this.productRepository.findById(productId);
				return product ? [product] : [];
			}
		},
		getPurchasedProducts: function(content) {
			if (content instanceof MultivariantProduct) {
				return this.productRepository.findByItemIds(
					content.items.map(function (p) { return p.contentMediaId; }),
					'on-demand', 'purchased-product');
			} else if (content instanceof Movie && !content.isLinked()) {
				var mediaIds = content.getMedias().map(toId);
				return this.productRepository.findByItemIds(
					mediaIds, 'on-demand', 'purchased-product');
			} else if (content instanceof Movie || content.isSingle()) {
				return this.productRepository.findByItemId(
					content.items[0].id, 'on-demand', 'purchased-product');
			} else {
				var product = this.productRepository.findById(
					content.id, 'purchased-product');

				return product ? [product] : [];
			}
		},
		getPurchasedProduct: function(content) {
			return this.getPurchasedProducts(content).reduce(function(curMax, cur) {
				if (curMax === null && cur.isPreOrdered())
					return cur;
				if (curMax !== null && curMax.isPreOrdered() && cur.isPurchased())
					return cur;
				if (curMax !== null && cur.isPreOrdered() && curMax.isPurchased())
					return curMax;
				return !curMax ? cur :
					curMax.availabilityPeriod.to < cur.availabilityPeriod.to &&
					cur.availabilityPeriod.from <= Date.now() ?
						cur : curMax;
			}, null);
		},
		getContentStatus: function(content) {
			if (content instanceof MultivariantProduct) {
				return this.getMultivariantProductStatus(content);
			} else if (content instanceof Movie && !content.isLinked()) {
				return this.getMediasPurchaseStatusByIds(content.getMedias().map(toId));
			} else if (content instanceof Movie || content.isSingle()) {
				var ps = this.storeService.getItemPurchaseStatus(
					content.items[0].id,
					'on-demand'
				);
				if (content instanceof Movie &&
					content.isLinked &&
					!ps.isPurchasedOrFree() &&
					!ps.isPreOrdered()
				) {
					return this.storeService.getProductPurchaseStatus(content.linkedProduct.id);
				}
				return ps;
			} else
				return this.storeService.getProductPurchaseStatus(content.id);
		},
		getMultivariantProductStatus: function(multivariantProduct) {
			var ids = multivariantProduct.items.map(function(pi) {
				return pi.contentMediaId;
			});
			return this.getMediasPurchaseStatusByIds(ids);
		},
		getMediasPurchaseStatusByIds: function(mediaIds) {
			var that = this;
			var ps = new that.storeService.PurchaseStatus();
			mediaIds.forEach(function(mediaId) {
				var ips = that.storeService.getItemPurchaseStatus(mediaId, 'on-demand');
				ps._free = ips.isFree() || ps._free;
				ps._payable = ips.isPayable() || ps._payable;
				ps._purchased = ips.isPurchased() || ps._purchased;
				ps._preOrdered = ips.isPreOrdered() || ps._preOrdered;
				ps._inOtherSubscription = ips.isInOtherSubscription() || ps._inOtherSubscription;
			});
			if (ps.isPurchased())
				ps._preOrdered = false;
			return ps;
		},
		hasProductPreviewOption: function(content) {
			if (!content.isSingle())
				return q(false);
			return this.getContentMediasByProduct(content).then(function(medias) {
				return medias.some(function(m) { return m.promo !== null; });
			});
		},
		getContentMediaById: function(id) {
			return this.getContentMediasByIds([id]).then(function(medias) {
				if (medias.length === 0)
					return null;
				return medias[0];
			});
		},
		getContentMediasByIds: function(ids) {
			return this.contentMediaRepository.getByIds(ids);
		},
		getContentMediasByProducts: function(products) {
			var ids = [];
			products.forEach(function(p) {
				if (p instanceof MultivariantProduct) {
					ids = ids.concat(
						p.items.map(function (pi) {
							return pi.contentMediaId;
						})
					);
				} else {
					ids = ids.concat(p.items.map(toId));
				}
			});
			return this.getContentMediasByIds(ids);
		},
		getContentMediasByProduct: function(product) {
			if (product instanceof Movie) {
				if (product.contentMedia !== null) {
					return q([product.contentMedia]);
				}

				if (product.items.length === 0) {
					return this.contentMediaRepository.getByContentInfoId(product.id)
						.then(function(medias) {
							medias.forEach(function (m) {
								product.addMedia(m);
							});
							return medias;
						});
				}

				return q(product.getMedias());
			}
			return this.getContentMediasByProducts([product]);
		},
		getContentInfosByIds: function(ids, includeDetails) {
			includeDetails = includeDetails || true;
			return fetchContentInfoByIds(ids, includeDetails).then(function(contentInfoList) {
				return contentInfoList.map(function(ci) { return new ContentInfo(ci); });
			});
		},
		getMostWatchedContentInfos: function (limit, includeDetails) {
			includeDetails = includeDetails || true;
			return fetchMostWatchedInfos(limit, includeDetails)
				.then(function getInfosPage(response) {
					return response.data.list.map(function (ci) {
						return new ContentInfo(ci);
					});
				});
		},
		favouriteContent: function(content) {
			if (content instanceof MultivariantProduct === false)
				return this.storeService.favouriteProduct(content);

			var that = this;
			var products = this.getProducts(content);

			var tasks = products.map(function(product) {
				return that.storeService.favouriteProduct(product);
			});

			return q.all(tasks);
		},
		unfavouriteContent: function(content) {
			if (content instanceof MultivariantProduct === false)
				return this.storeService.unfavouriteProduct(content);
			var that = this;
			var products = this.getProducts(content);

			var tasks = products.map(function(product) {
				return that.storeService.unfavouriteProduct(product);
			});

			return q.all(tasks);
		},
		isContentFavourited: function(content) {
			if (content instanceof MultivariantProduct === false)
				return this.storeService.isProductFavourited(content);

			var that = this;
			var products = this.getProducts(content);

			var tasks = products.map(function(product) {
				return that.storeService.isProductFavourited(product);
			});

			return q.all(tasks).spread(function() {
				for(var i = 0, len = arguments.length; i < len; i++)
					if (arguments[i] !== true)
						return false;
				return true;
			});
		},
		getFavourites: function() {
			return this.storeService.getFavouriteProducts('on-demand').then(function(list) {
				return list.sort(function(a, b) {
					if (a.title > b.title)
						return 1;
					if (a.title < b.title)
						return -1;
					return 0;
				});
			});
		},
		clearData: function() {
			this.productRepository.clearProductRepoData('on-demand');
			this.categoryRepository.clearCategoryRepoData('on-demand');
			this.contentMediaRepository.clear();
			this.updatedMovies = {};
		}
	};

	function Movie(contentInfo, contentMedia) {
		var p = {
			id: contentInfo.id,
			title: contentInfo.title,
			poster: contentInfo.poster,
			type: 'on-demand',
			items: [],
			purchaseInfo: [],
			ageRating: contentInfo.ageRating,
			rating: contentInfo.rating,
			details: contentInfo.details
		};
		prodRepo.Product.call(this, p);
		this.medias = [];
		if (contentMedia) {
			this.contentMedia = contentMedia;
			this.addMedia(contentMedia);
		}
	}

	Movie.prototype = {
		id: null,
		productTitle: null,
		contentMedia: null,
		medias: null,
		linkedProduct: null,
		purchasePeriod: null,
		consumptionPeriod: null,
		availabilityPeriod: null,
		isSingle: function() {
			return true;
		},
		getMedias: function() {
			return this.medias;
		},
		addMedia: function(contentMedia) {
			this.items.push({
				id: contentMedia.id,
				type: 'on-demand',
				contentMediaId: contentMedia.id
			});
			this.medias.push(contentMedia);
		},
		linkToProduct: function(product) {
			this.purchaseInfo = product.purchaseInfo;
			this.consumptionPeriod = product.consumptionPeriod || null;
			this.purchasePeriod = product.purchasePeriod || null;
			this.availabilityPeriod = product.availabilityPeriod || null;
			this.productTitle = product.title;
			this.linkedProduct = product;
		},
		unlink: function() {
			this.purchaseInfo = null;
			this.purchasePeriod = null;
			this.consumptionPeriod = null;
			this.availabilityPeriod = null;
			this.productTitle = null;
			this.linkedProduct = null;
		},
		isPreOrder: function() {
			if (!this.isLinked()) return false;
			if (this.isLinkedToPurchasedProduct())
				return this.linkedProduct.isPreOrdered();
			else
				return this.linkedProduct.isPreOrder();
		},
		isNew: function() {
			return this.isLinked() && !this.isLinkedToPurchasedProduct() &&
				Date.now() < this.purchasePeriod.from + newMarkMillis;
		},
		isLinked: function() {
			return this.linkedProduct !== null;
		},
		isLinkedToPurchasedProduct: function() {
			return this.isLinked() && this.availabilityPeriod !== null;
		},
		toString: function () {
			var flags = [];
			if (this.isSingle()) flags.push('MULTI');
			if (this.isLinked()) flags.push('BOUND');
			if (this.ageRating !== 0) flags.push('PG-' + this.ageRating);

			return 'Movie#%s (%s) [%s]'
				.sprintf(
				this.id,
				this.title,
				flags.join(',')
			);
		}
	};
	Object.extend(Movie, prodRepo.Product);
	BS.VodModel = {};
	BS.VodModel.Movie = Movie;

	function ContentMedia(props) {
		this.id = props.id;
		this.uid = props.uid;
		this.audios = props.audios;
		this.subtitles = props.subtitles;
		this.quality = props.quality;
		this.threeD = props.threeD;
		this.mediaResources = props.mediaResources;
		this.promo = props.promo;
		this.contentInfoId = props.contentInfoId;
	}
	ContentMedia.prototype = {
		id: null,
		uid: null,
		audios: null,
		subtitles: null,
		quality: 'sd',
		threeD: false,
		mediaResources: null,
		promo: null,
		contentInfoId: null,
		getMediaResources: function(forTrailer) {
			var that = this;
			if (that.mediaResources)
				return q(generateMr());

			return fetchContentMediaByIds([that.id], true).then(function(requestData) {
				that.updateMedia(requestData.medias[0]);
				return generateMr();
			});

			function generateMr() {
				var mr = null;
				try {
					if (forTrailer === true)
						mr = new BS.media.VendorMediaResources(that.promo.mediaResources);
					else
						mr = new BS.media.VendorMediaResources(that.mediaResources);
				} catch (ex) {
					BS.logger.info('VOD MODEL: Could not make media resources. Error: ' + ex);
				}
				return mr;
			}
		},
		getTrailerResources: function() {
			return this.getMediaResources(true);
		},
		updateMedia: function(newMedia) {
			this.mediaResources = newMedia.mediaResources;
			this.promo = newMedia.promo;
		}
	};


	function ContentInfo(props) {
		this.id = props.id;
		this.title = props.title;
		this.tag = props.tag;
		this.poster = props.poster;
		this.ageRating = props.ageRating || 0;
		this.rating = props.rating || 0;
		this.details = props.details;
		this.details.duration = this.details.runtime;
		this.details.country = this.details.countries;
		this.details.cast = this.details.actors;
	}
	ContentInfo.prototype = {
		id: null,
		title: null,
		tag: null,
		poster: null,
		ageRating: 0,
		rating: 0,
		details: null
	};

	var productMovieVariantCount = 0;
	function MultivariantProduct(dto) {
		var p = {
			id: 'pmv-' + productMovieVariantCount++,
			title: dto.title,
			poster: dto.poster,
			type: 'on-demand',
			items: [],
			ageRating: dto.ageRating,
			purchaseInfo: dto.purchaseInfo,
			rating: dto.rating,
			details: dto.details
		};
		prodRepo.Product.call(this, p);
	}

	MultivariantProduct.prototype = {
		items: null,
		consumptionPeriod: null,
		purchasePeriod: null,
		availabilityPeriod: null,
		isNew: function() {
			return this.getProducts().some(function(p) { return p.isNew(); });
		},
		isFree: function() {
			return this.getProducts().some(function(p) { return p.isFree(); });
		},
		isPreOrder: function() {
			return this.isPayable() && this.getProducts().every(function (p) {
					return p.isPreOrder();
				});
		},
		isPayable: function() {
			return this.getProducts().some(function(p) { return p.isPayable(); });
		},
		isSingle: function() {
			return true;
		},
		getProducts: function() {
			return prodRepo.findByIds(this.items.map(toId), 'on-demand');
		},
		getCheapestPriceItem: function(type) {
			return this.getProducts().map(function(p) {
				return p.getCheapestPriceItem(type);
			}).reduce(function(cheapest, pi) {
				if (cheapest === null) return pi;
				if (pi === null) return cheapest;
				return !cheapest || cheapest.price.value > pi.price.value ? pi : cheapest;
			}, null);
		},
		addProduct: function(product) {
			for (var i = 0, len = this.items.length; i < len; i++)
				if (this.items[i].id === product.id)
					return;

			this.items.push({
				id: product.id,
				type: 'product',
				rating: product.rating,
				contentMediaId: product.items[0].id
			});
			this.ageRating = Math.max(product.ageRating, this.ageRating);

			if (product instanceof prodRepo.PurchasedProduct) {
				this.updateAvailabilityPeriod(product);
			} else {
				this.updateConsumptionPeriod(product);
				this.updatePurchasePeriod(product);
			}

			this.updateRating(product);

			if (!product.clientPurchaseEnabled)
				this.clientPurchaseEnabled = false;
		},
		updateRating: function() {
			var total = 0;
			var count = 0;
			for (var i = 0, len= this.items.length; i < len; i++) {
				var rating = this.items[i].rating;
				if (rating > 0) {
					count++;
					total += rating;
				}
			}

			if (count) {
				this.rating = count / total;
			}
		},
		updateAvailabilityPeriod: function(product) {
			if (!this.availabilityPeriod) {
				this.availabilityPeriod = {
					from: product.availabilityPeriod.from,
					to: product.availabilityPeriod.to
				};
				return;
			}
			this.availabilityPeriod.from =
				this.availabilityPeriod.from > product.availabilityPeriod.from ?
					product.availabilityPeriod.from : this.availabilityPeriod.from;
			this.availabilityPeriod.to =
				this.availabilityPeriod.to < product.availabilityPeriod.to ?
					product.availabilityPeriod.to : this.availabilityPeriod.to;
		},
		updateConsumptionPeriod: function(product) {
			if (!this.consumptionPeriod) {
				return this.consumptionPeriod = {
					from: product.consumptionPeriod.from,
					to: product.consumptionPeriod.to
				};
			}
			this.consumptionPeriod.from =
				this.consumptionPeriod.from > product.consumptionPeriod.from ?
					product.consumptionPeriod.from : this.consumptionPeriod.from;
			this.consumptionPeriod.to = this.consumptionPeriod.to < product.consumptionPeriod.to ?
				product.consumptionPeriod.to : this.consumptionPeriod.to;
		},
		updatePurchasePeriod: function(product) {
			if (!this.purchasePeriod) {
				return this.purchasePeriod = {
					from: product.purchasePeriod.from,
					to: product.purchasePeriod.to
				};
			}
			this.purchasePeriod.from = this.purchasePeriod.from > product.purchasePeriod.from ?
				product.purchasePeriod.from : this.purchasePeriod.from;
			this.purchasePeriod.to = this.purchasePeriod.to < product.purchasePeriod.to ?
				product.purchasePeriod.to : this.purchasePeriod.to;
		},
		toString: function () {
			var flags = [];
			if (this.items.length > 0) flags.push('HAS_VARIANTS');
			if (this.ageRating !== 0) flags.push('PG-' + this.ageRating);

			return 'MultivariantProduct#%s (%s) [%s]'.sprintf(
				this.id,
				this.title,
				flags.join(',')
			);
		}
	};
	Object.extend(MultivariantProduct, prodRepo.Product);

	BS.VodModel.MultivariantProduct = MultivariantProduct;

	function multivariantProductFactory(product) {
		var dtoProductMovieVariant = {
			title: product.title,
			poster: product.poster,
			details: product.details,
			rating: product.rating ? product.rating : 0,
			ageRating: product.ageRating ? product.ageRating : 0,
			purchaseInfo: product.purchaseInfo
		};

		var p = new MultivariantProduct(dtoProductMovieVariant);
		p.addProduct(product);
		return p;
	}

	BS.multivariantProductFactory = multivariantProductFactory;


	function ContentMediaRepository() {
		this.hashmap = {};
	}

	ContentMediaRepository.prototype = {
		hashmap: {},
		getById: function(id) {
			return this.fetchByIds([id]).then(function(medias) {
				return medias.length ? medias[0] : null;
			});
		},
		getByIds: function(ids) {
			return this.fetchByIds(ids);
		},
		getByContentInfoId: function(contentInfoId) {
			return fetchContentMediaByContentInfoId(contentInfoId).then(function(mediaDtos) {
				return mediaDtos.map(function(mediaDto) { return new ContentMedia(mediaDto); });
			});
		},
		fetchByIds: function(ids) {
			var that = this;
			var someAreMissing = false;
			var someAreExpired = false;

			var medias = ids.map(function(i) {
				if (i in that.hashmap) {
					if (that.hashmap[i].expires < Date.now())
						someAreExpired = true;
					return that.hashmap[i].media;
				}
				someAreMissing = true;
			});

			if (!someAreMissing && !someAreExpired)
				return q(medias);

			return fetchContentMediaByIds(ids, false, someAreExpired && !someAreMissing)
				.then(function(responseResult){
					var expires = responseResult.expires;
					var newMedias = [];

					if (responseResult.medias === null) {
						medias.forEach(function(m) {
							if (that.hashmap[m.id])
								that.hashmap[m.id].expires = expires;
						});
						return medias;
					}

					responseResult.medias.forEach(function(mediaDto) {
						that.hashmap[mediaDto.id] = contentMediaCacheFactory(mediaDto, expires);
						newMedias.push(that.hashmap[mediaDto.id].media);
					});
					return newMedias;
				});
		},
		clear: function() {
			BS.logger.trace('##MEDIA REPOSITORY: cleared %d content medias',
				Object.keys(this.hashmap).length);
			this.hashmap = {};
		}
	};

	var contentMediaRepository = new ContentMediaRepository();

	function contentMediaCacheFactory(contentMediaDto, expires) {
		return { expires: expires, media: new ContentMedia(contentMediaDto) };
	}

	BeeSmartMain.vodModelService = new VodModelService(
		BeeSmartMain.productRepository,
		BeeSmartMain.categoryRepository,
		BeeSmartMain.storeService,
		BeeSmartMain.giftRepository,
		contentMediaRepository
	);

	function fetchContentMediaByIds(ids, includeResources, noCachedData) {
		var expires;
		noCachedData = noCachedData || false;

		ids = ids.sort();
		var groups = Array.makeGroups(ids, 150);

		var allRequestsPromises = q.all(groups.map(function(g) {
			return BS.request.Get(
				'/restapi/rest/%d/content/media'.sprintf(bsRegionId),
				{ accept: 'json', noCachedData: noCachedData, data: {
					'content_media_id_list': g.join(','),
					'include_media_resources': includeResources
				}
				}).then(function(response) {
					expires = response.cacheExpires;
					return response;
				}).then(BS.request.pageItemsAggregator()).then(function(medias) {
					return medias;
				}).catch(function(ex) {
					BS.logger.info('VOD MODEL SERVICE :: Could not fetch content medias %s, ' +
							'Reason: %s', g.join(','), ex);
					return [];
				});
		}));

		return allRequestsPromises.spread(function() {
			return {
				expires: expires,
				medias: arguments[0] === null ? null : [].concat.apply([], arguments)
			};
		});
	}

	function fetchContentMediaByContentInfoId(contentInfoId) {
		return BS.request.Get(
			'/restapi/rest/%d/content/media'.sprintf(bsRegionId),
			{ accept: 'json', data: {
				'content_info_id': contentInfoId,
				'include_media_resources': false
			}
			}).then(BS.request.pageItemsAggregator()).catch(function(ex) {
				BS.logger.info('VOD MODEL SERVICE :: Could not fetch content medias for ' +
					'content info with id %s, Reason: %s', contentInfoId, ex);
				return [];
			});
	}

	function fetchContentInfoByIds(ids, includeDetails) {
		ids = ids.sort();
		var groups = Array.makeGroups(ids, 150);

		var allRequestsPromises = q.all(groups.map(function(g) {
			return BS.request.Get('/restapi/rest/%d/content/info'.sprintf(bsRegionId),
				{ accept: 'json', data: {
					'content_info_id_list': g.join(','),
					'include_details': includeDetails,
					'subscription_id_list': BeeSmartMain.subscriptionRepository
						.activeSubscriptions.map(toSubscriptionId).sort().join(','),
					'language': BS.portal.user.language.label
				}
				}).then(BS.request.pageItemsAggregator()).catch(function(ex) {
					BS.logger.info('VOD MODEL SERVICE :: Could not fetch content infos %s, ' +
							'Reason: %s', g.join(','), ex);
					return [];
				});
		}));

		return allRequestsPromises.spread(function() {
			return [].concat.apply([], arguments);
		});
	}

	function fetchMostWatchedInfos(limit, includeDetails) {
		return BS.request.Get('/restapi/rest/%d/content/info'.sprintf(bsRegionId), {
			accept: 'json',
			data: {
				'order_type': 'most-watched',
				'subscription_id_list': BeeSmartMain.subscriptionRepository
					.activeSubscriptions.map(toSubscriptionId).sort().join(','),
				'include_details': includeDetails,
				'page_size': limit,
				'language': BS.portal.user.language.label
		}}).catch(function(ex) {
			BS.logger.info('VOD MODEL SERVICE :: Could not fetch content infos %s, Reason: %s',
				'most-watched', ex);
			return [];
		});
	}

	function toId(i) { return i.id; }

	function toSubscriptionId(i) { return i.subscriptionId; }
})(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.BeeSmartMain,
	BeeSmart.BeeSmartMain.productRepository,
	BeeSmart.evMgr
);

(function (BS, q, mm, am, ui, media, evMgr, keys, bsPortal, formats, ModuleDom) {

	var bsMain = mm.getModule('BeeSmartMain');
	var liveTv = mm.getApp('liveTv');
	var	misc = mm.getApp('Misc');
	var	USER_STATISTICS_ENABLE = null;
	var	bsRegionId = null;
	var	bsUserId = null;
	var bookmarkService = null;
	var languageCode = null;
	var showRepo = null;
	var showService = null;
	var tvShowViewPurchaseService;
	var tvLib = null;

	bsMain
		.getInstanceAvailabilityPromiseOf('TvLibrary')
		.then(function (argTvLibrary) {
			tvLib = argTvLibrary;
		});

	BS.evMgr.bind('onBeeSmartLoginSuccess', function () {
		bookmarkService = BS.BeeSmartMain.bookmarkService;
		showRepo = BS.ShowModel.showRepository;
		showService = BS.ShowModel.showService;
		tvShowViewPurchaseService = BS.ShowModel.tvShowViewPurchaseService;
		var user = BS.portal.user;
		bsRegionId = user.regionId;
		bsUserId = user.userId;
		languageCode = user.language.label;
	});

	var vodPlayer = new BS.App(
		'vodPlayer',
		{
			type: 'popup',
			listenTo: [keys.shortcuts, 'menu', 'reload', 'power'],
			helpId: 'fullScreenModeVOD'
		}
	);
	vodPlayer.onExitSwitchToFullscreen = false;
	vodPlayer.progressBgInfo = null;
	vodPlayer.options = {};
	vodPlayer.subStreams = false;
	vodPlayer.subStreamsTimerRef = null;
	vodPlayer.currWatchSeconds = 0;
	vodPlayer.posRefreshDelay = 200;
	vodPlayer.buttons = [];
	vodPlayer.currentPosition = null;
	vodPlayer.optionsTemplate = {
		title: '',
		description: '',
		duration: null,
		assetType: 'vodMovie',
		pauseActivatedTime: null,
		streamStartOffset: null,
		streamMaxOffset: null,
		playStartOffset: null,
		id: null,
		uid: null,
		channelId: null,
		assetURLs: null,
		assetLocation: 'network',
		jumpToTime: null,
		delayRecPlayOut: false,
		startWithRewTrickplay: false
	};

	vodPlayer.bookmarksHandler = function (positionInMs) {
		media.play(positionInMs);
		vodPlayer.dom.showPlayer();
	};

	vodPlayer.isCuTVAsset = function (assetType) {
		return assetType === 'recordedAssetAuto' || assetType === 'recordedAssetAutoInProgress';
	};

	vodPlayer.changeChannelLikeInLiveTv = function (key) {
		var that = this;
		var tvLib = BeeSmart.BeeSmartMain.tvLibrary;
		var channel = tvLib.isChannel(that.options.channelId)
			? tvLib.getChannelById(that.options.channelId)
			: null;
		if (!channel) return;

		that.resumeBookmarkPosition = media.position;
		that.onExitSwitchToFullscreen = true;
		that.exit(that.options, Date.now(), 'user-action');

		if (channel.id !== liveTv.getCurrentChannel().id) {
			var channels = liveTv.currentCategoryChannelList();
			if (channels.indexOf(channel) === -1) {
				that.lock = true;
				return switchToAllChannelsCategoryInLiveTv()
					.then(setCurrentCuTvChannelAndHandleChannelChange)
					.finally(function () { that.lock = false; })
					.done();
			} else {
				liveTv.setCurrentChannel(channel);
			}
		}
		liveTv.onInputEvent(key);

		function switchToAllChannelsCategoryInLiveTv() {
			return BS.repositories.tvCategoryRepo.getAllCategory()
				.then(function (allCat) {
					liveTv.setCurrentCategory(allCat);
					return allCat.getChannels();
				});
		}

		function setCurrentCuTvChannelAndHandleChannelChange(channels) {
			liveTv.updateCategoryChannelList(channels);
			liveTv.setCurrentChannel(channel);
			liveTv.resetChannelsForZapping();
			liveTv.onInputEvent(key);
		}
	};

	vodPlayer.onInputEvent = function onInputEvent(key) {
		var that = this;
		if (that.dom.vodInfoVisible)
			that.dom.resetHideInfoTimer();
		if (that.lock)
			return;

		var enableContinuousCuTVPlayOut = BS.skinConfiguration.enableContinuousCuTVPlayOut;
		var blockPositionSetWhileTrickplayActive = BS.skinConfiguration
			.workarounds
			.blockPositionSetWhileTrickplayActive;

		switch (key) {
		case 'fsTV':
			that.onExitSwitchToFullscreen = true;
			that.stopPlayer();
			misc.onInputEvent(key);

			break;
		case 'back':
			if (null !== that.dom.ignoreBackTimer)
				break;
			if (that.dom.vodInfoVisible)
				that.dom.hidePlayer();
			else
				that.onInputEvent('stop');
			break;
		case 'up':
		case 'down':
		case 'chUp':
		case 'chDown':
			if (!that.isCuTVAsset(that.options.assetType)) return;
			if (that.options.channelId === null) return;

			that.changeChannelLikeInLiveTv(key);
			break;
		case 'stop':
			that.resumeBookmarkPosition = media.position;
			that.lock = true;

			that.dom.clearInfoUpdateTimeout();
			that.dom.clearAppTimer();

			that.dom['VIB_fwRwStatus'].text('');
			that.dom.setStatusIcon('stop');

			if (that.options.delayRecPlayOut) {
				media.stop();
				return that.exit(that.options, Date.now(), 'user-action');
			}

			that.dom.showPlayer();

			that.dom.popAppTimer = setTimeout(function () {
				that.exit(that.options, Date.now(), 'user-action');
			}, 1800);

			break;
		case 'blue':
			if (
				that.options.delayRecPlayOut ||
				media.playMode !== 'play' ||
				that.options.assetType === 'pauseAndResume' ||
				that.options.assetType === 'vodTrailer'
				) return;

			if (that.dom.vodInfoVisible)
				that.dom.hidePlayer();

			var eventData = {
				id: that.options.id,
				uid: that.options.id,
				start: Date.now()
			};

			var assetType = that.options.assetType;
			if (assetType === 'recordedAsset' || assetType === 'recordedAssetAuto') {
				eventData.eventId = misc.eventIds.programRecordingBookmarkCreated;
			} else if (assetType === 'instantRecAsset') {
				eventData.eventId = misc.eventIds.instantRecordingBookmarkCreated;
			} else if (assetType === 'vodMovie') {
				eventData.eventId = misc.eventIds.vodBookmarkCreated;
				eventData.uid = that.options.uid;
			}

			if (eventData.eventId) {
				misc.event.write(eventData);
			}

			bookmarkService.add(
				that.options.id,
				that.options.assetType,
				that.options.assetLocation,
				that.currentPosition
			).finally(function () {
					bookmarkService.get(
						that.options.id, that.options.assetType, that.options.assetLocation
					).then(function (list) {
							am.push(mm.getApp('clipBookmarks'), list, vodPlayer.bookmarksHandler,
								5000);
						});
				});
			break;
		case 'green':
			if (
				that.options.delayRecPlayOut ||
				media.playMode !== 'play' ||
				that.options.assetType === 'pauseAndResume' ||
				that.options.assetType === 'vodTrailer'
				) return;

			if (that.dom.vodInfoVisible)
				that.dom.hidePlayer();

			bookmarkService.get(
				that.options.id, that.options.assetType, that.options.assetLocation
			).then(function (list) {
					am.push(mm.getApp('clipBookmarks'), list, vodPlayer.bookmarksHandler);
				});

			break;
		case 'yellow':
		case 'audio':
			if (that.options.delayRecPlayOut) return;
			if (am.lastLoaded('audioSubtitleSelection')) {
				am.pop();
				return;
			}
			if (that.dom.getTrickplayLockTimer() !== null)
				return;
			that.dom.startTrickplayLockTimer(2000);

			if (media.playMode === 'play')
				am.push(mm.getApp('audioSubtitleSelection'));

			if (that.dom.vodInfoVisible)
				that.dom.hidePlayer();

			break;
		case 'subtitle':
			if (that.options.delayRecPlayOut) return;
			if (am.lastLoaded('audioSubtitleSelection')) {
				am.pop();
				return;
			}
			if (that.dom.getTrickplayLockTimer() !== null)
				return;

			that.dom.startTrickplayLockTimer(2000);

			if (media.playMode === 'play') {
				if (!am.lastLoaded('audioSubtitleSelection'))
					am.push(mm.getApp('audioSubtitleSelection'), true);
			}

			if (that.dom.vodInfoVisible)
				that.dom.hidePlayer();

			break;
		case 'fw':
		case 'rew':
			try {
				if (that.dom.getTrickplayLockTimer() !== null || am.lastLoaded('vodTrickPlay')
					|| !media.isTrickPlayAllowed()) throw 'no-trickplay-possible';

				if (that.options.delayRecPlayOut) {
					that.options.delayRecPlayOut = false;
					ui.toggleLoader(true);
					that.lock = true;
					return that.startPlayback()
						.delay(500)
						.then(function () {
							that.lock = false;
							that.onInputEvent(key);
						}).finally(function () {
							ui.toggleLoader(false);
						});
				} else {
					media.playSpeedIncrement(
						key === 'fw' ? 'forward' : 'backward',
						function (oldSpeed, nowEffectiveSpeed, requestedSpeed) {
							that.dom['VIB_fwRwStatus'].text(
								nowEffectiveSpeed === 0 || nowEffectiveSpeed === 1 ?
									'' : '%dx'.sprintf(requestedSpeed).toLocaleString(languageCode)
							);
						}
					);
				}

				that.dom['VIB_fwRwStatus'].text('...');
				that.dom.showPlayer();
				that.dom.setStatusIcon(key === 'fw' ? 'fwd' : 'rew');
				that.dom.startTrickplayLockTimer();
				if (that.subStreams === true && media.subtitle.length)
					that.subStreams = {subtitle: media.subtitle, audio: media.audio};

				if (key === 'rew')
					that.position();

			} catch (ex) {
				if (ex === 'no-trickplay-possible'){
					BS.logger.debug('VOD-PLAYER: no trickplay possible for that configuration');

				} else if (ex.keyword === 'no-subs-yet') {
					media._readSubs();

				} else {
					BS.logger.info('VOD-PLAYER: Trick-play failed due to:');
					BS.logger.log(ex);
				}
			}
			break;
		case 'toBegin':
			if (!enableContinuousCuTVPlayOut) return;
			if (media.isTrickplayActive() && blockPositionSetWhileTrickplayActive) {
				BS.logger.trace('VOD PLAYER .onInputEvent("toEnd") Trickplay is active, ignoring');
				return;
			}
			if (that.options.delayRecPlayOut) {
				that.options.jumpToTime = 0;
				that.onInputEvent('play');
			} else if (media.position > 10e3) {
				media.play(0);
				that.dom.setStatusIcon('play');
			} else if (this.isCuTVAsset(that.options.assetType)){
				that.lock = true;
				ui.toggleLoader(true);
				that.getPreviousShow().then(function (tvShow) {
					var willPlay = that.playCuTV(tvShow, true);
					if (!willPlay) {
						that.showCuTVNoPreviousContent();
					}
				}).finally(function () {
					ui.toggleLoader(false);
					that.lock = false;
				});
			}
			break;
		case 'toEnd':
			if (media.isTrickplayActive() && blockPositionSetWhileTrickplayActive) {
				BS.logger.trace('VOD PLAYER .onInputEvent("toEnd") Trickplay is active, ignoring');
				return;
			}
			if (that.isCuTVAsset(that.options.assetType) && enableContinuousCuTVPlayOut){
				if (that.options.assetType === 'recordedAssetAutoInProgress') {
					media.play(that.options.streamMaxOffset);
					that.dom.setStatusIcon('play');
				} else {
					that.lock = true;
					ui.toggleLoader(true);
					that.getNextShow().then(function (tvShow) {
						var willPlay = that.playCuTV(tvShow, false);
						if (!willPlay) {
							that.showCuTVNoNextContent();
						}
					}).finally(function () {
						ui.toggleLoader(false);
						that.lock = false;
					});
				}
			}
			break;
		case 'ok':
			if (that.dom.vodInfoVisible) {
				that.onInputEvent('play');
				return;
			}
			that.dom.showPlayer();

			break;
		case 'pause':
		case 'play':
			if (that.options.delayRecPlayOut) {
				that.startPlayback();
				that.dom.setStatusIcon('play');
				that.options.delayRecPlayOut = false;
				return;
			}
			if (that.dom.getTrickplayLockTimer())
				return;

			that.dom.startTrickplayLockTimer();
			if (media.playMode !== 'play') that.play();
			else that.pause();

			break;
		case 'left':
		case 'right':
			if (
				that.dom.getVideoPositionTrickplayLockTimer() ||
				media.playMode === 'trickplay'
			) return;

			if (that.dom.playerShown) {
				am.push(vodTrickPlay, that.options, key);
			}
			that.dom.showPlayer();
			break;
		case 'power':
			that.resumeBookmarkPosition = that.currentPosition;
			that.storeAutoBookmark();
			return true;
		default:
			if (!that.isCuTVAsset(that.options.assetType)) return;
			if (that.options.channelId === null) return;
			if (isNaN(parseInt(key)))
				break;

			that.dom.hideTitle();

			am.push(mm.getApp('NumberPicker'), key, function handleEnteredChannelNumber(number) {
				return q.try(function () {
					var currCat = liveTv.getCurrentCategory();
					return currCat ? currCat.getChannelByNumber(number) : q(null);
				}).then(function (channel) {
					if (!channel) {
						return BS.repositories.tvCategoryRepo
							.getAllCategory()
							.then(getChannelFromCat);
					}
					return channel;
				}).then(function (channel) {
					if (!channel) return;
					if (channel.id === that.options.channelId) return null;
					setCurrentCuTVChannel();
					that.resumeBookmarkPosition = media.position;
					that.onExitSwitchToFullscreen = true;
					that.exit(that.options, Date.now(), 'user-action');
					liveTv.switchToChannel(channel, false, true);
				}).done();

				function setCurrentCuTVChannel() {
					var cuTvChannel = BS.BeeSmartMain.tvLibrary.isChannel(that.options.channelId)
						? BS.BeeSmartMain.tvLibrary.getChannelById(that.options.channelId)
						: null;
					if (cuTvChannel) {
						liveTv.setCurrentChannel(cuTvChannel);
					}
				}

				function getChannelFromCat(category) {
					return category.getChannelByNumber(number).then(function (chObj) {
						if (chObj) {
							liveTv.setCurrentCategory(category);
						}
						return chObj;
					});
				}
			});
		}
	};
	vodPlayer.startup = function () {
		var that = this;
		that.dom = new ModuleDom(
			[
				'vodInfoBox', 'VIB_assetTitle', 'VIB_progressHolder', 'VIB_cProgress',
				'VIB_cProgStart', 'VIB_cProgEnd', 'VIB_statusImage', 'VIB_buttonGreen',
				'VIB_buttonBlue', 'VIB_time', 'VIB_fwRwStatus', 'VIBShowAni', 'VIBHideAni',
				'VIB_buttonGreen', 'VIB_buttonBlue', 'VIB_buttonRed', 'VIB_helpButtons',
				'VIB_cProgressRemaining', 'VIBActionBar', 'VIB_assetTitleToggle',
				'VIB_assetTitleHide', 'VIB_assetTitleShow', 'VIB_assetTitleShow', 'VIB_assetTitleBg'
			],
			{
				trickplayLockTimerRef: null,
				getTrickplayLockTimer: function () {
					return that.dom.trickplayLockTimerRef;
				},
				startTrickplayLockTimer: function (lockTime) {
					lockTime = lockTime || 1000;
					clearTimeout(that.dom.trickplayLockTimerRef);
					that.dom.trickplayLockTimerRef = setTimeout(
						function () {
							clearTimeout(that.dom.trickplayLockTimerRef);
							that.dom.trickplayLockTimerRef = null;
						},
						lockTime
					);

				},
				videoPositionTrickplayLockTimer: null,
				getVideoPositionTrickplayLockTimer: function () {
					return that.dom.videoPositionTrickplayLockTimer;
				},
				startVideoPositionTrickplayLockTimer: function (lockTime) {
					lockTime = lockTime || 2000;
					clearTimeout(that.dom.videoPositionTrickplayLockTimer);
					that.dom.videoPositionTrickplayLockTimer = setTimeout(
						function () {
							clearTimeout(that.dom.videoPositionTrickplayLockTimer);
							that.dom.videoPositionTrickplayLockTimer = null;
						},
						lockTime
					);
				},
				vodInfoVisible: false,
				titleDisplayed: false,
				hideInfoTimer: null,
				ignoreBackTimer: null,
				ignoreBackTimerDelay: 3000,
				showPlayer: function (autoHideVIB) {
					that.dom.playerShown = true;
					autoHideVIB = autoHideVIB !== false;
					if (!that.dom.vodInfoVisible) {
						that.dom.vodInfoVisible = true;
						that.dom['VIBHideAni'].end();
						that.dom['vodInfoBox'].show();
						that.dom['VIBShowAni'].begin();
						that.dom.showTitle();
					}
					if (autoHideVIB) {
						that.dom.resetHideInfoTimer();
					} else {
						this.clearHideInfoTimer();
					}
				},
				resetHideInfoTimer: function () {
					this.clearHideInfoTimer();
					this.hideInfoTimer = setTimeout(function () {
						this.hidePlayer();
						this.setIgnoreBackTimer();
					}.bind(this), 5000);
				},
				showTitle: function () {
					if (that.dom.titleDisplayed)
						return;

					that.dom['VIB_assetTitleToggle'].trigger('showTitle', {
						'setContentNameBox': function (maxWidth, offset, rectOffset, showFrom,
							showTo) {
							var title = that.dom['VIB_assetTitle'];
							var titleBg = that.dom['VIB_assetTitleBg'];
							var width = title[0].getBBox && title[0].getBBox() ?
								title[0].getBBox().width : 50;
							var newWidth = width + offset;

							that.dom['VIB_assetTitleHide'].end();

							if (newWidth > maxWidth) {
								newWidth = maxWidth;
								title.attr('width', newWidth - (offset - 10));
							}

							titleBg.attr('width', newWidth);

							if (BS.portal.direction === 'rtl') {
								titleBg.attr('x', -(newWidth - offset - 10 - rectOffset));
								var showValue = 0 - offset;
								that.dom['VIB_assetTitleShow'].attr('values',
									showFrom.concat(showValue, showTo)
								);
							}

							that.dom['VIB_assetTitleShow'].begin();

							return newWidth;
						}
					});

					that.dom.titleDisplayed = true;
				},
				hideTitle: function () {
					if (that.dom.titleDisplayed) {
						that.dom['VIB_assetTitleShow'].end();
						that.dom['VIB_assetTitleHide'].begin();
						that.dom.titleDisplayed = false;
					}
				},
				hidePlayer: function () {
					that.dom.playerShown = false;
					that.dom.clearHideInfoTimer();
					if (that.dom.vodInfoVisible) {
						that.dom.vodInfoVisible = false;
						that.dom['VIBShowAni'].end();
						that.dom['VIBHideAni'].begin(function () {
							that.dom['vodInfoBox'].hide();
						});
						that.dom.hideTitle();
					}
				},
				setIgnoreBackTimer: function () {
					if (that.dom.ignoreBackTimer !== null) {
						clearTimeout(that.dom.ignoreBackTimer);
						that.dom.ignoreBackTimer = null;
					}

					that.dom.ignoreBackTimer = setTimeout(function () {
						this.ignoreBackTimer = null;
					}.bind(this), that.dom.ignoreBackTimerDelay);
				},
				createActionBar: function () {
					var buttons = [
						['back', 'back'],
						['yellow', 'subtitlesAndAudio']
					];
					if (
						that.options.assetType === 'vodMovie' ||
						that.options.assetType === 'recordedAsset' ||
						that.options.assetType === 'recordedAssetAuto' ||
						that.options.assetType === 'instantRecAsset'
					) {
						buttons.push(['green', 'showBookmarks']);
						buttons.push(['blue', 'makeBookmark']);
					}

					that.buttons = buttons;
					that.actionBar.set(buttons);
				},
				infoReset: function () {
					that.dom['VIB_assetTitle'].text(that.options.title);
					that.dom.setProgress(0);
					that.dom['VIB_cProgStart'].text(that.options.assetType
						=== 'pauseAndResume' ? '-' : tr('start'));
					that.dom['VIB_cProgEnd'].text(
							that.options.assetType === 'pauseAndResume' ?
							new Date().toFormatedString(formats.time2) :
							tr('stop')
					);
					that.dom['VIB_time'].text('');
				},
				setStatusIcon: function (name) {
					if (!name)
						return;

					var icons = {
						'play': '#vodPlayerPlayStatusImage',
						'fwd': '#vodPlayerFwdStatusImage',
						'rew': '#vodPlayerRwdStatusImage',
						'pause': '#vodPlayerPauseStatusImage',
						'stop': '#vodPlayerStopStatusImage',
						'epg': '#vodPlayerStopStatusImage'
					};
					that.dom['VIB_statusImage'].attr('href', icons[name], NS.xlink);
				},
				setProgress: function (percentage, playableDurationInMs, fullDurationInMs) {
					var p = (percentage / 100) > 1 ? 1 : (percentage / 100),
						positionWidth = p * that.progressBgInfo['width'],
						positionWidthString = Number(positionWidth).toFixed(1);

					if (playableDurationInMs && fullDurationInMs) {
						var playablePercentage = playableDurationInMs / fullDurationInMs,
							playableWidthString = Number(playablePercentage
								* that.progressBgInfo['width']).toFixed(1);

						that.dom['VIB_cProgressRemaining'].attr('x', playableWidthString);
						that.dom['VIB_cProgressRemaining'].attr('width',
								that.progressBgInfo['width'] - playableWidthString);
						that.dom['VIB_cProgress'].attr('width', playableWidthString);

					} else
						that.dom['VIB_cProgressRemaining'].attr('width', 0);

					that.dom['VIB_cProgress'].attr('width', positionWidthString);

					if (am.lastLoaded('vodTrickPlayer'))
						vodTrickPlay.dom.setProgress(percentage);

				},
				popAppTimer: null,
				clearAppTimer: function () {
					if (that.dom.popAppTimer !== null) {
						clearTimeout(that.dom.popAppTimer);
						that.dom.popAppTimer = null;
					}
				},
				clearHideInfoTimer: function () {
					if (that.dom.hideInfoTimer !== null) {
						clearTimeout(that.dom.hideInfoTimer);
						that.dom.hideInfoTimer = null;
					}
				},
				infoUpdate: null,
				clearInfoUpdateTimeout: function () {
					if (that.dom.infoUpdate !== null) {
						clearTimeout(that.dom.infoUpdate);
						that.dom.infoUpdate = null;
					}
				},
				setStartText: function (TTSecs) {
					that.dom['VIB_cProgStart'].text(
							Math.floor(TTSecs / 60).padToLength() + ':' +
							Math.round(TTSecs % 60).padToLength()
					);
				}
			});

		if (!that.progressBgInfo) {
			var item = that.dom['VIB_cProgress'];
			that.progressBgInfo = {};
			that.progressBgInfo['width'] = parseFloat(item.attr('width'));
			that.progressBgInfo['height'] = parseFloat(item.attr('height'));
		}


		USER_STATISTICS_ENABLE =
			BS.config.get('Core.Statistics.ENABLED') &&
			mm.isAllowed('userstatistics');

		that.actionBar = new ui.ActionBar(that.dom['VIBActionBar']);
	};
	vodPlayer.isMultiInstance = function () {
		return am.applicationStack
				.filter(function (appId) { return appId === vodPlayer.id; })
				.length > 1;
	};
	vodPlayer.init = function (callerAppId, params) {
		if (vodPlayer.isMultiInstance()) {
			BS.logger.log(new Error('Only one instance of vodPlayer is allowed!'));
			throw 'app-stack-op-abort';
		}
		var that = this;
		that.portalWasHidden = misc.portalIsHidden();
		that.currWatchSeconds = 0;
		that.onExitSwitchToFullscreen = false;
		that.lock = false;
		that.playForSure = false;
		that.selectedMediaResource = null;
		that.firstPlayout = true;
		that.contentException = null;
		that.lastLeftEdgeHandledForId = null;
		that.lastRightEdgeHandledForId = null;
		if (!params || typeof params !== 'object') {
			BS.logger.debug('vodPlayer.init error');
			am.pop('error-arguments');
			return;
		}

		params = params || {};
		that.options = {};
		for (var attr in that.optionsTemplate)
			that.options[attr] = typeof params[attr] !== 'undefined' && params[attr] !== null
				? params[attr] : that.optionsTemplate[attr];

		if (am.lastLoaded('reminder'))
			am.pop();

		that.initTime = Date.now();

		that.prepareStatisticEventData();
		that.dom.createActionBar();

		that.dom['VIB_progressHolder'].show();
		that.dom.setStatusIcon('play');

		that.options.streamStartOffset = that.options.streamStartOffset || 0;
		if (!that.options.playStartOffset)
			that.options.playStartOffset = that.options.streamStartOffset;

		if (that.options.duration && that.options.assetType !== 'recordedAssetAutoInProgress') {
			that.options.streamMaxOffset = that.options.duration * 1000 +
				(that.options.streamStartOffset || 0);
		}

		that.bindToVideoPlayEvent();
		that.bindToVideoEndedEvent();

		if (that.options.assetLocation === 'local-device') {
			that.options.assetURLs = new BS.media.VendorMediaResources(that.options.assetURLs);
			that.startPlayback();
		} else {
			if (that.options.delayRecPlayOut) {
				that.dom.infoReset();
				that.setPositionInterval();
				that.dom['VIB_fwRwStatus'].text(' ');
				that.dom.setStatusIcon('pause');
				that.dom.showPlayer(false);
			} else {
				that.dom.showPlayer();
				that.startPlayback().then(function () {
					var isOtt = media.currentMediaresourceObj.isOtt(media.mediaResource);
					if (that.options.startWithRewTrickplay && !isOtt) {
						that.onInputEvent('rew');
					}
					that.options.startWithRewTrickplay = false;
					that.setPositionInterval();
				}).done();
			}
		}

		var enableContinuousCuTVPlayOut = BS.skinConfiguration.enableContinuousCuTVPlayOut;
		if (that.isCuTVAsset(that.options.assetType) && enableContinuousCuTVPlayOut) {
			that.preloadNextPrevShow();
		}
	};

	vodPlayer.startPlayback = function () {
		var dfr = q.defer();
		var playEvent = evMgr.bind('onVideoPlay', resolve);

		function resolve() {
			dfr.resolve();
			playEvent.unbind();
		}
		function reject(ex) {
			dfr.reject(ex);
			playEvent.unbind();
		}

		setTimeout(function () {
			if (playEvent) {
				resolve();
			}
		}, 3000);

		this.playAsset(function (mr) {
			if (!mr) {
				BS.logger.debug('VOD/PLAYER: ERROR: no playback data available for this ' +
					'video asset! (Empty MR list)');
				am.pop();
				reject('no-media-resource');
				return;
			}
			this.options.duration = this.options.duration || mr.duration / 1000;
			BS.logger.debug('VOD/PLAYER: initialized playout of MR %s', Object.serialize(mr));
			this.dom.clearInfoUpdateTimeout();
			if (BS.device.videoCapable === false)
				this.setPositionInterval();

			this.dom.infoReset();
			if (!this.dom.vodInfoVisible) {
				this.dom.showPlayer();
			} else {
				if (this.dom.titleDisplayed) this.dom.hideTitle();
				this.dom.showTitle();
			}
		}.bind(this));

		return dfr.promise;
	};

	vodPlayer.setPositionInterval = function () {
		this.dom.clearInfoUpdateTimeout();
		this.dom.infoUpdate = setTimeout(function () {
			if (media.playMode === 'pause' && (
				['pauseAndResume', 'recordedAssetAutoInProgress']
					.indexOf(this.options.assetType) === -1)
			) return;

			this.position();
			this.setPositionInterval();
		}.bind(this), this.posRefreshDelay);
	};
	vodPlayer.prepareStatisticEventData = function () {
		this.eventData = {
			id: this.options.id,
			uid: this.options.uid
		};
		switch (this.options.assetType) {
		default:
			this.options.duration = this.options.assetURLs.resources.reduce(reduceToMaxDuration, 0);
			this.eventData.eventId = misc.eventIds.vodWatch;
			break;
		case 'vodTrailer':
			this.eventData.eventId = misc.eventIds.vodTrailerWatch;
			this.options.duration = this.options.assetURLs.resources.reduce(reduceToMaxDuration, 0);

			break;
		case 'recordedAsset':
			if (this.options.assetLocation !== 'local-device') {
				this.eventData.eventId = misc.eventIds.programRecordingWatch;
			} else {
				this.eventData.eventId = misc.eventIds.lpvrProgramRecordingWatched;
			}

			break;
		case 'recordedAssetAuto':
			this.eventData.eventId = misc.eventIds.catchUpTvProgramStarted;
			this.eventData.uid = this.options.id;

			break;
		case 'recordedAssetAutoInProgress':
			this.eventData.eventId = misc.eventIds.startOverStarted;
			this.eventData.uid = this.options.id;

			break;
		case 'pauseAndResume':
			this.eventData = {};
			break;
		case 'instantRecAsset':
			if (this.options.assetLocation !== 'local-device') {
				this.eventData.eventId = misc.eventIds.instantRecordingWatch;
				this.eventData.uid = this.options.id;
			} else {
				this.eventData.eventId = misc.eventIds.lpvrInstantRecordingWatched;
			}
			break;
		}

		function reduceToMaxDuration(dur, res) {
			return dur < res.duration ? Math.floor(res.duration / 1000) : dur;
		}
	};

	vodPlayer.bindToVideoPlayEvent = function () {
		var that = this;
		that.assetPlayEv = evMgr.bind('onVideoPlay', function () {
			that.setPositionInterval();

			setTimeout(function () {
				if (that.firstPlayout && !that.options.jumpToTime && !that.lock) {
					that.firstPlayout = false;
					bookmarkService.getResumeTime(
						that.options.id, that.options.assetType, that.options.assetLocation
					).then(function (startAtMs) {
						var dfr = q.defer();
						am.push(mm.getApp('resumeFromAutoBookmark'), dfr);
						return dfr.promise.then(function () {
							return startAtMs;
						}).finally(function () {
							vodPlayer.dom.hidePlayer();
						});
					}).then(function (startAtMs) {
						if (startAtMs - 3000 > 0)
							startAtMs -= 3000;
						media.play(startAtMs);
						that.currWatchSeconds = Math.floor(startAtMs / 1000);
						vodPlayer.dom.showPlayer();
					}).catch(BS.F).done();
				}
			}, 1000);
		});
	};

	vodPlayer.bindToVideoEndedEvent = function () {
		var that = this;
		that.streamEdgeEv = evMgr.bind('onVideoEnded', function () {
			if (!that.playForSure)
				return;
			BS.logger.debug('VOD/PLAYER: STREAM EDGE DETECTED DONE!');
			if (that.isCuTVAsset(that.options.assetType)) {
				that.handleRightEdge(media.player.currentTime, media.player.currentTime);
			} else if (that.options.assetType !== 'pauseAndResume' ||
				that.options.assetLocation !== 'local-device'
			) {
				that.stopPlayer();
			}
		});
	};
vodPlayer.unbindToAllContentListeners = function () {
	if (this.contentException) this.contentException.unbind();
	if (this.assetPlayEv) this.assetPlayEv.unbind();
	if (this.streamEdgeEv) this.streamEdgeEv.unbind();
};
	vodPlayer.playAsset = function (onPlayResourceSelected) {
		onPlayResourceSelected = onPlayResourceSelected || function () {};
		var that = this;
		var unfinishedResource = ['pauseAndResume', 'recordedAssetAutoInProgress']
			.indexOf(that.options.assetType) !== -1;
		var startPosition = that.options.jumpToTime;
		that.options.jumpToTime = 0;
		if (that.eventData.eventId !== undefined && that.eventData.eventId !== null)
			misc.event.endEvent(Date.now());

		if (!that.options.assetURLs)
			onPlayResourceSelected(null);

		if (misc.portalIsHidden() === false)
			misc.hidePortal();

		var isOttResource = that.options.assetURLs.resources.every(function (res) {
			return media.currentMediaresourceObj.isOtt(res);
		});

		if (isOttResource && that.options.startWithRewTrickplay) {
			that.options.startWithRewTrickplay = false;
			BS.logger.info('VOD: Force to start from begin as trickplay not supported for OTT.');
			startPosition = 0;
		}

		media.playMediaResource(that.options.assetURLs, 'vod', function (mr) {
			onPlayResourceSelected(mr);
			that.selectedMediaResource = mr;
		}, unfinishedResource, startPosition);

		if (that.eventData.eventId !== undefined && that.eventData.eventId !== null) {
			var cTime = Date.now();
			that.eventData.start = cTime;
			misc.event.beginEvent(that.eventData, cTime);
		}
		setTimeout(function () {
			that.playForSure = true;
		}, 2000);

		evMgr.dispatch(new VideoPlayerEvent('start', that.options));
		return true;
	};
	vodPlayer.pause = function () {
		if (media.playMode === 'pause')
			return;
		media.pause();
		var r = this;
		r.dom.showPlayer(false);
		r.dom['VIB_fwRwStatus'].text(' ');
		r.dom.setStatusIcon('pause');
		r.position();
	};
	vodPlayer.play = function (playerPositionInMs) {
		var that = this;
		that.dom['VIB_fwRwStatus'].text('');
		that.dom.setStatusIcon('play');
		that.dom.showPlayer();

		var TT = media.position;
		if (TT < 2000) {
			media.position = that.options.playStartOffset;
			media.play(playerPositionInMs);
		} else
			media.play(playerPositionInMs);

		if (that.subStreams) {
			if (that.subStreamsTimerRef) {
				clearTimeout(that.subStreamsTimerRef);
				that.subStreamsTimerRef = null;
			}
			that.subStreamsTimerRef = setTimeout(function () {
				try {
					var tmp = media.subtitle;
				} catch (ex) {
					if (ex.keyword === 'no-subs-yet') {
						media._readAudios();
						media._readSubs();
					}
				}

				media.subtitle = media.NoSubs;
				media.subtitle = that.subStreams.subtitle;
				media.audio = media.NoAudios;
				media.audio = that.subStreams.audio;
				that.subStreams = false;
			}, 5000);
		}
	};
	vodPlayer.stopPlayer = function () {
		var that = this;
		that.dom['VIB_fwRwStatus'].text('');

		that.resumeBookmarkPosition = media.position;
		media.stop();
		if (am.lastLoaded('clipBookmarks') || am.lastLoaded('vodTrickPlay'))
			am.pop();

		that.dom.popAppTimer = setTimeout(function () {
			that.exit(that.options, Date.now(), 'stream-ended');
		}, 0);
	};

	vodPlayer.tryToPlayNextShow = function tryToPlayNextShow() {
		ui.toggleLoader(true);
		this.getNextShow().then(function (tvShow) {
			var willPlay = this.playCuTV(tvShow, false);
			if (!willPlay) {
				this.showCuTVNoNextContent();
				this.stopPlayer();
			}
		}.bind(this)).finally(ui.toggleLoader.bind(ui, false)).done();
	};

	vodPlayer.tryToPlayPreviousShow = function tryToPlayPreviousShow() {
		ui.toggleLoader(true);
		this.getPreviousShow().then(function (show) {
			var willPlay = this.playCuTV(show, true);
			if (!willPlay) {
				this.showCuTVNoPreviousContent();
			}
		}.bind(this)).finally(ui.toggleLoader.bind(ui, false)).done();
	};

	function isFinished(vodOptions) {
		if (vodOptions.assetType === 'pauseAndResume') return false;
		if (vodOptions.assetType !== 'recordedAssetAutoInProgress') return true;
		var cShow = showRepo.getById(vodOptions.uid);
		if (!cShow) return true;
		return cShow.end < Date.now();
	}

	vodPlayer.lastLeftEdgeHandledForId = null;
	vodPlayer.handleLeftEdge = function handleLeftEdge(mediaPosition, duration) {
		if (this.lastLeftEdgeHandledForId === this.options.id) {
			BS.logger.trace('VOD PLAYER .handleLeftEdge(%s, %s) Ignoring call as it was already ' +
				'been handled for id=%s', mediaPosition, duration, this.options.id);
			return;
		}
		this.lastLeftEdgeHandledForId = this.options.id;
		BS.logger.trace('VOD PLAYER .handleLeftEdge(%s, %s)', mediaPosition, duration);
		this.pause();
		this.dom.setProgress(0);
		var enableContinuousCuTVPlayOut = BS.skinConfiguration.enableContinuousCuTVPlayOut;
		if (this.isCuTVAsset(this.options.assetType) && enableContinuousCuTVPlayOut) {
			this.tryToPlayPreviousShow();
		} else {
			this.lastLeftEdgeHandledForId = null;
		}
	};

	vodPlayer.lastRightEdgeHandledForId = null;
	vodPlayer.handleRightEdge = function handleRightEdge(mediaPosition, mediaDuration) {
		if (this.lastRightEdgeHandledForId === this.options.id) {
			BS.logger.trace('VOD PLAYER .handleRightEdge(%s, %s) Ignoring call as it was already ' +
				'been handled for id=%s', mediaPosition, mediaDuration, this.options.id);
			return;
		}
		this.lastRightEdgeHandledForId = this.options.id;

		BS.logger.trace('VOD PLAYER .handleRightEdge(%s, %s)', mediaPosition, mediaDuration);

		var enableContinuousCuTVPlayOut = BS.skinConfiguration.enableContinuousCuTVPlayOut;
		if (this.isCuTVAsset(this.options.assetType) && enableContinuousCuTVPlayOut) {
			media.pause();
			if (this.options.assetType === 'recordedAssetAuto' || isFinished(this.options)) {
				this.tryToPlayNextShow();
			} else {
				this.stopPlayer();
			}
		} else if (this.options.assetType === 'pauseAndResume') {
			if (this.options.assetLocation === 'local-device') {
				this.play(Date.now() - this.options.pauseActivatedTime - 1000);
			} else {
				this.stopPlayer();
			}
		} else {
			this.stopPlayer();
		}
	};

	vodPlayer.position = function position() {
		var that = this;
		var TT = that.options.delayRecPlayOut ? that.options.jumpToTime : media.position;
		var timeReal = TT + that.options.playStartOffset;
		var lenTmp;
		var lenReal = that.options.duration ? that.options.duration :
			((lenTmp = media.length) ? lenTmp : 0);
		var assetType = that.options.assetType;
		var p, lenRealSecs;
		var wasTrickplaying = media.playMode === 'trickplay';

		lenReal *= 1000;
		that.currentPosition = TT;

		if (assetType !== 'pauseAndResume' && assetType !== 'recordedAssetAutoInProgress') {
			p = TT < lenReal ? (100 * TT) / lenReal : 100;

			if (timeReal <= that.options.streamStartOffset && wasTrickplaying) {
				BS.logger.debug('VOD/PLAYER: left edge overflow (%s, %s)', timeReal,
					that.options.streamStartOffset);
				that.handleLeftEdge(TT, lenReal);
				return;
			}
			if (timeReal > that.options.streamMaxOffset) {
				BS.logger.debug('VOD/PLAYER: right edge overflow (%s, %s)', timeReal,
					that.options.streamStartOffset);

				that.handleRightEdge(TT, lenReal);
				return;
			}

			if (media.playMode === 'play') {
				that.currWatchSeconds += that.posRefreshDelay / 1000;
			}

			lenRealSecs = lenReal / 1000;
			that.dom['VIB_cProgEnd'].text(
					lenRealSecs !== 0 ?
					Math.floor(lenRealSecs / 60).padToLength().toLocaleString(languageCode) + ':' +
					Math.round(lenRealSecs % 60).padToLength().toLocaleString(languageCode) : ''
			);
			that.dom.setProgress(p);

		} else if (assetType === 'pauseAndResume') {
			var Tp = that.options.pauseActivatedTime || that.initTime;
			var now = Date.now();
			var virtualTime = new Date(Tp + TT);
			var maxDurationInMs = that.options.duration * 1000;
			var allowedDuration = virtualTime > new Date(Tp + maxDurationInMs);
			p = Math.round(( TT / (now - Tp)) * 100);

			if ((allowedDuration || virtualTime.getTime() > now) && media.playMode !== 'pause') {
				BS.logger.debug('VodPlayer: right edge overflow - BS stop player (' + TT + ')');
				this.handleRightEdge(TT, lenReal);
				return;
			}

			if (TT < 0 && media.playMode !== 'pause' && !that.dom.getTrickplayLockTimer()) {
				BS.logger.debug('VodPlayer: left edge overflow - BS pause player (' + TT + ')');
				that.handleLeftEdge(TT, lenReal);
				TT = 0;
			}
			that.dom['VIB_cProgEnd'].svg('<tspan>-%s</tspan>'
				.sprintf((((now - Tp) - TT) / 1000).toMovieFormat()));

			that.dom.setProgress(p);

		} else if (assetType === 'recordedAssetAutoInProgress') {
			p = Math.round((TT / lenReal) * 100);
			that.options.streamMaxOffset = Math.min(
					Date.now() - that.options.pauseActivatedTime, lenReal);

			if (TT > that.options.streamMaxOffset && media.playMode !== 'pause') {
				BS.logger.debug('VodPlayer: right edge overflow - reached end of recording ' +
					'(' + TT + ')');
				this.handleRightEdge(TT, lenReal);
				return;
			}

			if (TT < 0 && media.playMode !== 'pause') {
				BS.logger.debug('VodPlayer: left edge overflow - BS pause player (' + TT + ')');
				this.handleLeftEdge(TT, lenReal);
				TT = 0;
			}
			lenRealSecs = lenReal / 1000;
			that.dom['VIB_cProgEnd'].text(
					lenReal !== 0 ?
					Math.floor(lenRealSecs / 60).padToLength(2).toLocaleString(languageCode) + ':' +
					Math.round(lenRealSecs % 60).padToLength(2).toLocaleString(languageCode) : ''
			);
			that.dom.setProgress(p, that.options.streamMaxOffset, lenReal);
		}

		var TTSecs = Math.floor(TT / 1000);
		TTSecs = TTSecs < 0 ? 0 : TTSecs;
		that.dom['VIB_cProgStart'].text(
				Math.floor(TTSecs / 60).padToLength(2).toLocaleString(languageCode) + ':' +
				Math.round(TTSecs % 60).padToLength(2).toLocaleString(languageCode)
		);
		that.dom['VIB_time'].text(new Date().toFormatedString(formats.time));
	};

	vodPlayer.preloadNextPrevShow = function () {
		var chan = tvLib.getChannelById(this.options.channelId);
		var cShow = showRepo.getById(this.options.uid);
		var getNextPrevShows = showService.getShowsForChannel(chan, cShow).catch(function (ex) {
			BS.logger.log(ex);
			BS.logger.info('VOD PLAYER .preloadNextPrevShow() Cannot get next/prev shows');
			return { next: null, previous: null };
		});
		vodPlayer.prevShowPromise = getNextPrevShows.get('previous');
		vodPlayer.nextShowPromise = getNextPrevShows.get('next');
	};

	vodPlayer.prevShowPromise = null;
	vodPlayer.nextShowPromise = null;
	vodPlayer.getPreviousShow = function () {
		BS.logger.trace('VOD PLAYER .getPreviousShow()');
		return vodPlayer.prevShowPromise;
	};
	vodPlayer.getNextShow = function () {
		BS.logger.trace('VOD PLAYER .getNextShow()');
		return vodPlayer.nextShowPromise;
	};

	vodPlayer.showCuTVNoNextContent = function () {
		ui.generalAlert(tr('CuTVNoNextContentNotice'));
	};

	vodPlayer.showCuTVNoPreviousContent = function () {
		ui.generalAlert(tr('CuTVNoPreviousContentNotice'));
	};

	vodPlayer.playCuTV = function (tvShow, jump1minToTheEnd) {
		BS.logger.trace('VOD PLAYER .playCuTV(%s, %s)', tvShow, jump1minToTheEnd);
		if (!tvShow) return false;

		var showRecProps = showService.getShowRecProperties(tvShow);
		if (
			showRecProps && !tvShow.barred && !tvShowViewPurchaseService.canOfferSale(tvShow)
		) {
			if (!BS.portal.user.checkParentalLimit(tvShow.rating)) {
				am.push(mm.getApp('pinCheckDialog'), undefined,
					{
						action: 'playCuTV',
						tvShow: tvShow,
						jump1minToTheEnd: jump1minToTheEnd
					}
				);
			} else {
				showService.updateShowRecOptionsWithRecordingData(showRecProps)
					.then(function (showRecProps) {
						this.unbindToAllContentListeners();
						this.dom.clearAppTimer();
						this.dom.clearInfoUpdateTimeout();
						misc.event.endEvent(Date.now());

						if (jump1minToTheEnd)
							showRecProps.jumpToTime = showRecProps.streamMaxOffset - 60e3;
						this.init(this, showRecProps);
					}.bind(this)).catch(function (ex) {
					BS.logger.debug('VOD PLAYER .playCuTV() Error occurred when trying to'
						+ ' start playing CuTV recording. ', ex);
				}).done();
			}
			return true;
		}
		return false;
	};

	vodPlayer.focus = function (caller, arg1, arg2, arg3) {
		var that = this;
		that.dom.setIgnoreBackTimer();

		switch (caller) {
		case 'reminder':
		case 'reminderAutoSwitch':
			if (arg1 === true || arg2 === true) {
				that.onInputEvent('stop');
				that.onExitSwitchToFullscreen = true;
			}
			break;
		case 'vodTrickPlay':
			that.actionBar.set(that.buttons);
			that.dom.startVideoPositionTrickplayLockTimer();
			break;
		case 'pinCheckDialog':
			if (arg1 === 'ok' && arg3 && arg3.action === 'playCuTV') {
				that.playCuTV(arg3.tvShow, arg3.jump1minToTheEnd);
			}
			break;
		}
	};

	vodPlayer.clearPrevNextPromise = function () {
		if (this.prevShowPromise) this.prevShowPromise.done();
		if (this.nextShowPromise) this.nextShowPromise.done();
		this.prevShowPromise = null;
		this.nextShowPromise = null;
	};

	vodPlayer.destroy = function (caller) {
		var that = this;

		that.clearPrevNextPromise();

		that.unbindToAllContentListeners();

		that.dom.clearAppTimer();
		that.dom.clearInfoUpdateTimeout();

		misc.event.endEvent(Date.now());


		that.dom.hidePlayer();
		that.dom['VIB_fwRwStatus'].text('');

		if (
			caller !== 'Misc'
			&& !that.portalWasHidden && !that.onExitSwitchToFullscreen
			) {
			setTimeout(function () {
				if (BS.device.power === 'on') {
					misc.showPortal();
				}
			}, 400);
		}

		evMgr.dispatch(new VideoPlayerEvent('exit'));
	};
	vodPlayer.exit = function (vodItem, playbackEndTime, reason) {
		var that = this;
		if (!am.lastLoaded('vodPlayer'))
			return;

		var catRating = mm.appExists('contentRating') ? mm.getApp('contentRating') : null;
		that.lock = false;
		that.playForSure = false;

		that.storeAutoBookmark();

		if (!USER_STATISTICS_ENABLE) {
			am.pop(reason);
			if (that.onExitSwitchToFullscreen)
				that.showOnlyLiveTv();
		} else if (
			!vodItem ||
			vodItem.assetType !== 'vodMovie' ||
			(that.currWatchSeconds / vodItem.duration) < 0.75 ||
			catRating.dom.contentRated(vodItem.id)
			) {
			misc.event.endEvent(playbackEndTime);
			am.pop(reason);
			if (that.onExitSwitchToFullscreen)
				that.showOnlyLiveTv();
		} else {
			that.dom.clearInfoUpdateTimeout();
			am.push(contentRating, vodItem, playbackEndTime);
		}
	};

	vodPlayer.storeAutoBookmark = function () {
		var opt = this.options;
		if (
			BS.device.power === 'on' &&
			opt && opt.duration && this.currentPosition &&
			(((opt.duration * 1000) - this.currentPosition) > 30000)
			&& opt.assetType !== 'pauseAndResume'
			&& opt.assetType !== 'recordedAssetAutoInProgress'
			&& this.resumeBookmarkPosition
		) {
			bookmarkService.saveResumeTime(
				opt.id, opt.assetType, opt.assetLocation, this.resumeBookmarkPosition
			);
		}
	};

	vodPlayer.showOnlyLiveTv = function () {
		if (this.onExitSwitchToFullscreen) {
			this.onExitSwitchToFullscreen = false;
			am.cutOff('liveTv');
		}
	};

	var vodTrickPlay = new BS.App('vodTrickPlay');
	vodTrickPlay.vodAsset = null;
	vodTrickPlay.onDataStorage = {
		_saveTimer: null,
		_updatePauseResumeMaxOffsetTimer: null,
		jump: null,
		_default: 3.3333,
		_maxOffset: null,
		_startOffset: null,
		_currPos: null,
		setCurrPosition: function (position) {
			this._currPos = position;
		},
		setOffset: function (start, max) {
			this._startOffset = start;
			this._maxOffset = max;
		},
		setMaxJump: function (duration) {
			this.maxJump = 0.05 * duration;
		},
		setNextOffset: function (direction) {
			var now = new Date().getTime();
			var sameDirection = direction === this.previousDirection;

			if ((now - this.lastTimestamp <= 1e3) && sameDirection) {
				if (this.sameDirectionCount < 4) {
					this.jump = 10e3;
				} else {
					if (this.jump < this.maxJump) {
						this.jump *= 2;
						if (this.jump > this.maxJump) {
							this.jump = this.maxJump;
						}
					}
				}

				this.sameDirectionCount++;
			} else {
				this.sameDirectionCount = 0;
				this.jump = 10000;
			}
			this.lastTimestamp = now;
			this.previousDirection = direction;
		},
		setPosition: function (direction) {
			var that = this;
			var currentPosition;
			var percentage;
			var newPosition;
			var actualLength;
			var actualPosition;
			var virtualDurationMs;
			var sign = direction === 'left' ? -1 : 1;

			if (that._currPos === null) {
				that.setCurrPosition(media.position);
			}
			currentPosition = that._currPos;
			newPosition = currentPosition + sign * that.jump;

			if (vodTrickPlay.vodAsset.assetType === 'pauseAndResume') {
				virtualDurationMs =
					(new Date().getTime() - vodTrickPlay.vodAsset.pauseActivatedTime);
				newPosition = newPosition < 0 ? 0 : newPosition;
				newPosition = newPosition >= virtualDurationMs ? virtualDurationMs : newPosition;

				actualPosition = newPosition - virtualDurationMs;
				percentage = (currentPosition * 100) / virtualDurationMs;
			} else {
				if (!(currentPosition >= that._startOffset && currentPosition <= that._maxOffset)) {
					newPosition += that._startOffset;
				}
				newPosition = newPosition <= that._startOffset ? that._startOffset : newPosition;
				newPosition = newPosition >= that._maxOffset ? that._maxOffset : newPosition;
				actualLength = that._maxOffset - that._startOffset;
				actualPosition = newPosition - that._startOffset;
				percentage = (actualPosition * 100) / actualLength;
			}
			vodTrickPlay.dom.setProgress(percentage, actualPosition);
			that.setCurrPosition(newPosition);

			return newPosition;
		},
		savePosition: function (position) {
			var that = this;
			var actualPosition;

			that._currPos = null;
			actualPosition = position - that._startOffset;
			if (vodTrickPlay.vodAsset.assetType === 'pauseAndResume'
				&& vodTrickPlay.vodAsset.assetLocation === 'network') {
				position += 2500;
				actualPosition = position;
			}
			vodPlayer.dom.setProgress(
				(actualPosition * 100) / vodTrickPlay.duration);

			if (vodPlayer.options.delayRecPlayOut) {
				vodPlayer.options.jumpToTime = actualPosition;
				vodPlayer.onInputEvent('play');
			} else {
				if (media.playMode === 'pause') {
					vodPlayer.onInputEvent('play');
				}
				media.play(actualPosition);
			}
			am.pop();
		},
		clearSaveTimer: function () {
			var that = this;
			if (that._saveTimer) {
				clearTimeout(that._saveTimer);
				that._saveTimer = null;
			}
		},
		clearUpdateMaxOffsetTimer: function () {
			if (this._updatePauseResumeMaxOffsetTimer) {
				clearInterval(this._updatePauseResumeMaxOffsetTimer);
				this._updatePauseResumeMaxOffsetTimer = null;
			}
		}
	};
	vodTrickPlay.onInputEvent = function (key) {
		var ds = vodTrickPlay.onDataStorage;
		vodPlayer.dom.resetHideInfoTimer();
		switch (key) {
		case 'left':
		case 'right':
			this.onDataStorage.setNextOffset(key);
			this.setAndDisplayPosition(key);
			break;
		case 'ok':
			ds.clearSaveTimer();
			ds.savePosition(ds._currPos);
			break;
		case 'back':
			ds.clearSaveTimer();
			am.pop();
			break;
		}
	};
	vodTrickPlay.setAndDisplayPosition = function (key) {
		var ds = vodTrickPlay.onDataStorage;
		var newPosition = ds.setPosition(key);
		ds.clearSaveTimer();
		ds._saveTimer = setTimeout(function () {
			ds.savePosition(newPosition);
		}, 2000);
	};
	vodTrickPlay.init = function (caller, vodAsset, key) {
		var that = vodTrickPlay;
		var onDataStorage = that.onDataStorage;

		that.duration = null;
		that.vodAsset = vodAsset;

		onDataStorage.clearUpdateMaxOffsetTimer();
		that.duration = that.vodAsset.streamMaxOffset - that.vodAsset.streamStartOffset;
		if (that.vodAsset.assetType === 'pauseAndResume') {
			that.duration = new Date().getTime() - that.vodAsset.pauseActivatedTime;
			onDataStorage.setOffset(
				that.vodAsset.streamStartOffset,
				that.vodAsset.streamStartOffset + that.duration
			);
			onDataStorage.setMaxJump(that.duration);
			onDataStorage.setNextOffset(key);
			that.onDataStorage._updatePauseResumeMaxOffsetTimer =
				setInterval(function () {
					that.duration += 1000;
					onDataStorage.setOffset(
						that.vodAsset.streamStartOffset,
						that.vodAsset.streamStartOffset + that.duration
					);
					onDataStorage.setMaxJump(that.duration);
				}, 1000);
		} else {
			if (that.vodAsset.jumpToTime && that.vodAsset.jumpToTime > 0) {
				onDataStorage.setCurrPosition(that.vodAsset.jumpToTime);
			}
			onDataStorage.setOffset(that.vodAsset.streamStartOffset, that.vodAsset.streamMaxOffset);
			onDataStorage.setNextOffset(key);
			onDataStorage.setMaxJump(that.duration);
		}
		that.setAndDisplayPosition(key);
		that.dom.show();
	};
	vodTrickPlay.destroy = function () {
		var that = vodTrickPlay;
		var rds = that.onDataStorage;
		rds.clearSaveTimer();
		rds.clearUpdateMaxOffsetTimer();
		if (!vodPlayer.dom.hideInfoTimer)
			vodPlayer.dom.hideInfoTimer = setTimeout(function () {
				vodPlayer.dom.hidePlayer();
			}, 5000);

		that.dom.hide();
	};
	vodTrickPlay.startup = function () {
		var that = vodTrickPlay;
		that.dom = new ModuleDom(
			['vtp_cProgress', 'vtp_time'],
			{
				show: function () {
					that.dom['vtp_cProgress'].show();
					vodPlayer.actionBar.set([
						['back', 'back'],
						['empty', null],
						['empty', null],
						['horizontal', 'select']
					]);
				},
				hide: function () {
					that.dom['vtp_cProgress'].hide();
				},
				setProgress: function (percentage, time) {
					var p = (percentage / 100) > 1 ? 1 : (percentage / 100),
						startOverTvWidth = parseInt(
							vodPlayer.dom['VIB_cProgressRemaining'].attr('width'),
							10),
						positionWidth = p * (vodPlayer.progressBgInfo['width'] - startOverTvWidth),
						timeS = time / 1000,
						positionWidthString = Number(positionWidth).toFixed(1);
					that.dom['vtp_cProgress'].attr('transform',
							'translate(' + positionWidthString + ',0)');
					var timeSabs = Math.round(Math.abs(timeS));
					that.dom['vtp_time'].text(
							(timeS < 0 ? '-' : '') + (Math.floor(timeSabs / 60).padToLength() + ':'
							+ Math.round(timeSabs % 60).padToLength()).toLocaleString(languageCode)
					);
				}
			}
		);
	};


	var contentRating = new BS.App(
		'contentRating',
		{
			type: 'popup',
			listenTo: [keys.shortcuts],
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	contentRating.messageTimer = null;
	contentRating.rating = null;
	contentRating.initTime = null;
	contentRating.ratedContents = [];
	contentRating.onInputEvent = function (keyPressedName) {
		if (contentRating.messageTimer) return;
		switch (keyPressedName) {
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
			contentRating.dom.clearMsgTimer();
			contentRating.dom.setRating(parseInt(keyPressedName, 10));
			ui.generalAlert(tr('thankYouForRateSelection'));
			contentRating.messageTimer = setTimeout(function () {
				am.pop();
			}, 3000);

			break;
		case 'left':
		case 'back':
			am.pop();
			break;
		default:
			break;
		}

	};
	contentRating.init = function (callerAppId, vodItem, playbackEndTime) {
		var that = contentRating;
		that.initTime = playbackEndTime;
		that.dom.setRating(0);

		if (!vodItem ||
			vodItem.assetType !== 'vodMovie' ||
			!USER_STATISTICS_ENABLE ||
			that.dom.contentRated(vodItem.id)
			) {
			am.pop();
			return;
		}
		that.dom.markContentRated(vodItem.id);

		that.dom.showMenu();
		that.dom.clearMsgTimer();
	};
	contentRating.startup = function () {
		var that = this;
		that.dom = new ModuleDom(['contentRatingStarsCP', 'contentRatingHolder',
			'contentRatingHolderShow', 'contentRatingHolderHide', 'contentRatingHolderActionBar'
		], {
			showMenu: function () {
				that.dom['contentRatingHolder'].show();
				that.dom['contentRatingHolderShow'].begin();
			},
			hideMenu: function () {
				that.dom['contentRatingHolderHide'].begin(function () {
					that.dom['contentRatingHolder'].hide();
				});
			},
			setRating: function (number) {
				that.rating = number;
				that.dom['contentRatingStarsCP'].attr('width', number * 30, NS.svg);
			},
			contentRated: function (id) {
				return that.ratedContents.indexOf(id) !== -1;
			},
			markContentRated: function (id) {
				that.ratedContents.push(id);
			},
			clearMsgTimer: function () {
				if (that.messageTimer !== null) {
					clearTimeout(that.messageTimer);
					that.messageTimer = null;
				}
			}
		});
		that.ratedContents = [];
		that.actionBar = new ui.ActionBar(
			that.dom['contentRatingHolderActionBar']);

	};
	contentRating.destroy = function () {
		var that = this;
		that.dom.clearMsgTimer();
		that.dom.hideMenu();
		if (that.rating === undefined || that.rating === 0) {
			misc.event.endEvent(that.initTime);
		}
		else {
			misc.event.endEvent(that.initTime, that.rating);
		}

		setTimeout(function () {
			am.pop('vodPlayer');
			if (vodPlayer.onExitSwitchToFullscreen)
				vodPlayer.showOnlyLiveTv();
		}, 100);
	};


	function VideoPlayerEvent(type, asset) {
		var ev = this,
			translateType = {
				'exit': 'onVideoPlayerExit',
				'start': 'onVideoPlayerStart'
			}
			;
		if (!translateType[type])
			throw 'undefined-video-player-type';

		ev.type = 'VideoPlayerEvent';
		ev.data = { 'asset': asset };
		ev.description = 'VideoPlayerEvent';
		ev.handler = translateType[type];

		if (liveTv && type === 'exit')
			ev._defaultAction = liveTv.resetLiveTvStream;
	}

	VideoPlayerEvent.prototype = new BS.Event();


	new BS.Module({
		id: 'VideoOnDemand',
		startupTasks: [
			{
				name: 'VOD module interface',
				payload: function (params, callback) {
					BS.template.get('svg/player.svg').finally(callback);
				}
			}
		]
	})
		.register(vodPlayer)
		.register(vodTrickPlay)
		.register(contentRating);
})(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	BeeSmart.media,
	BeeSmart.evMgr,
	BeeSmart.InputManager.keyGroups,
	BeeSmart.portal,
	BeeSmart.portal.local.formats,
	$.ModuleDom
);


(function (BS, q, mm, am, ui, evMgr, keys, bsPortal, ModuleDom) {
	var liveTv = mm.getApp('liveTv');
	var	bsRegionId = null;
	var	bsUserId = null;
	var languageCode = null;

	BS.evMgr.bind('onBeeSmartLoginSuccess', function () {
		var user = BS.portal.user;
		bsRegionId = user.regionId;
		bsUserId = user.userId;
		languageCode = BS.portal.user.language.label;
	});

	function isResumePopupEnabled() {
		return BS.config.get('Core.Client.RESUME_PLAYOUT_POPUP_ENABLED');
	}

	function getMaxBookmarksPerContent() {
		return BS.config.get('Vod.MAX_BOOKMARKS_PER_CONTENT');
	}

	function Bookmark(properties) {
		var that = this;
		that.id = properties.id;
		that.type = (properties.type || '').toLowerCase() === 'auto' ?
			Bookmark.type.resume : Bookmark.type.manual;
		that.content = {id: null, type: null};
		try {
			that.content.id = properties.content.id;
			that.content.type = properties.content.type;
			that.content.location = properties.content.location;
			that.time = properties.time || 0;
		} catch (e) {
			BS.logger.info('Invalid arguments for Bookmark(%s) construction provided: %s'
				.sprintf(Object.serialize(properties), e));
		}
	}

	Bookmark.type = {
		resume: 'auto',
		manual: 'manual'
	};

	Bookmark.prototype = {
		id: null,
		type: null,
		content: null,
		time: 0,
		isResumeBookmark: function () {
			return this.type === Bookmark.type.resume;
		},
		contentType: function () {
			return this.content.type;
		},
		toString: function () {
			return 'Bookmark: id: %s , type: %s , content.type: %s , content.id: %s , time: %s'
				.sprintf(this.id, this.type, this.content.type, this.content.id, this.time);
		}
	};

	function BookmarkService() {
		this.providers = [];
	}

	BookmarkService.prototype = {
		providers: [],
		BookmarkProvider: BookmarkProvider,
		getProvider: function(assetId, assetType, assetLocation) {
			BS.logger.trace('BM SERVICE .getProvider(%s,%s,%s)', assetId, assetType, assetLocation);
			var suitableProvider = null;
			this.providers.some(function(provider) {
				var suitable = provider.isSuitable(assetId, assetType, assetLocation);
				if (suitable)
					suitableProvider = provider;
				return suitable;
			});
			BS.logger.trace('BM SERVICE .getProvider returns %s', suitableProvider);
			return suitableProvider;
		},
		add: function(assetId, assetType, assetLocation, bookmarkTime) {
			BS.logger.trace('BM SERVICE .add(%s,%s,%s,%d)', assetId, assetType, assetLocation,
				bookmarkTime);
			var provider = this.getProvider(assetId, assetType, assetLocation);
			if (!provider) {
				return q().then(function() { throw 'provider-not-found'; });
			}
			var bookmark = new Bookmark({
				content: { id: assetId, type: assetType, location: assetLocation },
				type: Bookmark.type.manual,
				time: Math.round(bookmarkTime / 1000)
			});

			return provider.add(bookmark);
		},
		get: function(assetId, assetType, assetLocation) {
			BS.logger.trace('BM SERVICE .get(%s,%s,%s)', assetId, assetType, assetLocation);
			var provider = this.getProvider(assetId, assetType, assetLocation);
			if (!provider) {
				return q([]);
			}
			return provider.get(assetId, assetType, assetLocation);
		},
		saveResumeTime: function(assetId, assetType, assetLocation, time) {
			BS.logger.trace('BM SERVICE .saveResumeTime(%s,%s,%s,%s)',
				assetId, assetType, assetLocation, time);
			var provider = this.getProvider(assetId, assetType, assetLocation);
			if (!provider) {
				return q().then(function() { throw 'provider-not-found'; });
			}
			var bookmark = new Bookmark({
				content: {id: assetId, type: assetType, location: assetLocation},
				type: Bookmark.type.resume,
				time: Math.round(time / 1000)
			});

			return provider.setResumeBookmark(bookmark);
		},
		getResumeTime: function(assetId, assetType, assetLocation) {
			BS.logger.trace('BM SERVICE .getResumeTime(%s,%s,%s)', assetId, assetType,
				assetLocation);
			var dfr = q.defer();

			var provider = this.getProvider(assetId, assetType, assetLocation);
			if (!provider) {
				BS.logger.debug('No suitable bookmark provider has been found. (%s,%s,%s)',
					assetId, assetType, assetLocation);
				dfr.reject('no-suitable-provider');
				return dfr.promise;
			}

			if (!isResumePopupEnabled()) {
				dfr.reject('resume-is-disabled');
				return dfr.promise;
			}
			provider.getResumeBookmark(assetId, assetType).then(function(bookmark) {
				if (!bookmark) {
					dfr.reject('no-resume-bookmark');
					return;
				}
				dfr.resolve(bookmark.time * 1000);
			}).catch(function(ex) {
				BS.logger.debug('BM SERVICE :: Could not get resume bookmark, reason %s', ex);
				dfr.reject('could-not-get-bookmark');
			});

			return dfr.promise;
		},
		register: function(provider) {
			if (provider instanceof BookmarkProvider === false) {
				throw new Error('provider is not instance of BookmarkProvider!');
			}
			this.providers.push(provider);
		}
	};

	BeeSmart.BeeSmartMain.bookmarkService = new BookmarkService();

	function BookmarkProvider() {}
	BookmarkProvider.prototype = {
		isSuitable: BS.F,
		add: BS.F,
		get: BS.F,
		getResumeBookmark: BS.F,
		setResumeBookmark: BS.F
	};

	function NPVRBookmarkProvider() {
		BookmarkProvider.apply(this, arguments);
	}

	NPVRBookmarkProvider.prototype = {
		bookmarkUrl: '/restapi/rest/%s/%s/movies/bookmarks',
		isSuitable: function(assetId, assetType, assetLocation) {
			var type = this.mapContentType(assetType);
			if (!type)
				return false;

			return assetLocation && assetLocation === 'network';
		},
		mapContentType: function(assetType) {
			var type = null;
			switch (assetType) {
				case 'vodMovie':
					type = 'MOVIE';
					break;
				case 'recordedAssetAuto':
				case 'recordedAsset':
					type = 'PROGRAM';
					break;
				case 'instantRecAsset':
					type = 'INSTANT';
					break;
			}
			return type;
		},
		add: function(bookmark) {
			if (!(bookmark instanceof Bookmark))
				throw 'invalid-argument';

			var bm = bookmark;
			BS.logger.trace('NPVR BM PROVIDER :: Store %s', bm);

			return BS.request.Post(this.bookmarkUrl.sprintf(bsRegionId, bsUserId), {
				accept: 'json',
				data: {
					'content_id': bm.content.id,
					'content_type': this.mapContentType(bm.content.type),
					'bookmark_type': bm.type,
					'time_seconds': bm.time
				}
			}).then(function () {
				return true;
			});
		},
		get: function(assetId, assetType) {
			var type = this.mapContentType(assetType);
			return BS.request.Get(this.bookmarkUrl.sprintf(bsRegionId, bsUserId), {
				accept: 'json',
				data: {
					'content_id': assetId,
					'content_type': type,
					'bookmark_type': 'MANUAL'
				}
			}).then(function(response) {
				return this._processBookmarksData(response.data.list);
			}.bind(this)).catch(function(ex) {
				BS.logger.debug('%s :: Error getting bookmarks: %s', this.toString(), ex);
				return [];
			});
		},
		getResumeBookmark: function(assetId, assetType) {
			var type = this.mapContentType(assetType);
			return BS.request.Get('/restapi/rest/%s/%s/movies/bookmarks'
				.sprintf(bsRegionId, bsUserId), {
				accept: 'json',
				data: {
					'content_id': assetId,
					'content_type': type,
					'bookmark_type': 'AUTO'
				}
			}).then(function(response) {
				return this._processBookmarksData(response.data.list)[0];
			}.bind(this)).catch(function(ex) {
				BS.logger.debug('%s :: Error getting resume bookmark: %s', this.toString(), ex);
				return null;
			});
		},
		setResumeBookmark: function(bookmark) {
			return this.add(bookmark);
		},
		_processBookmarksData: function(bmsData) {
			return bmsData.map(function(bmData) {
				return new Bookmark({
					id: bmData.idBookmark,
					content: {id: bmData.idContent, type: bmData.contentType, location: 'network'},
					type: bmData.type,
					time: bmData.time
				});
			});
		},
		toString: function() { return 'NPVRBookmarkProvider'; }
	};
	Object.extend(NPVRBookmarkProvider, BookmarkProvider);

	BS.BeeSmartMain.bookmarkService.register(new NPVRBookmarkProvider());

	function LPVRBookmarkProvider() {
		BookmarkProvider.apply(this, arguments);
	}
	LPVRBookmarkProvider.prototype = {
		allowedTypes: ['recordedAsset', 'instantRecAsset'],
		isSuitable: function(assetId, assetType, assetLocation) {
			if (this.allowedTypes.indexOf(assetType) === -1)
				return false;
			return assetLocation === 'local-device';
		},
		_getRecording: function(id) {
			var dfr = q.defer();
			try {
				BS.recorder.list(function(list) {
					var recording = null;
					list.some(function(r) {
						if (r.recordId === id) {
							recording = r;
							return true;
						}
					});
					if (recording)
						dfr.resolve(recording);
					else
						dfr.reject('recording-not-found');
				});
			} catch (ex) {
				dfr.reject(ex);
			}
			return dfr.promise;
		},
		_getBookmarksFromRecording: function(recObj) {
			if (!recObj.bookmarks) {
				recObj.bookmarks = {
					manual: [],
					resume: null
				};
			}
			return recObj.bookmarks;
		},
		_saveBookmarksToRecording: function(bookmarks, recObj) {
			recObj.bookmarks = bookmarks;
			recObj.persistMeta({ bookmarks: bookmarks });
		},
		add: function(bookmark) {
			if (!(bookmark instanceof Bookmark))
				throw 'invalid-argument';
			var that = this;
			var bm = bookmark;

			return that._getRecording(bm.content.id).then(function(rec) {
				var bookmarks = that._getBookmarksFromRecording(rec);
				bookmarks.manual.push({
					content: bm.content,
					time: bm.time
				});
				if (bookmarks.manual.length > getMaxBookmarksPerContent())
					bookmarks.manual.shift();
				that._saveBookmarksToRecording(bookmarks, rec);
				return true;
			});
		},
		get: function(assetId) {
			var that = this;
			return that._getRecording(assetId).then(function(rec) {
				return that._processBookmarksData(
					that._getBookmarksFromRecording(rec).manual,
					Bookmark.type.manual
				);
			}).catch(function(ex) {
				BS.logger.debug('%s :: Error getting bookmarks: %s', this.toString(), ex);
				return [];
			});
		},
		getResumeBookmark: function(assetId) {
			var that = this;
			return that._getRecording(assetId).then(function(rec) {
				var bookmarks = that._getBookmarksFromRecording(rec);
				if (bookmarks.resume) {
					return that._processBookmarksData([bookmarks.resume], Bookmark.type.resume)[0];
				}
				return null;
			}).catch(function(ex) {
				BS.logger.debug('%s :: Error getting resume bookmark: %s', this.toString(), ex);
				return null;
			});
		},
		setResumeBookmark: function(bookmark) {
			if (!(bookmark instanceof Bookmark))
				throw 'invalid-argument';

			var that = this;
			var bm = bookmark;
			return that._getRecording(bm.content.id).then(function(rec) {
				var bookmarks = that._getBookmarksFromRecording(rec);
				bookmarks.resume = {
					content: bm.content,
					time: bm.time
				};
				that._saveBookmarksToRecording(bookmarks, rec);
				return true;
			});
		},
		_processBookmarksData: function(bmsData, type) {
			return bmsData.map(function(bmData) {
				return new Bookmark({
					id: bmData.id,
					content: bmData.content,
					type: type,
					time: bmData.time
				});
			});
		},
		toString: function() {
			return 'LPVRBookmarkProvider';
		}
	};
	Object.extend(LPVRBookmarkProvider, BookmarkProvider);
	BS.BeeSmartMain.bookmarkService.register(new LPVRBookmarkProvider());

	var clipBookmarks = new BS.App(
		'clipBookmarks',
		{
			type: 'popup',
			listenTo: [keys.shortcuts],
			helpId: 'clipBookmarks',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	clipBookmarks.timer = null;
	clipBookmarks.menu = null;
	clipBookmarks.dom = null;

	clipBookmarks.onInputEvent = function (key) {
		var that = this;
		switch (key) {
			case 'up':
			case 'down':
				if (!that.menu) return;
				if (key === 'up')
					that.menu.currentMenuItems().previous();
				else
					that.menu.currentMenuItems().next();
				break;
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
				if (that.menu) {
					var number = parseInt(key, 10);

					if (number > that.menu.currentMenuItems().size())
						break;

					that.menu.currentMenuItems().jump(number - 1);
					var position = that.menu.currentMenuItems().currentInfo();
					if (position)
						that.actionHandler(position.time * 1000);
				}
				break;
			case 'ok':
				if (that.subMenu) {
					that.subMenu.showFocus().then(function () {
						var position = that.menu.currentMenuItems().currentInfo();
						that.actionHandler(position.time * 1000);
						am.pop();
					});
				} else {
					am.pop();
				}

				break;
			case 'back':
			case 'left':
			case 'green':
				am.pop();

				break;
			default:
				break;
		}
	};

	clipBookmarks.init = function (callerAppId, bookmarks, actionHandler, hideAfterMs) {
		var that = this;
		that.actionHandler = actionHandler || BS.F;
		if (!bookmarks) {
			am.pop();
			return;
		}

		that.dom = that.dom || new ModuleDom(
			[
				'bookmarksMenu', 'bookmarksMenuSelector', 'bookmarksMenuSlider',
				'noBookmarksText', 'templateBookmarks', 'bookmarksMenuShow',
				'bookmarksMenuHide', 'bookmarksMenuActionBar'
			],
			{
				clearTimer: function () {
					if (that.timer) {
						clearTimeout(that.timer);
						that.timer = false;
					}
				},
				showMenu: function () {
					that.dom.bookmarksMenu.show();
					that.dom.bookmarksMenuShow.begin();
					that.actionBar.set([
						['back', 'back'],
						['confirm', 'confirm']
					]);
				},
				hideMenu: function () {
					this.bookmarksMenuHide.begin(function () {
						that.dom.bookmarksMenu.hide();
						that.dom.noBookmarksText.hide();
					});
					that.dom.destroyMenu();
				},
				destroyMenu: function() {
					if (that.menu) {
						that.subMenu.destroy();
						that.subMenu = null;
						that.menu.destroy();
						that.menu = null;
					}
				}
			});
		that.actionBar = new ui.ActionBar(that.dom.bookmarksMenuActionBar);

		that.dom.destroyMenu();
		that.dom.clearTimer();

		if (bookmarks.length === 0) {
			that.dom.noBookmarksText.show();
			that.dom.bookmarksMenuSlider.hide();
			that.dom.bookmarksMenuSelector.hide();
		} else {
			var menu = new ui.Menu(that.dom.bookmarksMenuSelector[0]);
			var items = [];
			var infos = [];

			for (var i = 0; i < bookmarks.length; i++) {
				(function (index) {
					items.push(ui.template(that.dom.templateBookmarks.text(), {
						'name': index + 1,
						'setVerticalPosition': function (step) {
							return parseInt(index * step, 10);
						},
						'setStartTime': function () {
							var time = bookmarks[index].time;
							return '%s:%s'.sprintf(
								Math.floor(time / 60).padToLength(),
								Math.round(time % 60).padToLength()
							).toLocaleString(languageCode);
						}
					}));
					infos.push(bookmarks[index]);
				})(i);
			}

			that.subMenu = menu.newMenuItems().setItems(items, infos).show()
				.jump(bookmarks.length - 1, true);
			that.menu = menu;
			that.dom.bookmarksMenuSelector.show();
		}

		that.dom.showMenu();

		if (hideAfterMs) {
			that.timer = setTimeout(function () {
				am.pop();
			}, hideAfterMs);
		}
	};

	clipBookmarks.destroy = function () {
		this.actionHandler = BS.F;
		this.dom.clearTimer();
		this.dom.hideMenu();
	};

	clipBookmarks.onStandby = function (status) {
		am.pop();
		liveTv.onStandby(status);
	};

	var resumeFromAutoBookmark = new BS.App(
		'resumeFromAutoBookmark',
		{
			type: 'popup',
			listenTo: [keys.shortcuts]
		}
	);
	resumeFromAutoBookmark.dfr = null;
	resumeFromAutoBookmark.onInputEvent = function (key) {
		var that = this;
		switch (key) {
			case 'ok':
				var dfr = that.dfr;
				that.dfr = null;
				q.delay(500).then(function() {
					dfr.resolve();
				});
				am.pop();
				break;
			case 'back':
				am.pop();
				break;
			default:
				break;
		}
	};
	resumeFromAutoBookmark.init = function (callerApp, deferredObj) {
		if (this.dfr !== null) {
			throw new Error('resumeFromAutoBookmark is already on stack as dfr is set');
		}
		this.dfr = deferredObj;
		this.dom.showMenu();
	};
	resumeFromAutoBookmark.destroy = function () {
		if (this.dfr) {
			this.dfr.reject('cancel-or-no-user-input');
			this.dfr = null;
		}
		this.dom.hideMenu();
	};
	resumeFromAutoBookmark.startup = function () {
		var that = this;
		that.dom = new ModuleDom(
			[
				'autoBookmarkResume', 'autoBookmarkResumeShow', 'autoBookmarkResumeHide',
				'autoBookmarkResumeActionBar'
			],
			{
				popDownTimer: null,
				showMenu: function () {
					that.dom.autoBookmarkResume.show();
					that.dom.autoBookmarkResumeShow.begin();
					that.dom.clearPopDownTimer();
					that.dom.popDownTimer = setTimeout(
						function () {
							if (am.lastLoaded('resumeFromAutoBookmark'))
								am.pop();
						},
						10000
					);
				},
				clearPopDownTimer: function () {
					if (that.dom.popDownTimer !== null) {
						clearTimeout(that.dom.popDownTimer);
						that.dom.popDownTimer = null;
					}
				},
				hideMenu: function () {
					that.dom.clearPopDownTimer();
					that.dom.autoBookmarkResumeHide.begin(function () {
						that.dom.autoBookmarkResume.hide();
					});
				}
			},
			function () {
			}
		);

		that.actionBar = new ui.ActionBar(that.dom.autoBookmarkResumeActionBar);
	};

	mm.getModule('VideoOnDemand')
		.register(clipBookmarks)
		.register(resumeFromAutoBookmark);
})(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	BeeSmart.evMgr,
	BeeSmart.InputManager.keyGroups,
	BeeSmart.portal,
	$.ModuleDom
);


(function (BS, q, bmisc, mm, am, ui, formats, ModuleDom, Movie, MultivariantProduct,
	Product, PurchasedProduct) {
	var misc = mm.getApp('Misc');
	var BeeSmartMain = mm.getModule('BeeSmartMain');
	var vodPlayer = null;
	var vodContentDescriptionMap = {
		'duration': 'vodContentDurationText',
		'genres': 'vodContentGenresText',
		'cast': 'vodContentCastText',
		'director': 'vodContentDirectorText',
		'year': 'vodContentYearText',
		'country': 'vodContentCountry',
		'preOrderInfo': 'vodContentPreOrderText',
		'description': '',
		'price': 'vod_price',
		'ageLimit': 'ageLimit'
	};
	var prodRepo = null;
	var storeService = null;
	var giftService = null;
	var giftRepo = null;
	var catRepo = null;
	var vodModelService = null;

	BS.evMgr.bind('onBeeSmartLoginSuccess', function () {
		storeService = BeeSmartMain.storeService;
		prodRepo = BeeSmartMain.productRepository;
		catRepo = BeeSmartMain.categoryRepository;
		giftService = BeeSmartMain.giftService;
		giftRepo = BeeSmartMain.giftRepository;
		vodModelService = BeeSmartMain.vodModelService;
	});

	var vod = new BS.App('Vod', {
		isDefault: true, helpId: 'sidebar_vod', requiredLicense: 'vod',
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	vod.menu = null;
	vod.categoryPreviewMaxNoOfItems = 0;

	vod.startup = function () {
		var that = this;
		that.dom = new ModuleDom(
			[
				'vodMenu', 'vodModule', 'vodMenuSelector', 'vodCategoryPoster', 'vodCategoryPreview'
			],
			{
				clearPreview: function () {
					this.vodCategoryPoster.hide();

					this.vodCategoryPreview.hide();
					for (var i = 0; i < that.previewImages.length; i++) {
						that.previewImages[i].href = null;

						var ani = that.previewImages[i].domRef.children();
						if (ani && ani.length && ani[0] && ani[0].nodeName === 'animateTransform') {
							ani[0].beginElementAt(0);
							ani[0].endElement();
						}
					}
				},
				toggleParentalLockDisplay: function (contentRating) {
					if (!BS.portal.user.checkParentalLimit(contentRating)) {
						ui.generalAlert(tr('VodCatPreviewParentalWarning'));
						return true;
					}
					return false;
				},
				actionBar: function (buttonVector) {
					misc.dom.actionBar.set(buttonVector);
				},
				setActionBar: function () {
					var actionBarItems = [
						['back', 'back'],
						['vertical', 'selectCategory'],
						['blue', 'search'],
						['confirm', 'switchVodCategory']
					];

					if (!mm.isAllowed('search'))
						actionBarItems.splice(2, 1);

					misc.dom.actionBar.set(actionBarItems);
				}
			},
			function () {
				var dom = this;
				dom['vodMenuItemMovieCountList'] = dom['vodMenu']
					.find('.vodMenuItemMovieCount');
				var previewImages = [];
				dom.vodCategoryPreview.children().each(function () {
					previewImages.push(new ui.Image($(this)));
				});
				that.previewImages = previewImages;
			}
		);

		that.dom.vodCategoryPoster = new ui.Image(that.dom.vodCategoryPoster);

		that.categoryPreviewMaxNoOfItems = that.dom.vodCategoryPreview.find('image').length;
		vodPlayer = mm.getApp('vodPlayer');
	};

	vod.init = function (caller, showCatWithId) {
		BS.perf.start('vod open');
		var that = this;
		var totalRootCategories = 0;

		if (showCatWithId === misc.adapterMainMenu.appId)
			showCatWithId = undefined;

		that.lock = true;
		catRepo.initialize('on-demand')
			.then(function () {
				var catList = catRepo
					.findByParentIdAndType(showCatWithId, 'on-demand')
					.filter(that.categoryFilter);

				if (catList.length === 0) {
					am.push(vodCategory, catRepo.findById(showCatWithId), true);
				} else {
					totalRootCategories = catList.length;
					that.generateCategoryMenu(catList);
				}

				if (caller === 'loader')
					misc.showPortal();

				that.dom['vodModule'].show();
			}).catch(function (ex) {
				BS.logger.info('VOD :: INIT failed');
				BS.logger.log(ex);
				that.lock = false;
				ui.generalAlert(tr('vodInitError'));
			}).finally(function () {
				BS.perf.stop('vod open', 'totalRootCategories=%s', totalRootCategories);
				that.lock = false;
			});
	};

	vod.onInputEvent = function (keyPressedName) {
		var that = this;
		var cat;
		if (that.lock)
			return;

		if (!that.subMenu) {
			am.pop();
			return;
		}

		switch (keyPressedName) {
		case 'back':
		case 'left':
			cat = that.subMenu.currentInfo();

			if (!cat)
				am.pop();

			var parentId = cat.parentId;
			if (parentId) {
				cat = catRepo.findById(parentId, 'on-demand');
				this.refreshCategoryMenu(cat.parentId, cat.id);
			} else
				am.pop();

			misc.dom.navigationPop();
			break;
		case 'up':
		case 'down':
			if (keyPressedName === 'up') {
				that.subMenu.previous();
			} else {
				that.subMenu.next();
			}

			break;
		case 'right':
		case 'ok':
			cat = that.subMenu.currentInfo();
			if (BS.portal.user.checkParentalLimit(cat.ageRating)) {
				that.openCategory(cat);
			} else
				am.push(mm.getApp('pinCheckDialog'));

			break;
		case 'blue':
			if (!mm.isAllowed('search'))
				return;
			misc.dom.navigationReset();
			am.inContextOf(that).push(mm.getApp('searchPopup'));

			break;
		}
	};

	vod.focus = function (caller, arg1, arg2, arg3) {
		var that = this;
		var prevCategory;

		switch (caller) {
		case 'pinCheckDialog':
			if (arg3 === true) {
				var cat = that.subMenu.currentInfo();
				that.openCategory(cat);
			} else {
				that.dom.toggleParentalLockDisplay(that.subMenu.currentInfo().ageRating);
			}

			break;
		case 'vodCategory':
		case 'vodContent':
			if (that.subMenu) {
				prevCategory = that.subMenu.currentInfo();
				that.refreshCategoryMenu(prevCategory.parentId, prevCategory.id);
			} else {
				that.refreshCategoryMenu();
			}
			that.dom['vodModule'].show();
			that.dom['vodMenu'].show();
			that.dom.toggleParentalLockDisplay(that.subMenu.currentInfo().ageRating);
			that.dom.setActionBar();

			break;
		case 'Vod':
			prevCategory = catRepo.findById(arg1);
			that.refreshCategoryMenu(prevCategory.parentId, prevCategory.id);

			break;
		case 'searchPopup':
			if (arg1 === 'noSearch') {
				var catList = catRepo.findByParentIdAndType(null, 'on-demand').filter(
					that.categoryFilter);
				that.generateCategoryMenu(catList);
				that.dom['vodModule'].show();
			} else {
				this.dom.setActionBar();
			}

			break;
		}
	};

	vod.blur = function (caller) {
		if (['vodCategory', 'vodContent', 'searchPopup'].indexOf(caller) !== -1) {
			this.dom['vodModule'].hide();
			this.dom['vodMenu'].hide();
			this.dom.vodCategoryPoster.hide();
			this.dom.vodCategoryPreview.hide();
		}
		vod.lock = false;
	};

	vod.destroy = function (caller, parentId) {
		if (caller === 'liveTv' || caller === misc.adapterMainMenu.appId || caller === 'Misc' ||
			(caller === 'Vod' && !parentId)) {
			this.dom['vodModule'].hide();
			this.dom.clearPreview();
			misc.dom.navigationReset();
		}
		if (this.menu) {
			this.subMenu.destroy();
			this.menu.destroy();
		}
		this.menu = null;
		this.subMenu = null;
		vod.lock = false;
		vodModelService.clearData();
	};

	vod.openCategory = function (cat) {
		var that = this;
		if (cat.isLeaf) {
			am.push(vodCategory, cat, true);
		} else {
			var catList = catRepo
				.findByParentIdAndType(cat.id, 'on-demand')
				.filter(that.categoryFilter);

			vod.generateCategoryMenu(catList);
			misc.dom.navigationPush(cat.title);
		}
	};

	vod.refreshCategoryMenu = function (parentId, selectedId) {
		var catList = catRepo.findByParentIdAndType(parentId, 'on-demand');
		catList = catList.filter(this.categoryFilter);
		this.generateCategoryMenu(catList, selectedId);
	};

	vod.categoryFilter = function (cat) {
		if (cat.id === vodModelService.categoryRepository.Category.onDemandIds.GIFTS) {
			return vodModelService.getGiftCategorySize() > 0;
		}
		return true;
	};

	vod.generateCategoryMenu = function (categoryData, jumpToId) {
		var that = this;
		var tempItems = [];
		var infos = [];
		var whereToJump = 0;
		var dataLength = categoryData.length;

		if (categoryData.length === 0) {
			BS.logger.debug('ERROR: No categoryData passed to generateCategoryMenu');
			return;
		}

		if (that.menu) {
			if (that.subMenu)
				that.subMenu.destroy();
			that.menu.destroy();
		}

		that.menu = new ui.Menu(that.dom['vodMenuSelector'][0]);

		for (var i = 0; i < dataLength; i++) {
			if (categoryData[i].id
				=== vodModelService.categoryRepository.Category.onDemandIds.MY_VOD)
				categoryData[i].size = vodModelService.getMyContentSize();

			infos.push(categoryData[i]);
			tempItems.push(ui.template('vodMenuTemplate', {
				'category': categoryData[i]
			}));

			if (categoryData[i].id === jumpToId)
				whereToJump = i;
		}

		that.subMenu = that.menu.newMenuItems().setItems(tempItems, infos).jump(whereToJump).show();
		that.dom.vodMenu.show();
		that.dom.setActionBar();
		that.subMenu.onFinish(function () {
			var cat = that.subMenu.currentInfo();
			if (!cat) {
				that.setVodCategoryPreview([]);
			} else if (!cat.isLeaf) {
				that.setVodCategoryPreview(cat.poster || []);
			} else if (cat.isLeaf) {
				vodModelService.getContentsOfCategory(cat).then(function (contents) {
					var covers = contents
						.filter(function (content) {
							return !content.isAgeRestricted();
						})
						.map(function (content) {
							return content.poster;
						});

					that.setVodCategoryPreview(covers);
				}).done();
			}
		}, 400);
	};

	vod.setVodCategoryPreview = function (preview) {
		var that = this;

		that.dom.clearPreview();
		if (that.subMenu && that.dom.toggleParentalLockDisplay(
				that.subMenu.currentInfo().ageRating)) {
			return;
		}

		that.dom.vodCategoryPoster.href = null;
		that.dom.vodCategoryPoster.hide();

		if (typeof preview === 'string') {
			that.dom.vodCategoryPoster.href = preview;
			that.dom.vodCategoryPoster.show();
		} else if (preview !== null) {
			var covers;
			var nextImageIndex;
			var i;
			var img = null;
			var coversLength;

			covers = preview.filter(function (cover) {
				return cover;
			});
			coversLength = covers.length;

			if (coversLength === 0) {
				that.dom.vodCategoryPreview.hide();
				return;
			}
			var orderType = that.dom.vodCategoryPreview.attr('order-type', null, NS.bee) ||
				'random';

			var maxImageIterations = that.categoryPreviewMaxNoOfItems > coversLength ?
				coversLength : that.categoryPreviewMaxNoOfItems;

			if (maxImageIterations % 2 === 0)
				maxImageIterations--;

			var clonedImageArray = covers.filter(function () {
				return true;
			});

			for (i = 0; i < maxImageIterations; i++) {
				img = that.previewImages[that.previewImages.length - 1 - i];
				nextImageIndex = orderType === 'random' ?
					parseInt(Math.random() * clonedImageArray.length) : i;
				img.href = clonedImageArray[nextImageIndex];
				clonedImageArray.splice(nextImageIndex, 1);
			}

			that.dom.vodCategoryPreview.show();
		}
	};

	var vodCategory = new BS.App(
		'vodCategory',
		{
			helpId: 'category_content_sidebar',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	vodCategory.listViewEnabled = false;
	vodCategory.catContent = [];
	vodCategory.dvdShelf = null;
	vodCategory.dvdShelfContainer = null;
	vodCategory.listMenu = null;
	vodCategory.subMenu = null;
	vodCategory.categoryStack = [];

	vodCategory.startup = function () {
		var that = vodCategory;
		that.dom = new ModuleDom(
			[
				'dvd-covers-shelf', 'toggleDVDShelfDisplay', 'dvdShelfPrevNextBg',
				'vodContentBriefDescription', 'vodSearchCatBg', 'vodContentListView',
				'vodContentMenuSelector', 'selectedVodTitle'
			],
			{
				showProductList: function (count) {
					var setDvdShelfPrevBg =
							typeof count !== 'undefined' ?
						function (max) {
							var atr = that.dom['dvdShelfPrevNextBg'];
							if (count > max)
								atr.show();
							else
								atr.hide();
						} :
						function () {
						};

					if (!that.listViewEnabled) {
						this['vodContentBriefDescription'].show();
					} else {
						this['vodContentListView'].show();
					}

					that.dom['vodSearchCatBg'].hide();
					that.dom['toggleDVDShelfDisplay'].trigger('beginEvent', {
						'setDvdShelfPrevBg': setDvdShelfPrevBg
					});
				},
				hideContentList: function () {
					that.dom['vodContentBriefDescription'].hide();
					that.dom['vodContentListView'].hide();
					that.dom['vodSearchCatBg'].show();
				},
				switchView: function () {
					var movieList = that.catContent;
					var currIndex;

					if (that.listViewEnabled) {
						currIndex = that.subMenu.currentIndex();
						that.clearListViewMenu();
						that.listViewEnabled = false;

						that.generateDVDShelfView(movieList, currIndex);
					} else {
						currIndex = that.dvdShelf.index;
						that.clearShelf();
						that.listViewEnabled = true;

						that.generateListView(movieList, currIndex);
					}
				},
				setSelectedVodTitle: function (title) {
					that.dom['selectedVodTitle'].text(!title ? ' ' : title);
				}
			},
			function () {
				that.dvdShelfContainer = new BS.ui.ShelfManager(this['dvd-covers-shelf'][0]);
			}
		);
	};

	vodCategory.init = function (callerAppId, category) {
		BS.perf.start('vod category');
		var that = this;
		that.lock = true;

		if (!category) {
			BS.logger.info('ERROR: VOD CATEGORY: No category provided to show!');
			that.processCategoryContent([]);
			that.finishInit();
			return;
		}
		that.currentCategory = category;

		that.processCategory(category);
	};

	vodCategory.finishInit = function () {
		ui.toggleLoader(false);
		this.lock = false;
		this.setActionBar();
		var category = this.currentCategory;
		BS.perf.stop(
			'vod category',
			'category=%s, id=%s, totalProducts=%s, totalContents=%s',
			category.title, category.id, this.catContent.totalProducts || 0, this.catContent.length
		);
	};

	vodCategory.onInputEvent = function (keyPressedName) {
		var that = this;
		var isShelfEmpty = !that.dvdShelf;
		var isListViewEmpty = !that.listMenu;
		var listViewEnabled = that.listViewEnabled;

		if (that.lock === true)
			return;

		var ignoreOkAndUpDown = (isShelfEmpty && !listViewEnabled) ||
			(isListViewEmpty && listViewEnabled);
		switch (keyPressedName) {
		case 'back':
			if (
				that.currentCategory instanceof prodRepo.Product && !(that.currentCategory
				instanceof Movie)
				) {
				this.catContent.forEach(function (movie) {
					movie.unlink();
				});
			}
			am.pop();

			break;
		case 'up':
		case 'down':
			if (ignoreOkAndUpDown)
				return;

			if (!listViewEnabled) {
				if (keyPressedName === 'up') {
					that.dvdShelf.previousRow();
				} else {
					that.dvdShelf.nextRow();
				}
			} else {
				if (keyPressedName === 'up') {
					that.subMenu.previous();
				} else {
					that.subMenu.next();
				}
			}

			that.updateSelectedVodTitle();
			break;
		case 'left':
		case 'right':
			if (isShelfEmpty || listViewEnabled)
				return;
			if (keyPressedName === 'right') {
				that.dvdShelf.nextColumn();
			} else {
				that.dvdShelf.previousColumn();
			}
			that.updateSelectedVodTitle();
			break;
		case 'ok':
			if (ignoreOkAndUpDown)
				return;

			var cItem = that.getSelectedItem();
			if (BS.portal.user.checkParentalLimit(cItem.ageRating)) {
				that.showProduct(cItem);
			} else {
				am.push(mm.getApp('pinCheckDialog'));
			}

			break;
		case 'yellow':
			that.dom.switchView();
			break;
		}
	};

	vodCategory.updateSelectedVodTitle = function () {
		var item = this.getSelectedItem();
		this.dom.setSelectedVodTitle(item ? item.title : '');
	};

	vodCategory.showProduct = function (prod) {
		var that = this;
		if (prod instanceof Movie && !prod.isLinked()) {
			ui.toggleLoader(true);
			vodModelService.getProductsOfMovie(prod).then(function (products) {
				if (products.length === 0) {
					ui.generalAlert(tr('vodExpired'));
				} else if (products.length === 1) {
					that.dom.hideContentList();
					am.push(vodContent, products[0]);
				} else {
					am.push(vodCategory, prod);
				}
			}).finally(function () {
				ui.toggleLoader(false);
			}).done();
		} else {
			that.dom.hideContentList();
			am.push(vodContent, prod, that.catContent);
		}
	};

	vodCategory.blur = function () {
		this.categoryStack.push({
			category: this.currentCategory,
			contents: this.catContent,
			selectedIndex: this.getSelectedIndex()
		});
	};

	vodCategory.focus = function (caller, arg1, arg2, arg3) {
		var that = this;
		var categoryContent = that.categoryStack.pop();
		that.currentCategory = categoryContent.category;
		that.catContent = categoryContent.contents;
		var selectedContentIndex = categoryContent.selectedIndex;
		that.setActionBar();

		switch (caller) {
		case 'pinCheckDialog':
			if (arg3 === true) {
				vodCategory.showProduct(that.getSelectedItem());

				if (that.dvdShelf) {
					that.refreshDVDShelf();
				} else if (that.listMenu) {
					that.generateListView(that.catContent, that.listMenu.currentIndex());
				} else {
					BS.logger.info('Shelf does not exist, cannot display and refresh content');
				}
			}

			break;
		case 'vodCategory':
		case 'vodContent':
		case 'communityMessagePopup':
			if (
				(!arg2 && that.currentCategory.id === catRepo.Category.onDemandIds.MY_VOD) ||
				arg1
				) {
				BS.logger.trace('VOD CATEGORY :: FOCUS :: Content refresh requested');
				that.clearShelf();
				that.clearListViewMenu();
				misc.dom.navigationPop();
				that.processCategory(that.currentCategory, selectedContentIndex);
			} else {
				that.processCategoryContent(that.catContent, selectedContentIndex);
			}

			that.dom.showProductList();
			break;
		}
	};

	vodCategory.destroy = function () {
		this.clearShelf();
		this.clearListViewMenu();

		misc.dom.navigationPop();

		this.currentCategory = null;
		this.catContent = [];
		this.itemList = null;

		if (!am.isLoaded('Vod')) {
			var appCount = am.applicationStack.filter(function (a) {
				return a === 'vodCategory';
			})
				.length;
			if (appCount === 1)
				vodModelService.clearData();
		}
	};

	vodCategory.getSelectedItem = function () {
		return this.getSelectedIndex() === null ? null : this.catContent[this.getSelectedIndex()];
	};

	vodCategory.processCategory = function (category, selIndex) {
		var that = this;
		var contentPromise;
		ui.toggleLoader(true);
		if (category instanceof catRepo.Category) {
			contentPromise = vodModelService.getContentsOfCategory(category);
			misc.dom.navigationPush(category && category.title || '');
		} else if (category instanceof Movie) {
			contentPromise = vodModelService.getProductsOfMovie(category);
			misc.dom.navigationPush(
					category && (category.title + ' (' + tr('movie') + ')') || ''
			);
		} else {
			contentPromise = vodModelService.getContentsOfProduct(category);
			misc.dom.navigationPush(
					category && (category.title + ' (' + tr('vodPackage') + ')') || ''
			);
		}

		contentPromise.then(function (contents) {
			that.processCategoryContent(contents, selIndex);
		}).finally(function () {
			that.finishInit();
		}).done();
	};

	vodCategory.processCategoryContent = function (list, selIndex) {
		var that = vodCategory;
		selIndex = selIndex || 0;
		that.catContent = list;

		if (list.length) {
			if (that.listViewEnabled)
				that.generateListView(list, selIndex);
			else
				that.generateDVDShelfView(list, selIndex);
		} else {
			ui.generalAlert(tr('vodCategoryContentEmpty'));
			that.clearShelf();
			that.clearListViewMenu();
			that.listMenu = null;
			that.dvdShelf = null;
		}
		this.updateSelectedVodTitle();
	};

	vodCategory.getContentIcon = function (content) {
		if (giftService.isGift(content))
			return '#recordingGift';
		return '';
	};

	vodCategory.removeItem = function (position) {
		if (position >= this.catContent.length) return;

		var selectedIndex = this.getSelectedIndex();
		this.catContent.splice(position, 1);

		if (position < selectedIndex) {
			selectedIndex--;
		}

		if (this.catContent.length === 0) {
			ui.generalAlert(tr('vodCategoryContentEmpty'));
			this.clearShelf();
			this.clearListViewMenu();
		}

		if (this.dvdShelf) {
			this.generateDVDShelfView(this.catContent, selectedIndex);
		} else if (this.listMenu) {
			this.generateListView(this.catContent, selectedIndex);
		}
	};

	vodCategory.getPriceData = function (content) {
		var priceItem;
		var totalPrices;
		if (content instanceof MultivariantProduct || content instanceof Movie) {
			priceItem = null;
			totalPrices = null;
		} else if (content instanceof PurchasedProduct) {
			priceItem = content.priceItem;
			totalPrices = 1;
		} else if (
			content instanceof Product &&
			(content.isFree() || content.clientPurchaseEnabled)
		) {
			priceItem = content.getCheapestPriceItem('currency');
			totalPrices = storeService.getPriceItemsCount([content]);
		}
		return {
			priceItem: priceItem,
			totalPrices: totalPrices
		};
	};

	vodCategory.createDVDShelf = function (productList, count) {
		var that = this;
		var dvdShelf = new BS.ui.ShelfMenu(this.dvdShelfContainer);
		var getPriceData = that.getPriceData.bind(that);
		dvdShelf.items = productList.map(mapToShelfData);
		this.dvdShelf = dvdShelf.show();
		this.dom.showProductList(count);

		function mapToShelfData(content) {
			return {
				content: content,
				getGiftData: getGiftData,
				getPriceData: getPriceData,
				getContentStatus: getContentStatus,
				getFormattedPrice: getFormattedPrice
			};
		}

		function getFormattedPrice(priceItem) {
			return priceItem.price ?
				priceItem.price.value.formatPrice(formats.price) : '';
		}

		function getContentStatus(content) {
			return content instanceof Movie && !content.isLinked() ?
				null : vodModelService.getContentStatus(content);
		}

		function getGiftData(content) {
			return {
				sender: giftService.isGift(content) ?
					giftRepo.getGiftByProduct(content.id).sender.name : '',
				icon: that.getContentIcon(content)
			};
		}
	};

	vodCategory.generateDVDShelfView = function (productList, index) {
		this.destroyShelf();
		this.createDVDShelf(productList, productList.length);
		this.dvdShelf.forceJumpToIndex(index);
	};

	vodCategory.getSelectedIndex = function () {
		if (this.dvdShelf)
			return this.dvdShelf.index;
		else if (this.listMenu)
			return this.subMenu.currentIndex();
		else
			return null;
	};

	vodCategory.refreshDVDShelf = function () {
		var currIndex = this.dvdShelf.index,
			numCols = this.dvdShelf.numberOfColumns(),
			currPage = parseInt(currIndex / numCols),
			startItem = numCols * currPage;

		for (var i = 0; i < numCols; i++) {
			this.dvdShelf.changeItemAtIndex(i, this.dvdShelf.items[startItem++]);
		}
	};

	vodCategory.getDetailsText = function (detailsToShow, joinDetailsWith, product) {
		var details = [];
		var data;
		var prodDetails = product.details;
		var value;

		for (var j = 0; (data = detailsToShow[j]); j++) {
			value = prodDetails[data];
			if (data === 'genres' && value && value.length) {
				var genres = [];
				for (var k = 0; k < value.length; k++)
					genres.push(tr('GENRE_' + value[k]));
				details.push(genres.join(', '));
				continue;
			}
			if (value && vodContentDescriptionMap[data])
				details.push(tr(vodContentDescriptionMap[data]) + ' ' + value);
		}
		return details.join(joinDetailsWith);
	};

	vodCategory.generateListView = function (contentList, currIndex) {
		var that = this;
		var items = [];
		var infos = [];
		var item;

		that.destroyListMenu();

		that.itemList = [];
		that.listMenu = new ui.Menu(that.dom['vodContentMenuSelector'][0]);

		var detailsToShow = that.dom['vodContentListView']
			.attr('details-to-show', null, NS.bee);
		if (detailsToShow)
			detailsToShow = detailsToShow.split(/\s*,\s*/);
		else
			detailsToShow = [];

		var joinDetailsWith = that.dom['vodContentListView']
			.attr('details-join-using', null, NS.bee);

		if (!joinDetailsWith)
			joinDetailsWith = '';

		for (var i = 0; (item = contentList[i]); i++) {
			var detailsText = that.getDetailsText(detailsToShow, joinDetailsWith, item);
			var sender = giftService.isGift(item) ?
				giftRepo.getGiftByProduct(item.id).sender.name : '';
			var pid = that.getPriceData(item);
			var formattedPrice = pid.priceItem ?
				pid.priceItem.price.value.formatPrice(formats.price) : '';

			that.itemList.push(item);
			infos.push(item);
			items.push(ui.template('templateVodContentListView', {
				item: item,
				details: detailsText,
				sender: sender.encodeEntities(),
				isParentalLocked: !BS.portal.user.checkParentalLimit(item.ageRating),
				icon: that.getContentIcon(item),
				priceItem: pid.priceItem,
				currency: formats.currencySign,
				formattedPrice: formattedPrice.toLocaleString(BS.portal.language.label),
				totalPrices: pid.totalPrices,
				contentStatus: vodModelService.getContentStatus(item)
			}));
		}
		that.subMenu = that.listMenu.newMenuItems();
		that.subMenu.setItems(items, infos);
		that.subMenu.jump(currIndex);
		that.subMenu.show();
		that.dom['vodContentListView'].show();
	};

	vodCategory.clearShelf = function () {
		this.destroyShelf();
		this.dom.hideContentList();
	};

	vodCategory.destroyShelf = function () {
		if (this.dvdShelf) {
			this.dvdShelf.destroy();
			this.dvdShelf = null;
		}
	};

	vodCategory.clearListViewMenu = function () {
		var that = vodCategory;
		that.destroyListMenu();
		that.dom['vodContentListView'].hide();
	};

	vodCategory.destroyListMenu = function () {
		if (this.listMenu) {
			this.subMenu.destroy();
			this.subMenu = null;
			this.listMenu.destroy();
			this.listMenu = null;
		}
	};

	vodCategory.setActionBar = function () {
		if ((this.dvdShelf && this.dvdShelf.items && this.dvdShelf.items.length > 0) ||
			(this.listMenu && this.subMenu && this.subMenu.size() > 0))
			misc.dom.actionBar.set([
				['back', 'back'],
				['navigation', 'navigation'],
				['yellow', 'switchView'],
				['confirm', 'movieDetails']
			]);
		else
			misc.dom.actionBar.set([
				['back', 'back'],
				['empty', null],
				['empty', null],
				['empty', null]
			]);
	};

	var vodContent = new BS.App(
		'vodContent',
		{
			helpId: 'category_content',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);

	function mergeVariantsData(obj, v) {
		v.audios.forEach(function (a) {
			if (obj.audios.indexOf(a) === -1)
				obj.audios.push(a);
		});
		v.subtitles.forEach(function (a) {
			if (obj.subtitles.indexOf(a) === -1)
				obj.subtitles.push(a);
		});
		obj.quality[v.quality] = true;
		obj.quality['threeD'] = obj.quality['threeD'] || v['threeD'];
		return obj;
	}

	function hasQualityInfo(setObj) {
		return setObj.quality.sd === true || setObj.quality.hd === true ||
			setObj.quality.uhd === true || setObj.quality.threeD === true;
	}

	function shouldShowMovieVariantsPanel(setObj) {
		return setObj.audios.length || setObj.subtitles.length || setObj.hasQualityInfo;
	}

	vodContent.contentItem = null;
	vodContent.descrPanel = null;
	vodContent.requestContentListRefresh = false;
	vodContent.oldStatus = null;
	vodContent.variantsDrawn = false;
	vodContent.contentStack = [];
	vodContent.contentList = null;
	vodContent.referenceCount = 0;

	vodContent.startup = function () {
		var that = this;
		that.alert = new BS.ui.Alert({autoHide: 3000});

		that.dom = new ModuleDom(
			[
				'vodPriceAndPackageHolder', 'vodAvailTillHolder', 'vodAvailability_1',
				'vodAvailability_2', 'vodContentStarHolderCP', 'vodContentStarHolder', 'vodPrice',
				'vodPriceLabel', 'vodContentTitle', 'vodContentDescription',
				'vodContentText', 'vodContentNewTag', 'vodContentIsPackageHolder',
				'vodVariantsPanel', 'vodContentLeftRightArrows',
				'vodVariantsSetIcons', 'vodContentScrollGroup', 'vodContentScroller',
				'vodExpiredHolder', 'ppIcon', 'vodCallOperatorHolder', 'vodNotInSubscriptionHolder',
				'vodContentPreOrderTag', 'vodContentUpDownArrows'
			],
			{
				posterImage: new ui.Image($('#vodContentImage')),
				hideMenu: function () {
					this['vodContentDescription'].hide();
					this.posterImage.href = null;
				},
				showVariants: function () {
					if (that.variantsDrawn)
						return;
					that.variantsDrawn = true;
					that.dom.hideVariants();
					that.dom['vodVariantsSetIcons'].trigger('clear');
					var prm = vodModelService.getContentMediasByProduct(vodContent.contentItem);
					prm.then(function (variants) {
						var setObj = {
							audios: [],
							subtitles: [],
							quality: {
								'sd': false,
								'hd': false,
								'uhd': false,
								'threeD': false
							},
							hasQualityInfo: false
						};
						setObj = variants.reduce(mergeVariantsData, setObj);
						setObj.hasQualityInfo = hasQualityInfo(setObj);
						if (shouldShowMovieVariantsPanel(setObj)) {
							that.dom['vodVariantsSetIcons'].trigger('set', setObj);
							that.dom['vodVariantsSetIcons'].trigger('show');
							that.dom['vodVariantsPanel'].show();
							that.dom.initDescriptionScroll();
						}
					}).done();
				},
				hideVariants: function () {
					that.dom['vodVariantsPanel'].hide();
					that.dom['vodVariantsSetIcons'].trigger('hide');
					that.dom.initDescriptionScroll();
				},
				initDescriptionScroll: function () {
					that.descrPanel = new ui.ScrollingPanel(
						that.dom['vodContentScrollGroup'][0],
						null,
						that.dom['vodContentScroller'][0],
						null,
						that.dom['vodContentUpDownArrows'][0]
					);
				},
				setActionBar: function () {
					var ci = that.contentItem;
					var cs = vodModelService.getContentStatus(ci);
					var actionBarItems = [
						['back', 'back'],
						['navigation', 'navigation'],
						['empty', ''],
						['empty', '']
					];
					var isMovie = ci instanceof Movie;

					if (giftService.isGift(ci) && !giftService.isAccepted(ci)) {
						actionBarItems[2][0] = 'green';
						actionBarItems[2][1] = 'accept_gift';
						actionBarItems[3][0] = 'yellow';
						actionBarItems[3][1] = 'reject_gift';
						misc.dom.actionBar.set(actionBarItems);
						return;
					}

					actionBarItems[3][0] = 'confirm';
					actionBarItems[3][1] = 'more';

					actionBarItems[2][0] = 'green';

					if (ci.isSingle() && (that.isContentPlayable() || cs.isPreOrdered())) {
						actionBarItems[2][1] = 'play';
						misc.dom.actionBar.set(actionBarItems);
						return;
					}
					if (!ci.isSingle() && (cs.isPurchasedOrFree() || cs.isPreOrdered())) {
						actionBarItems[2][1] = 'packageContents';
						misc.dom.actionBar.set(actionBarItems);
						return;
					}
					if ((cs.isPayable() && !(ci instanceof PurchasedProduct)) || cs.isFree() ||
						cs.isInOtherSubscription()
						) {
						actionBarItems[2][1] = (isMovie && ci.isLinked() || !ci.isSingle()) ?
							(ci.isPreOrder() ? 'PreOrderPackage' : 'purchasePackage') :
							(ci.isPreOrder() ? 'PreOrder' : 'purchase');
						misc.dom.actionBar.set(actionBarItems);
						return;
					}
					actionBarItems[2][0] = 'empty';
					misc.dom.actionBar.set(actionBarItems);
				},
				refreshContentDetails: function () {
					var ci = that.contentItem;
					var dataToShow = that.dom['vodContentDescription']
						.attr('data-to-show', null, NS.bee).split(/\s*,\s*/);
					var contentStatus = vodModelService.getContentStatus(ci);
					var clientPurchaseEnabled = vodModelService.getProducts(ci).some(function (p) {
						return p.clientPurchaseEnabled;
					});

					if (that.dom.variantsEnabled) {
						if (!ci.isSingle()) {
							that.dom.hideVariants();
						} else {
							that.dom.showVariants();
						}
					}

					that.dom['ppIcon'].hide();
					that.dom['vodCallOperatorHolder'].hide();
					that.dom['vodAvailTillHolder'].hide();
					that.dom['vodExpiredHolder'].hide();
					that.dom['vodPriceAndPackageHolder'].hide();
					that.dom['vodNotInSubscriptionHolder'].hide();

					if (!ci.isSingle()) that.dom.showProductSign();
					else that.dom.setMovieRating();

					if (contentStatus.isPurchased() || contentStatus.isPreOrdered()) {
						that.dom.refreshAvailableTillText(contentStatus);
					} else if (contentStatus.isFree() || contentStatus.isPayable()
						&& !(ci instanceof PurchasedProduct)) {
						if (!contentStatus.isFree() && !clientPurchaseEnabled) {
							that.dom['vodCallOperatorHolder'].show();
						} else {
							that.dom.setPriceText(contentStatus);
						}
					} else if (contentStatus.isInOtherSubscription()) {
						that.dom['vodNotInSubscriptionHolder'].show();
					} else {
						that.dom['vodExpiredHolder'].show();
					}

					that.dom['vodContentText'].svg(that.dom.getMovieDescription(dataToShow,
						vodContentDescriptionMap, that.contentItem, contentStatus));

					that.dom['vodContentTitle'].svg(ci.title.encodeEntities());
					that.dom.posterImage.href = ci.poster;


					if (!(ci instanceof PurchasedProduct) &&
						ci.isPreOrder() || contentStatus.isPreOrdered()
						) {
						that.dom['vodContentPreOrderTag'].show();
					} else {
						that.dom['vodContentPreOrderTag'].hide();
					}
					if (ci.isNew())
						that.dom['vodContentNewTag'].show();
					else
						that.dom['vodContentNewTag'].hide();
				},
				refreshAvailableTillText: function (contentStatus) {
					var pd = vodModelService.getPurchasedProduct(that.contentItem);

					if (contentStatus.isPurchased()) {
						that.dom['vodAvailability_1'].text(tr('vod_availability'));
						that.dom['vodAvailability_2'].text(
							new Date(pd.availabilityPeriod.to).toFormatedString(formats.dateTime)
						);
					} else if (contentStatus.isPreOrdered()) {
						that.dom['vodAvailability_1'].text(tr('vodAvailableFrom'));
						that.dom['vodAvailability_2'].text(
							new Date(pd.availabilityPeriod.from).toFormatedString(formats.dateTime)
						);
					}
					that.dom['vodAvailTillHolder'].show();
					that.dom['vodPriceAndPackageHolder'].hide();
				},

				setPriceText: function (contentStatus) {
					var products = vodModelService.getProducts(that.contentItem);
					var priceTextUp = ' ';
					var priceTextDown = ' ';
					var piSymbol;
					var piMinPrice;
					var piMaxPrice;

					if (contentStatus.isFree() ||
						(that.dom.showFreeForGifts && giftService.isGift(that.contentItem))
					) {
						priceTextUp = tr('vod_free');
					} else if (contentStatus.isAvailable()) {
						var minCurrencyPI = storeService.getCheapestPriceItem(products, 'currency');
						var maxCurrencyPI = storeService
							.getMostExpensivePriceItem(products, 'currency');
						var minPPPI = storeService.getCheapestPriceItem(products, 'points');
						var maxPPPI = storeService.getMostExpensivePriceItem(products, 'points');

						if (minCurrencyPI) {
							piSymbol = minCurrencyPI.price.symbol;
							piMinPrice = minCurrencyPI.price.value.formatPrice(formats.price);
							if (minCurrencyPI !== maxCurrencyPI) {
								piMaxPrice = maxCurrencyPI.price.value.formatPrice(formats.price);

								priceTextUp = tr('vodSetMultiCurrencyPriceValue')
									.sprintf(piMinPrice, piSymbol, piMaxPrice, piSymbol);
							} else
								priceTextUp = tr('vodSetPriceValue').sprintf(piMinPrice, piSymbol);
						}

						if (minPPPI) {
							that.dom['ppIcon'].show();
							piSymbol = minPPPI.price.symbol;
							piMinPrice = minPPPI.price.value;
							if (minPPPI !== maxPPPI) {
								piMaxPrice = maxPPPI.price.value;

								priceTextDown = tr('vodSetMultiPPPriceValue')
									.sprintf(piMinPrice, piSymbol, piMaxPrice, piSymbol);
							} else
								priceTextDown = tr('vodSetPriceValue')
									.sprintf(piMinPrice, piSymbol);
						}

					} else {
						priceTextUp = tr('vodNotAvailable');
					}
					that.dom['vodPriceLabel']
						.text(priceTextUp.toLocaleString(BS.portal.language.label));
					that.dom['vodPrice']
						.text(priceTextDown.toLocaleString(BS.portal.language.label));
					that.dom['vodPriceAndPackageHolder'].show();
				},
				setMovieRating: function () {
					that.dom['vodContentIsPackageHolder'].hide();
					var offset = that.dom['vodContentStarHolderCP']
						.attr('start-offset', null, NS.bee);
					that.dom['vodContentStarHolderCP'].first()
						.attr('width', that.contentItem.rating * offset);
					that.dom['vodContentStarHolder'].show();
				},
				showProductSign: function () {
					that.dom['vodContentStarHolder'].hide();
					that.dom['vodContentIsPackageHolder'].show();
				},
				applyMiddleAlignment: function (rowIndex, lineHeight, maxWidth, panelWidth,
					headingRightMargin) {
					var arr = [
						maxWidth + 5,
						rowIndex * lineHeight,
						maxWidth,
						maxWidth + headingRightMargin,
						rowIndex * lineHeight,
						panelWidth - maxWidth - headingRightMargin
					];
					if (BS.portal.direction === 'rtl') {
						arr[0] = panelWidth - maxWidth - 5;
						arr[3] = panelWidth - (maxWidth + headingRightMargin);
					}
					return arr;
				},
				applyLeftAlignment: function (rowIndex, lineHeight, widths, panelWidth,
					headingRightMargin) {

					var arr = [
						0,
						rowIndex * lineHeight,
						widths[rowIndex],
						widths[rowIndex] + headingRightMargin,
						rowIndex * lineHeight,
						panelWidth - widths[rowIndex] - headingRightMargin
					];

					if (BS.portal.direction === 'rtl') {
						arr[0] = panelWidth;
						arr[3] = panelWidth - (widths[rowIndex] + headingRightMargin);
					}

					return arr;
				},
				createMovieMetaRow: function createMovieMetaRow(txtLabel, txtValue, xLabel, yLabel,
					wLabel, xValue, yValue, wValue) {
					txtLabel = (txtLabel || '-').encodeEntities();
					txtValue = (txtValue || '-').encodeEntities();
					yLabel = yLabel || 0;
					xLabel = xLabel || 0;
					wLabel = wLabel || 100;
					xValue = xValue || 120;
					yValue = yValue || 0;
					wValue = wValue || 500;
					createMovieMetaRow.cache = createMovieMetaRow.cache ||
						$('#templateVodContentDescriptionItem').text();
					return createMovieMetaRow.cache.sprintf(xLabel, yLabel, wLabel,
						txtLabel, xValue, yValue, wValue, txtValue) + '\n';
				},
				getMovieDescription: function (detailsToShow, fieldMap, ci, contentStatus) {
					var rowMaker = that.dom.createMovieMetaRow;
					var vodContentText = $('#vodContentText');
					var lineHeight = parseInt(vodContentText.attr('line-increment'));
					var headingRightMargin = 15;
					var panelWidth = parseInt(vodContentText.attr('width')) +
						2*headingRightMargin;
					var align = vodContentText.attr('align', null, NS.bee);

					var products;
					var movieMeta = detailsToShow.filter(function (metaKey) {
						if (metaKey === 'genres' && (!ci.details.genres ||
							ci.details.genres.length === 0)
							) return false;
						if (metaKey === 'preOrderInfo' &&
							(!(ci instanceof PurchasedProduct) && ci.isPreOrder())
							) return true;
						if (metaKey === 'price') {
							products = vodModelService.getProducts(that.contentItem);
							if (contentStatus.isUnavailable()) return false;
							if (contentStatus.isFree()) return true;
							if (storeService.getPriceItemsCount(products) !== 1) {
								BS.logger.debug(
									'WARN: Price will not be shown in movie metadata as there are' +
									' more than 1 price item or 0 available for movie!'
								);
								return false;
							}
							return true;
						}
						if (metaKey === 'ageLimit') {
							return that.contentItem.ageRating > 0;
						}
						return (metaKey in fieldMap) && metaKey !== 'br' &&
							metaKey !== 'description' && ci.details[metaKey];
					}).map(function (metaKey) {
						var value;
						if (metaKey === 'genres') {
							value = ci.details.genres.map(function (genre) {
								return tr('GENRE_' + genre.toUpperCase());
							}).join(', ');
						} else if (metaKey === 'duration' && ci.details.duration) {
							value = (ci.details.duration / 60).toFixed(0) + tr('min');
						} else if (metaKey === 'description') {
							value = ci.details.description;
						} else if (metaKey === 'preOrderInfo') {
							if (ci.consumptionPeriod)
								value = (new Date(ci.consumptionPeriod.from)
									.toFormatedString(formats.dateTime));
							else if (ci.availabilityPeriod)
								value = (new Date(ci.availabilityPeriod.from)
									.toFormatedString(formats.dateTime));
						} else if (metaKey === 'price') {
							if (contentStatus.isFree()) {
								value = tr('vod_free');
							} else if (contentStatus.isAvailable()) {
								var priceItem = storeService.getCheapestPriceItem(products);
								if (!priceItem)
									priceItem = storeService.getCheapestPriceItem(products, 'points');
								value = storeService.getPriceItemDescription(priceItem);
							}
						} else if (metaKey === 'ageLimit') {
							value = tr('ageLimitDescription').sprintf(that.contentItem.ageRating);
						} else if (metaKey === 'year') {
							var date = new Date(ci.details.year, 5, 30);
							value = date.toFormattedString('yyyy');
						} else if (ci.details[metaKey]) {
							value = ci.details[metaKey].toString();
						}
						return {
							key: metaKey,
							label: tr(fieldMap[metaKey]),
							value: value
						};
					});

					if (ci.productTitle) {
						movieMeta.push({key: ' ', label: tr('partOfPackage'), value: ci.productTitle});
					}
					vodContentText.svg(movieMeta.map(labelMaker).join(''));
					var widths = vodContentText
						.find('.epgTvShowDetailsInfoTitle').toArray.map(getWidth);
					var maxWidth = (Object.clone(widths).sort(sorter))[0];

					var svgToDraw = [];
					var rowIndex = 0;
					svgToDraw = svgToDraw.concat(movieMeta.map(function (meta) {
						var args = align === 'middle' ?
							that.dom.applyMiddleAlignment(rowIndex++, lineHeight, maxWidth,
								panelWidth, headingRightMargin) :
							that.dom.applyLeftAlignment(rowIndex++, lineHeight, widths,
								panelWidth, headingRightMargin);

						return rowMaker.apply(0, [meta.label, meta.value].concat(args));
					}));

					var descr = ci.details.description;
					svgToDraw.push(('<textArea transform="translate(0,%d)" width="%d" '
						+ 'class="movie-description-text">%s</textArea>').sprintf(
							rowIndex * lineHeight, panelWidth, descr));

					return svgToDraw.join('');

					function labelMaker(meta) {
						return rowMaker(meta.label);
					}

					function getWidth(el) {
						return $(el).dimensions().width;
					}

					function sorter(a, b) {
						return a < b ? 1 : (a === b ? 0 : -1);
					}
				}
			},
			function () {
				var dom = this;
				dom.variantsEnabled = typeof dom['vodVariantsPanel'][0] !== 'undefined';
				dom.showFreeForGifts = dom['vodContentDescription']
					.attr('show-free-price-for-gifts', null, NS.bee) === 'true';
			}
		);
	};

	vodContent.init = function (caller, contentItem, contentList) {
		var that = this;
		that.referenceCount++;
		if (!contentItem) {
			BS.logger.debug('ERROR: no content passed to vodContent.');
			am.pop(true);
			return;
		}
		that.contentList = contentList || [contentItem];
		that.contentIndex = that.contentList.indexOf(contentItem);
		if (that.contentList.length > 1) that.dom['vodContentLeftRightArrows'].show();
		else that.dom['vodContentLeftRightArrows'].hide();
		misc.dom.navigationPush(tr('movieDetails'));
		that.processNewContent(contentItem);
	};

	vodContent.focus = function (caller, arg1, arg2, arg3) {
		var that = this;
		var data = that.contentStack.pop();
		that.contentItem = data.contentItem;
		that.contentList = data.contentList;
		that.contentIndex = data.contentIndex;
		if (that.contentList.length > 1) that.dom['vodContentLeftRightArrows'].show();
		else that.dom['vodContentLeftRightArrows'].hide();
		var ci = that.contentItem;

		if (!ci) {
			am.pop(that.requestContentListRefresh, that.isContentPlayable());
			return;
		}

		switch (caller) {
		case 'gift_menu_dialog':
			if (arg1 === 'ok')
				that.purchaseGift(arg3);

			break;
		case 'dvdChapters':
			misc.dom.navigationPop();

			break;
		case 'priceListDialog':
			if (arg1 === 'ok' && arg3)
				that.purchaseContentItem(arg3.product, arg3.priceItem);
			break;

		case 'moviePriceListDialog':
			if (arg1 === 'ok' && arg3) {
				var product = arg3.product;
				var priceItem = arg3.priceItem;
				var ps = storeService.getProductPurchaseStatus(product.id);

				if (ps.isInOtherSubscription()) {
					storeService.showSubscriptionApp(
						[product instanceof Movie ? product.linkedProduct : product]
					);
					return;
				}

				if (!product.clientPurchaseEnabled) {
					storeService.showCallOperatorDialog(product);
					return;
				}

				that.purchaseContentItem(product, priceItem);
			}
			break;

		case 'communityMessagePopup':
			if (arg1) {
				that.dom.setActionBar();
				that.requestContentListRefresh = true;
			}

			break;
		case 'vodCategory':
		case 'subscriptionApp':
			that.refreshContentScreen();
			break;

		case 'variantListDialog':
			if (arg1 === 'ok') {
				var mediaStatus = storeService.getItemPurchaseStatus(arg3.id, 'on-demand');
				if (mm.getApp('variantListDialog').isTrailer) {
					that.startVodPlayer(that.contentItem, arg3, true);
				} else if (mediaStatus.isPurchasedOrFree()) {
					that.startVodPlayer(that.contentItem, arg3);
				} else if (mediaStatus.isPreOrdered()) {
					var purchasedProducts = prodRepo.findByItemId(arg3.id, 'on-demand',
						'purchased-product');
					that.showPreOrderedDialog(purchasedProducts);
				}
			}
			break;

		default :
			that.GiftReceiver = null;
			that.isPurchasingGift = false;
		}
	};

	vodContent.blur = function (callingModule) {
		this.contentStack.push({
			contentItem: this.contentItem,
			contentList: this.contentList,
			contentIndex: this.contentIndex
		});
		switch (callingModule) {
		case 'dvdChapters':
			misc.dom.navigationPush(tr('chapterSelection'));
			break;
		case 'vodCategory':
			vodContent.dom.hideMenu();
		}
		vodContent.requestContentListRefresh = false;
	};

	vodContent.destroy = function () {
		this.dom.hideMenu();
		if (this.descrPanel) {
			this.descrPanel.destroy();
			this.descrPanel = null;
		}

		this.contentItem = null;
		this.oldStatus = null;
		this.isPurchasingGift = false;
		this.variantsDrawn = false;
		if (!am.isLoaded('vodCategory'))
			vodModelService.clearData();
		this.referenceCount--;
		if (this.referenceCount === 0)
			this.contentStack = [];
		misc.dom.navigationPop();
	};

	vodContent.processNewContent = function(contentItem) {
		var that = this;
		if (contentItem instanceof Movie) {
			ui.toggleLoader(true);
			that.lock = true;
			that.dom['vodContentDescription'].hide();
			var promise = q();
			promise.then(function () {
				var mediaIds = contentItem.getMedias().map(function (m) {
					return m.id;
				});
				return prodRepo.updateProductsOfItems(mediaIds, 'on-demand', true);
			}).then(
				continueInit.bind(that),
				function (ex) {
					BS.logger.info('VOD CONTENT .processNewContent(%s) Error: %s', contentItem, ex);
				}
			).finally(function () {
				ui.toggleLoader(false);
				that.lock = false;
			});
		} else {
			continueInit();
		}

		function continueInit() {
			that.contentItem = contentItem;
			that.oldStatus = vodModelService.getContentStatus(that.contentItem);
			that.refreshContentScreen();
		}
	};

	vodContent.handlePlayout = function (isTrailer) {
		isTrailer = isTrailer || false;
		var that = this;
		var ci = that.contentItem;
		that.lock = true;
		var products = [ci];
		var availableMediaIds = null;

		if (ci instanceof MultivariantProduct) {
			if (isTrailer) {
				products = [ci];
			} else {
				availableMediaIds = ci.items.map(function (it) {
					return it.contentMediaId;
				});
				products = vodModelService.getProducts(ci);
				var purchasedProducts = vodModelService.getPurchasedProducts(ci);
				products = products.filter(function (p) {
					return p.isFree();
				});
				products = products.concat(purchasedProducts);
			}
		}

		vodModelService.getContentMediasByProducts(products).then(function (mediaList) {
			if (availableMediaIds !== null) {
				mediaList = mediaList.filter(function (m) {
					return availableMediaIds.indexOf(m.id) !== -1;
				});
			}
			if (isTrailer) {
				mediaList = mediaList.filter(function (m) {
					return m.promo !== null;
				});
			}
			if (mediaList.length > 1) {
				am.push(mm.getApp('variantListDialog'), mediaList, isTrailer);
				that.lock = false;
			} else {
				that.startVodPlayer(that.contentItem, mediaList[0], isTrailer);
			}
		}).catch(function (ex) {
			that.lock = false;
			throw ex;
		}).done();
	};

	vodContent.onInputEvent = function (keyPressedName) {
		if (this.lock)
			return;

		var that = this;
		var ci = that.contentItem;

		if (!ci) {
			am.pop();
			return;
		}

		var cs = vodModelService.getContentStatus(ci);
		var isPendingGift = giftService.isGift(ci) && !giftService.isAccepted(ci);

		switch (keyPressedName) {
		case 'left':
		case 'right':
			if (that.contentList.length <= 1) break;
			if (keyPressedName === 'left') that.contentIndex--; else that.contentIndex++;
			if (that.contentIndex < 0) that.contentIndex = that.contentList.length - 1;
			if (that.contentIndex >= that.contentList.length) that.contentIndex = 0;
			that.variantsDrawn = false;
			that.dom.hideVariants();
			that.processNewContent(that.contentList[that.contentIndex]);
			break;
		case 'back':
			am.pop(that.requestContentListRefresh, this.isContentPlayable());
			return;
		case 'ok':
			if (isPendingGift)
				break;
			that.lock = true;
			that.getMenuItems().then(function (infos) {
				if (am.lastLoaded('vodContent')) {
					var menuDialog = mm.getApp('vodContentMenu');
					am.push(menuDialog, infos);
				}
			}).finally(function() {
				that.lock = false;
			}).done();

			break;
		case 'up':
		case 'down':
			if (keyPressedName === 'up') {
				that.descrPanel.moveUp();
			} else {
				that.descrPanel.moveDown();
			}

			break;
		case 'yellow':
			if (!isPendingGift)
				break;
			that.rejectGift(giftRepo.getGiftByProduct(ci.id).id);

			break;
		case 'green':
			if (isPendingGift) {
				ui.toggleLoader(true);
				that.acceptGift(giftRepo.getGiftByProduct(ci.id).id);
				break;
			}

			var isMultivariant = ci instanceof MultivariantProduct;
			if (cs.isInOtherSubscription()) {
				if (!isMultivariant) {
					storeService.showSubscriptionApp(
							[ci instanceof Movie ? ci.linkedProduct : ci]
					);
					break;
				} else {
					that.showProductPriceList();
					break;
				}
			}

			if (cs.isUnavailable())
				break;

			if (that.isContentPlayable(cs)) {
				that.handlePlayout();
			} else if (!ci.isSingle() && (cs.isPurchasedOrFree() || cs.isPreOrdered())) {
				that.showPackageContents();
			} else if (cs.isPreOrdered()) {
				var pd = vodModelService.getPurchasedProduct(that.contentItem);
				that.showPreOrderedDialog([pd]);
			} else if (
				(cs.isPayable() && !(ci instanceof prodRepo.PurchasedProduct)) || cs.isFree()
				) {
				that.showProductPriceList();
			}

			break;
		case 'play':
		case 'pause':
			if (that.isContentPlayable(cs)) {
				that.handlePlayout();
			}

			break;
		}

		if (
			that.isContentPlayable(that.oldStatus) !== that.isContentPlayable(cs) ||
			(that.oldStatus && that.oldStatus.isPurchased() !== cs.isPurchased())
			) {
			that.dom.refreshContentDetails();
			that.dom.setActionBar();
		}
		that.oldStatus = cs;
	};

	vodContent.refreshContentScreen = function () {
		var that = this;

		that.dom.refreshContentDetails();

		that.dom['vodContentDescription'].show();
		that.dom.initDescriptionScroll();
		that.dom.setActionBar();
	};

	vodContent.startVodPlayer = function (contentItem, media, isTrailer, jumpToTime) {
		isTrailer = isTrailer || false;
		var ci = contentItem;
		var resourcePromise = isTrailer ? media.getTrailerResources() : media.getMediaResources();
		resourcePromise.then(function (mr) {
			if (!mr) {
				BS.logger.info('VOD CONTENT :: Will not start vod player as there is no media resource' +
					' provided.');
				return;
			}
			am.push(vodPlayer, {
				title: ci.title,
				description: ci.desc,
				id: media.id,
				uid: media.uid,
				assetURLs: mr,
				assetType: isTrailer ? 'vodTrailer' : 'vodMovie',
				jumpToTime: jumpToTime ? jumpToTime : 0
			});
		}).finally(function () {
			this.lock = false;
		}.bind(this));
	};

	vodContent.getMenuItems = function () {
		var that = this;
		var mld = BeeSmartMain.MenuListDialog;
		var ActionItem = mld.ActionItem;
		var ActionList = mld.ActionList;
		var items = new ActionList();
		var ci = that.contentItem;
		var contentStatus = vodModelService.getContentStatus(ci);
		var tasks = [];
		var canBePurchased = contentStatus.isPayable() && !(ci instanceof PurchasedProduct);
		var isMovie = ci instanceof Movie;
		var clientPurchaseEnabled = vodModelService.getProducts(ci).some(function (p) {
			return p.clientPurchaseEnabled;
		});

		if (!giftService.isGift(ci) || giftService.isAccepted(ci)) {
			if (that.isContentPlayable(contentStatus) || (ci.isSingle() &&
				contentStatus.isPreOrdered())
				) {
				items.addActionItem(new ActionItem({
					key: 'vod-play',
					iconLink: '#playVod',
					name: tr('play'),
					callback: function () {
						if (that.isContentPlayable(contentStatus)) {
							that.handlePlayout();
						} else if (contentStatus.isPreOrdered()) {
							var pd = vodModelService.getPurchasedProduct(that.contentItem);
							that.showPreOrderedDialog([pd]);
						}
					}
				}));
			}
			if (canBePurchased || contentStatus.isInOtherSubscription()) {
				var purchaseLabel = isMovie && ci.isLinked() || !ci.isSingle() ?
					(ci.isPreOrder() ? 'PreOrderPackage' : 'purchasePackage') :
					(ci.isPreOrder() ? 'PreOrder' : 'purchase');

				items.addActionItem(new ActionItem({
					key: 'vod-purchase',
					iconLink: '#icon_purchase',
					name: tr(purchaseLabel),
					callback: function () {
						that.showProductPriceList();
					}
				}));
			}
		}

		if (!ci.isSingle()) {
			items.addActionItem(new ActionItem({
				key: 'package-contents',
				iconLink: '#browsePackage',
				name: tr('packageContents'),
				callback: vodContent.showPackageContents.bind(that)
			}));
		}

		if (
			mm.isAllowed('mediasharing') && (canBePurchased || contentStatus.isPurchased()) &&
			clientPurchaseEnabled && !isMovie &&
			(!(ci instanceof prodRepo.PurchasedProduct) && !ci.isPreOrder()) &&
			giftService.canSendGift()
		) {
			items.addActionItem(new ActionItem({
				key: 'send-gift',
				iconLink: '#recordingGift-big',
				name: tr('send_a_gift'),
				callback: that.showGiftDialog.bind(that)
			}));
		}

		if (BS.config.get('Core.Client.Vod.FAVORITES_CATEGORY_ENABLED') === true && !isMovie) {
			tasks.push(vodModelService.isContentFavourited(ci).then(function (isFavourite) {
				return isFavourite ? 'favourite' : 'unfavourite';
			}).catch(function () {
				return false;
			}));
		} else {
			tasks.push(q(false));
		}

		if (ci.isSingle()) {
			tasks.push(vodModelService.hasProductPreviewOption(ci));
		} else {
			tasks.push(q(false));
		}

		return q.all(tasks).spread(function (favourite, canPreview) {
			if (favourite)
				if (favourite === 'favourite')
					items.addActionItem(new ActionItem({
						key: 'unmark-favorite-vod',
						iconLink: '#icon_favorite_unmark',
						name: tr('unmarkFavoriteVod'),
						callback: that.toggleContentFavourite(false).bind(that)
					}));
				else
					items.addActionItem(new ActionItem({
						key: 'mark-favorite-vod',
						iconLink: '#icon_favorite_mark',
						name: tr('markFavoriteVod'),
						callback: that.toggleContentFavourite(true).bind(that)
					}));
			if (canPreview)
				items.addActionItem(new ActionItem({
					key: 'preview-content',
					iconLink: '#icon_preview',
					name: tr('preview'),
					callback: function () {
						that.handlePlayout(true);
					}
				}));
			return items;
		}).catch(function (ex) {
			BS.logger.info('VOD CONTENT :: GET MENU ITEMS :: Error:');
			BS.logger.log(ex);
			return items;
		});
	};

	vodContent.showPackageContents = function () {
		am.push(vodCategory, this.contentItem);
	};

	vodContent.showGiftDialog = function () {
		var menuDialog = mm.getApp('gift_menu_dialog');
		am.push(menuDialog, tr('send_a_gift_to'), false, vodContent.contentItem.id);
	};

	vodContent.purchaseGift = function (options) {
		var that = this;
		that.giftReceiver = options.receiverId;
		that.showProductPriceList(true);
	};

	vodContent.processGiftPurchaseResult = function (options) {
		var errorCode;
		var errorMessage;

		return giftService.sendGift(options.content)
			.then(function () {
				return q({
					message: tr('vod_giftSentToUser'),
					todo: function () {
						ui.generalAlert(tr('vod_giftSentToUser'));
					}
				});
			}).catch(function (response) {
				BS.logger.info('Error sending gift: ' + response.toString(true));
				errorCode = response.data.errors[0].errorCode;

				if ([47, 141, 320].indexOf(errorCode) !== -1)
					errorMessage = 'CANNOT_SEND_GIFT';
				else
					errorMessage = 'SENDING_GIFT_FAILED';

				return q({
					message: tr(errorMessage),
					todo: function () {
						ui.generalAlert(tr(errorMessage));
					}
				});
			}).finally(function () {
				vodContent.isPurchasingGift = false;
			});
	};

	vodContent.rejectGift = function (giftId) {
		var that = this;
		ui.toggleLoader(true);
		return giftService.rejectGift(giftId).then(function () {
			that.requestContentListRefresh = true;
			that.alert.show(tr('vodContent_gift_rejected'));
		}).catch(function (response) {
			BS.logger.info('Error rejecting gift: ' + response.toString(true));
			ui.generalAlert(tr('REJECTING_GIFT_FAILED'));
		}).finally(function () {
			ui.toggleLoader(false);
			am.pop(true, that.isContentPlayable());
		}).done();
	};

	vodContent.acceptGift = function (giftId) {
		var that = this;
		ui.toggleLoader(true);
		return giftService.acceptGift(giftId).then(function () {
			that.requestContentListRefresh = true;
			prodRepo.updatePurchasedProducts().then(function () {
				that.dom.refreshContentDetails();
				that.refreshContentScreen();
			});
			that.alert.show(tr('vodContent_gift_accepted'));
			that.dom.setActionBar();
		}).catch(function (response) {
			var errorCode = response.data.errors[0].errorCode;
			BS.logger.info('Error accepting gift: ' + response.toString(true));

			if ([324, 1000].indexOf(errorCode) !== -1) {
				that.alert.show(tr('ACCEPTING_GIFT_FAILED'));
			} else if ([320, 321, 322, 323, 325].indexOf(errorCode) !== -1) {
				that.alert.show(tr('CANNOT_ACCEPT_GIFT'));
				that.rejectGift(giftId);
			}
		}).finally(function () {
			ui.toggleLoader(false);
		}).done();
	};

	vodContent.showPreOrderedDialog = function (purchasedProducts) {
		var fromTimestamp = purchasedProducts.reduce(function findEarliestAvailability(minFrom, p) {
			if (!minFrom)
				return p.availabilityPeriod.from;
			return p.availabilityPeriod.from < minFrom ?
				p.availabilityPeriod.from : minFrom;
		}, null);

		if (fromTimestamp === null)
			return;

		var formattedFromDate = new Date(fromTimestamp).toFormatedString(formats.dateTime);
		am.push(
			moviePreorderedDialog,
			tr('movieAvailableFromDialogTitle'),
			tr('movieAvailableFromDialogText').sprintf(formattedFromDate)
		);
	};

	vodContent.showProductPriceList = function (isGift) {
		this.isPurchasingGift = !!isGift;
		var ci = this.contentItem;
		var products = vodModelService.getProducts(ci);
		var purchasedItems = vodModelService.getPurchasedProducts(ci).reduce(function (list, p) {
			return list.concat(p.items.map(toPurchaseItemId));
		}, []);
		var isPurchasingPackage = false;
		var isMovieVariant = ci instanceof MultivariantProduct;
		var contentStatus = vodModelService.getContentStatus(ci);

		if (contentStatus.isInOtherSubscription() && !isMovieVariant) {
			storeService.showSubscriptionApp(
					[ci instanceof Movie ? ci.linkedProduct : ci]
			);
			return;
		}

		products = products.filter(function (p) {
			if (!p.isSingle())
				isPurchasingPackage = true;
			if (isGift) return true;
			var items = p.items.map(toPurchaseItemId);
			return !p.isFree() && items.some(function (item) {
				return purchasedItems.indexOf(item) === -1;
			});
		});

		var shouldCallOperator = !contentStatus.isInOtherSubscription() ?
			products.every(function (p) {
				return !p.clientPurchaseEnabled;
			}) : false;

		if (shouldCallOperator &&
			!(ci instanceof MultivariantProduct && products.length === 1)
		) {
			storeService.showCallOperatorDialog(
				ci instanceof Movie ? ci.linkedProduct : ci
			);
			return;
		}

		var totalPriceListLength = storeService.getPriceItemsCount(products);
		if (totalPriceListLength === 0 && !(ci instanceof MultivariantProduct)) {
			BS.logger.info('VOD CONTENT :: Nothing to buy :: Content item: %s', ci);
			return;
		}

		if ((ci instanceof MultivariantProduct ||
			(ci.isSingle() && totalPriceListLength > 1)) && !isPurchasingPackage
			) {
			vodModelService.getContentMediasByProducts(products).then(function (medias) {
				if (!medias.length) {
					BS.logger.info('VOD CONTENT :: ERROR Nothing to buy :: Content item (%s) has no medias!',
						ci);
					ui.generalAlert(tr('purchaseInvalidConfiguration'));
					return;
				}
				am.push(mm.getApp('moviePriceListDialog'), products, medias, isGift);
			}).done();
			return;
		}

		if (totalPriceListLength > 1) {
			am.push(mm.getApp('priceListDialog'), products, isGift);
		} else {
			var priceItem = products[0].priceList[0];
			vodContent.purchaseContentItem(products[0], priceItem);
		}

		function toPurchaseItemId(pi) {
			return pi.id;
		}
	};

	vodContent.isContentPlayable = function (status) {
		if (!this.contentItem.isSingle())
			return false;
		status = status || vodModelService.getContentStatus(this.contentItem);
		return status.isPurchasedOrFree();
	};

	vodContent.purchaseContentItem = function (product, priceItem) {
		var that = this;
		var isPreOrder = that.contentItem.isPreOrder();
		var purchaseData = {
			product: product,
			priceItem: priceItem,
			dialogTitle: tr(that.isPurchasingGift ?
				'vod_purchaseGiftTitle' :
				(isPreOrder ? 'VodPreOrderDialogTitle' : 'vod_purchaseTitle')),
			giftReceiver: that.giftReceiver || null
		};
		am.push(
			mm.getApp('content_purchase'),
			vodContent.isPurchasingGift ?
				this.processGiftPurchaseResult : this.processPurchaseResult,
			purchaseData
		);
	};

	vodContent.processPurchaseResult = function (options) {
		var that = vodContent;
		var product = options.content.product;
		var priceItem = options.content.priceItem;
		return storeService.purchaseProduct(product, priceItem).then(function () {
			that.dom.refreshContentDetails();
			that.dom.setActionBar();
			return q({
				message: tr('success'),
				todo: function () {
					if (that.isContentPlayable(vodModelService.getContentStatus(that.contentItem)))
						that.handlePlayout();
				}
			});
		}).catch(function (ex) {
			var error = ex.data.errors[0];
			var priceType = priceItem.price.type;

			BS.logger.debug('VOD: VOD purchase failed because %s', error.errorMessage);

			if (error.errorCode === 500)
				throw ex;

			if (error.errorCode === 304) {
				return {todo: function () {
					storeService.showCallOperatorDialog(that.contentItem);
				}};
			}

			return q({todo: function () {
				var message = storeService.getErrorCodeDescription(error.errorCode);
				if (error.errorCode === 20 && priceType === 'points')
					am.push(mm.getApp('payPoints'));
				else
					ui.generalAlert(message);
			}});
		});
	};

	vodContent.toggleContentFavourite = function (favouriteIt) {
		var that = this;
		return function () {
			if (favouriteIt) {
				vodModelService.favouriteContent(that.contentItem).then(function () {
					that.alert.show(tr('vodFavoriteMarkedOk'));
				}).catch(function (ex) {
					BS.logger.info('VOD CONTENT :: Unable to favourite content %s, Reason: %s',
						that.contentItem.id, ex.toString(true));
					that.alert.show(tr('vodFavoriteMarkedErr'));
				}).done();
			} else {
				vodModelService.unfavouriteContent(that.contentItem).then(function () {
					that.alert.show(tr('vodFavoriteUnmarkedOk'));
					that.requestContentListRefresh = true;
				}).catch(function (ex) {
					BS.logger.info('VOD CONTENT :: Unable to favourite content %s, Reason: %s',
						that.contentItem.id, ex.toString(true));
					that.alert.show(tr('vodFavoriteUnmarkedErr'));
				}).done();
			}
		};
	};

	var moviePriceListDialog = new BeeSmartMain.MenuListDialog('moviePriceListDialog', null, {
		width: 600,
		height: 400,
		onBeforeExit: function (key) {
			switch (key) {
			case 'ok':
				return true;
			}
		}
	});

	moviePriceListDialog.init = function (caller, products, medias, isGift) {
		var that = this;
		BeeSmartMain.MenuListDialog.prototype.init.call(that, tr('moviePriceListTitle'), false, {
			'holder': 'moviePriceListDialog',
			'selector': 'moviePriceListDialogSelector'
		});

		var mediasMap = medias.reduce(function (map, v) {
			map[v.id] = v;
			return map;
		}, {});

		var dialogOptions = products.reduce(function (options, p) {
			if (isGift && p.isPreOrder())
				return options;
			if (p.isFree())
				return options;
			var purchaseStatus = storeService.getProductPurchaseStatus(p.id);
			if (!p.clientPurchaseEnabled || purchaseStatus.isInOtherSubscription()) {
				return options.concat([
					{
						priceItem: null,
						media: mediasMap[p.items[0].id],
						product: p
					}
				]);
			}
			p.priceList.forEach(function (priceItem) {
				if (isGift && priceItem.billingType !== 'one-time')
					return;
				options.push({
					priceItem: priceItem,
					media: mediasMap[p.items[0].id],
					product: p
				});
			});
			return options;
		}, []);

		var markupBuffer = [];
		var items = [];

		dialogOptions.sort(byPriceTypePriceValueAndLanguage).forEach(function (option) {
			markupBuffer.push(BS.ui.template('moviePriceListItemTemplate', {
				title: option.priceItem ?
					storeService.getPriceItemDescription(option.priceItem, option.product.title) :
					!option.product.purchaseInfo.isInUsersSubscription() ?
						tr('notInYourSubscription') : tr('callOperatorMoviePriceListLabel'),
				width: that.dom.selectorWidth,
				icons: {
					flag: option.media.audios.length > 1 ? 'mul' :
							option.media.audios.length > 0 ? option.media.audios[0] : '-',
					quality: option.media.quality,
					other: option.media['threeD'] ? 'threeD' : '-'
				}
			}));
			items.push({ key: option});
		});

		this.fillActionMenu(items, markupBuffer.join(''), 0, false);

		function byPriceTypePriceValueAndLanguage(a, b) {
			if (!a.priceItem && b.priceItem)
				return 1;
			else if (a.priceItem && !b.priceItem)
				return -1;
			else if (!a.priceItem && !b.priceItem)
				return 0;
			var aPrice = a.priceItem.price;
			var bPrice = b.priceItem.price;
			var lanLabel = BS.portal.user.language.label;
			var aAudio = a.media.audios.length > 1 ? 'mul' : a.media.audios[0];
			var bAudio = b.media.audios.length > 1 ? 'mul' : b.media.audios[0];

			if (aPrice.type !== bPrice.type) {
				return aPrice.type === 'currency' && bPrice.type === 'points' ? -1 : 1;
			} else if (aPrice.value !== bPrice.value) {
				return bPrice.value - aPrice.value;
			} else if (aAudio !== bAudio) {
				if (lanLabel.indexOf(aAudio) !== -1)
					return -1;
				else if (lanLabel.indexOf(bAudio) !== -1)
					return 1;
				else if (aAudio === 'mul')
					return -1;
				else if (bAudio === 'mul')
					return 1;
				else  return aAudio > bAudio ? 1 : -1;
			} else {
				return 0;
			}
		}
	};
	BeeSmartMain.register(moviePriceListDialog);

	var vodContentMenu = new BeeSmartMain.MenuListDialog(
		'vodContentMenu',
		null,
		{
			onBeforeExit: function () {
			}
		}
	);

	vodContentMenu.ExtraItems = new BeeSmartMain.MenuListDialog.ActionList();
	vodContentMenu.init = function (caller, infos) {
		var that = vodContent;
		var mld = BeeSmartMain.MenuListDialog;
		var ActionList = mld.ActionList;
		var ActionContent = ActionList.ActionContent;
		var contentItem = that.contentItem;

		BeeSmartMain.MenuListDialog.prototype.init.call(this, tr('vodOptions'));

		this.ExtraItems.setData(new ActionContent({id: 'Movie', obj: contentItem}));

		infos.concatActionLists(this.ExtraItems);
		this.fillActionMenu(infos.getList());
	};
	BeeSmartMain.register(vodContentMenu);

	var variantListDialog = new BeeSmartMain.MenuListDialog('variantListDialog', null, {
		onBeforeExit: function (key) {
			switch (key) {
			case 'ok':
				return true;
			}
		}
	});

	variantListDialog.init = function (caller, media, isTrailer) {
		var that = this;
		var markupBuffer = [];
		var items = [];
		that.isTrailer = isTrailer;

		BeeSmartMain.MenuListDialog.prototype.init.call(that, isTrailer ?
			tr('variantPreviewListTitle') : tr('variantListTitle'), false, {
			'holder': 'variantListDialog',
			'selector': 'variantListDialogSelector'
		});

		media.forEach(function (m) {
			markupBuffer.push(BS.ui.template('variantListItemTemplate', {
				width: that.dom.selectorWidth,
				icons: {
					flag: m.audios.length > 1 ? 'mul' : m.audios.length > 0 ? m.audios[0] : '-',
					quality: m.quality,
					other: m['threeD'] ? 'threeD' : '-'
				}
			}));
			items.push({ key: m });
		});

		this.fillActionMenu(items, markupBuffer.join(''));
	};
	BeeSmartMain.register(variantListDialog);

	var moviePreorderedDialog = new BeeSmartMain.InfoDialog(
		'moviePreorderedDialog',
		{
			onBeforeExit: function () {
				return true;
			},
			buttons: [
				['confirm', 'close']
			],
			exitKeys: ['ok', 'back']
		}
	);
	BeeSmartMain.register(moviePreorderedDialog);

	BS.evMgr.bind('msg:onCommandInvoke', function playVodMovieMessageHandler(ev) {
		var msg = ev.data;
		if (msg.body.command !== 'vod-movie-playout')
			return;

		BS.logger.debug('Invoke command vod', msg);
		var mediaId = msg.body.arguments[0];
		var jumpToTime = msg.body.arguments[1] ? parseInt(msg.body.arguments[1], 10) * 1000 : null;

		vodModelService.getMoviesWithMediaIds([mediaId]).then(function (movieList) {
			return movieList[0];
		}).then(function (movie) {
			if (!movie)
				throw 'no-movie-could-be-found-with-media-id-%s'.sprintf(mediaId);

			return prodRepo.updateProductsOfItems([mediaId], 'on-demand', false)
				.then(function () {
					return vodModelService.getContentMediaById(mediaId);
				})
				.then(function (media) {
					var cs = vodModelService.getContentStatus(movie);
					if (cs.isPurchasedOrFree()) {
						vodContent.startVodPlayer(movie, media, false, jumpToTime);
					} else {
						throw 'content-not-purchasable-or-playable';
					}
				});
		}).catch(function (ex) {
			BS.logger.info('VOD MSG :: Could not start vod player for media id %s, Reason %s',
				mediaId, ex);
		}).done();
	});

	var vodModule = new BS.Module(
		{
			id: 'Vod',
			requiredLicense: 'vod',
			mmExtensions: {
				app: vod,
				icon: 'vod',
				title: 'vod',
				position: 2
			},
			startupTasks: [
				{
					name: 'VOD module interface',
					payload: function (params, callback) {
						BS.template.get('svg/vod.svg').finally(callback);
					}
				}
			]
		}
	)
		.register(vod)
		.register(vodCategory)
		.register(vodContent);

	vodModule.showMovie = function (movie) {
		vodModelService.getProductsOfMovie(movie).then(function (products) {
			if (!products.length) {
				bmisc.alert(tr('vodExpired'));
			} else if (products.length === 1) {
				am.push(vodContent, products[0]);
			} else {
				am.push(vodCategory, movie);
			}
		}).done();
	};
})(
	BeeSmart,
	Q,
	BeeSmart.misc,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	BeeSmart.portal.local.formats,
	$.ModuleDom,
	BeeSmart.VodModel.Movie,
	BeeSmart.VodModel.MultivariantProduct,
	BeeSmart.PurchaseModel.Product,
	BeeSmart.PurchaseModel.PurchasedProduct
);


(function (BS, q, mm, am, ui) {

	var bsMain = mm.getModule('BeeSmartMain');
	var storeService;
	var maxPinLen;
	var minPinLen;
	var em = BS.evMgr;
	var ModuleDom = $.ModuleDom;
	var languageCode;

	BS.config.getInstanceAvailabilityPromise().then(function (cfgMgr) {
		minPinLen = cfgMgr.get('User.MIN_PIN_SIZE');
		maxPinLen = BS.config.get('User.MAX_PIN_SIZE');
	});

	BS.evMgr.bind('onBeeSmartLoginSuccess', function () {
		storeService = bsMain.storeService;
		languageCode = BS.portal.user.language.label;
	});

	var PriceListDialog = new bsMain.MenuListDialog('priceListDialog', null, {
		onBeforeExit: function (key) {
			switch (key) {
			case 'ok':
				return true;
			}
		}
	});

	PriceListDialog.init = function (caller, products, isGift) {
		var mld = bsMain.MenuListDialog;
		var ActionItem = mld.ActionItem;
		var ActionList = mld.ActionList;
		var infos = new ActionList();

		bsMain.MenuListDialog.prototype.init.call(this, tr('priceListTitle'));

		products.forEach(function (prod) {
			if (!prod.purchaseInfo.isInUsersSubscription())
				return;
			prod.priceList
				.sort(byPriceTypePriceValueAndLanguage)
				.forEach(function (priceItem) {
					if (isGift && priceItem.billingType !== 'one-time')
						return;
					var description = storeService.getPriceItemDescription(priceItem, prod.title);
					var item = new ActionItem({
						key: {
							product: prod,
							priceItem: priceItem
						},
						imageLink: '',
						iconLink: '',
						name: description.toLocaleString(languageCode),
						selected: ''
					});
					infos.addActionItem(item);
				});
		});
		this.fillActionMenu(infos.getList());

		function byPriceTypePriceValueAndLanguage(a, b) {
			var aPrice = a.price;
			var bPrice = b.price;

			if (aPrice.type !== bPrice.type) {
				return aPrice.type === 'currency' && bPrice.type === 'points' ? -1 : 1;
			} else if (aPrice.value !== bPrice.value) {
				return bPrice.value - aPrice.value;
			} else {
				return 0;
			}
		}
	};

	bsMain.register(PriceListDialog);


	function ContentPurchase() {
		ui.Dialog.apply(this, arguments);
	}

	ContentPurchase.prototype = {
		dom: {},
		isInitialized: null,
		pin: '',
		contentData: null,
		callbackFunc: null,
		accessGuard: null,
		clearInputFields: function () {
			this.dom.contentPurchasePinInput.clear();
			this.pin = '';
		},
		init: function (callerAppId, callbackFunc, contentData) {
			var that = this;
			var _formats = BS.portal.local.formats;
			ui.Dialog.prototype.init.apply(that, arguments);
			if (!callbackFunc || !contentData) {
				BS.logger.info('ContentPurchase pushed with insufficient parameters!!! ');
				am.pop(false);
				return;
			}

			that.callbackFunc = callbackFunc || function () {
					return q({todo: BS.F});
				};

			if (!that.isInitialized) {
				var cntSvg = $('#contentPurchaseDialog').remove().show();
				that.replaceContentWith(cntSvg);
				that.isInitialized = true;

				that.dom.contentPurchasePinInput = cntSvg.find('.contentPurchasePinInput');
				that.dom.contentPurchasePinInput = new ui.PasswordField(
					that.dom.contentPurchasePinInput, {'maxFieldEntries': maxPinLen});
				that.dom.contentPurchasePrice = cntSvg.find('.contentPurchasePrice');
				that.dom.purchaseDisclaimer = cntSvg.find('#purchaseDisclaimer');
				that.dom.subscriptionPurchaseDisclaimer =
						cntSvg.find('#subscriptionPurchaseDisclaimer');
				that.dom.availableFrom = cntSvg.find('.contentPurchaseAvailableFrom');
				var purchaseMsg = cntSvg.find('.purchaseMsg');
				that.feedback = new ui.InplaceFeedback(purchaseMsg, {autoHide: 2000});
				that.accessGuard = new bsMain.AccessGuard();
				that.dom.changePriceDescriptionClass = function (type) {
					if (type === 'subscription') {
						that.dom.contentPurchasePrice.removeClass('sub-title');
						that.dom.contentPurchasePrice.addClass('xl-title');
					} else {
						that.dom.contentPurchasePrice.removeClass('xl-title');
						that.dom.contentPurchasePrice.addClass('sub-title');
					}
				};
			}

			that.dom.contentPurchasePrice.svg('');
			var purchaseDisclaimer = contentData.purchaseDisclaimer;
			if (purchaseDisclaimer) {
				that.dom.subscriptionPurchaseDisclaimer.svg(purchaseDisclaimer);
				that.dom.purchaseDisclaimer.svg('');
			} else {
				that.dom.purchaseDisclaimer.svg(tr('purchaseDisclaimer'));
				that.dom.subscriptionPurchaseDisclaimer.svg('');
			}

			that.contentData = contentData;
			if (contentData.dialogTitle) {
				this.update({title: contentData.dialogTitle});
			}
			that.dom.changePriceDescriptionClass('other');
			if (contentData.subscription) {
				that.dom.changePriceDescriptionClass('subscription');
				var priceText = '';
				if (contentData.priceItem) {
					priceText = storeService.getPriceItemDescription(contentData.priceItem);
				}
				that.dom.contentPurchasePrice.svg(priceText);
				that.dom.availableFrom.hide();
			} else if (contentData.product && contentData.priceItem) {
				that.dom.contentPurchasePrice.svg(tr('ContentPurchaseRentalPeriod')
					.concat(storeService.getPriceItemDescription(contentData.priceItem,
						contentData.product.title)));
				if (contentData.product && contentData.product.isPreOrder()) {
					that.dom.availableFrom.svg(tr('ContentPurchaseAvailableFrom').sprintf(
						new Date(contentData.product.consumptionPeriod.from).toFormatedString(
							_formats.dateTime)
					));
					that.dom.availableFrom.show();
				} else {
					that.dom.availableFrom.hide();
				}

			} else if (contentData.price) {
				that.dom.contentPurchasePrice.svg('%s %s %s'.sprintf(
					tr('content_purchase_price'),
					contentData.price.formatPrice(_formats.price)
						.toLocaleString(BS.portal.language.label),
					_formats.currencySign
				));

			} else if (contentData.price === 0) {
				that.dom.contentPurchasePrice.svg(tr('free'));
			}

			if (that.accessGuard.isFalseGuessing())
				that.feedback.reinit();

			that.clearInputFields();
		},
		onInputEvent: function (key) {
			var that = this;
			var _super = ui.Dialog.prototype.onInputEvent.bind(this);
			var acsGrd = that.accessGuard;
			if (that.lock)
				return;

			switch (key) {
			case 'blue':
				that.clearInputFields();

				break;
			case 'left':
			case 'back':
				ui.Dialog.prototype.onInputEvent.call(that, key);

				break;
			case 'ok':
				var inpPin = that.pin;
				if (acsGrd.isFalseGuessing())
					return;

				that.clearInputFields();
				that.lock = true;

				BS.makeValidPinSynchronization(inpPin, 'system-of-parent')
					.then(function (isMatching) {
						if (isMatching) {
							acsGrd.resetProperties();
							return q({
								content: that.contentData,
								md5Pin: inpPin.md5()
							});
						}
						if (acsGrd.recordWrongAttempt().isFalseGuessing()) {
							that.feedback
								.setProperties({autoHide: undefined})
								.show('errSmall', makeMessage(acsGrd.lockoutTime));
							acsGrd.resetPropertiesAfter(that.feedback.hide);
							acsGrd.startLock(function () {
								that.feedback.updateText(makeMessage(acsGrd.lockoutTime));
							});
						} else
							that.feedback.setProperties({autoHide: 2000});
						throw {message: tr('pinInvalid')};
					})
					.then(function (options) {
						ui.toggleLoader(true);
						return that.callbackFunc(options);
					})
					.then(function (result) {
							var dfr = q.defer();
							that.lock = false;
							var id = that.contentData ? that.contentData.id : undefined;
							_super(key, id, true, function () {
								(result.todo || function () {
								})();
								dfr.resolve(true);
							});
							return dfr.promise;
						},
						function (xRes) {
							that.lock = false;
							var msg = xRes.message || tr('UNKNOWN_ERROR');
							BS.logger.trace('ContentPurchase: %s', msg);
							if (xRes instanceof Error || xRes instanceof BS.request.Result) {
								msg = tr('UNKNOWN_ERROR');
							}
							that.feedback.show('errSmall', msg);
						}
					)
					.done(function () {
						ui.toggleLoader(false);
					});

				break;
			default:
				if (acsGrd.isFalseGuessing())
					return;
				that.feedback.hide();
				if ((key === '0' || parseInt(key)) && that.pin.length <= maxPinLen) {
					that.pin += key;
					that.dom.contentPurchasePinInput.push(that.pin.length);
				}
				break;
			}

			function makeMessage(value) {
				return '%s %s %s'.sprintf(tr('LockedWait'), value, tr('s'));
			}
		}
	};
	Object.extend(ContentPurchase, ui.Dialog);

	var contentPurchase = new ContentPurchase(
		'content_purchase',
		{
			type: 'popup',
			listenTo: ['epg'],
			helpId: 'content_purchase'
		},
		{
			x: 390,
			y: 185,
			width: 500,
			height: 350,
			layer: '#dialogs_layer3',
			buttons: [
				['back', 'back'],
				['blue', 'reset_field'],
				['confirm', 'ok']
			],
			exitKeys: ['back', 'ok'],
			onBeforeExit: function () {
				return true;
			}
		}
	);
	contentPurchase.destroy = function () {
		var that = this;
		this.hide(function () {
			that.__proto__.destroy.call(this);
		});
	};

	bsMain.register(contentPurchase);

	var callOperatorDialog = new bsMain.InfoDialog(
		'callOperatorDialog',
		{
			onBeforeExit: function () {
				return true;
			},
			buttons: [
				['confirm', 'close']
			],
			exitKeys: ['ok', 'back']
		}
	);
	bsMain.register(callOperatorDialog);

	var payPoints = new BS.App(
		'payPoints',
		{helpId: 'payPoints'}
	);

	payPoints.init = function () {
		var infoDialog = new bsMain.InfoDialog(
			'payPointsWarningDialog',
			{
				onBeforeExit: function (key) {
					if (key === 'ok') {
						am.pop();
					}
				}
			}
		);
		bsMain.register(infoDialog);

		this.getBalance().then(function (balance) {
			am.push(
				infoDialog,
				tr('payPointsDialogTitle'),
				tr('payPointsInsufficientBalance').sprintf(balance)
			);
		}).done();

	};

	payPoints.focus = function (caller) {
		if (caller === 'payPointsWarningDialog') {
			mm.getApp(caller).unregister();
			am.pop();
		}
	};

	payPoints.getBalance = function () {
		return BS.request.Get('/restapi/rest/%d/%d/paypoints/balance'
			.sprintf(BS.portal.user.regionId, BS.portal.user.userId), {
			accept: 'json',
			preventEvent: true
		}).then(function (response) {
			return response.data.amount;
		}).catch(function (ex) {
			BS.logger.info('PAY POINTS :: Could not get balance, reason %s', ex);
			throw ex;
		});
	};


	var bss = BS.BeeSmartSettings;
	var ssDom;
	var payPointsSetup = new BS.App('settingsPaypoints', {helpId: 'settingsPaypoints'});
	payPointsSetup.init = function () {
		var that = this;
		that.locked = false;
		ssDom = mm.getApp('Settings').dom;
		ui.toggleLoader(true);

		if (!that.dom) {
			that.dom = new ModuleDom(
				['settingsPaypoints', 'paypointsAccountBalance'],
				{
					show: function () {
						ssDom.showSubModule('settingsPaypoints', 'settingsPaypoints');
						ssDom.actionBar([
							['back', 'back'],
							['empty', null],
							['empty', null],
							['empty', null]
						]);
					},
					hide: function () {
						ssDom.actionBar([
							['back', 'toMainMenu'],
							['vertical', 'select'],
							['empty', null],
							['confirm', 'confirm']
						]);
						that.dom['paypointsAccountBalance'].text('');
						ssDom.hideSubModule();
					}
				}
			);
		}

		var url = '/restapi/rest/%d/%d/paypoints/balance'
			.sprintf(BS.portal.user.regionId, BS.portal.user.userId);
		BS.request.Get(url, {
			accept: 'json',
			preventEvent: true
		}).then(function (response) {
			var data = response.data;
			var paypointsAccountBalance = '%s: %d %s'.sprintf(
				tr('sett_paypointsBalance'),
				data['amount'],
				BS.config.get('services.external.paypoints.SYMBOL')
			);
			that.dom['paypointsAccountBalance'].text(paypointsAccountBalance);
		}).catch(function () {
			that.dom['paypointsAccountBalance'].text(tr('CouldNotGetPayPointsBalance'));
		}).finally(function () {
			that.dom.show();
			ui.toggleLoader(false);
			that.locked = false;
		}).done();
	};

	payPointsSetup.onInputEvent = function (key) {
		var that = this;

		if (that.locked) return;

		switch (key) {
		case 'back':
		case 'left':
			that.dom.hide();
			am.pop();
			break;
		}
	};

	em.bind('onBeeSmartReady', function () {
		bss.register(payPointsSetup);
		if (BS.skinConfiguration.enablePayPointMenuItem)
			bss.nodeExtra.appendChild(new bss.SettingNode('settingsPaypoints',
				'settingsPaypoints', ['defaultUser', 'subUser'], 3, payPointsSetup));
	});

	new BS.Module({
		id: 'Purchase',
		startupTasks: [
			{
				name: 'Purchase UI',
				payload: function (params, callback) {
					callback();
				}
			}
		]
	}).register(payPoints);

})(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui
);


(function (BS) {

	var mm = BS.modMgr;
	var am = BS.appMgr;
	var ui = BS.ui;
	var BeeSmartMain = mm.getModule('BeeSmartMain');
	var misc = mm.getApp('Misc');
	var sentGifts = [];
	var regionId;
	var userId;
	var giftRepo = null;


	BS.evMgr.bind('onBeeSmartLoginSuccess', function () {
		giftRepo = BeeSmartMain.giftRepository;
		regionId = BS.portal.user.regionId;
		userId = BS.portal.user.userId;
	});
	var giftBuddiesPopup = new BeeSmartMain.MenuListDialog(
		'gift_menu_dialog',
		null,
		{
			onBeforeExit: function (key) {
				var myAlert;
					switch (key) {
				case 'ok':
					var menuItem = this.actionMenu.currentInfo();
					if (menuItem.selected === 1) {
						myAlert = new BS.ui.Alert({autoHide: 3000});
						myAlert.show(tr('gift_already_sent'));
						return false;
					} else if (menuItem.selected === 2) {
						myAlert = new BS.ui.Alert({autoHide: 3000});
						myAlert.show(tr('gift_already_sent_pending'));
						return false;
					}
					break;
				}
			}
		}
	);
	giftBuddiesPopup.init = function (caller, title, isMultiple, purchaseGroupId) {
		var that = this;
		var contacts = [];
		ui.toggleLoader(true);
		BeeSmartMain.MenuListDialog.prototype.init.call(that, title, isMultiple);

		BS.request.Get('/restapi/rest/%d/%d/social/buddies'.sprintf(regionId, userId), {
			accept: 'json'
		}).then(function (response) {
			if (response && response.data) {
				contacts = response.data.filter(function (buddy) {
						return buddy.isContactRequestApproved === 1;
					}).map(function (buddy) {
						return {
							name: buddy.prop_messaging_profile_nickname,
							key: {'receiverId': buddy.prop_home_group_user_id,
								'purchaseGroupId': purchaseGroupId},
							selected: 0,
							imageLink: buddy.avatarLink
						};
					});
			}
		}).then(function() {
			sentGifts = [];
			return BS.request.Get('/restapi/rest/%d/%d/social/gifts/sent'.sprintf(
				regionId, userId), {
				accept: 'json'
			}).then(function (response) {
				if (response.data !== null) {
					sentGifts = response.data;
					for (var i = 0; i < sentGifts.length; i++) {
						for (var j = 0; j < contacts.length; j++) {
							if (sentGifts[i].receiver.id === contacts[j].key.receiverId &&
								sentGifts[i].purchaseGroupId === purchaseGroupId) {
								contacts[j].selected = sentGifts[i].accepted === true ? 1 : 2;
							}
						}
					}
				}
			}).catch(function (e) {
				BS.logger.info('Error getting sent gifts: ' + e.toString(true));
			});
		}).then(function() {
			that.fillActionMenu(contacts);
		}).catch(function() {
			BS.logger.info('Error getting buddies.');
		}).finally(function() {
			ui.toggleLoader(false);
		}).done();

		that.purchaseGroupId = purchaseGroupId;
	};
	giftBuddiesPopup.destroy = function () {
		var that = this;
		this.hide(function () {
			that.__proto__.destroy.call(this);
		});
	};
	giftBuddiesPopup.getSentGifts = function () {
		sentGifts = [];
		BS.request.Get('/restapi/rest/%d/%d/social/gifts/sent'.sprintf(regionId, userId), {
			accept: 'json'
		}).then(function (response) {
			if (response.data !== null) {
				response.data.forEach(function (gift) {
					if (gift.sender.id == userId) {
						sentGifts.push(gift);
					}
				});
			}
		}).catch(function (e) {
			BS.logger.info('ERROR: Get sent gifts failed.' + e.toString(true));
		}).done();
	};

	BeeSmartMain.register(giftBuddiesPopup);

	var communityMessagePopup = new BS.App('communityMessagePopup', {
		inputMapper: BS.App.portalDirectionKeyMapper
	});

	communityMessagePopup.onInputEvent = function (keyPressedName) {
		var that = this;
		switch (keyPressedName) {
		case 'right':
			break;
		case 'back':
		case 'left':
			am.pop(true);
			break;
		case 'up':
		case 'down':
			this.actionMenu[keyPressedName === 'up' ? 'previous' : 'next']();
			break;
		case 'ok':
			var info = that.actionMenu.currentInfo();
			var mainmenu = misc.adapterMainMenu;
			switch (info.key) {
			case 'buddy':
				mainmenu.showCModule('contactsMain', ['myContacts', 'invitations']);
				break;
			case 'gift':
				mainmenu.showCModule(
					'Vod',
					[BeeSmartMain.categoryRepository.Category.onDemandIds.GIFTS]
				);
				break;
			case 'share':
				mainmenu.showCModule('MyRecordings');
				break;
			case 'epgRecommendation':
				mainmenu.showCModule('tvPanel', ['tvRecommendations', 'friendly']);
				break;
			case 'messageInbox':
				if (am.lastLoaded('MessageInbox') || !am.interuptable())
					return;
				mainmenu.showCModule('sidebar_services', ['MessageInbox']);
				break;
			}
			break;
		default:
			break;
		}
	};

	communityMessagePopup.init = function (caller, evt) {
		var infos = [];
		var data = evt.data.body;
		if (data.numberOfNewBuddyRequests && data.numberOfNewBuddyRequests > 0)
			infos.push({name: tr('buddies')
				+ data.numberOfNewBuddyRequests, key: 'buddy', imageLink: '#buddy-big'});
		if (data.numberOfNewGifts && data.numberOfNewGifts > 0) {
			giftRepo.updateAll();
			infos.push({name: tr('gifts') + ' '
				+ data.numberOfNewGifts, key: 'gift', imageLink: '#recordingGift-big'});
		}
		if (data.numberOfNewShares && data.numberOfNewShares > 0)
			infos.push({name: tr('shares') + ' '
				+ data.numberOfNewShares, key: 'share', imageLink: '#contentSharedImage_menu'});
		if (data.numberOfNewEpgRecommendations && data.numberOfNewEpgRecommendations > 0) {
			infos.push({name: tr('epgrecommendations') + ' '
				+ data.numberOfNewEpgRecommendations,
				key: 'epgRecommendation', imageLink: '#recordingRecommend-big'});
		}
		if (data.numberOfHISMessages && data.numberOfHISMessages > 0)
			infos.push({name: tr('newMessages') + ' '
				+ data.numberOfHISMessages, key: 'messageInbox', imageLink: ''});
		this.dom.fillActionMenu(infos);
		this.dom.showActionModule();

		communityMessagePopup.notifyChange(data);
	};
	communityMessagePopup.destroy = function () {
		this.dom.hideActionModule();
	};
	communityMessagePopup.focus = function () {
		am.pop();
	};
	communityMessagePopup.startup = function () {
		communityMessagePopup.dom = new $.ModuleDom(
			[
				'communityMessageModule', 'communityMessageSelector',
				'communityMessageMenu', 'communityMessageButton'
			],
			{
				selectorStep: 30,
				showActionModule: function () {
					var height = communityMessagePopup.actionMenu.size() * this.selectorStep + 65;
					this['communityMessageMenu'].first().attr('height', height);
					this['communityMessageButton'].attr('transform',
							'translate(20,' + (height - 45) + ')');
					this['communityMessageModule'].show();
					this['communityMessageMenu'].show();
					this['communityMessageButton'].show();
				},

				hideActionModule: function () {
					this['communityMessageModule'].hide();
					this['communityMessageMenu'].hide();
					this['communityMessageButton'].hide();
				},

				fillActionMenu: function (infos) {
					var r = communityMessagePopup;
					if (!r.aMenu)
						r.aMenu = new ui.Menu(this['communityMessageSelector'][0]);
					var items = [];

					for (var i in infos) {
						items.push(ui.template('templateCommunityMessage', {
							'name': infos[i].name,
							'imageLink': infos[i].imageLink
						}));
					}

					if (!r.actionMenu) {
						r.actionMenu = r.aMenu.newMenuItems();
						r.actionMenu.setItems(items, infos);

					} else
						r.actionMenu.setItems(items, infos);
					r.actionMenu.show();
				}
			},
			function () {
				this.selectorStep = this['communityMessageSelector'][0].getAttributeNS(NS.bee,
					'selectorStep');
			}
		);
		try {
			communityMessagePopup.actionBar =
				new ui.ActionBar(communityMessagePopup.dom['communityMessageButton']);
		} catch (ex) {
		}

	};

	var COMM_MSG_LISTENER_NEW_GIFT = 1;
	var HIS_MSG_LISTENER_NEW_MSG = 4;
	communityMessagePopup.listenersStack = [];
	communityMessagePopup.oldData = null;
	communityMessagePopup.listenersTypes = {
		NEW_GIFT: COMM_MSG_LISTENER_NEW_GIFT,
		NEW_MESSAGE: HIS_MSG_LISTENER_NEW_MSG
	};

	communityMessagePopup.registerListener = function (callback, listenerType) {
		communityMessagePopup.listenersStack.push({'callback': callback, 'type': listenerType});
	};
	communityMessagePopup.notifyChange = function (data) {
		var stack, i;

		if (
			!communityMessagePopup.oldData
			|| communityMessagePopup.oldData.numberOfNewGifts !== data.numberOfNewGifts
			) {
			stack = communityMessagePopup.listenersStack;
			for (i in stack) {
				if (stack[i].type === COMM_MSG_LISTENER_NEW_GIFT) {
					stack[i].callback();
				}
			}
		}

		if (
			!communityMessagePopup.oldData
			|| communityMessagePopup.oldData['numberOfHISMessage'] !== data['numberOfHISMessage']
			) {
			stack = communityMessagePopup.listenersStack;
			for (i in stack) {
				if (stack[i].type === HIS_MSG_LISTENER_NEW_MSG) {
					stack[i].callback();
				}
			}
		}

		communityMessagePopup.oldData = data;
	};

	BS.msgMgr.registerMsgType('CommunityStatus');
	BS.evMgr.bind('msg:onCommunityStatus', function (e) {
		var clearStackOfPopups = true;
		while (clearStackOfPopups !== false) {
			if (!BS.appMgr.isStackInteruptable)
				BS.appMgr.pop();
			else
				clearStackOfPopups = false;
		}

		am.push(communityMessagePopup, e);
	});
	BeeSmartMain.register(communityMessagePopup);

})(BeeSmart, Q);


(function (BS, q, keys, mm, am, ui, ModuleDom, PVR) {
	var recMain = new BS.App(
		'MyRecordings',
		{
			isDefault: true,
			helpId: 'sidebar_myrecordings',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	var showRepo = BS.ShowModel.showRepository;
	var showService = BS.ShowModel.showService;
	var misc = mm.getApp('Misc');
	var BeeSmartMain = mm.getModule('BeeSmartMain');
	var ignoreCommandInvokeEvent = false;
	var rcHasEpgShortcut = null;
	var log = BS.logger.log;
	var MAX_DAYS_OFFSET = null;
	var tvLib;
	var storeService;
	var prodRepo;
	var liveTv = mm.getApp('liveTv');
	var currentlyRunningInstantRec;
	var user;
	var languageCode = null;

	function getNpvrProducts() {
		return prodRepo.findByType('npvr-quota')
			.concat(prodRepo.findByType('npvr-quota', prodRepo.Kinds.PurchasedProduct))
			.reduce(function (currentData, product) {
				if (!(product.id in currentData.map)) {
					currentData.list.push(product);
					currentData.map[product.id] = product;
				}
				return currentData;
			}, {map: {}, list: []}).list;
	}

	BeeSmartMain
		.getInstanceAvailabilityPromiseOf('TvLibrary')
		.then(function (argTvLibrary) {
			tvLib = argTvLibrary;
		});

	recMain.MODE_SHARED_CONTENT = 'MODE_SHARED_CONTENT';
	recMain.MODE_MY_RECORDINGS = 'MODE_MY_RECORDINGS';
	recMain.MODE_SCHEDULED_RECORDINGS = 'MODE_SCHEDULED_RECORDINGS';
	recMain.MODE_SERIES_RECORDINGS = 'MODE_SERIES_RECORDINGS';
	recMain.MODE_MY_PICTURES = 'MODE_MY_PICTURES';
	recMain.MODE_HOME_PVR = 'MODE_HOME_PVR';
	recMain.MODE_NPVR = 'MODE_NPVR';
	recMain.recMainMenuItems = [];

	BS.evMgr.bind('onBeeSmartReady', function () {
		var tmpMenuItems = {
			finishedRec: {
				module: 'myRec',
				name: 'recMain_myrecordings',
				navigationTitle: 'myRecordingsProgramRecTitle',
				key: recMain.MODE_MY_RECORDINGS,
				introText: 'myRecordingsDescr',
				position: 1
			},
			scheduledRec: {
				module: 'myRec',
				name: 'recMain_scheduledrecordings',
				navigationTitle: 'myRecordingsSchedProgRecTitle',
				key: recMain.MODE_SCHEDULED_RECORDINGS,
				introText: 'myRecordingsSchedProgRecDescr',
				position: 2
			},
			seriesRec: {
				module: 'myRec',
				name: 'recMain_seriesdrecordings',
				navigationTitle: 'myRecordingsSeriesRecordingsTitle',
				key: recMain.MODE_SERIES_RECORDINGS,
				introText: 'myRecordingsSeriesRecordingsDescr',
				position: 3
			},
			quota: {
				module: 'RecordingQuota',
				name: 'changeRecQuota',
				navigationTitle: 'changeRecQuota',
				key: recMain.MODE_NPVR,
				position: 6
			}
		};

		if (PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.Recording)) {
			recMain.recMainMenuItems.push(tmpMenuItems.finishedRec);
			recMain.recMainMenuItems.push(tmpMenuItems.scheduledRec);
			if (!PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.LocallyPersisted)
				&& BS.skinConfiguration.enableRecordingQuotaMenuItem) {
				recMain.recMainMenuItems.push(tmpMenuItems.quota);
			}
		}

		if (PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.Series)
			&& !PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.LocallyPersisted)
		) recMain.recMainMenuItems.push(tmpMenuItems.seriesRec);

		user = BS.portal.user;
		storeService = BeeSmartMain.storeService;
		prodRepo = BeeSmartMain.productRepository;
		languageCode = BS.portal.user.language.label;
	});


	recMain.addMenuItem = function (module, name, navigationTitle, key, introText, position) {
		recMain.recMainMenuItems.push({
			module: module,
			name: name,
			navigationTitle: navigationTitle,
			key: key,
			introText: introText,
			position: position
		});
	};

	recMain.createMenu = function () {
		var r = recMain;
		r.menu = new ui.Menu(r.dom.recordingsMenuSelector[0]);
		r.currentSubMenu = r.menu.newMenuItems();
		r.recMainMenuItems.sort(function (a, b) {
			return a.position - b.position;
		});

		var infos = r.recMainMenuItems.map(function (menuItem) {
			return {
				module: menuItem.module,
				name: tr(menuItem.name),
				key: menuItem.key,
				introText: menuItem.key === 'MODE_NPVR' ? menuItem.introText :
					tr(menuItem.introText)
			};
		});
		var items = infos.map(function (menuItem) {
			return menuItem.name;
		});
		items = ui.template('standardMenuTemplate',
			{'text': items, 'selector': r.dom.recordingsMenuSelector});
		r.currentSubMenu.setItems(items, infos).show();
		r.currentSubMenu.onFinish(function (index, info) {
			recMain.dom.subModuleDescription(info.introText);
		});
	};

	recMain.getRecMainItemByKey = function (key) {
		for (var i = 0, len = recMain.recMainMenuItems.length; i < len; i++) {
			if (recMain.recMainMenuItems[i] && recMain.recMainMenuItems[i].key === key)
				return recMain.recMainMenuItems[i];
		}
		return null;
	};

	recMain.onInputEvent = function (key) {
		if (this.lock && key !== 'back')
			return;
		var cInfo;
		if (this.currentSubMenu)
			cInfo = this.currentSubMenu.currentInfo();

		switch (key) {
		case 'left':
		case 'back':
			am.pop();

			break;
		case 'up':
		case 'down':
			if (cInfo === null)
				return;
			if (key === 'up')
				this.currentSubMenu.previous();
			else
				this.currentSubMenu.next();

			break;
		case 'right':
		case 'ok':
			if (cInfo === null)
				return;

			recMain.setMode(cInfo.key);
			var app = BS.modMgr.getApp(cInfo.module);
			if (app) am.push(app);
		}
	};

	recMain.refreshRecordings = function (cback) {
		if (upgradeRecordingsTimer) {
			upgradeRecordingsTimer.clear();
			upgradeRecordingsTimer = null;
		}
		BS.recorder.list(cback, BS.device.lpvrEnabled === false);
	};

	recMain.init = function (caller, subModule) {
		var that = this;
		that.lock = true;
		var args = arguments;

		var promise = PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.LocallyPersisted) ?
			q() : prodRepo.updateAllProductsOfType('npvr-quota', true);

		promise.then(function () {
			var quotaMenuItem = recMain.recMainMenuItems.filter(function (mItem) {
				return mItem.module === 'RecordingQuota';
			})[0];
			if (quotaMenuItem)
				quotaMenuItem.introText = recordingQuota.getQuotaSummary();

			try {
				recMain.refreshRecordings(function () {
					if (!am.isLoaded('MyRecordings')) {
						return;
					}
					var cInfo;

					ui.toggleLoader(false);
					if (!that.menu)
						recMain.createMenu();
					that.currentSubMenu.jump(0, true);

					cInfo = that.currentSubMenu.currentInfo();
					that.dom.subModuleDescription(cInfo === null ? '' : cInfo.introText);
					that.dom.showSubModule('recordingsInfoText', '');

					misc.dom.actionBar.set([
						['back', 'toMainMenu'],
						['vertical', 'select'],
						['empty', null],
						['confirm', 'confirm']
					]);

					that.dom.recordingModule.show();
					if (am.lastLoaded('MyRecordings')) {
						that.dom.recordingsMenu.show();
					}

					try {
						if (subModule && subModule !== misc.adapterMainMenu.appId) {
							am.push(mm.getApp(subModule));
						}
					} catch (e) {
						BS.logger.info(
							'Desired application is not registered in BeeSmart or does not ' +
							'exist: %s', e.message
						);
					}
				});
			} catch (e) {
				if (e === 'recorder-list-in-progress' && !am.isLoaded('MyRecordings')) {
					setTimeout(function () {
						recMain.init.apply(recMain, args);
					}, 500);
				}
			}
		}).finally(function () {
			that.lock = false;
		});
	};

	recMain.destroy = function () {
		this.dom.hideSubModule();
		this.dom.recordingModule.hide();
		this.dom.recordingsMenu.hide();
		prodRepo.clearProductRepoData('npvr-quota');
	};

	recMain.blur = function (callingModule) {
		if (callingModule !== misc.adapterMainMenu.appId) {
			recMain.dom.recordingsMenu.hide();
		}
	};

	recMain.focus = function () {
		recMain.dom.showSubModule('recordingsInfoText', '');
		recMain.dom.subModuleDescription(this.currentSubMenu.currentInfo().introText);
		recMain.dom.recordingsMenu.show();

		misc.dom.actionBar.set([
			['back', 'toMainMenu'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'confirm']
		]);
	};
	recMain.startup = function () {
		recMain.dom = new ModuleDom(
			[
				'recordingModule', 'myRec', 'myRecDetails',
				'recordingsMenu', 'recordingsMenuSelector', 'recordingsInfoText'
			],
			{
				upDownArrows: $('#recordingsUpDownArrows'),
				showSubModule: function (name, titleKeyword) {
					name += '';
					var dref = this[name] || $('#' + name);
					if (this.currSB)
						this.currSB.hide();

					if (name === 'recordingsInfoText') {
						misc.dom.navigationPop();
						this.recordingsInfoText.show();

					} else {
						dref.show();
						misc.dom.navigationPush(tr(titleKeyword));
					}

					this.currSB = dref;
				},
				hideSubModule: function () {
					if (this.currSB) {
						this.currSB.hide();
						misc.dom.navigationReset();
					}
				},
				actionBar: function (buttonVector) {
					misc.dom.actionBar.set(buttonVector);
				},
				subModuleDescription: function (desc) {
					this.recordingsInfoText.first().svg(desc);
				}
			}
		);
	};

	recMain.setMode = function (_mode) {
		recMain.mode = _mode;
	};
	recMain.getMode = function () {
		return recMain.mode;
	};

	var recordingQuota = new BS.App(
		'RecordingQuota',
		{
			helpId: 'npvr',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);

	recordingQuota.init = function () {
		var that = this;
		that.dom = that.dom || new ModuleDom(
				[
					'npvrSelector', 'npvrSubModuleInfoText', 'recordingsInfoText',
					'npvrModuleHolder',
					'npvrSubModuleInfoTextHolder', 'npvrSubModuleTextArea'
				], {
					actionBar: function (buttonVector) {
						misc.dom.actionBar.set(buttonVector);
					},
					showSubModule: function (titleKeyword) {
						misc.dom.navigationPush(tr(titleKeyword));
					},
					generateMenu: function (prods) {
						var items = [];
						var infos = [];

						if (that.menu) {
							that.menu.destroy();
							that.menu = null;
						}
						that.menu = new ui.Menu(that.dom.npvrSelector[0]);

						prods.forEach(function (item) {
							items.push(ui.template('recordingsNpvrListTemplate', {
								name: item.title,
								link: that.isProductPurchasedOrFree(item.id) ?
									'#okSmall' : '#blank'
							}));
							infos.push(item);
						});

					that.subMenu = that.menu.newMenuItems().setItems(items, infos).show();
				},
				setNewInfoFirstElement: function (prod) {
					var ps = storeService.getProductPurchaseStatus(prod.id);
					var priceItemDesc = tr('unavailable');
					if (prod instanceof prodRepo.PurchasedProduct) {
						priceItemDesc = storeService.getPriceItemDescription(prod.priceItem,
							prod.title);
					} else if (ps.isInOtherSubscription()) {
						var products = [prodRepo.findById(prod.id)];
						var names = storeService.getSubscriptionsOfProducts(products)
							.map(function (s) {
								return s.title;
							});
						priceItemDesc = tr('npvrNotAvailableInSubscription').sprintf(names);
					} else if (ps.isFree()) {
						priceItemDesc = tr('free');
					} else if (!prod.clientPurchaseEnabled) {
						priceItemDesc = tr('callOperatorNPVRPurchase');
					} else {
						priceItemDesc = storeService.getPriceItemDescription(
							prod.getCheapestPriceItem(), prod.title);
					}

						var svg = ui.template('npvrSubModuleInfoText', {
							name: prod.title,
							priceItemDesc: priceItemDesc,
							description: prod.details.description
						});
						that.dom['npvrSubModuleTextArea'].svg(svg);
					}
				}, function () {
					that.menu = new ui.Menu(this.npvrSelector[0]);
					that.subMenu = that.menu.newMenuItems();
				});

		that.dom.recordingsInfoText.hide();
		that.dom.npvrSubModuleInfoTextHolder.show();
		that.dom.npvrModuleHolder.show();

		var ssDom = that.dom;
		ssDom.actionBarNotPurchased = [
			['back', 'back'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'buyProduct']
		];
		ssDom.actionBarPurchased = [
			['back', 'back'],
			['vertical', 'select'],
			['empty', null],
			['empty', null]
		];
		ssDom.showSubModule('npvrQuotaTitle');

		var products = getNpvrProducts();

		if (products.length === 0) {
			ui.generalAlert('npvrQuotaNotAvailable');
			am.pop();
			return;
		}

		ssDom.generateMenu(products);

		var prod = that.subMenu.currentInfo();
		ssDom.setNewInfoFirstElement(prod);

		var ps = storeService.getProductPurchaseStatus(prod.id);
		if (ps.isPurchasedOrFree() || ps.isInOtherSubscription())
			ssDom.actionBar(ssDom.actionBarPurchased);
		else
			ssDom.actionBar(ssDom.actionBarNotPurchased);
	};

	recordingQuota.isProductPurchasedOrFree = function (id) {
		var status = storeService.getProductPurchaseStatus(id);
		return status.isPurchasedOrFree();
	};

	recordingQuota.onInputEvent = function (key) {
		var that = this;
		var prod;
		var ps;

		switch (key) {
		case 'up':
		case 'down':
			if (key === 'down') {
				that.subMenu.next();
			} else {
				that.subMenu.previous();
			}
			prod = that.subMenu.currentInfo();
			ps = storeService.getProductPurchaseStatus(prod.id);
			that.dom.setNewInfoFirstElement(prod);

			if (ps.isPurchasedOrFree() || ps.isInOtherSubscription()) {
				misc.dom.actionBar.set(that.dom.actionBarPurchased);
			} else {
				misc.dom.actionBar.set(that.dom.actionBarNotPurchased);
			}

			break;
		case 'left':
		case 'back':
			that.dom.npvrModuleHolder.hide();
			that.dom.npvrSubModuleInfoTextHolder.hide();
			am.pop();
			break;

		case 'ok':
			try {
				ui.toggleLoader(true);

				prod = that.subMenu.currentInfo();
				ps = storeService.getProductPurchaseStatus(prod.id);

				if (ps.isPurchasedOrFree() || ps.isInOtherSubscription())
					return;

				if (!prod.clientPurchaseEnabled) {
					storeService.showCallOperatorDialog(prod);
					return;
				}

				var totalPriceItems = storeService.getPriceItemsCount([prod]);
				if (totalPriceItems > 1) {
					am.push(mm.getApp('priceListDialog'), [prod]);
				} else {
					recordingQuota.verifyNpvrQuotaPurchase(prod, prod.priceList[0]);
				}
			} finally {
				ui.toggleLoader(false);
			}
			break;
		}
	};

	recordingQuota.destroy = function () {
		this.dom.npvrModuleHolder.hide();
		this.dom.npvrSubModuleInfoTextHolder.hide();
	};

	recordingQuota.focus = function (caller, args, args1, args2) {
		switch (caller) {
		case 'priceListDialog':
			if (args === 'ok' && args2) {
				recordingQuota.verifyNpvrQuotaPurchase(args2.product, args2.priceItem);
			}
			break;
		}
	};

	recordingQuota.getQuotaSummary = function () {
		var that = this;
		var mItemTxt = ui.template('recordingsInfoTextForNpvr', {
			title: tr('selectNpvrRecQuota'),
			subtitle: tr('activeNpvrQuotas') + ':'
		});

		var products = getNpvrProducts();
		var index = 0;
		mItemTxt = products.reduce(function (svg, prod) {
			if (!that.isProductPurchasedOrFree(prod.id))
				return svg;
			return svg + ui.template('recordingsInfoTextForNpvrItems', {
					'name': prod.title,
					'description': prod.details.description,
					'setPosition': function (offset) {
						return ++index * offset;
					}
				});
		}, mItemTxt);

		return products.length ? mItemTxt : tr('selectNpvrRecQuota');
	};

	recordingQuota.verifyNpvrQuotaPurchase = function (product, priceItem) {
		am.push(mm.getApp('content_purchase'), recordingQuota.purchaseQuota, {
			product: product,
			priceItem: priceItem,
			dialogTitle: tr(product.isPreOrder() ?
				'QuotaPreOrderDialogTitle' : 'quotaPurchaseDialogTitle')
		});
	};

	recordingQuota.purchaseQuota = function (options) {
		var cIndex = recordingQuota.subMenu.currentIndex();
		var itemEl = recordingQuota.subMenu.itemElement(cIndex);
		var product = options.content.product;
		var priceItem = options.content.priceItem;
		return storeService.purchaseProduct(product, priceItem).then(function () {
			itemEl.firstElementChild.nextElementSibling.setAttribute('xlink:href', '#okSmall');
			misc.dom.actionBar.set(recordingQuota.dom.actionBarPurchased);
			return q({message: tr('success')});
		}).catch(function (ex) {
			var error = ex.data.errors[0];
			var priceType = priceItem.price.type;

			BS.logger.debug('NPVR: quota purchase failed because ' + error.errorMessage);

			if (error.errorCode === 500)
				throw ex;

			if (error.errorCode === 304 && recordingQuota.subMenu) {
				return {
					todo: function () {
						storeService.showCallOperatorDialog(recordingQuota.subMenu.currentInfo());
					}
				};
			}

			return q({
				todo: function () {
					var message = storeService.getErrorCodeDescription(error.errorCode);
					if (error.errorCode === 20 && priceType === 'points')
						am.push(mm.getApp('payPoints'));
					else
						ui.generalAlert(message);
				}
			});

		}).finally(function () {
			recMain.currentSubMenu.currentInfo().introText = recordingQuota.getQuotaSummary();
		});
	};

	var myRec = new BS.App(
		'myRec',
		{
			helpId: 'programRecordings',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	myRec.onInputEvent = function (key) {
		if (myRec.lock)
			return;
		var hasSubMenu = this.subMenu && this.subMenu.size() > 0;
		var item = null;

		if (hasSubMenu)
			item = this.subMenu.currentInfo();

		switch (key) {
		case 'up':
		case 'down':
			if (!hasSubMenu)
				break;
			if (key === 'up')
				this.subMenu.previous();
			else
				this.subMenu.next();

			myRec.setActionBar();

			break;

		case 'right':
		case 'ok':
			var popupMenu;
			if (hasSubMenu && item) {
				popupMenu = mm.getApp('recMenuDialog');
				popupMenu.setClip(item);
				am.push(popupMenu);
			} else if (recMain.getMode() === recMain.MODE_SERIES_RECORDINGS) {
				popupMenu = mm.getApp('recMenuDialog');
				popupMenu.setClip(null);
				am.push(popupMenu);
			}
			break;
		case 'blue':
		case 'green':
			var isSeries = recMain.getMode() === recMain.MODE_SERIES_RECORDINGS;
			if (hasSubMenu && item) {
				popupMenu = mm.getApp('recMenuDialog');
				popupMenu.setClip(item);
				myRec.popupMenuDialogAction(key === 'green' ? 'play' :
					isSeries ? 'deleteSeries' : 'delete');
			}
			break;
		case 'left':
		case 'back':
			am.pop(myRec.appID);

			break;
		}
	};

	myRec.checkParentalControlOnClip = function (clip) {
		var show = new BS.ShowModel.TvShow({
			id: clip.clipId, channelId: clip.channelId, title: clip.title,
			description: clip.description, start: clip.start,
			duration: (clip.end - clip.start) / 6e4, ageRating: clip.rating
		});
		if (tvLib.isChannel(clip.channelId)) {
			return show.isShowAllowed();
		} else {
			return user.checkParentalLimit(clip.rating);
		}
	};

	myRec.showRecordingDetails = function (clip) {
		if (myRec.checkParentalControlOnClip(clip)) {
			if (myRecDetails.programDescription) {
				myRecDetails.programDescription.destroy();
			}
			myRec.dom.hide();
			am.push(myRecDetails, clip);
		} else {
			am.push(mm.getApp('pinCheckDialog'), undefined, 'description');
		}
	};

	myRec.setActionBar = function () {
		var hasSubMenu = myRec.subMenu && myRec.subMenu.size() > 0;
		if (hasSubMenu) {
			var clip = this.subMenu.currentInfo();
			var now = new Date().getTime();
			var clipStart = new Date(clip.start).getTime();
			var isScheduled = recMain.getMode() === recMain.MODE_SCHEDULED_RECORDINGS;
			var isPlayable = clip && clipStart < now;
			var isSeries = recMain.getMode() === recMain.MODE_SERIES_RECORDINGS;

			var actionBar = [
				['back', 'back'],
				['vertical', 'select'],
				isScheduled || !isPlayable ?
					['blue', isSeries ? 'deleteSeries' : 'cancel'] :
					['green', 'play'],
				['confirm', 'more']
			];
			misc.dom.actionBar.set(actionBar);
		} else if (recMain.getMode() === recMain.MODE_SERIES_RECORDINGS) {
			misc.dom.actionBar.set([
				['back', 'back'],
				['vertical', 'select'],
				['blue', 'deleteSeries'],
				['confirm', 'more']
			]);
		} else {
			misc.dom.actionBar.set([
				['back', 'back'],
				['empty', null],
				['empty', null],
				['empty', null]
			]);
		}
	};
	myRec.popupMenuDialogAction = function (action) {
		switch (action) {
		case 'play':
			myRecDetails.setClip(recordingsPopupMenu.clip);
			if (!myRec.checkParentalControlOnClip(recordingsPopupMenu.clip))
				am.push(mm.getApp('pinCheckDialog'), undefined, 'play');
			else
				myRecDetails.playContent();

			break;
		case 'delete':
			myRec.lock = true;
			myRecDetails.setClip(recordingsPopupMenu.clip);
			myRecDetails.deleteContent();

			break;
		case 'deleteSeries':
			var series = seriesSelectionDialog.selectedSeries;
			if (series) {
				pvr.deleteSeries(series.seriesUid, series.channelId, function (success) {
					if (success) {
						am.pop();
					}
					myRec.lock = false;
				});
			}

			break;
		case 'adoptEpisode':
			am.push(pvr, recordingsPopupMenu.clip, 'adoptEpisode');

			break;
		case 'description':
			if (!myRec.checkParentalControlOnClip(recordingsPopupMenu.clip))
				am.push(mm.getApp('pinCheckDialog'), undefined, 'description');
			else
				myRec.showRecordingDetails(recordingsPopupMenu.clip);

			break;
		case 'share':
			if (!mm.isAllowed('mediasharing'))
				return;

			ui.toggleLoader(true);
			setTimeout(function () {
				var mapType2ContentType = BS.recMgr.SharedNetworkRecording.mapType2ContentType;
				BS.request.Get(
					'/stb/legacy-gateway/ContentSharingService/getUsersListWithContentShareStatus',
					{
						accept: 'json',
						data: {
							arg0: recordingsPopupMenu.clip.recordId,
							arg1: mapType2ContentType(recordingsPopupMenu.clip.type)
						}
					}).then(function (result) {
						ui.toggleLoader(false);
						var buddyList = [];
						result.data.result.forEach(function (r) {
							buddyList.push({
								name: r.prop_messaging_profile_nickname,
								key: r.prop_ID_messaging_profile,
								selected: r.linkedToSelectedContent,
								imageLink: BS.imageUrlProvider.toImageUrl(r.avatarLink)
							});
						});
						var bPopup = mm.getApp('buddies_menu_dialog');
						am.push(bPopup, buddyList);
					}).catch(function (ex) {
						BS.logger.info('RECORDINGS :: Getting users list with content share ' +
							'status failed %s',	ex);
					}).done();
			}, 50);

			break;
		}
	};

	myRec.focus = function (caller, arg1, arg2, arg3) {
		if (caller === 'myRecDetails') {
			recMain.dom.showSubModule(
				this,
				tr(recMain.getRecMainItemByKey(recMain.getMode()).navigationTitle)
			);

		} else if (caller === 'recMenuDialog' && arg1 === 'ok') {
			this.popupMenuDialogAction(arg3);
			return;

		} else if (caller === 'pinCheckDialog' && arg1 === 'ok' && arg3) {
			this.popupMenuDialogAction(arg3);
			return;

		} else if (caller === 'EpgMatrixView') {
			myRec.lock = true;
			recMain.refreshRecordings(function (result) {
				myRec.dom.updateMenu(result);
				myRec.lock = false;
				myRec.dom.updateStorageInfo();
			});

		} else if (caller === 'pvr' && arg1 && arg1 === true) {
			myRec.lock = true;
			recMain.refreshRecordings(function (result) {
				myRec.dom.updateMenu(result);
				myRec.lock = false;
				myRec.dom.updateStorageInfo();
			});
		}
		myRec.setActionBar();
	};

	myRec.destroy = function () {
		recMain.dom.myRec.hide();
		recMain.dom.hideSubModule();
	};

	myRec.init = function (caller, mode) {
		myRec.currentClipIsPlayable = false;
		var args = arguments;
		myRec.lock = true;
		mode = recMain.getMode();
		try {
			BS.recorder.list(function (result) {
				if (mode === recMain.MODE_SERIES_RECORDINGS) {
					var serInfo = BS.recorder.recordingSeriesList();
					if (serInfo && serInfo.length) {
						am.push(seriesSelectionDialog, serInfo, finishInit);
					} else {
						am.pop();
						ui.generalAlert(tr('noSeriesRecordings'));
					}
				} else {
					finishInit(true);
				}

				function finishInit(proceed) {
					myRec.lock = false;
					if (proceed) {
						myRec.dom.updateMenu(result);
						recMain.dom.showSubModule(
							'myRec',
							tr(recMain.getRecMainItemByKey(recMain.getMode()).navigationTitle)
						);
						myRec.dom.updateStorageInfo();
					} else {
						am.pop();
						am.pop();
					}
				}
			}, false);
		} catch (e) {
			if (e === 'recorder-list-in-progress') {
				setTimeout(function () {
					myRec.init.apply(recMain, args);
				}, 500);
			}
		}
	};

	myRec.getContentTypeImage = function (clip) {
		var imageContentType = '';
		if (clip.isInstant()) {
			imageContentType = '#recordingInstantImage';
		} else {
			imageContentType = clip.end < Date.now() ?
				'#recordingTvShowImage' : '#recordingScheduledImage';
		}
		return imageContentType;
	};

	myRec.getSharedImage = function (isShared) {
		return isShared ? '#contentSharedImage' : '';
	};

	myRec.setItemSharedStatus = function (isShared) {
		myRec.dom.setMyRecL2ShareIcon.trigger('changeShareIcon', {
			'menuItemIndex': myRec.subMenu.currentIndex(),
			'newIcon': myRec.getSharedImage(isShared)
		});
	};

	myRec.startup = function () {
		myRec.alert = new BS.ui.Alert({autoHide: 3000});

		myRec.dom = new ModuleDom(
			[
				'myRecL2ItemTemplate', 'myRec', 'myRecL2Menu',
				'setMyRecL2ShareIcon', 'setStorage'
			],
			{
				show: function () {
					this.myRec.show();
					this.showMenu();
				},
				hide: function () {
					this.myRec.hide();
				},
				showMenu: function () {
					this.myRecL2Menu.show();
				},
				hideMenu: function () {
					this.myRecL2Menu.hide();
				},
				updateMenu: function (_items) {
					var items = [];
					var infos = [];
					var r = myRec;
					var currentTime = Date.now();
					var SCHEDULED_REC = recMain.MODE_SCHEDULED_RECORDINGS;
					var MY_REC = recMain.MODE_MY_RECORDINGS;
					var SERIES_REC = recMain.MODE_SERIES_RECORDINGS;
					r.subMenu = r.menu.newMenuItems();

					_items.forEach(function (rec) {
						var title = '';
						var chNamePlain = '';
						var chName = '';

						var imageContentType = myRec.getContentTypeImage(rec);
						var imageShared = myRec.getSharedImage(rec.isShared());
						var mode = recMain.getMode();

						if (mode === SCHEDULED_REC && (rec.end < currentTime)) {
							return;

						} else if (mode === MY_REC && (rec.end > currentTime)) {
							return;

						} else if (
							mode !== SERIES_REC && rec.partOfSeries && rec.partOfSeries !== null
						) {
							return;

						} else if (mode === SERIES_REC) {
							var ss = seriesSelectionDialog.selectedSeries;
							if (rec.partOfSeries !== ss.seriesUid ||
								rec.channelId !== ss.channelId
							) {
								return;
							}
						}

						try {
							chNamePlain = tvLib.getChannelById(rec.channelId).name;
							chName = chNamePlain + ', ';
						} catch (x) {
							BS.logger.info('RECORDINGS: problem resolving channel id: %d',
								rec.channelId);
							chName = tr('Unknown channel') + ', ';
						}

						if (rec.isInstant()) {
							rec.description = rec.description || tr('instantRecordedClip');
							rec.id = rec.recordId;
							title = rec.title;
						} else {
							title = chName + rec.title;
						}

						var endTime = new Date(rec.end);
						endTime.setSeconds(endTime.getSeconds() + 30);
						endTime.setSeconds(0);

						var c = ui.template('myRecL2ItemTemplate', {
							'chNamePlain': chNamePlain ? chNamePlain.encodeEntities() : '',
							'recTitle': rec.title ? rec.title.encodeEntities() : '',
							'title': title.encodeEntities(),
							'start': new Date(rec.start)
								.toFormatedString(BS.portal.local.formats.date),
							'startTime': new Date(rec.start)
								.toFormatedString(BS.portal.local.formats.time),
							'endTime': endTime.toFormatedString(BS.portal.local.formats.time),
							'duration': ((rec.end - rec.start) / 1000).toMovieFormat()
								.toLocaleString(languageCode),
							'imageShared': imageShared,
							'imageContentType': imageContentType
						});

						items.push(c);
						infos.push(rec);
					});

					if (items.length === 0) {
						r.dom.hideMenu();
						ui.generalAlert(tr('myRecordingsEmpty'));

					} else {
						this.prSelector.show();
						r.dom.show();
						r.subMenu.setItems(items, infos);
						r.subMenu.show();
					}

					myRec.setActionBar();
				},
				updateStorageInfo: function () {
					BS.recorder.quota(function (data) {
						var location = data.location;
						var fullCapacity = data.fullCapacity;
						var freeCapacity = data.freeCapacity;
						var unit = data.unit;

						if (location === 'local') {
							fullCapacity = data.fullCapacity;
							freeCapacity = data.freeCapacity;
						}

						var info = {
							location: location,
							recordings: {
								'capacity': fullCapacity,
								'free': freeCapacity
							},
							unit: unit
						};
						if (
							PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.Series) &&
							data.seriesFree !== null &&
							data.seriesCapacity
						) {
							info.series = {};
							info.series.capacity = data.seriesCapacity;
							info.series.free = data.seriesFree;
						}
						myRec.dom.setStorage.trigger('setInfo', info);
					});
				}
			}
		);

		myRec.dom.prSelector = $('#programRecordingsSelector');
		myRec.menu = new ui.Menu(myRec.dom.prSelector[0]);
	};

	BS.evMgr.bind('msg:onCommandInvoke', function onCIM(ev) {
		var msg = ev.data, that = this, args = arguments;
		if (msg.body.command !== 'recordings-change')
			return;

		if (ignoreCommandInvokeEvent) {
			ignoreCommandInvokeEvent = false;
			return;
		}

		myRec.listChangeNotice = myRec.listChangeNotice || new BS.ui.Alert({autoHide: 5000});

		if (am.isLoaded('myRecDetails')) {
			myRec.listChangeNotice.show(tr('contentChangedRemote'), false);
			myRecDetails.markRemoved();
		}

		if (am.isLoaded('myRec') && !am.isLoaded('myRecDetails')) {
			myRec.listChangeNotice.show(tr('contentChangedRemote'));

			try {
				recMain.refreshRecordings(function (result) {
					myRec.dom.updateStorageInfo();
					myRec.dom.updateMenu(result);
				});

			} catch (e) {
				if (e === 'recorder-list-in-progress') {
					setTimeout(function () {
						onCIM.apply(that, args);
					}, 500);
				}
			}
		}
	});

	var upgradeRecordingsTimer = null;
	BS.evMgr.bind('msg:onResourceChanged', function resourceChangedHandler(ev) {
		var message = ev.data.body;
		if (message.resource === 'RECORDINGS' || message.resource === 'SERIES') {
			BS.logger.trace('Event:msg:onResourceChanged %s Received', message.resource);
			if (!upgradeRecordingsTimer) {
				upgradeRecordingsTimer = new BS.Utils.Timer(function () {
					BS.backgroundService.runOnce(function () {
						var dfr = q.defer();
						recMain.refreshRecordings(dfr.resolve);
						return dfr.promise;
					}, 'Upgrade Recordings & Series');
					upgradeRecordingsTimer = null;
				}, 10e3);
			}
			upgradeRecordingsTimer.reset();
		}
	});

	var seriesSelectionDialog = new BeeSmartMain.MenuListDialog(
		'series_selection_menu_dialog',
		null,
		{
			onBeforeExit: function (key) {
				if (key === 'ok') {
					seriesSelectionDialog.selectedSeries =
						seriesSelectionDialog.actionMenu.currentInfo().key;
					seriesSelectionDialog.continuatorFunc(true);
				} else {
					seriesSelectionDialog.selectedSeries = null;
					seriesSelectionDialog.continuatorFunc(false);
				}
			}
		}
	);
	seriesSelectionDialog.seriesList = null;
	seriesSelectionDialog.continuatorFunc = null;
	seriesSelectionDialog.selectedSeries = null;
	seriesSelectionDialog.init = function (caller, seriesList, callback) {
		var infos = [];
		var that = this;
		that.seriesList = seriesList;
		that.continuatorFunc = callback || BS.F;
		BeeSmartMain.MenuListDialog.prototype.init.call(this, tr('selectSeriesDialogTitle'));

		for (var i in seriesList) {
			if (!seriesList.hasOwnProperty(i))
				continue;

			var series = seriesList[i];
			var title = series.title && series.title.length ? series.title : null;

			if (!title && series.episodes && series.episodes.length > 0) {
				title = BS.recorder.getRecording('recordId', series.episodes[0]).title;
			} else {
				title = tr('seriesRecordUnknownTitle');
			}

			infos.push({name: title, key: series, iconLink: '#recordingDetails'});
		}

		that.fillActionMenu(infos);
	};

	BeeSmartMain.register(seriesSelectionDialog);

	var myRecDetails = new BS.App(
		'myRecDetails',
		{
			helpId: 'programRecordingsCont',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);

	myRecDetails.cachedProgs = {};
	myRecDetails.programDescription = null;
	myRecDetails.clip = null;
	myRecDetails.isSeries = false;

	myRecDetails.onInputEvent = function (key) {
		if (this.lock)
			return;
		switch (key) {
		case 'up':
		case 'down':
			if (key === 'up') {
				this.programDescription.moveUp();
			} else {
				this.programDescription.moveDown();
			}

			break;
		case 'left':
		case 'back':
			am.pop(myRecDetails.appID);

			break;
		case 'play':
		case 'green':
			this.playContent();

			break;
		case 'blue':
			if (this.isSeries) {
				myRec.popupMenuDialogAction('deleteSeries');
			} else if (recMain.getMode() === recMain.MODE_SHARED_CONTENT) {
				var sharedContent = BS.modMgr.getApp('sharedContent');
				if (sharedContent !== null) {
					var sharedPopupMenu = BS.modMgr.getApp('shared_menu_dialog');
					sharedContent.deleteShare(sharedPopupMenu.shareData);
				}
			} else {
				this.deleteContent();
			}
			break;
		}
	};

	myRecDetails.deleteContent = function () {
		var clip = myRecDetails.clip;

		pvr.deleteRecordedClip(clip, function (s, keyPress) {
			if (!s) {
				if (keyPress !== 'back' && keyPress !== 'left') {
					ui.generalAlert(tr('dellPRErr'));
				}
				myRec.lock = false;

				return;
			}

			BS.request.Get(
				'/stb/legacy-gateway/ContentSharingService/deleteAllSharesForContent',
				{
					data: {
						arg0: clip.recordId,
						arg1: BS.recMgr.SharedNetworkRecording.mapType2ContentType(clip.type)
					},
					accept: 'json'
				}
			).done();
			recMain.refreshRecordings(function (result) {
				myRec.dom.updateStorageInfo();
				myRec.dom.updateMenu(result);
				myRec.lock = false;
			});
		});
	};


	myRecDetails.playContent = function (recObj, jumpToTime) {
		recObj = recObj || myRecDetails.clip;

		var start = new Date(recObj.start).getTime();
		var end = new Date(recObj.end).getTime();

		if (start > Date.now())
			return;

		var options = {
			title: recObj.title,
			description: recObj.description ? recObj.description : ' ',
			duration: (recObj.end - recObj.start) * 0.001,
			id: recObj.recordId,
			uid: recObj.recordId,
			assetType: end > Date.now() ?
				recObj.isInstant() ? 'pauseAndResume' : 'recordedAssetAutoInProgress' :
				recObj.isInstant() ? 'instantRecAsset' : 'recordedAsset',
			streamStartOffset: 0,
			streamMaxOffset: end < Date.now() ? 0 : Date.now() - start,
			assetLocation: recObj.residesOn,
			jumpToTime: jumpToTime ? jumpToTime : null,
			recObjType: recObj.sharedBy ? 'shared' :
				(recObj.partOfSeries === null ? 'manual' : 'series')
		};

		if (options.assetType === 'pauseAndResume' ||
			options.assetType === 'recordedAssetAutoInProgress'
		){
			options.pauseActivatedTime = start;
		}
		recObj.updateVodPlayerOptions(options);
		if (options.assetLocation === 'network') {
			myRec.lock = true;
			myRecDetails.lock = true;
			ui.toggleLoader(true);
			showService.playShowRecording(options).finally(function () {
				myRec.lock = false;
				myRecDetails.lock = false;
				ui.toggleLoader(false);
			}).done();
		} else {
			am.push(mm.getApp('vodPlayer'), options);
		}
	};

	myRecDetails.init = function (callerAppId, recObj) {
		var title = recMain.dom.myRecDetails.first().next();
		var progDate = title.next();
		var imageContentTypeElement = progDate.next();
		var content = imageContentTypeElement.next();
		var contentText = content.first().first().next();
		var scroller = content.next();
		var prodIcons = scroller.next();
		var isPlayable = recObj.start < Date.now();
		var isScheduled = recMain.getMode() === recMain.MODE_SCHEDULED_RECORDINGS;
		var isShared = recObj.isShared();
		var imageContentType = isShared ?
			myRec.getSharedImage(true) : myRec.getContentTypeImage(recObj);
		var upDownArrows = recMain.dom.upDownArrows;
		var that = this;

		ui.toggleLoader(true);
		myRecDetails.programDescription = new ui.ProgramDescription(
			title[0], content[0], contentText[0], scroller[0], upDownArrows[0], prodIcons[0],
			false, false, imageContentTypeElement[0], imageContentType
		);
		that.lock = true;

		if (recObj.clipId) {
			var cachedProg = that.cachedProgs[recObj.clipId];
			if (cachedProg === undefined || cachedProg.isMetadataMissing()) {
				BS.request.Get('/restapi/rest/%s/tvprogram/%s'
					.sprintf(user.regionId, recObj.clipId), {
					accept: 'json',
					data: {language: user.language.label}
				}).then(function (result) {
					var data = result.data;
					if (data) {
						that.cachedProgs[data.id] = new BS.ShowModel.TvShow(data);
						recObj.description = data.description;
						recObj.seasonNumber = data.seasonNumber || '';
						recObj.episodeNumber = data.episodeNumber || '';
						recObj.subheading = data.subheading || '';
					}

					updatePanel();
				}).done();
			} else {
				recObj.description = cachedProg.description;
				updatePanel();
			}
		} else {
			updatePanel();
		}

		that.isSeries = recMain.getMode() === recMain.MODE_SERIES_RECORDINGS;

		misc.dom.actionBar.set([
			['back', 'back'],
			['vertical', 'scrollDetails'],
			(isPlayable ? ['green', 'play'] : ['empty', null] ),
			['blue', that.isSeries ? 'deleteSeries' : isScheduled ? 'cancel' : 'delete']
		]);

		function updatePanel() {
			ui.toggleLoader(false);
			that.lock = false;
			that.setClip(recObj);
			var show = new BS.ShowModel.TvShow({
				id: recObj.clipId, channelId: recObj.channelId, title: recObj.title,
				description: recObj.description, start: recObj.start,
				duration: (recObj.end - recObj.start) / 6e4, ageRating: recObj.rating,
				seasonNumber: recObj.seasonNumber, episodeNumber: recObj.episodeNumber,
				subheading: recObj.subheading, recommendedBy: recObj.recommendedBy,
				sharedBy: recObj.sharedBy
			});

			show.getDescription().then(function () {
				show.title = show.generateTitle();
				that.programDescription.setProgram(
					show, ((recObj.end - recObj.start) / 1000).toMovieFormat()
						.toLocaleString(languageCode)
				);
				recMain.dom.showSubModule(that, tr('Details'));
			}).catch(function (ex) {
				BS.logger.trace('myRecDetails error %s', ex);
			});
		}
	};

	myRecDetails.setClip = function (recObj) {
		myRecDetails.clip = recObj;
	};

	myRecDetails.markRemoved = function () {
		recMain.dom.myRecDetails.attr('opacity', '0.4');
		misc.dom.actionBar.set([
			['back', 'back'],
			['vertical', 'scrollDetails'],
			['empty', null],
			['empty', null]
		]);
	};
	myRecDetails.unmarkRemoved = function () {
		recMain.dom.myRecDetails.attr('opacity', '1');
		if (myRec.listChangeNotice)
			myRec.listChangeNotice.hide();
	};


	myRecDetails.destroy = function () {
		myRecDetails.programDescription.destroy();
		myRecDetails.programDescription = false;
		recMain.dom.myRecDetails.hide();
		recMain.dom.hideSubModule();
		myRecDetails.unmarkRemoved();
		if (myRec.listChangeNotice)
			myRec.listChangeNotice.hide();
	};

	myRecDetails.focus = function (caller, args) {
		if (args !== 'back' && caller !== 'vodPlayer' && caller !== 'EpgMatrixView') {
			am.pop(caller, args);
		}
	};

	var pvr = new BS.App('pvr', {
		type: 'popup', helpId: 'pvr',
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	pvr.autoRecordable = {};
	pvr.recordedClips = {};
	pvr.instantRecordings = [];
	pvr.cantRecord = false;
	pvr.toggleInstantRecTimer = null;
	pvr.mode = 'recordable';
	pvr.onInputEvent = function (key) {
		var that = this;
		switch (key) {
		case 'left':
		case 'blue':
		case 'back':
			that.dom.hide();
			am.pop();
			break;
		case 'right':
		case 'down':
			break;
		case 'ok':
			if (that.cantRecord === true)
				break;
			ignoreCommandInvokeEvent = true;
			var progObj = that.clip;
			if (that.mode === 'adoptEpisode') {
				if (BS.recorder.adoptEpisode) {
					BS.recorder.adoptEpisode(progObj.recordId, startCallback);
				} else {
					that.dom.hide();
					am.pop(tr('recordingFailed'));
				}
				return;
			}
			ui.toggleLoader(true);
			BS.recorder.start({
				'type': BS.recMgr.Recording.TYPE_SCHEDULED,
				'title': progObj.title,
				'start': progObj.start,
				'end': progObj.end,
				'channelId': progObj.channel().id,
				'description': progObj.description || '',
				'rating': progObj.rating,
				'clipId': progObj.id,
				'partOfSeries': that.mode === 'series' ? progObj.seriesUid : null
			}, function (recObj, errMsg) {
				ui.toggleLoader(false);
				if (recObj && !(recObj instanceof BS.recMgr.LocalRecording)) {
					var eventData = {};
					eventData.eventId = misc.eventIds.programRecordingScheduled;
					eventData.id = progObj.id;
					eventData.uid = progObj.id;
					eventData.start = Date.now();
					misc.event.write(eventData);
				}
				startCallback(recObj, errMsg);
			});
			break;
		}

		function startCallback(result, errMsg) {
			if (!result) {
				var msg = errMsg ? errMsg : tr('recordingFailed');
				that.dom.hide();
				am.pop(msg);
				return;
			}
			if (that.clip && that.clip.getDescription) {
				that.clip.getDescription().then(function (dsc) {
					result.description = dsc;
				});
			}
			that.dom.hide();
			am.pop(true);
		}
	};
	pvr.init = function (callerAppId, clip, mode) {
		var that = this;
		that.clip = clip;
		that.cantRecord = false;
		that.mode = mode ? mode : 'recordable';

		BS.recorder.quota(function (data) {
			var free = parseInt(data.freeCapacity, 10);
			var cap = parseInt(data.fullCapacity, 10);
			var recordingGBLeft;
			var fullGBSpace;

			if (mode === 'series') {
				free = data.seriesFree;
				cap = data.seriesCapacity;
			}

			if (data && data.unit === 'seconds') {
				var recordingMinutesLeft = Math.floor(free / 60);
				var recordingMinutesCapacity = Math.floor(cap / 60);
				var clipLength = Math.ceil((that.clip.end - that.clip.start) / 60000);

				if (mode === 'series') {
					var dWindowSizeConf = 'Content.Recording.SERIES_RECORDING_DEFAULT_WINDOWS_SIZE';
					clipLength *= parseInt(BS.config.get(dWindowSizeConf), 10) || 1;
				}

				that.dom.statusOfRecordings(recordingMinutesLeft, recordingMinutesCapacity,
					clipLength, 'min', mode);

			} else if (data && data.unit === 'MB') {
				recordingGBLeft = free / 1000;
				fullGBSpace = cap / 1000;

				that.dom.statusOfRecordings(recordingGBLeft, fullGBSpace, null, 'GB', mode);

			} else if (data && data.unit === 'GB') {
				recordingGBLeft = free;
				fullGBSpace = cap;

				that.dom.statusOfRecordings(recordingGBLeft, fullGBSpace, null, 'GB', mode);
			}
		});
	};

	pvr.destroy = function () {
		var dfr = q.defer();
		pvr.dom.hide(function () {
			pvr.dom.customScheduledText.text('');
			dfr.resolve();
		});
		return dfr.promise;
	};

	pvr.toggleInstantRec = function (ch) {
		if (!ch || pvr.toggleInstantRecTimer) {
			return;
		}
		var that = this;
		var liveTv = mm.getApp('liveTv');

		if (that.isInstantRecInProgressForChannel(ch)) {
			that.instantRecorder.stopRecording();
			that.startInstantRecordingTimer();
			BS.logger.debug('PVR: Stopping instant recording');
			return;
		}

		if (that.isInstantRecInProgress() && !that.isInstantRecInProgressForChannel(ch)) {
			var instantRecChId = that.instantRecorder.instRecordedChId;
			ui.generalAlert('%s<tbreak/>%s%s'.sprintf(tr('unableToRecord_title'),
				tr('alreadyRecordingOnChannel'), tvLib.getChannelById(instantRecChId).name), 5000);
			BS.logger.debug('PVR: Some instant recording in progress');
			return;
		}

		if (that.isInstantRecAllowedForChannel(ch)) {
			ui.generalAlert(tr('unableToRecord_title'), 5000);
			BS.logger.debug('PVR: Instant recording failed because `%s` ' +
				'isn`t allowed to be recorded! (%s,%s,%s)', ch, !!that.instantRecorder,
				!!ch.instantRecording, !!liveTv.checkChanStatus(ch, false));
			return;
		}

		that.startInstantRecordingTimer();
		that.instantRecorder.startRecording(ch.id);
	};
	pvr.isInstantRecInProgress = function () {
		try {
			return !!pvr.instantRecorder.instRecordedChId;
		} catch (x) {
			return false;
		}
	};
	pvr.isInstantRecInProgressForChannel = function (ch) {
		try {
			return pvr.instantRecorder.instRecordedChId === ch.id;
		} catch (x) {
			return false;
		}
	};
	pvr.isInstantRecAllowedForChannel = function (ch) {
		var that = this;
		return !that.instantRecorder || !ch.instantRecording || !liveTv.checkChanStatus(ch, false);
	};
	pvr.startInstantRecordingTimer = function () {
		var that = this;
		that.toggleInstantRecTimer = setTimeout(function () {
			clearTimeout(that.toggleInstantRecTimer);
			that.toggleInstantRecTimer = null;
		}, 5500);
	};
	pvr.recordingChangeJustInvokedFromPVR = function () {
		return ignoreCommandInvokeEvent;
	};
	pvr.infoDialog = null;
	pvr.deleteRecordedClip = function (clip, onFinish, mode) {
		onFinish = onFinish || BS.F;
		var that = this;
		that.deleteMode = mode;
		if (!(clip instanceof BS.recMgr.Recording))
			clip = BS.recorder.getRecording('clipId', clip);

		if (!clip) {
			BS.logger.info('PVR:deleteRecordedClip(%s) invalid clip or clipId provided!'
				.sprintf(clip));
			return;
		}

		if (!that.infoDialog) {
			that.infoDialog = new BeeSmartMain.InfoDialog('deleteUserRecording', {
				onBeforeExit: function (keyPressed) {
					var onFinish = this.onFinish;
					if (keyPressed !== 'ok') {
						onFinish(false, keyPressed);
						return;
					}
					var clip = this.clip;
					var type = clip.type || BS.recMgr.Recording.TYPE_SCHEDULED;

					ui.toggleLoader(true);
					ignoreCommandInvokeEvent = true;

					clip.remove((function (cbk) {
						return function (success) {
							ui.toggleLoader(false);
							if (!success) {
								cbk(false, keyPressed);
								return;
							}
							misc.event.write({
								eventId: type === BS.recMgr.Recording.TYPE_SCHEDULED ?
									misc.eventIds.programRecordingDeleted :
									misc.eventIds.instantRecordingDeleted,
								id: clip.recordId,
								uid: clip.recordId,
								start: Date.now()
							});

							cbk(true, keyPressed);
						};
					})(onFinish));
				}
			});
			BeeSmartMain.register(that.infoDialog);
		}

		that.infoDialog.clip = clip;
		that.infoDialog.onFinish = onFinish;
		if (recMain.getMode() === recMain.MODE_SCHEDULED_RECORDINGS)
			am.push(pvr.infoDialog, tr('cancelRecording'), tr('pvrCancelConfirmTitle'));
		else
			am.push(pvr.infoDialog, tr('deleteRecording'), tr('pvrDeleteConfirmTitle'));
	};
	pvr.deleteSeries = function (seriesUid, channelId, onFinish) {
		onFinish = onFinish || BS.F;
		if (!pvr.seriesDeleteDialog) {
			pvr.seriesDeleteDialog = new BeeSmartMain.InfoDialog(
				'deleteSeries',
				{
					onBeforeExit: function (keyPressed) {
						if (keyPressed !== 'ok') {
							onFinish(false, keyPressed);
							return;
						}

						pvr.seriesDeleteDialog.seriesRec.remove(function () {
							if (!am.isLoaded('myRec'))
								return false;

							BS.request.Get('/restapi/rest/%d/%d/recordings/series'.sprintf(
								user.regionId, user.userId))
								.then(responseHandler, responseHandler).done();
							function responseHandler(result) {
								if (result.data.list && result.data.list.length === 0) {
									pvr.seriesDeleteDialog.onFinish(true);
								} else {
									myRec.destroy();
									myRec.init();
								}
							}
						});
					}
				}
			);
			BeeSmartMain.register(pvr.seriesDeleteDialog);
		}
		pvr.seriesDeleteDialog.seriesRec = BS.recorder.getSeries(seriesUid, channelId);
		pvr.seriesDeleteDialog.onFinish = onFinish;
		am.push(pvr.seriesDeleteDialog, tr('deleteSeriesRecTitle'), tr('deleteSeriesRecText'));


	};
	pvr.startup = function () {
		var that = this;
		that.dom = new ModuleDom(
			[
				'customScheduledRecording', 'scheduledOkButton', 'customScheduledText',
				'customScheduledRecordingShow', 'customScheduledRecordingHide',
				'customScheduledRecordingTitle', 'customScheduledRecordingActionBar',
				'chRecordNotice', 'chRecordNoticeIcon', 'chRecordNoticeText',
				'chRecordNoticeShow', 'chRecordNoticeShowAni', 'chRecordNoticeHide'
			],
			{
				chNoticeVisible: false,
				showChRecNotice: function (iconUrl, text) {
					var dom = that.dom;
					dom.chRecordNoticeIcon.attr('href', iconUrl, NS.xlink);
					dom.chRecordNoticeText.text(text.toLocaleString(languageCode));
					dom.chRecordNotice.show();
					if (!this.chNoticeVisible) {
						this.chRecordNoticeShow.trigger('beginEvent', {
							'setRecordNotice': function (txtOffset, rectOffset, showFrom, showTo,
								hideFrom, hideTo) {
								var rect = dom.chRecordNotice.first();
								var ani = dom.chRecordNoticeShowAni;
								var text = dom.chRecordNoticeText;
								var newWidth = parseInt(text[0].getBBox().width + txtOffset, 10);
								var showValue = (BS.portal.direction === 'rtl') ?
									newWidth : 0 - newWidth;

								ani.attr('values', showFrom.concat(showValue, showTo));
								ani.begin();
								ani = dom.chRecordNoticeHide;
								ani.attr('values', showValue.toString().concat(hideFrom, hideTo));
								rect.attr('width', newWidth + rectOffset);
								if (BS.portal.direction === 'rtl'){
									rect.attr('x', (-(newWidth + rectOffset)).toFixed(2));
								}
							}
						});
					}
					dom.chNoticeVisible = true;
				},
				hideChRecNotice: function () {
					if (that.dom.chNoticeVisible) {
						that.dom.chNoticeVisible = false;
						that.dom.chRecordNoticeHide.begin(function () {
							that.dom.chRecordNotice.hide();
						});
					}
				},
				statusOfRecordings: function (spaceLeft, spaceCapacity, clipLength, unit, mode) {
					if (mode === 'recordable') {
						this.customScheduledRecordingTitle.svg(tr('pvrPanel'));
						that.actionBar.set([
							['back', 'toMainMenu'],
							['confirm', 'scheduleRec']
						]);

					} else if (mode === 'series') {
						this.customScheduledRecordingTitle.svg(tr('scheduleSeriesRec'));
						that.actionBar.set([
							['back', 'toMainMenu'],
							['confirm', 'scheduleRec']
						]);

					} else if (mode === 'adoptEpisode') {
						this.customScheduledRecordingTitle.svg(tr('adoptEpisode'));
						that.actionBar.set([
							['back', 'toMainMenu'],
							['confirm', 'confirm']
						]);

					} else {
						this.customScheduledRecordingTitle.svg(tr('adoptAutoRec'));
						that.actionBar.set([
							['back', 'toMainMenu'],
							['confirm', 'confirm']
						]);
					}

					this.show();
					switch (unit) {
					case 'min':
					case 'GB':
						if (unit === 'min' && spaceLeft < clipLength) {
							this.customScheduledText.svg(tr('insufficientFreeRecordingSpace'));
							this.scheduledOkButton.hide();
							that.actionBar.set([
								['back', 'toMainMenu'],
								['empty', null]
							]);
							that.cantRecord = true;
							break;
						}
						this.customScheduledText.svg(tr('recordingSpaceLeft') + ': <tbreak/>' +
							(Math.floor(spaceLeft / spaceCapacity * 100)) + '% (' + spaceLeft +
							' ' + tr(unit) + ')');
						this.scheduledOkButton.show();
						that.cantRecord = false;
						break;
					}
				},
				show: function () {
					this.customScheduledRecording.show();
					this.customScheduledRecordingShow.begin();
				},
				hide: function (callback) {
					callback = callback || BS.F;
					this.customScheduledRecordingHide.begin(function () {
						that.dom.customScheduledRecording.hide();
						callback();
					});
				}
			});
		that.actionBar = new ui.ActionBar(that.dom.customScheduledRecordingActionBar).show();
	};

	BS.evMgr.bind('onInstantRecStart', function (ev) {
		var rec = ev.data;
		if (BeeSmartMain.portalReady) toggleInstantRecordingChannelIndication(true);
		else currentlyRunningInstantRec = rec;
	});
	BS.evMgr.bind('onInstantRecStop', function () {
		toggleInstantRecordingChannelIndication(false);
	});
	BS.evMgr.bind('onInstantRecFailed', function () {
		ui.generalAlert(tr('unableToRecord_title'), 5000);
	});
	BS.evMgr.bind('onRecordingAdded', function (ev) {
		var rec = ev.data;
		try {
			pvr.recordedClips[rec.clipId] = rec;
			if (showRepo.containsId(rec.clipId))
				showRepo.getById(rec.clipId).markStyle('recorded');
		} catch (x) {
		}
		if (rec.isInstant() && rec.isInProgress() && tvLib.isChannel(rec.channelId)) {
			if (BeeSmartMain.portalReady) toggleInstantRecordingChannelIndication(true);
			else {
				currentlyRunningInstantRec = rec;
			}
		}
	});
	BS.evMgr.bind('onRecordingRemoved', function (ev) {
		var rec = ev.data;
		try {
			if (pvr.instantRecorder.recording &&
				pvr.instantRecorder.recording.recordId === rec.recordId
			) {
				toggleInstantRecordingChannelIndication(false);
				pvr.toggleInstantRec(tvLib.getChannelById(rec.channelId));
			}
			delete pvr.recordedClips[rec.clipId];
			if (showRepo.containsId(rec.clipId))
				showRepo.getById(rec.clipId).unmarkStyle('recorded');
		} catch (x) {
			log('Remove recording FAILED: ' + x);
		}
	});
	BS.evMgr.bind('onTvLibraryUpdate', function liveTvUpdate(ev) {
		if (ev.data.type !== 'channel-video')
			return;
		pvr.autoRecordable = {};
		pvr.recordable = {};
		tvLib.getChannels(true).forEach(function (chObj) {
			if (chObj.isTimeshifted()) pvr.autoRecordable[chObj.id] = chObj.autoRecExpiration;
			if (chObj.recordable) pvr.recordable[chObj.id] = true;
		});
	});
	BS.evMgr.bind('onKeypress', function (ev) {
		var key = ev.data;
		if (!am.lastLoaded('liveTv') && !am.lastLoaded('normalCIB') && !am.lastLoaded('extraCIB'))
			return;

		try {
			var currentChObj = liveTv.getCurrentChannel();
			switch (key) {
			case 'left':
				if (
				mm.getApp('liveTv').isSwitching ||
				rcHasEpgShortcut && !currentChObj.isPreviewTemporaryEnabled()
				) break;
				pvr.toggleInstantRec(currentChObj);

				break;
			case 'record':
				if (!currentChObj.isPreviewTemporaryEnabled())
					pvr.toggleInstantRec(currentChObj);

				break;
			case 'stop':
				if (pvr.instantRecorder &&
					(pvr.instantRecorder.instRecordedChId === liveTv.getCurrentChannel().id)) {
					pvr.toggleInstantRec(currentChObj);
				}

				break;
			case 'blue':
				if (!rcHasEpgShortcut && !currentChObj.isPreviewTemporaryEnabled())
					pvr.toggleInstantRec(currentChObj);

				break;
			}
		} catch (x) {
			info(x);
		}
	});
	BS.evMgr.bind('onSeriesAdded', function (ev) {
		var series = ev.data;
		var pr = showRepo.tvShowsMap;
		var startTime = Date.now();

		if (series.episodes[0]) {
			var rec = BS.recorder.getRecording('recordId', series.episodes[0]);
			if (rec) {
				startTime = new Date(rec.start);
			}
		}
		try {
			for (var i in pr) {
				if (!pr.hasOwnProperty(i))
					continue;
				if (pr[i].seriesUid === series.seriesUid && pr[i]._channel === series.channelId &&
					pr[i].start >= startTime.getTime()
				) {
					try {
						pr[i].markStyle('series');
					} catch (x) {
					}
				}
			}
		} catch (x) {
		}
	});
	BS.evMgr.bind('onSeriesRemoved', function (ev) {
		var series = ev.data;
		var pr = showRepo.tvShowsMap;
		try {
			for (var i in pr) {
				if (!pr.hasOwnProperty(i))
					continue;
				if (pr[i].seriesUid === series.seriesUid && pr[i]._channel === series.channelId) {
					try {
						pr[i].unmarkStyle('series');
					} catch (e) {
					}
				}
			}
		} catch (x) {
		}
	});
	BS.evMgr.bind('onAppStackChange', function (ev) {
		if (ev.data.action !== 'pop' ||
			['vodPlayer', 'pauseAndResume'].indexOf(ev.data.appId) === -1
		) return;

		try {
			var instantRecChId = pvr.isInstantRecInProgress();
			if (instantRecChId)
				pvr.dom.showChRecNotice(
					'#liveTvRecStatusImage',
					tvLib.getChannelById(instantRecChId).name
				);
		} catch (x) {
		}
	});
	BS.evMgr.bind('onParentalControlAction', function (ev) {
		if (ev.data.action !== 'forbiden')
			return;
		if (pvr.isInstantRecInProgress() === ev.data.channel.id)
			pvr.instantRecorder.stopRecording();
	});
	BS.evMgr.bind('onEpgMatrixInterval', function (ev) {
		if (ev.data.frequency !== 'fairly-often')
			return;
		var forDate = ev.data.epgDate;
		var chsArr = []
		var channels = showRepo.channels[forDate.getDate()];
		var bunchOfPrograms = showRepo.tvShowsMap;
		var i;
		if (!channels || !PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.CatchUp))
			return;

		Object.eachKey(channels, function (i) {
			if (channels[i].isDrawn())
				chsArr.push(channels[i]);
		});
		var markingsDiff = gatherTimeshiftedPrograms(bunchOfPrograms, chsArr, forDate);

		for (i in markingsDiff) {
			if (!markingsDiff.hasOwnProperty(i)) continue;
			if (markingsDiff[i] === true) bunchOfPrograms[i].markStyle('playable');
			else bunchOfPrograms[i].unmarkStyle('playable');
		}
	});

	BS.evMgr.bind('onEpgMatrixDataChanged', function () {
		tsMarkedProgIds = [];
	});

	BS.ShowModel.TvShowRepr.onGenerateMarkup = function(show) {
		if (PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.CatchUp)) {
			var defaultTsLength = MAX_DAYS_OFFSET * 86400000;
			var aRecTime = pvr.autoRecordable[show._channel];
			var aRecStart = Date.now() - (aRecTime === true ? defaultTsLength : aRecTime);

			if (show.isRecordable() && show.hasStarted()) {
				if (show.start > aRecStart) {
					show.addStyle('playable');
					if (tsMarkedProgIds.indexOf(show.id) === -1)
						tsMarkedProgIds.push(show.id);
				} else {
					show.removeStyle('playable');
				}
			}
		}

		if (PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.Recording)) {
			if (show.isRecordable()) {
				if (show.id in pvr.recordedClips) show.addStyle('recorded');
				else show.removeStyle('recorded');
			}
			if (show.seriesUid &&
				BS.recorder.isSeriesScheduled(show.seriesUid, show._channel) &&
				!show.hasStarted()
			) {
				show.addStyle('series');
			} else {
				show.removeStyle('series');
			}
		}
	};

	BS.evMgr.bind('onLocalRecorderNearCurrentCollision', function () {
		pvr.instantRecorder.stopRecording();
	});

	var tsMarkedProgIds = [];

	function gatherTimeshiftedPrograms(programs, channels) {
		var now = Date.now();
		var defaultTsLength = MAX_DAYS_OFFSET * 86400000;
		var processedClips = {};
		channels.forEach(function (ch) {
			var aRecTime = pvr.autoRecordable[ch.id];
			var aRecStart = now - (aRecTime === true ? defaultTsLength : aRecTime);
			ch.showIdList.forEach(function (id) {
				var clip = programs[id];
				if (clip && clip.isRecordable() && clip.hasStarted()) {
					if (clip.start > aRecStart) {
						if (tsMarkedProgIds.indexOf(id) === -1)
							tsMarkedProgIds.push(id);
						processedClips[id] = true;
					} else if (clip.start < aRecStart && tsMarkedProgIds.indexOf(id) !== -1) {
						tsMarkedProgIds.splice(tsMarkedProgIds.indexOf(id), 1);
						processedClips[id] = false;
					}
				}
			});
		});

		return processedClips;
	}

	var buddiesPopup = new BeeSmartMain.MenuListDialog(
		'buddies_menu_dialog',
		null,
		{
			onBeforeExit: function (key) {
				switch (key) {
				case 'ok':
					ui.toggleLoader(true);
					var ids = '';
					var deselectBuddy = false;
					var list = this.actionMenu.infoList();
					var changed = false;
					list.forEach(function (item) {
						if (item.selected) {
							ids = ids + ',' + item.key;
							if (item.selected === true)
								changed = true;
						} else if (item.selected === false) {
							deselectBuddy = true;
							changed = true;
						}
					});

					if (ids === '' && !deselectBuddy)
						ids = this.actionMenu.currentInfo().key + ',';

					if (!changed) {
						ui.toggleLoader(false);
						return;
					}

					setTimeout(function () {
						var type2ContentType = BS.recMgr.SharedNetworkRecording.mapType2ContentType;
						BS.request.Get('/stb/legacy-gateway/ContentSharingService/shareContent', {
							accept: 'json',
							data: {
								arg0: ids,
								arg1: 'sharing',
								arg2: recordingsPopupMenu.clip.recordId,
								arg3: type2ContentType(recordingsPopupMenu.clip.type)
							}
						}).then(function (result) {
							recordingsPopupMenu.clip.setShared(ids.length > 0);
							myRec.setItemSharedStatus(recordingsPopupMenu.clip.isShared());
							myRec.alert.show(tr('sharedContent_changed'));

							if (result && result.length) {
								myRec.alert.show(tr('UNKNOWN_ERROR'));
								list.forEach(function (item) {
									if (parseInt(item.key) === result[0].statusCode) {
										myRec.alert.show(
											item.name + ' : ' + tr(result[0].resultValue)
										);
									}
								});
							}
						}).catch(function () {
							myRec.alert.show(tr('UNKNOWN_ERROR'));
						}).finally(function () {
							ui.toggleLoader(false);
						}).done();
					}, 50);
				}
			}
		}
	);
	buddiesPopup.init = function (caller, _list) {
		BeeSmartMain.MenuListDialog.prototype.init.call(this, tr('share_recording_with'), true);
		this.fillActionMenu(_list);
	};
	BeeSmartMain.register(buddiesPopup);

	var recCollisionDialog = new BeeSmartMain.InfoDialog(
		'recCollisionDialog',
		{
			buttons: [
				['confirm', 'ok']
			],
			exitKeys: ['back', 'left', 'ok']
		}
	);
	BeeSmartMain.register(recCollisionDialog);

	var recordingsPopupMenu = new BeeSmartMain.MenuListDialog(
		'recMenuDialog',
		null,
		{
			onBeforeExit: function (key) {
				if (key === 'ok' && this.actionMenu.currentInfo().key === 'share'
					&& !mm.isAllowed('mediasharing'))
					return false;
			}
		}
	);
	recordingsPopupMenu.clip = null;
	recordingsPopupMenu.setClip = function (_clip) {
		recordingsPopupMenu.clip = _clip;
	};

	recordingsPopupMenu.init = function () {
		var infos = [];
		var clip = recordingsPopupMenu.clip;
		BeeSmartMain.MenuListDialog.prototype.init.call(this, tr('recordingOptions'));
		var now = Date.now();
		var playable = clip ? new Date(clip.start).getTime() < now : false;
		var shareable = mm.isAllowed('mediasharing') && playable && clip &&
			clip.residesOn === 'network';
		if (playable)
			infos.push({name: tr('Play'), key: 'play', iconLink: '#iconTvShowPlayableNormal'});

		if (recMain.getMode() !== recMain.MODE_SERIES_RECORDINGS)
			infos.push({
				name: recMain.getMode() === recMain.MODE_SCHEDULED_RECORDINGS ?
					tr('cancel') : tr('delete'),
				key: 'delete',
				iconLink: '#iconTvShowRecordingDelete'
			});
		else {
			infos.push({
				name: tr('deleteSeries'), key: 'deleteSeries',
				iconLink: '#iconTvShowRecordingDelete'
			});
			if (BS.config.get('Content.Recording.EPISODE_ADOPTION_ENABLED') && clip && clip.end &&
				clip.end < new Date().getTime()) {
				infos.push({
					name: tr('adoptEpisode'), key: 'adoptEpisode',
					iconLink: '#iconTvShowAdoptEpisode'
				});
			}
			shareable = false;
		}

		if (shareable) {
			infos.push({
				name: tr('share_recording_with'), key: 'share',
				iconLink: '#contentSharedImage_menu'
			});
		}

		if (clip)
			infos.push({
				name: tr('programDetails'),
				key: 'description',
				iconLink: '#recordingDetails'
			});
		this.fillActionMenu(infos);
	};

	BeeSmartMain.register(recordingsPopupMenu);

	(new BS.Module(
		{
			id: 'MyRecordings',
			mmExtensions: {
				app: recMain,
				icon: 'myrecordings',
				title: 'myContent',
				position: 3
			},
			startupTasks: [
				{
					name: 'Recordings interface',
					payload: function (params, callback) {
						BS.template.get('svg/recording.svg').finally(callback);
						MAX_DAYS_OFFSET = BS.config.get('Epg.Client.MAX_DAYS_OFFSET');
						var keyMap = BS.inputManager.keyMap;
						rcHasEpgShortcut = keyMap.code.indexOf('motorola gray') === -1;

						if (PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.Instant)) {
							pvr.instantRecorder = new InstantRecorder(tvLib);
							var currentInstantRec = currentlyRunningInstantRec;
							if (currentInstantRec) {
								pvr.instantRecorder.recording = currentInstantRec;
								pvr.instantRecorder.instRecordedChId = currentInstantRec.channelId;
							}
						}
					}
				}
			]
		}
	)).register(recMain)
		.register(myRec)
		.register(myRecDetails)
		.register(pvr)
		.register(recordingQuota);


	function toggleInstantRecordingChannelIndication(show) {
		if (show) {
			try {
				var recordedChId = pvr.instantRecorder.instRecordedChId;
				if (recordedChId) {
					var channel = tvLib.getChannelById(recordedChId);
					pvr.dom.showChRecNotice('#liveTvRecStatusImage', channel.number + '. ' +
						channel.name);
				}
			} catch (x) {
				log(x);
			}
		} else {
			pvr.dom.hideChRecNotice();
		}
	}


	BS.evMgr.bind('onBeeSmartReady', function () {
		if (currentlyRunningInstantRec)
			toggleInstantRecordingChannelIndication(true);
	});


	var InstantRecorder = function (tvLib) {
		var that = this;

		function startDone(rec) {
			if (rec) {
				that.recording = rec;
				that.instRecordedChId = rec.channelId;
			} else {
				resetIRState();
			}
		}

		function resetIRState() {
			that.recording = null;
			that.instRecordedChId = null;
		}

		resetIRState();

		that.startRecording = function (id) {
			if (!id || that.instRecordedChId)
				return;

			var recOpts = {
				'channelId': id,
				'type': BS.recMgr.Recording.TYPE_INSTANT,
				'title': tvLib.getChannelById(id).name
			};

			try {
				var currentShow = showService.getCurrentShow(tvLib.getChannelById(id));
				currentShow.getDescription().then(function (prog) {
					recOpts.description = prog.description || '';
					recOpts.rating = prog.rating || 0;
					BS.recorder.start(recOpts, startDone);
				});

			} catch (x) {
				BS.logger.info('RECORDINGS: Instant recording will lack program information.');
				BS.recorder.start(recOpts, startDone);
			}
		};

		that.stopRecording = function () {
			var abortedRec = that.recording;
			if (!abortedRec)
				return;

			abortedRec.abort().finally(resetIRState).done();

			if (!BS.recorder.getName().match(/(local)/gi))
				return;

			showService.getShowsInRange(new Date(abortedRec.start), new Date(),
				abortedRec.channelId)
				.then(function (shows) {
					shows.push({rating: tvLib.getChannelById(abortedRec.channelId).ageRating});
					shows = shows.sort(function (a, b) {
						return b.rating - a.rating;
					});
					if (shows.length) {
						abortedRec.rating = shows[0].rating;
						abortedRec.persistMeta({'rating': shows[0].rating});
					}
				})
				.catch(function (x) {
					BS.logger.info('RECORDINGS: unable to extract age rating limit due to:\n%s', x);
				}).done();
		};

		BS.evMgr.bind('onInstantRecStop', resetIRState);
	};
})(
	BeeSmart,
	Q,
	BeeSmart.InputManager.keyGroups,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	$.ModuleDom,
	BeeSmart.PVR
);


(function (BS, q, keys, mm, am, ui, em, PVR) {
	var showService = BS.ShowModel.showService;
	var ignoreCommandInvokeEvent = false;
	var tvLib, pvrApp, liveTvApp, misc;

	var pnr = new BS.App('pauseAndResume', {type: 'popup', listenTo: [BS.InputManager.allKeys]});
	pnr.streamOffset = 1000;
	pnr.pauseTime = null;
	pnr.pauseDuration = 0;
	pnr.pause = false;
	pnr.recording = null;
	pnr.onInputEvent = function (key) {
		var that = this;
		if (keys.globals.indexOf(key) !== -1)
			return true;
		if (that.lock)
			return;

		switch (key) {
		case 'ok':
		case 'play':
			if (!that.pause) break;
			if (that.pauseDuration > that.earlyAvailabilityDelay) {
				var chId = liveTvApp.getCurrentChannel().id;
				var options = {
					title: tvLib.getChannelById(chId).name,
					description: tr('pauseAndInterupt'),
					assetType: 'pauseAndResume',
					id: that.recording.recordId,
					uid: that.recording.recordId,
					assetId: that.recording.assetId,
					pauseActivatedTime: that.pauseTime,
					streamStartOffset: that.recording.cbEnabled ? 0 : that.streamOffset,
					channelId: chId,
					assetLocation: that.recording.residesOn,
					duration: that.recording.cbEnabled ?
						parseInt(that.recording.cbData.duration, 10) :
						parseInt((that.recording.end - that.recording.start) / 1000, 10),
					cbData: that.recording.cbEnabled ? that.recording.cbData : null
				};

				if (that.recording.residesOn === 'local-device') {
					that.recording.updateVodPlayerOptions(options);
					am.push(mm.getApp('vodPlayer'), options);
					return;
				}

				showService.playShowRecording(options);

			} else {
				misc.event.endEvent(Date.now());
				that.abortPR();
			}
			break;
		case 'stop':
		case 'up':
		case 'down':
		case 'chDown':
		case 'chUp':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			if (that.pause) {
				that.abortPR();
				return true;
			}
			break;
		default:
			break;
		}
	};
	pnr.init = function (caller, objChannel) {
		var that = this;
		if ('isInstantRecInProgress' in pvrApp && pvrApp.isInstantRecInProgress() === objChannel.id)
			throw 'app-stack-op-abort';

		var localRecCheck = PVR.featurePolicy
			.isFeatureAvailable(PVR.RecordingFeatures.LocallyPersisted) ?
			objChannel.localRecordable :
			true;

		if (
			!PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.PNR) ||
			!objChannel.pauseResume ||
			!localRecCheck ||
			!liveTvApp.checkChanStatus(null, false) || !mm.appExists('pauseAndResume')
		) throw 'app-stack-op-abort';

		that.dom.setFSNoticeText(' ');
		that.dom.clearPauseInterval();

		if (!that.pause) {
			that.pause = true;
			that.pauseDuration = 0;
			that.lock = true;

			BS.recorder.start({
				'channelId': objChannel.id,
				'type': BS.recMgr.Recording.TYPE_PAUSE_RESUME
			}, function (recObj, errorMsg) {
				pnr.lock = false;
				if (recObj) pnr.onStartSuccess(recObj);
				else pnr.onStartFail(errorMsg);
			});
		}
	};
	pnr.blur = function (caller) {
		if (caller === 'vodPlayer') {
			pnr.dom.hideFSNotice();
			pvrApp.dom.hideChRecNotice();

			if (am.isLoaded('normalCIB'))
				mm.getApp('normalCIB').dom.hideBar();
		}
	};
	pnr.focus = function (caller) {
		var that = this;
		switch (caller) {
		case 'vodPlayer':
			var recordable = liveTvApp.getCurrentChannel().pauseResume;

			if (recordable)
				that.abortPR();

			that.pauseTime = null;
			if (am.isLoaded('normalCIB'))
				mm.getApp('normalCIB').dom.showBar();

			break;
		}
	};
	pnr.onPauseInterval = function () {
		var that = pnr;
		var maxDuration = (that.recording.end - that.recording.start) / 1e3;
		that.pauseDuration++;

		if (that.pauseDuration > maxDuration) {
			misc.event.endEvent(Date.now());
			that.abortPR();
			return;
		}

		if (that.pauseDuration > that.earlyAvailabilityDelay)
			that.dom.prFSNoticeText.addClass('prAvailability').removeClass('prBeforeAvailability');
		else
			that.dom.prFSNoticeText.removeClass('prAvailability').addClass('prBeforeAvailability');

		if (that.pauseDuration < 60) {
			that.dom.setFSNoticeText(('-' + that.pauseDuration + ' ' + tr('sec'))
				.toLocaleString(BS.portal.user.language.label));
		} else {
			var min = Math.floor(that.pauseDuration / 60);
			var sec = Math.floor(that.pauseDuration % 60);
			that.dom.setFSNoticeText('-%d %s %d %s'.sprintf(min, tr('min'), sec, tr('sec'))
				.toLocaleString(BS.portal.user.language.label));
		}

	};
	pnr.startup = function () {
		var that = this;
		liveTvApp = mm.getApp('liveTv');
		misc = mm.getApp('Misc');
		tvLib = mm.getModule('BeeSmartMain').tvLibrary;
		pvrApp = new BS.PvrProxy();

		that.dom = new $.ModuleDom(
			['pauseResumeFSNotice', 'prFSNoticeText', 'prFSNoticeHide', 'prFSNoticeShow'],
			{
				pauseInterval: null,
				clearPauseInterval: function () {
					if (this.pauseInterval !== null) {
						clearInterval(this.pauseInterval);
						this.pauseInterval = null;
					}
				},
				showFSNotice: function () {
					this.chNoticeVisible = true;
					this.pauseResumeFSNotice.show();
					this.prFSNoticeShow.begin();
				},
				hideFSNotice: function () {
					if (this.chNoticeVisible) {
						this.chNoticeVisible = false;
						this.prFSNoticeHide.begin(function () {
							that.dom.pauseResumeFSNotice.hide();
						});
					}
				},
				setFSNoticeText: function (text) {
					this.prFSNoticeText.svg(text);
				}
			},
			function () {
				that.prUIA = new BS.ui.Alert({autoHide: 5000});
			}
		);
	};
	pnr.abortPR = function () {
		var that = this,
			liveTvApp = mm.appExists('liveTv') ? mm.getApp('liveTv') : null;

		that.dom.clearPauseInterval();
		pvrApp.dom.hideChRecNotice();

		if (that.pause) {
			that.pause = false;
			that.dom.hideFSNotice();
			if (!(am.isLoaded('normalCIB')))
				setTimeout(function () {
					am.push(mm.getApp('normalCIB'), true);
				}, 500);
			BS.media.stop();
			liveTvApp.resetLiveTvStream();
		}

		if (am.lastLoaded('pauseAndResume'))
			am.pop();

		if (that.recording !== null) {
			that.recording.remove(function () {
				that.lock = false;
				that.recording = null;
			});
		}
	};
	pnr.onStartFail = function (errorMsg) {
		var that = pnr;
		var msg = tr('unableToRecord_title') + '<tbreak/>' +
			(errorMsg ? errorMsg : tr('unableToRecord_body'));

		that.prUIA.show(msg, true);
		that.dom.clearPauseInterval();
		that.abortPR();
	};
	pnr.onStartSuccess = function (recObj) {
		var currentChannel = liveTvApp.getCurrentChannel();
		if (tvLib.isChannel(currentChannel.id)) {
			pvrApp.dom.showChRecNotice('#liveTvPauseStatusImage', currentChannel.name);
		}

		var that = pnr;
		var cTime = Date.now();

		that.recording = recObj;
		that.streamOffset = parseInt(recObj.startOffset || 0);

		if (!that.recording.assetId)
			BS.logger.info('RECORDINGS: warning !! no asset id passed in recObj');

		that.earlyAvailabilityDelay = recObj.earlyAvailDelay || that.earlyAvailabilityDelay;
		that.pauseTime = cTime;
		that.dom.pauseInterval = setInterval(that.onPauseInterval, 1000);

		var eventData = {};
		eventData.eventId = misc.eventIds.pauseAndResume;
		eventData.id = currentChannel.id;
		eventData.uid = currentChannel.uid;
		eventData.start = cTime;
		misc.event.beginEvent(eventData, cTime);

		that.dom.showFSNotice();
		BS.media.pause();
	};
	em.bind('onInstantRecStop', function () {
		if (am.isLoaded('pauseAndResume'))
			pnr.abortPR();
	});
	em.bind('onParentalControlAction', function (ev) {
		if (ev.data.action !== 'forbiden')
			return;
		if (pnr.pause) pnr.abortPR();
	});

	mm.getModule('Tv').register(pnr);

})(
	BeeSmart,
	Q,
	BeeSmart.InputManager.keyGroups,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	BeeSmart.evMgr,
	BeeSmart.PVR
);


(function(BS){

var _formats = BS.portal.local.formats;
var mm = BS.modMgr;
var	am = BS.appMgr;
var	ui = BS.ui;
var	ModuleDom = $.ModuleDom;
var	keyboard = mm.getApp('keyboard');
var	misc = mm.getApp('Misc');
var	bmisc = BeeSmart.misc;


var myImages = new BS.App(
	'myImages',
	{
		helpId: 'myImages',
		requiredLicense: 'pictures',
		inputMapper: BS.App.portalDirectionKeyMapper
	}
);

myImages.setDetails = function(){
	var item = this.menuItems.currentInfo();
	myImages.dom.myImagesDetails_text.svg(item.galleryDescription.encodeEntities());
	myImages.dom.myImagesDetails_numOfImages.svg(item.photoCount + ' ' + tr('images_in_gallery'));
	myImages.dom.myImagesDetails_title.svg(item.galleryTitle.encodeEntities());
	myImages.dom.myImagesDetails_image.attr('href', item.content.photoUrl, NS.xlink);
	myImages.dom.myImagesDetails_image.show();
};

myImages.onInputEvent = function(keyPressedName){
	if (myImages.lock) {
		return;
	}

	switch (keyPressedName) {
		case 'left':
		case 'back':
			am.pop();
			break;

		case 'up':
		case 'down':
			if (!this.menuItems) break;
			this.menuItems[keyPressedName === 'up' ? 'previous' : 'next']();
			myImages.setDetails();
			break;

		case 'ok':
			var item = this.menuItems.currentInfo();
			var howManyPages = Math.floor(item.photoCount / MAX_IMAGES_PER_PAGE);
			if (item.photoCount % MAX_IMAGES_PER_PAGE > 0) {
				howManyPages++;
			}
			am.push(myImagesSelectedGallery, item.galleryId, howManyPages);
			break;

		case 'blue':
			if (!mm.isAllowed('search')) return;
			am.inContextOf(this).push(mm.getApp('searchPopup'));
			break;
	}
};

myImages.getNumOfImagesInGallery = function(){
	var item = this.menuItems.currentInfo();
	return item.photoCount;
};
myImages.getGalleryOwner = function(){
	var item = this.menuItems.currentInfo();
	return item.galleryOwner;
};
myImages.init = function(){
	myImages.lock = true;
	ui.toggleLoader(true);
	var recMain = BS.modMgr.getApp('MyRecordings');
	recMain.dom.recordingsInfoText.hide();
	BS.request.Get('/stb/legacy-gateway/ContentSharingService/getMyPhotoGalleries').complete(
	function(response){
		ui.toggleLoader(false);
		myImages.lock = false;
		var items = [];
		var infos = [];

		if (!response.success || !response.data.result || (response.data.result.length == 0)) {
			ui.generalAlert(tr('noImages'));
			myImages.setActionBar();
			myImages.menuItems = null;
			return;
		}
		MAX_IMAGES_PER_PAGE = response.data.result[0].photosPerPage;

		for(var i in response.data.result){
			var item = response.data.result[i];
			var c = ui.template('myImagesMenuItemTemplate', {
				'name': item.galleryTitle == '' ? ' ' : item.galleryTitle.encodeEntities(),
				'imageLink': item.content.thumbnailUrl,
				'numOfPhotos': item.photoCount
			});
			items.push(c);
			infos.push(item);
			if (i > 10) break;
		}

		myImages.menuItems = myImages.menu.newMenuItems();
		myImages.menuItems.setItems(items, infos).show();
		myImages.dom.myImagesModule.show();
		myImages.setDetails();
		misc.dom.navigationPush(tr(recMain.getRecMainItemByKey(recMain.getMode()).navigationTitle));
	});
};
myImages.setActionBar = function(){
	if (myImages.menuItems && myImages.menuItems.length > 0)
		misc.dom.actionBar.set([
			['back', 'toMainMenu'],
			['vertical', 'select'],
			['blue', 'search'],
			['confirm', 'confirm']
		]);
	else
		misc.dom.actionBar.set([
			['back', 'toMainMenu'],
			['empty', null],
			['empty', null],
			['empty', null]
		]);
};
myImages.destroy = function(){
	myImages.dom.myImagesModule.hide();
};

myImages.blur = function(caller) {
	if (caller !== 'communityMessagePopup' && caller !== 'searchPopup') {
		myImages.dom.myImagesModule.hide();
	}
};

myImages.focus = function(){
	myImages.dom.myImagesModule.show();
	myImages.dom.myImagesMenu.show();
	myImages.setActionBar();
};
myImages.startup = function(){
	BS.template.get('svg/gallery.svg').then(function (){
		myImages.dom = new ModuleDom(
			[
				'myImagesModule', 'myImagesMenu', 'myImagesMenuSelector',
				'myImagesMenuItemTemplate', 'myImagesDetails_title', 'myImagesDetails_text',
				'myImagesDetails_image', 'myImagesDetails_numOfImages'
			]
		);
		myImages.menu = new ui.Menu(myImages.dom.myImagesMenuSelector[0]);
		var recMain = BS.modMgr.getApp('MyRecordings');
		if (recMain && mm.isAllowed('pictures')) {
			recMain.addMenuItem(
				'myImages',
				'recMain_mypictures',
				'mypictures_navigation_title',
				recMain.MODE_MY_PICTURES,
				'myImagesDescr',
				4
			);
		}
	});
};


var myImagesSelectedGallery = new BS.App('myImagesSelectedGallery',{
		requiredLicense: 'pictures',
		inputMapper: BS.App.portalDirectionKeyMapper
	});

var MAX_IMAGES_PER_PAGE = 4;

myImagesSelectedGallery.onInputEvent = function(keyPressedName){
	var r = myImagesSelectedGallery;
	var	isEmpty = !r.m && !r.m.infos;

	if (r.lock)
		return;

	switch (keyPressedName)
	{
		case 'back':
			am.pop();
			r.lock = false;
		break;
		case 'left':
			if (isEmpty) return;
			if (!myImagesSelectedGallery.changePage(-1, false))
				r.m.items['previousColumn']();
			break;

		case 'right':
			if (isEmpty) return;
			if (!myImagesSelectedGallery.changePage(+1, false))
				r.m.items['nextColumn']();
		break;
		case 'up':
			if (isEmpty) return;
			myImagesSelectedGallery.changePage(-1, true);
			break;

		case 'down':
			if (isEmpty) return;
			myImagesSelectedGallery.changePage(+1, true);
			break;

		case 'ok':
			if (isEmpty) return;
			am.push(imageDetails);
			break;
	}
};

myImagesSelectedGallery.changePage = function(_direction, _forceChange){
	var index = myImagesSelectedGallery.menu.index;
	var	changePageNeeded = false;
	var	r = myImagesSelectedGallery;
	r.lastChangePageDirection = _direction;

	if (r.numOfPages == 1){
		return false;
	}

	if (_direction != null &&_direction > 0) {

		if ((_forceChange || index == MAX_IMAGES_PER_PAGE - 1
			|| myImagesSelectedGallery.getCurrentImageNum()
			== myImages.getNumOfImagesInGallery())) {
			if (r.currentPage >= r.numOfPages)
				r.currentPage = 1;
			else
				r.currentPage++;
			changePageNeeded = true;
		}
	} else if ((_forceChange || index <= 0)){
		if (r.currentPage == 1)
			r.currentPage = r.numOfPages;
		else
			r.currentPage--;
		changePageNeeded = true;
	}

	if (changePageNeeded) {
		r.lock = true;
		ui.toggleLoader(true);
		setTimeout( function(){
			BS.request.get('ContentSharingService/getMyPhotos', r.getGallery,
				[r.galleryId, r.currentPage]);
		}, 250);
	}
	return changePageNeeded;
};

myImagesSelectedGallery.requestItem = function(_direction){
	if (!myImagesSelectedGallery.changePage(_direction, false)) {
		if (_direction > 0)
			myImagesSelectedGallery.menu.nextColumn();
		else
			myImagesSelectedGallery.menu.previousColumn();
		var index = myImagesSelectedGallery.menu.index;
		return myImagesSelectedGallery.m.infos[index];
	} else {
		return null;
	}
};
myImagesSelectedGallery.init = function(callerId, galleryId, numOfPages){
	var r = myImagesSelectedGallery;
	if (!r.dom)
		r.dom = new ModuleDom(
			['myImagesBriefDescription','myImages_pageNo'],
			{
				upArrow: $('#myImagesUpDownArrows').find('.up'),
				downArrow: $('#myImagesUpDownArrows').find('.down'),
				show:function(){
					this.myImagesBriefDescription.show();
				},
				hide:function(){
					this.myImagesBriefDescription.hide();
				},
				setPageNo:function(){
					if (r.currentPage === 1) this.upArrow.hide();
					else this.upArrow.show();
					if (r.currentPage !== r.numOfPages) this.downArrow.show();
					else this.downArrow.hide();
					this.myImages_pageNo.svg(
						tr('pageCountPre') + ' ' + (myImagesSelectedGallery.currentPage) + ' ' +
						tr('pageCountMiddle') + ' ' + (myImagesSelectedGallery.numOfPages)
					);
				}
			}
		);
	r.currentPage = 1;
	r.lock = false;
	r.galleryId = galleryId;
	r.numOfPages = numOfPages;
	r.lastChangePageDirection = 1;
	r.dom.setPageNo();
	ui.toggleLoader(true);
	misc.dom.actionBar.set([
		['back', 'toMainMenu'],
		['vertical', 'upDown'],
		['horizontal', 'left/right'],
		['confirm', 'confirm']
	]);
	BS.request.get('ContentSharingService/getMyPhotos',r.getGallery,[galleryId,r.currentPage]);
	r.dom.show();

};
myImagesSelectedGallery.destroy = function(){
	myImagesSelectedGallery.dom.hide();
	if (myImagesSelectedGallery.menu)
		myImagesSelectedGallery.menu.destroy();
};
myImagesSelectedGallery.blur = function(caller){
	if (caller !== 'communityMessagePopup') {
		myImagesSelectedGallery.dom.hide();
		misc.hidePortal();
	}
};
myImagesSelectedGallery.focus = function(){
	misc.showPortal();
	myImagesSelectedGallery.dom.show();
};

myImagesSelectedGallery.getGallery = function(success, list){
	var r = myImagesSelectedGallery;
	var galleryList = [];
	var	imageShelf;

	if (!success){
		BS.logger.debug('ERROR: catContentGetter error, service wasnt called succesfully');
		r.lock = false;
		return;

	}

	if (list && list.length > 0) {
		for (var i = 0; i < list.length; i++) {
			var image = list[i];
			galleryList.push({'photoTitle':image.photoTitle,
							  'pictureLink':image.thumbnailUrl,
							  'dateTaken':image.dateTaken});
		}
	}
	if (r.menu)
		r.menu.destroy();

	imageShelf = new BS.ui.ShelfMenu(new BS.ui.ShelfManager($('#image-covers-shelf')[0]));
	imageShelf.items = galleryList;
	r.menu = imageShelf.show();

	if (list.length > 0) {
		r.m = {
			'items': r.menu,
			'infos': list
		};
	}

	if (r.lastChangePageDirection > 0)
		r.menu.forceJumpToIndex(0);
	else
		r.menu.forceJumpToIndex(list.length - 1);


	ui.toggleLoader(false);
	r.dom.setPageNo();
	r.notifyRefresh();
	r.lock = false;
};

myImagesSelectedGallery.notifyRefreshAction = null;

myImagesSelectedGallery.notifyRefresh = function(){
	if (myImagesSelectedGallery.notifyRefreshAction != null) {
		var index = myImagesSelectedGallery.menu.index;
		myImagesSelectedGallery.notifyRefreshAction(myImagesSelectedGallery.m.infos[index]);
	}
};

	myImagesSelectedGallery.getCurrentImageNum = function () {
		return (myImagesSelectedGallery.menu.index + 1) + ((myImagesSelectedGallery.currentPage - 1)
			* MAX_IMAGES_PER_PAGE);
	};

myImagesSelectedGallery.currentPage;
myImagesSelectedGallery.galleryId;

myImagesSelectedGallery.getSelectedItem = function(){
	var index = myImagesSelectedGallery.menu.index;
	return myImagesSelectedGallery.m.infos[index];
};

var imageDetails = new BS.App(
	'imageDetails',
	{
		helpId: 'imageDetails',
		requiredLicense: 'pictures',
		inputMapper: BS.App.portalDirectionKeyMapper
	}
);

imageDetails.isSlideShowOn = false;
imageDetails.slideShowTimeout = -1;
imageDetails.hideInfoBarTimeout = -1;
imageDetails.isInfoBarHidden = false;

imageDetails.autoShiftImages = function(){
	imageDetails.onInputEvent('right');
};
imageDetails.onInputEvent = function(keyPressedName){
	if (imageDetails.hideInfoBarTimeout != -1){
			clearTimeout(imageDetails.hideInfoBarTimeout);
			imageDetails.hideInfoBarTimeout = -1;
	}
	if (imageDetails.isInfoBarHidden){
		imageDetails.dom.imageDetailsShow.begin();
		imageDetails.isInfoBarHidden = false;
	}

	if (imageDetails.image) {
		switch (keyPressedName) {
			case 'ok':
			case 'back':
				am.pop();
				break;
		}
	}
	else {
		switch (keyPressedName) {
			case 'ok':
				if (imageDetails.isSlideShowOn && imageDetails.slideShowTimeout != -1) {
					clearTimeout(imageDetails.slideShowTimeout);
					slideShowTimeout = -1;
				}
				imageDetails.isSlideShowOn = !imageDetails.isSlideShowOn;
				if (imageDetails.isSlideShowOn) {
					imageDetails.onInputEvent('right');
					imageDetails.dom.imageDetailsHide.begin();
				}
				else {
					imageDetails.dom.imageDetailsShow.begin();
				}

				imageDetails.setActionBarButtons();
				break;
			case 'left':
				if (myImagesSelectedGallery.lock)
					return;
				if (imageDetails.isSlideShowOn && imageDetails.slideShowTimeout != -1) {
					clearTimeout(imageDetails.slideShowTimeout);
					slideShowTimeout = -1;
				}
				var item = myImagesSelectedGallery.requestItem(-1);
				imageDetails.onItemRefresh(item);
				break;
			case 'right':
				if (myImagesSelectedGallery.lock)
					return;
				if (imageDetails.isSlideShowOn && imageDetails.slideShowTimeout != -1) {
					clearTimeout(imageDetails.slideShowTimeout);
					slideShowTimeout = -1;
				}
				var item = myImagesSelectedGallery.requestItem(+1);
				imageDetails.onItemRefresh(item);
				break;
			case 'back':
				imageDetails.isSlideShowOn = false;
				if (imageDetails.slideShowTimeout != -1) {
					clearTimeout(imageDetails.slideShowTimeout);
					imageDetails.slideShowTimeout = -1;
				}
				am.pop();
				break;
		}
	}
};

imageDetails.onItemRefresh = function(_item){
	if (_item != null) {
		imageDetails.dom.show();

		if (imageDetails.isSlideShowOn)
			imageDetails.slideShowTimeout = setTimeout(imageDetails.autoShiftImages, 10000);
		else{
			if (imageDetails.hideInfoBarTimeout == -1)
				imageDetails.setInfoBarTimeout();
		}
	}
};

imageDetails.init = function(caller, image){
	if (!imageDetails.dom){
		imageDetails.dom = new ModuleDom(
			[
				'imageDetailsModule', 'imageDetailsButton', 'imageDetailsImage',
				'imageDetailsPageNum', 'imageDetailsDate', 'imageDetailsUsername',
				'imageDetailsShow', 'imageDetailsHide', 'photoLayer0'
			],
			{
				show: function(){
					var _item = imageDetails.image ?
						imageDetails.image : myImagesSelectedGallery.getSelectedItem();
					imageDetails.dom.imageDetailsImage.attr('href', _item.photoUrl, NS.xlink);

					if (!imageDetails.image) {
						imageDetails.dom.imageDetailsPageNum.text(
								myImagesSelectedGallery.getCurrentImageNum() + '/' +
							myImages.getNumOfImagesInGallery());
						imageDetails.dom.imageDetailsUsername.text(myImages.getGalleryOwner());
						imageDetails.dom.imageDetailsDate.text(
							new Date(_item.dateTaken).toFormatedString(_formats.dateTime));
					}

					imageDetails.dom.imageDetailsPageNum.show();
					imageDetails.dom.imageDetailsDate.show();
					imageDetails.dom.imageDetailsUsername.show();
					imageDetails.dom.imageDetailsImage.show();
					imageDetails.dom.imageDetailsModule.show();
					imageDetails.dom.imageDetailsButton.show();
					imageDetails.dom.photoLayer0.show();
				},
				hide: function(){
					imageDetails.dom.imageDetailsImage.attr('href', '-', NS.xlink);
					imageDetails.dom.imageDetailsPageNum.hide();
					imageDetails.dom.imageDetailsDate.hide();
					imageDetails.dom.imageDetailsUsername.hide();
					imageDetails.dom.imageDetailsImage.hide();
					imageDetails.dom.imageDetailsModule.hide();
					imageDetails.dom.imageDetailsButton.hide();
					imageDetails.dom.photoLayer0.hide();
				}
			}
		);
		try {
			imageDetails.actionBar = new ui.ActionBar(imageDetails.dom.imageDetailsButton);
			imageDetails.setActionBarButtons();
		} catch(ex){}
	}
	imageDetails.image = null;
	ui.toggleLoader(true);
	if (image)
		imageDetails.image = image;
	else
		myImagesSelectedGallery.notifyRefreshAction = imageDetails.onItemRefresh;

	imageDetails.isSlideShowOn = false;
	imageDetails.setActionBarButtons();
	imageDetails.dom.show();
	if (imageDetails.hideInfoBarTimeout == -1)
		imageDetails.setInfoBarTimeout();
	ui.toggleLoader(false);
};

imageDetails.destroy = function(){

	if (!imageDetails.image) {
		myImagesSelectedGallery.notifyRefreshAction = null;
	}

	imageDetails.actionBar.hide();
	imageDetails.dom.hide();
};

imageDetails.blur = function(caller) {
	if (caller !== 'communityMessagePopup')
		imageDetails.dom.hide();
};

imageDetails.focus = function(callerModule){
	imageDetails.dom.show();
};
imageDetails.setActionBarButtons = function(){

	if (imageDetails.image)
		imageDetails.actionBar.set([['back', 'back'], ['confirm', 'ok']]);
	else
		imageDetails.actionBar.set([
			['back', 'toMainMenu'],
			['horizontal', 'promotion_next_prev'],
			['empty', null],
			['confirm', imageDetails.isSlideShowOn ? 'stop_slide_show' : 'start_slide_show']
		]);

};
imageDetails.setInfoBarTimeout = function(){
	imageDetails.hideInfoBarTimeout = setTimeout( function(){
		imageDetails.dom.imageDetailsHide.begin();
		imageDetails.hideInfoBarTimeout = -1;
		imageDetails.isInfoBarHidden = true;
	}, 5000);
};



var settingsFlickrUser = new BS.App('settingsFlickrUser',{requiredLicense: 'pictures',
	inputMapper: BS.App.portalDirectionKeyMapper
});
settingsFlickrUser.kbdSpecialChars = ['.','_','@',':','?','!','*','(',')','[',']','/','%','#'];
settingsFlickrUser.onInputEvent = function(keyPressedName){
	var r  = settingsFlickrUser;
	var	userTxt = r.dom.flickrConnectedUser.text();

	switch (keyPressedName) {
	case 'left':
	case 'back':
		am.pop();

		break;
	case 'keyboard':
		keyboard.enableSpecialChars(r.kbdSpecialChars);
		am.push(keyboard, userTxt);

		break;
	case 'down':
		r.dom.flickrConnectedUser.text('');

		break;
	default:
		if(!isNaN(parseInt(keyPressedName, 10))){
			keyboard.enableSpecialChars(r.kbdSpecialChars);
			am.push(keyboard, userTxt, keyPressedName);
		}

		break;
	}
};
settingsFlickrUser.init = function() {
	var that = settingsFlickrUser;
	var	sApp = mm.getApp('Settings');

	if ('dom' in that === false)
	that.dom = new ModuleDom(
		['settings_connect_to_flickr_user','flickrConnectedUser'],
		{
			show:function(){
				sApp.dom.showSubModule('settingsFlickrUser','sett_flickr_user');
			},
			hide:function(){
				sApp.dom.hideSubModule();
			}
		},
		function(){
			sApp.dom.settings_connect_to_flickr_user = this.settings_connect_to_flickr_user;
		}
	);

	that.dom.show();
	misc.dom.actionBar.set([
		['back', 'back'],
		['empty', null],
		['empty', null],
		['keyboard', 'edit']
	]);
	BS.request.get('ExternalService/getExternalServiceUserId', function (s,d) {
		if (s && d){
			that.dom.flickrConnectedUser.text(d);
		}
	}, ['COMMUNITY.SERVICE.FLICKR']);
};
settingsFlickrUser.destroy = function() {
	var r = settingsFlickrUser;
	r.dom.flickrConnectedUser.text('');
	r.dom.hide();
};

settingsFlickrUser.focus = function(caller, word) {
	if (!word) return;

	switch (caller) {
		case 'keyboard':
			settingsFlickrUser.dom.flickrConnectedUser.text(word);
			if (word && word.length > 0) {
				BS.request.get('ExternalService/registerUserToExternalService', function (s,d) {
					if (s) {
						if (d && d.statusCode == 0)
							ui.generalAlert(tr('flickr_user_connected') +' '+ tr('OK'));
						else
							ui.generalAlert(tr(d.resultValue));
					} else
						ui.generalAlert(tr('flickr_user_conn_error') +' '+ tr('fail'));

				}, ['COMMUNITY.SERVICE.FLICKR',word]);
			}
			break;
	}
};

settingsFlickrUser.startup = function(){
	if (BS.skinConfiguration.enableFlickrMenuItem) {
		var bss = BS.BeeSmartSettings;
		bss.nodeExtras.appendChild(
			new bss.SettingNode(
				'sett_flickr_user', 'sett_flickr_user_msg', ['defaultUser', 'subUser'],
				1, mm.getApp('settingsFlickrUser'), null
			)
		);
	}
};


var modRecordings = mm.getModule('MyRecordings');
modRecordings.register(myImages);
modRecordings.register(myImagesSelectedGallery);
modRecordings.register(imageDetails);
modRecordings.register(settingsFlickrUser);

})(BeeSmart);



(function(BS, q, PVR){
var am = BS.appMgr;
var mm = BS.modMgr;
var ui = BS.ui;
var bmisc = BeeSmart.misc;
var ModuleDom = $.ModuleDom;
var recMain = mm.getApp('MyRecordings');
var misc = mm.getApp('Misc');
var BeeSmartMain = mm.getModule('BeeSmartMain');
var tvLib = BeeSmartMain.tvLibrary;

var	CONTENTTYPE_PVR = 'PVR';

var sharedContent = new BS.App(
	'sharedContent',{
		helpId: 'sharedContent',
		requiredLicense: 'mediasharing',
		inputMapper: BS.App.portalDirectionKeyMapper
	}
);

sharedContent.onInputEvent = function(keyPressedName){
	if (sharedContent.lock)
		return;

	var item;

	switch(keyPressedName) {
		case 'up':
		case 'down':
			if (sharedContent.recordingsMenuIsShown) {
				if (sharedContent.menu2Items && sharedContent.menu2Items.size() > 0)
					sharedContent.menu2Items[keyPressedName === 'up' ? 'previous' : 'next']();
				sharedContent.setActionBar();
			}
			else {
				if (sharedContent.menu1Items && sharedContent.menu1Items.size() > 0)
					sharedContent.menu1Items[keyPressedName === 'up' ? 'previous' : 'next']();
			}
			break;
		case 'ok':
		case 'right':
			if (!this.menu1Items || (this.menu1Items.size() === 0)) break;
			if (sharedContent.recordingsMenuIsShown) {
				item = sharedContent.menu2Items.currentInfo();
			    var popupMenu = mm.getApp('shared_menu_dialog');
				popupMenu.setShareData(item);
				am.push(popupMenu);

			} else {
				sharedContent.getShareList();
			}
			break;
		case 'green':
			if (sharedContent.recordingsMenuIsShown) {
				item = sharedContent.menu2Items.currentInfo();
				if (!item.isAccepted()) {
					sharedContent.updateStatus(item,
						BS.recMgr.SharedNetworkRecording.SHARESTATUS_ACCEPTED);
					sharedContent.alert.show(tr('sharedContent_accepted'));
				} else {
					if (item.isUnread()) {
						sharedContent.updateStatus(
							item,
							BS.recMgr.SharedNetworkRecording.SHARESTATUS_READ,
							function(){
								mm.getApp('myRec').showRecordingDetails(item);
							}
						);
					}
					else
						mm.getApp('myRec').showRecordingDetails(item);

				}
			}
			break;

		case 'left':
			if (sharedContent.recordingsMenuIsShown) {
				sharedContent.recordingsMenuIsShown = false;
				sharedContent.dom.sharedContentMenu2.hide();
				sharedContent.setActionBar();
			} else {
				am.pop();
			}
			break;
		case 'back':
			am.pop();
			break;
	}
};
sharedContent.getShareList = function(){
	var item = sharedContent.menu1Items.currentInfo();
	ui.toggleLoader();
	BS.request.get('ContentSharingService/getShareListByUser', function(s, d){
		ui.toggleLoader();
		if (s) {
			sharedContent.dom.fillRecordingsMenu(d);
			sharedContent.setActionBar();
		}
	}, [item.key, CONTENTTYPE_PVR]);
};
sharedContent.updateStatus = function(item, newStatus, callback){
	item.updateStatus(
		function(success)
		{
			if (success){
				item.shareStatus = newStatus;
				sharedContent.dom.setMenu2StatusIcon.trigger('changeStatusIcon',
		  			{
		  				'menuItemIndex':sharedContent.menu2Items.currentIndex(),
						'newIcon': item.getShareStatusImage()
		  			}
				);
				sharedContent.setActionBar();
			}
			if (callback != null) callback();
		}, newStatus
	);
};

sharedContent.updateMenu1FilesCounter = function(_newCount, _incrementOrDecrease){
	var item = sharedContent.menu1Items.currentInfo();
	if (_newCount > -1)
		item.numberOfSharedFiles = _newCount;
	item.numberOfSharedFiles += _incrementOrDecrease;
	sharedContent.dom.sharedContentMenu1Trigger.trigger('setMenu1Values',
	{
		'menuItemIndex':sharedContent.menu1Items.currentIndex(),
		'numberOfSharedFiles': item.numberOfSharedFiles
	});
};

sharedContent.setActionBar = function(){
	if (sharedContent.recordingsMenuIsShown && sharedContent.menu2Items.currentInfo()) {
		if (!(sharedContent.menu2Items.currentInfo().isAccepted())) {
			misc.dom.actionBar.set([
				['back', 'back'],
				['vertical', 'select'],
				['green', 'accept_share'],
				['confirm', 'more']
			]);
		} else {
			misc.dom.actionBar.set([
				['back', 'back'],
				['vertical', 'select'],
				['empty', null],
				['confirm', 'more']
			]);
		}
	} else {
		var item = null;
		if (sharedContent.menu1Items)
			item  = sharedContent.menu1Items.currentInfo();
		if (sharedContent.menu1Items && item && item.numberOfSharedFiles > 0)
			misc.dom.actionBar.set([
				['back', 'back'],
				['vertical', 'select'],
				['empty', null],
				['confirm', 'confirm']
			]);
		else
			misc.dom.actionBar.set([
				['back', 'back'],
				['empty', null],
				['empty', null],
				['empty', null]
			]);
	}
};
sharedContent.getSharedContent = function () {
	var dfr = q.defer();
	BS.request.get('ContentSharingService/getSharingUsersList',
		function(s, d){
			ui.toggleLoader();
			if (s)
				dfr.resolve(d);
			else
				dfr.reject(d);
		}, [CONTENTTYPE_PVR, 'SORT.SHARE_COUNT']
	);
	return dfr.promise.catch(function(e){
		BS.logger.info('Shared content error: ' + e);
	});
};
sharedContent.init = function(callerAppId, mode){
	sharedContent.lock = true;
	ui.toggleLoader();
	sharedContent.getSharedContent().then(function(data){
		sharedContent.dom.fillUsersMenu(data);
	}).done(function(){
		sharedContent.setActionBar();
		sharedContent.dom.sharedContentModule.show();
	});
	recMain.dom.recordingsInfoText.hide();
	misc.dom.navigationPush(tr(recMain.getRecMainItemByKey(recMain.getMode()).navigationTitle));
	sharedContent.lock = false;
};

sharedContent.getContentTypeImage = function(clip){
	var imageContentType = '';
	if (clip.isInstant()){
		imageContentType = '#recordingInstantImage';
	} else {
		imageContentType = clip.end
			< Date.now() ? '#recordingTvShowImage' : '#recordingScheduledImage';
	}
	return imageContentType;
};

sharedContent.startup = function(){

	var parseSvgAndInit = function (){
		sharedContent.alert = new BS.ui.Alert({autoHide:3000});
		sharedContent.dom = new ModuleDom(
			[
				'sharedContentModule', 'sharedContentMenu', 'sharedContentMenu1Trigger',
				'sharedContentMenu2', 'setMenu2StatusIcon'
			],
			{
				fillUsersMenu: function(_items){
					if (_items === null || _items.length === 0){
						sharedContent.dom.sharedContentModule.show();
						ui.generalAlert(tr('noSharedContent'));
						sharedContent.dom.sharedContentMenu.hide();
						return;
					}
					sharedContent.dom.sharedContentModule.show();
					sharedContent.dom.sharedContentMenu.show();

					sharedContent.menu1Items = sharedContent.menu1.newMenuItems();
					var items = [];
					var infos = [];
					for(var i in _items){
						var obj = {
								name:_items[i].prop_messaging_profile_nickname,
								key:_items[i].prop_ID_messaging_profile,
								numberOfSharedFiles: _items[i].numberOfSharedContents +
								 	_items[i].numberOfSharedUnprocessedContents
							};
						var c = ui.template('sharedContentL1ItemTemplate', {
								'name': obj.name,
								'numberOfSharedFiles': tr('NumOfSharedFiles') + ' ' +
									obj.numberOfSharedFiles,
								'avatarLink': BS.imageUrlProvider.toImageUrl(_items[i].avatarLink)
							});
						items.push(c);
						infos.push(obj);
					}
					sharedContent.menu1Items.setItems(items, infos).show();
				},

				fillRecordingsMenu: function(_items){

					if (_items === null || _items.length === 0){
						ui.generalAlert(tr('noSharedContent'));
						sharedContent.menu2Items.setItems([], [])
						sharedContent.dom.sharedContentMenu2.hide();
						return;
					}

					sharedContent.updateMenu1FilesCounter(_items.length, 0);

					sharedContent.recordingsMenuIsShown = true;
					sharedContent.menu2Items = sharedContent.menu2.newMenuItems();
					var items =[];
					var infos =[];
					var icon;
					var imageContentType;

					for(var i in _items) {
						_items[i].content.contentType = _items[i].contentType;
						var clip = new BS.recMgr.SharedNetworkRecording(_items[i]);
						imageContentType = sharedContent.getContentTypeImage(clip);
						icon = clip.getShareStatusImage();
						var title = '';
						try {
							title = clip.channel().name;
						} catch (x){
							try {
								title = tvLib.getChannelById(clip.channelId).name;
							} catch (x) {}
						}

						if (clip.title) {
							title = title + ', ' + clip.title;
						}

						var	menuItem = ui.template('sharedContentL2ItemTemplate', {
							'name': title,
							'status': clip.shareStatus,
							'imageLink': icon,
							'start': clip.start,
							'duration':((clip.end - clip.start)/1000).toMovieFormat(),
							'imageLink2': imageContentType
							});
						items.push(menuItem);
						infos.push(clip);
					}
					sharedContent.menu2Items.setItems(items, infos).show();
					sharedContent.dom.sharedContentMenu2.show();
				}

			}
		);

		if (
			recMain
			&& BS.modMgr.isAllowed('mediasharing')
			&& PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.Instant)
			&& PVR.featurePolicy.isFeatureAvailable(PVR.RecordingFeatures.Program)
		) {
			recMain.addMenuItem(
				'sharedContent',
				'recMain_sharedcontent',
				'sharedcontent_navigation_title',
				recMain.MODE_SHARED_CONTENT,
				'sharedContentDescr',
				5
			);
		}

		sharedContent.menu1 = new ui.Menu($('#sharedContent_MenuSelector1')[0]);
		sharedContent.menu2 = new ui.Menu($('#sharedContent_MenuSelector2')[0]);
	};

	setTimeout(function(){
		BS.template.get('svg/shared_content.svg').finally(parseSvgAndInit);
	}, 100);
};

sharedContent.popupMenuDialogAction = function(action) {
	var shareData;

	switch(action){
		case 'play':
			shareData = sharedPopupMenu.shareData;
			if (!shareData.isAccepted()) {
				sharedContent.updateStatus(
					shareData,
					BS.recMgr.SharedNetworkRecording.SHARESTATUS_ACCEPTED,
					function(){
						mm.getApp('myRecDetails').playContent(shareData);
					}
				);

			} else {
				mm.getApp('myRecDetails').playContent(shareData);
			}

			break;
		case 'delete':
			shareData = sharedPopupMenu.shareData;
			sharedContent.deleteShare(shareData);
			break;
		case 'description':
			shareData = sharedPopupMenu.shareData;
			if (shareData.isUnread()) {
				sharedContent.updateStatus(
					shareData,
					BS.recMgr.SharedNetworkRecording.SHARESTATUS_READ,
					function(){
						mm.getApp('myRec').showRecordingDetails(shareData);
					}
				);
			} else
				mm.getApp('myRec').showRecordingDetails(shareData);
			break;
	}
};
sharedContent.focus = function(callerAppId, arg1, arg2, arg3){
	if (callerAppId === 'shared_menu_dialog' && arg1 === 'ok') {
		sharedContent.popupMenuDialogAction(arg3);
		return;
	}

	if (callerAppId === 'deleteShare')
		mm.getApp('deleteShare').unregister();

	sharedContent.dom.sharedContentModule.show();
	sharedContent.setActionBar();
};

sharedContent.blur = function(caller, arg) {
	if (caller !== 'shared_menu_dialog' && caller !== 'communityMessagePopup' && caller
		!== 'deleteShare') {
		sharedContent.dom.sharedContentModule.hide();
	}
};

sharedContent.destroy = function(){
	sharedContent.menu1Items = null;
	sharedContent.menu2Items = null;
	sharedContent.recordingsMenuIsShown = false;
	sharedContent.dom.sharedContentMenu2.hide();
	sharedContent.dom.sharedContentModule.hide();
};

sharedContent.deleteShare = function(sharedRecording){
	var infoDialog = new BeeSmartMain.InfoDialog(
		'deleteShare',
		{
			onBeforeExit: function(keyPressed){
				if (keyPressed === 'ok'){
					ui.toggleLoader();
					sharedRecording.remove(
						function(resultStatus){
							if (resultStatus) {
								sharedContent.getSharedContent().then(function(data){
									sharedContent.dom.fillUsersMenu(data);
								}).done(function(){
									sharedContent.setActionBar();
									sharedContent.dom.sharedContentModule.show();
								});

								sharedContent.getShareList();
								sharedContent.updateMenu1FilesCounter(-100, -1);
							}
						}
					);
					sharedContent.alert.show(tr('sharedContent_deleted'));
				}
			}
		}
	);
	BeeSmartMain.register(infoDialog);
	am.push(infoDialog, tr('deleteContentShareTitle'), tr('deleteContentShareText'));
};


var sharedPopupMenu = new BeeSmartMain.MenuListDialog(
	'shared_menu_dialog',
	null,
	{
		onBeforeExit: function(key){
		}
	}
);
sharedPopupMenu.shareData = null;
sharedPopupMenu.setShareData = function(_shareData){
	sharedPopupMenu.shareData = _shareData;
};
sharedPopupMenu.getCurrentInfo = function(){
	return this.actionMenu.currentInfo();
};
sharedPopupMenu.init = function(){
	var infos = [];
	BeeSmartMain.MenuListDialog.prototype.init.call(this, tr('sharedOptions'));

	if (sharedPopupMenu.shareData.end < Date.now())
		infos.push({name: tr('Play'), key: 'play', iconLink: '#iconTvShowPlayableNormal'});
	infos.push({name: tr('Delete'), key: 'delete' , iconLink: '#errSmall1'});
	infos.push({name: tr('Details'), key: 'description', iconLink: '#recordingDetails'});
	this.fillActionMenu(infos);
};
BeeSmartMain.register(sharedPopupMenu);




var modRecordings = BS.modMgr.getModule('MyRecordings');
modRecordings.register(sharedContent);

})(BeeSmart, Q, BeeSmart.PVR);



(function (BS, q, mm, am) {

	var misc = mm.getApp('Misc');
	var BeeSmartMain = mm.getModule('BeeSmartMain');
	var bsRegionId = null;
	var bsUserId = null;

	BS.evMgr.bind('onBeeSmartLoginSuccess', function () {
		var user = BS.portal.user;
		bsRegionId = user.regionId;
		bsUserId = user.userId;
	});

	var appIndex = 0;

	var allAppsLink = '/restapi/rest/%d/apps';
	var installedAppsLink = '/restapi/rest/%d/%d/apps/installed';

	function BeeStoreCategoryService(categoryRepository, productRepository, storeService) {
		this.storeCategoryRepo = categoryRepository;
		this.productRepository = productRepository;
		this.storeService = storeService;
	}

	BeeStoreCategoryService.prototype = {
		storeCategoryRepo: null,
		productRepository: null,
		storeService: null,
		getByParentId: function(id) {
			if (id === misc.adapterMainMenu.appId)
				id = null;

			return this.storeCategoryRepo
				.findByParentIdAndType(id, 'bee-app');
		},
		getCategoryContents: function(category) {
			if (category instanceof this.storeCategoryRepo.DynamicCategory) {
				if (category.id === this.storeCategoryRepo.Category.beeAppsIds.ALL_APPS) {
					return this.getAllAppsCategoryContents();
				} else if (category.id === this.storeCategoryRepo.Category.beeAppsIds.MY_APPS) {
					return this.getMyAppsCategoryContents();
				}

			} else if (category instanceof this.storeCategoryRepo.Category) {
				return this.getCategoryContentsForNormalCategory(category);
			}
		},
		getAllAppsCategoryContents: function() {
			return this.productRepository.findByType('bee-app');
		},
		getMyAppsCategoryContents: function() {
			var that = this;
			return that.productRepository.findByType('bee-app')
				.filter(function(prod) {
					var productStatus = that.storeService
						.getProductPurchaseStatus(prod.id);
					if (productStatus.isPurchased()) {
						return true;
					}
					if (productStatus.isFree()) {
						var app = BeeSmartMain.beeStoreAppRepository
							.findById(prod.items[0].id);
						return app && app.isUserInstalled;
					}
					return false;
				});
		},
		getCategoryContentsForNormalCategory: function(category) {
			return this.productRepository.findByIds(category.purchaseGroupsIds, 'bee-app');
		},
		initialize: function() {
			return this.storeCategoryRepo.initialize('bee-app');
		},
		destroy: function() {
			this.storeCategoryRepo.clearCategoryRepoData('bee-app');
		}
	};

	BeeSmartMain.beeStoreCategoryService = new BeeStoreCategoryService(
		BeeSmartMain.categoryRepository,
		BeeSmartMain.productRepository,
		BeeSmartMain.storeService
	);

	function BeeStoreApp(p) {
		if (!('id' in p) || !('title' in p))
			throw 'beestore-app-invalid-argument';

		this.id = p.id;
		this.svgId = 'b-store-app-' + (++appIndex);

		this.update(p);

		this._conf = {};
		if ('status' in p) {
			if (p.status !== 'uninstalled') {
				try {
					this.install();
				} catch (ex) {
					if (ex === 'bee-app-cant-be-installed')
						BS.logger.info('BEE STORE :: App %s cannot be installed (is it deployed?)',
							this.id);
				}
			}
			if (p.status === 'on-widget-bar' && p.deployed) {
				widgetBarService.addToWidgetBar(this);
			}
		}
	}

	BeeStoreApp.prototype = {
		id: null,
		svgId: '',
		version: '1.0-GA',
		title: '',
		summary: '',
		description: '',
		sourceLink: '',
		userRating: null,
		myRating: null,
		images: null,
		preferredAppShortcutIn: '',
		type: 'widget',
		isInstalled: false,
		isDeployed: false,
		isUserInstalled: false,
		_conf: null,

		update: function (props) {
			this.title = props.title;
			this.summary = ('summary' in props) ? props.summary : '';
			this.description = ('description' in props) ? props.description : '';
			this.images = {
				icon: ('image' in props) ? props.image :
					('images' in props) ? props.images.icon : '',
				screenshots: ('images' in props) ? props.images.screenshots : []
			};
			this.sourceLink = props.sourceLink || '';
			this.type = props.type || 'widget';
			this.isDeployed = !!props.deployed;
			this.myRating = props.myRating ? props.myRating : null;
			this.preferredAppShortcutIn = props.preferredAppShortcut;
		},
		launch: function () {
			var that = this;
			BS.logger.info('Launching: %s', that.sourceLink);

			if (that.sourceLink === '') {
				BS.logger.info('App is probably not deployed! Launch aborted.');
				return this;
			}

			var eventData = {};
			eventData.eventId = misc.eventIds.beeStoreAppLaunched;
			eventData.uid = that.id;
			eventData.start = Date.now();
			misc.event.write(eventData);

			if (that.isSvgSrc()) {
				am.push(mm.getApp('GameGround'), that.sourceLink);
				return this;
			}

			if (that.isHtmlSrc()) {
				am.push(mm.getApp('BeeWebBrowser'), that.sourceLink);
				return this;
			}

			try {
				var bsMod = mm.getModule(that.id);
				setTimeout(function () {
					bsMod.launcher();
				}, 100);

			} catch (e) {
				BS.logger.info(e.message);
			}

			return this;
		},
		isSystemType: function() {
			return this.type === 'system';
		},
		isWidgetType: function() {
			return this.type === 'widget';
		},
		isSvgSrc: function () {
			return !!this.sourceLink.match(/\.svg$/i);
		},
		isHtmlSrc: function () {
			return !this.sourceLink.match(/\.svg$/i)
				&& !this.sourceLink.match(/\.js$/i);
		},
		persist: function () {
			var that = this;
			BS.request.Post(
				'/restapi/rest/%d/%d/apps/%s/settings'.sprintf(bsRegionId, bsUserId, this.id),
				{accept: 'json', data: { 'value': JSON.stringify(this._conf) }}
			).then(function () {
					BS.logger.debug('Persisted on-widget-bar=' + that.isAppHookedOnWidgetBar(this));
				});
			return this;
		},
		_doneInstalling: null,
		install: function (whenDone) {
			var that = this;
			that.isUserInstalled = true;
			if (!that.isInstallable())
				throw 'bee-app-cant-be-installed';
			that._doneInstalling = whenDone || BS.F;

			if (that.isSvgSrc()) {
				that.isInstalled = true;
				that._doneInstalling(true);
				return that;
			}
			if (that.isHtmlSrc()) {
				that.isInstalled = true;
				that._doneInstalling(true);
				return that;
			}

			var loc = BS.request.OPTIONS.location;
			var isLocalOrigin = -1 !== location.href.indexOf('file://');
			if (!BS.portal.isOnline) {
				BS.logger.info('BEE-STORE: App can\'t be installed from local filesystem yet ' +
					'(unimplemented LA feature)!');
				return that;
			}
			var effectiveScriptUrl = isLocalOrigin ?
				'%s://%s'.sprintf(loc.protocol, loc.host) + that.sourceLink :
				that.sourceLink;

			BS.logger.info('Installing ' + effectiveScriptUrl);
			mm.registerAddon(
				{
					id: that.id,
					name: that.title,
					location: effectiveScriptUrl
				},
				function (success) {
					if (!success)
						that._doneInstalling(false);
				}
			);
			return that;
		},
		isInstallable: function () {
			return this.isDeployed && !this.isInstalled;
		},
		isLaunchReady: function () {
			var isLaunchReady = false;
			if (this.sourceLink === '')
				return false;

			try {
				var bsMod = mm.getModule(this.id);
				isLaunchReady = 'launcher' in bsMod;
			} catch (x) {
				isLaunchReady = true;
			}

			return isLaunchReady && this.isInstalled;
		},
		toString: function () {
			return 'BeeStoreApp(%s:%s:%s)[%s,%s]@%s'.sprintf(
				this.id,
				this.title,
				this.type,
				this.isInstalled ? 'INST' : '',
				widgetBarService.isAppHookedOnWidgetBar(this) ? 'WG-BAR-HOOK' : '',
				this.sourceLink
			);
		},
		signature: function () {
			return 'BSAPP|%s|%s|%s|%s'.sprintf(
				this.id, this.version, this.images.icon, this.sourceLink
			);
		}
	};

	BS.evMgr.bind('onBeeSmartModuleAvailable', function beeStoreOnBeeSmartModuleAvailable(e) {
		var appId = e.value;

		if (!BeeSmartMain.beeStoreAppRepository)
			return;
		var app = BeeSmartMain.beeStoreAppRepository.findById(appId);

		if (!app)
			return;

		app._doneInstalling(true);
		app.isInstalled = true;
		BS.logger.trace('BEE STORE :: App %s installed', app.id);
	});

	var allAppsFetch = function() {
		var url = allAppsLink.sprintf(bsRegionId, bsUserId);
		return BS.request
			.Get(url, {accept: 'json'})
			.then(function (response) {
				return q(response.data);
			})
			.catch(function(ex) {
				BS.logger.info('Could not fetch all apps. Reason: ' + ex);
				throw ex;
			});
	};

	var installedAppsFetch = function() {
		var url = installedAppsLink.sprintf(bsRegionId, bsUserId);
		return BS.request
			.Get(url, {accept: 'json'})
			.then(function (response) {
				return q(response.data);
			})
			.catch(function(ex) {
				BS.logger.info('Could not fetch installed apps. Reason: ' + ex);
				throw ex;
			});
	};

	function BeeAppRepository() {}
	BeeAppRepository.prototype = {
		list: [],
		idMap: {},
		BeeStoreApp: BeeStoreApp,
		add: function(app) {
			if (!this.idMap[app.id]) {
				this.list.push(app);
				this.idMap[app.id] = app;
			}
		},
		containsId: function(id) {
			return id in this.idMap;
		},
		remove: function(app) {
			if (!this.idMap[app.id]) {
				return false;
			}
			for(var i = 0, len = this.list.length; i < len; i++) {
				if (this.list[i].id === app.id) {
					this.list.splice(i, 1);
					delete this.idMap[app.id];
					return true;
				}
			}
			return false;
		},
		findById: function(id) {
			return this.idMap[id];
		},
		all: function() {
			return this.list;
		},
		initialize: function(onlyInstalled) {
			var that = this;
			var tasks = [];
			if (!onlyInstalled) {
				var allAppsPromise = allAppsFetch()
					.then(this.processAppsResponseList.bind(this))
					.catch(function(ex) {
						BS.logger.info('BeeAppRepository failed to initialize! Reason: ' + ex);
					});
				tasks.push(allAppsPromise);
			}

			var installedAppsPromise = installedAppsFetch()
				.then(this.processAppsResponseList.bind(this))
				.catch(function(ex) {
					BS.logger.info('BeeAppRepository failed to initialize! Reason: ' + ex);
				});
			tasks.push(installedAppsPromise);

			return q.all(tasks).then(function() {
				BS.logger.trace('Bee Store App Repository initialized with %d apps',
					that.list.length);
			});
		},
		processAppsResponseList: function(apps) {
			var len = apps.length;
			for(var i = 0; i < len; i++) {
				if (this.containsId(apps[i].id)) {
					this.findById(apps[i].id).update(apps[i]);
				} else {
					this.add(new BeeStoreApp(apps[i]));
				}
			}
		},
		destroy: function() {
			var newList = [];
			var newIdMap = {};
			for (var i = 0; i < this.list.length; i++) {
				var app = this.list[i];
				if (app.isInstalled) {
					newList.push(app);
					newIdMap[app.id] = app;
				}
			}
			this.list = newList;
			this.idMap = newIdMap;
			BS.logger.trace('Bee App Repository destroyed');
		}
	};

	BeeSmartMain.beeStoreAppRepository = new BeeAppRepository();

	var widgetBarService = {
		_shortcutMenu: null,
		addToWidgetBar: function (app) {
			if (this.isAppHookedOnWidgetBar(app))
				return this;

			this._shortcutMenu.append(app);
			app._conf['on-widget-bar'] = true;
			return this;
		},
		removeFromWidgetBar: function (app) {
			if (!this.isAppHookedOnWidgetBar(app))
				return this;

			this._shortcutMenu.remove(app);
			app._conf['on-widget-bar'] = false;
			return this;
		},
		isAppHookedOnWidgetBar: function (app) {
			return (('on-widget-bar' in app._conf) && app._conf['on-widget-bar']);
		},
		initialize: function(shortcutMenu) {
			if (shortcutMenu instanceof BS.App) {
				this._shortcutMenu = shortcutMenu;
			} else {
				throw 'shortcutMenu-not-bs-app';
			}
		}
	};
	Object.seal(widgetBarService);
	BeeSmartMain.widgetBarService = widgetBarService;

})(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.appMgr
);


(function (BS, q, mm, am, ui, ModuleDom, media, logger, keys) {

	var misc = mm.getApp('Misc');
	var BeeSmartMain = mm.getModule('BeeSmartMain');
	var extraAppsItems = [];
	var bsRegionId = null;
	var bsUserId = null;
	var widgetBarService;
	var beeStoreCategoryService;
	var beeStoreAppRepo;
	var storeService;
	var storeCategories = new BS.App('AppStoreCategories', {});
	var languageCode;

	storeCategories.categoryStack = [];
	storeCategories.productAndAppInitPromise = null;

	storeCategories.init = function (caller, parentCategoryId) {
		var that = this;
		ui.toggleLoader(true);
		that.productAndAppInitPromise = q.all([
			BeeSmartMain.productRepository.updateAllProductsOfType('bee-app', true),
			beeStoreAppRepo.initialize()
		]);
		beeStoreCategoryService.initialize('bee-app').then(function() {
			that.processCategories(parentCategoryId);
		}).done(function() {
			ui.toggleLoader(false);
			that.lock = false;
		});

		that.anyCatObjs = [];

		if (!that.dom) {
			that.dom = {
				categorySelector: $('#bee-store-cats-selector'),
				categoriesHolder: $('#beeStoreCats'),
				actionBar: function () {
					misc.dom.actionBar.set([
						['back', 'back'],
						['vertical', 'select'],
						['empty', null],
						['confirm', 'more']
					]);
				}
			};
			that.menu = new ui.Menu(that.dom.categorySelector[0]);
		}

		that.lock = true;

		that.dom.categoriesHolder.show();
		that.dom.actionBar();
	};

	storeCategories.processCategories = function(parentCategoryId) {
		var categories = beeStoreCategoryService.getByParentId(parentCategoryId);

		var items = [], data = [];

		var catObj;
		for (var i = 0; (catObj = categories[i++]);) {
			items.push(ui.template('beeStoreCatsMenuTemplate', { title: catObj.title }));
			data.push(catObj);
		}

		if (items.length === 0) {
			items.push(ui.template('beeStoreCatsMenuTemplate', {
				title: tr('genericEmptyMenu')
			}));
			data.push(null);
		}

		if (this.cCatMenu) {
			this.cCatMenu.destroy();
		} else {
			this.cCatMenu = this.menu.newMenuItems();
		}
		this.cCatMenu = this.menu.newMenuItems().setItems(items, data).show();
	};

	storeCategories.blur = function () {
		this.dom.categoriesHolder.hide();
	};

	storeCategories.focus = function () {
		this.dom.categoriesHolder.show();
		this.dom.actionBar();
	};

	storeCategories.destroy = function () {
		this.dom.categoriesHolder.hide();
		beeStoreAppRepo.destroy();
		beeStoreCategoryService.destroy();
		BeeSmartMain.productRepository.clearProductRepoData('bee-app');
	};

	storeCategories.onInputEvent = function (key) {
		var that = this;
		if (that.lock)
			return;
		switch (key) {
		case 'left':
		case 'back':
			if (that.categoryStack.length) {
				misc.dom.navigationPop();
				that.processCategories(that.categoryStack.pop().parentId);
			} else {
				am.pop();
			}
			break;
		case 'up':
		case 'down':
			if (key === 'down')
				that.cCatMenu.next();
			else
				that.cCatMenu.previous();
			break;
		case 'ok':
			var item = that.cCatMenu.currentInfo();
			if (!item) {
				return;
			}

			misc.dom.navigationPush(item.title);

			if (item.isLeaf) {
				ui.toggleLoader(true);
				that.lock = true;
				q.when(that.productAndAppInitPromise, function() {
					am.push(appStore, item);
				}).catch(function(ex) {
					BS.logger.info('BEE STORE :: Cannot open category %s, reason %s', item, ex);
				}).done(function() {
					ui.toggleLoader(false);
					that.lock = false;
				});
			} else {
				that.categoryStack.push(item);
				that.processCategories(item.id);
			}

			break;
		}
	};

	var appStore = new BS.App('AppStore', {
		listenTo: [keys.shortcuts]
	});

	appStore.productList = [];
	appStore.appList = [];
	appStore.category = null;

	appStore.init = function (caller, categoryObj) {
		var that = appStore;

		this.category = categoryObj;

		var products = beeStoreCategoryService.getCategoryContents(categoryObj);
		var productsLength = products.length;
		if (productsLength > 0) {
			for(var i = 0; i < productsLength; i++) {
				var app = beeAppProductService.getAppFromProduct(products[i]);
				if (app && app.isWidgetType()) {
					this.productList.push(products[i]);
					this.appList.push(app);
				}
			}
		}

		that.dom = that.dom || new ModuleDom(
			[
				'appStoreHolder', 'appStoreMenu', 'appStoreSelector', 'appStoreMenuTemplate',
				'appStoreNoAppsHolder'
			],
			{
				show: function () {
					this.actionBar();
					this.appStoreHolder.show();
				},
				hide: function () {
					this.appStoreHolder.hide();
				},
				generate: function (products) {
					var items = [], productList = [];
					if (!that.menu) {
						that.menu = new ui.Menu(this.appStoreSelector[0]);
					}
					for (var i = 0; i < products.length; i++) {
						var product = products[i];
						var app = beeAppProductService.getAppFromProduct(product);
						var label = beeAppProductService.getProductLabel(product, app);

						items.push(ui.template('appStoreMenuTemplate', {
							id: app.svgId,
							title: product.title,
							summary: product.details.summary,
							icon: app.images.icon,
							label: label
						}));

						productList.push(product);
					}

					if (that.menuItems) {
						that.menuItems.destroy();
					} else {
						that.menuItems = that.menu.newMenuItems();
					}

					that.menuItems = that.menu.newMenuItems().setItems(items, productList).show();

					if (items.length === 0)
						that.dom.appStoreNoAppsHolder.show();
					else
						that.dom.appStoreNoAppsHolder.hide();

					this.actionBar();
				},
				actionBar: function () {
					var appsPresent = that.menuItems.size() > 0 ?
						['confirm', 'more'] : ['empty', null];
					misc.dom.actionBar.set([
						['back', 'back'],
						['vertical', 'select'],
						['empty', null],
						appsPresent
					]);
				}
			}
		);
		that.dom.generate(this.productList);
		that.dom.show();
	};

	appStore.destroy = function () {
		this.productList = [];
		this.appList = [];
		this.category = null;
		this.dom.hide();
		this.productAndAppInitPromise = null;
		misc.dom.navigationReset();
	};

	appStore.blur = function (caller) {
		if (caller !== 'BeeStoreAppOperations' && caller !== 'content_purchase' &&
			caller !== 'callOperatorDialog' &&
			caller !== 'subscriptionApp')
			this.dom.hide();
	};

	appStore.focus = function (caller, keypressed, arg1, option) {
		this.dom.show();
		switch (caller) {
		case 'BeeStoreAppOperations':
			if (keypressed === 'ok') {
				switch (option) {
				case 'description':
					this.dom.hide();
					am.push(mm.getApp('AppDescription'), this.menuItems.currentInfo());

					break;
				case 'addToBar':

					break;
				}
			}

			break;
		case 'AppDescription':
			this.dom.show();

			break;
		default:
			mm.getApp(misc.adapterMainMenu.appId).selectCModule(storeCategories.id);

			break;
		}
	};

	appStore.onInputEvent = function (keyPressedName) {
		var that = this;

		if (keys.shortcuts.indexOf(keyPressedName) !== -1) {
			if (!am.lastLoaded(appStore) && !am.lastLoaded('AppDescription')) am.pop();
			return true;
		}

		switch (keyPressedName) {
		case 'left':
		case 'back':
			misc.dom.navigationPop();
			am.pop();
			break;
		case 'up':
		case 'down':
			if (keyPressedName === 'down') {
				that.menuItems.next();
			} else {
				that.menuItems.previous();
			}
			break;
		case 'ok':
			if (that.menuItems.size() === 0)
				return;
			am.push(mm.getApp('BeeStoreAppOperations'), that.menuItems.currentInfo());
			break;
		}
	};

	BS.evMgr.bind('onBeeSmartModuleAvailable', function (e) {
		var id = e.value;
		if (!beeStoreAppRepo)
			return;
		var app = beeStoreAppRepo.findById(id);

		if (!app)
			return;

		$('#' + app.svgId).find('.appStatus').text(tr('BEE_STORE_INSTALLED'));
	});

	var bsAppOp = new BeeSmartMain.MenuListDialog('BeeStoreAppOperations', null, {});
	bsAppOp.app = null;
	bsAppOp.product = null;

	bsAppOp.onAppLoad = function () {
		bsAppOp.lock = true;
		ui.toggleLoader(true);
		setTimeout(bsAppOp.onAppLoaded, 7000);
	};

	bsAppOp.onAppLoaded = function () {
		bsAppOp.lock = false;
		ui.toggleLoader(false);
	};

	bsAppOp.purchaseCallback = function() {
		var that = this;
		var ps = storeService.getProductPurchaseStatus(that.product.id);
		if (ps.isInOtherSubscription()) {
			storeService.showSubscriptionApp([that.product]);
			return;
		}
		if (!that.product.clientPurchaseEnabled) {
			storeService.showCallOperatorDialog(that.product);
			return;
		}
		var purchaseData = {
			priceItem: that.product.priceList[0],
			product: that.product,
			dialogTitle: tr('BEE_STORE_PURCHASE')
		};

		am.push(mm.getApp('content_purchase'), function(options) {
			that.onAppLoad();
			var product = options.content.product;
			var priceItem = options.content.priceItem;
			return storeService.purchaseProduct(product, priceItem)
				.then(function() {
					return q({
						message: tr('success'),
						todo: that.installCallback.bind(that)
					});
				}, function(ex) {
					var error = ex.data.errors[0];
					var priceType = priceItem.price.type;

					BS.logger.debug('BEE STORE :: App purchase failed because ' +
						error.errorMessage);

					if (error.errorCode === 304) {
						return {todo: function() {
							storeService.showCallOperatorDialog(that.product);
						}};
					}

					if (error.errorCode === 500)
						throw ex;

					return q({todo: function () {
						var message = storeService.getErrorCodeDescription(error.errorCode);
						if (error.errorCode === 20 && priceType === 'points')
							am.push(mm.getApp('payPoints'));
						else
							ui.generalAlert(message);
					}});
				});
		}, purchaseData);
	};

	bsAppOp.installCallback = function() {
		var that = this;
		that.onAppLoad();

		var url = '/restapi/rest/%d/%d/apps/installed/%s'
			.sprintf(bsRegionId, bsUserId, that.app.id);

		BS.request
			.Put(url, {accept: 'json', preventEvent: true})
			.then(function () {
				that.onAppLoad();
				that.app.install(function (success) {
					that.onAppLoaded();
					$('#' + that.app.svgId).find('.appStatus').text(tr('BEE_STORE_INSTALLED'));
					if (!that.app.isInstalled && !success)
						new ui.Alert({autoHide: 2000})
							.show(tr('BEE_STORE_APP_INSTALL_ACTION_FAILED'));
				});

				if (that.app.preferredAppShortcutIn === 'widget-bar') {
					widgetBarService.addToWidgetBar(that.app);
				}

				return q({message: tr('BEE_STORE_SUCCESS')});
			});
	};



	bsAppOp.init = function (caller, product) {
		var mld = BeeSmartMain.MenuListDialog;
		var ActionList = mld.ActionList;
		var infos = new ActionList();
		var app = beeStoreAppRepo.findById(product.items[0].id);
		var productStatus = storeService.getProductPurchaseStatus(product.id);

		BeeSmartMain.MenuListDialog.prototype.init.call(this, tr('BEE_STORE_ACTIONS'));

		this.product = product;
		this.app = app;

		if (productStatus.isFree() && !app.isInstalled && app.isDeployed)
			infos.addActionItem(this.menuItems.install);

		if (app.isLaunchReady()) {
			if (productStatus.isPurchased() || (productStatus.isFree() && app.isInstalled)) {
				infos.addActionItem(this.menuItems.launch);
				infos.addActionItem(
					widgetBarService.isAppHookedOnWidgetBar(app) ?
						this.menuItems.removeFromWidgetBar : this.menuItems.toWidgetBar
				);
			}
		}


		if (!productStatus.isFree() && productStatus.isPayable() && app.isDeployed
			|| productStatus.isInOtherSubscription())
			infos.addActionItem(this.menuItems.purchaseItem);

		if (!am.isLoaded('AppDescription'))
			infos.addActionItem(this.menuItems.description);

		this.fillActionMenu(infos.getList());
	};
	bsAppOp.startup = function () {
		bsAppOp.menuItems = {
			install: new BeeSmartMain.MenuListDialog.ActionItem({
				key: 'install',
				iconLink: '#install',
				name: tr('BEE_STORE_INSTALL'),
				callback: bsAppOp.installCallback.bind(bsAppOp)
			}),
			launch: new BeeSmartMain.MenuListDialog.ActionItem({
				key: 'launch',
				iconLink: '#playCinemaBig',
				name: tr('BEE_STORE_LAUNCH'),
				callback: function () {
					this.app.launch();
				}.bind(bsAppOp)
			}),
			toWidgetBar: new BeeSmartMain.MenuListDialog.ActionItem({
				key: 'addToBar',
				iconLink: '#widgetbar-add',
				name: tr('BEE_STORE_ADD_TO_WIDGET_BAR'),
				callback: function () {
					widgetBarService.addToWidgetBar(this.app);
					this.app.persist();
				}.bind(bsAppOp)
			}),
			removeFromWidgetBar: new BeeSmartMain.MenuListDialog.ActionItem({
				key: 'removeFromBar',
				iconLink: '#widgetbar-remove',
				name: tr('BEE_STORE_REMOVE_FROM_WIDGET_BAR'),
				callback: function () {
					widgetBarService.removeFromWidgetBar(this.app);
					this.app.persist();
				}.bind(bsAppOp)
			}),
			purchaseItem: new BeeSmartMain.MenuListDialog.ActionItem({
				key: 'buy',
				iconLink: '#icon_purchase',
				name: tr('BEE_STORE_PURCHASE'),
				callback: bsAppOp.purchaseCallback.bind(bsAppOp)
			}),
			description: new BeeSmartMain.MenuListDialog.ActionItem({
				key: 'description',
				iconLink: '#iconTvShowDescription',
				name: tr('BEE_STORE_DESCRIPTION'),
				callback: BS.F
			})
		};
	};

	BeeSmartMain.register(bsAppOp);

	var appDescription = new BS.App('AppDescription', {});

	appDescription.product = null;
	appDescription.onInputEvent = function (key) {
		var that = this;

		switch (key) {
		case 'left':
		case 'back':
			am.pop();
			break;
		case 'up':
		case 'down':
			if (key === 'up') {
				that.descrPanel.moveUp();
			} else {
				that.descrPanel.moveDown();
			}

			break;
		case 'green':
			var ps = storeService.getProductPurchaseStatus(that.product.id);
			var app = beeAppProductService.getAppFromProduct(that.product);

			if (app.isLaunchReady() && (ps.isPurchased() || (ps.isFree() && app.isInstalled))) {
				app.launch();
				break;
			}

			if (ps.isFree() && !app.isInstalled && app.isDeployed) {
				bsAppOp.product = that.product;
				bsAppOp.app = app;
				bsAppOp.installCallback();
				break;
			}

			if (!ps.isFree() && ps.isPayable() && app.isDeployed || ps.isInOtherSubscription()) {
				bsAppOp.product = that.product;
				bsAppOp.purchaseCallback();
				break;
			}
			break;
		case 'ok':
			var menuDialog = mm.getApp('BeeStoreAppOperations');
			am.push(menuDialog, that.product);
			break;
		}
	};

	appDescription.init = function (caller, product) {
		var that = this;
		that.dom = that.dom || new ModuleDom(
			[
				'appStoreDescriptionHolder', 'appStoreDescriptionPanel',
				'appStoreDescriptionScrollGroup', 'appStoreDescriptionText',
				'appStoreDescriptionScroller', 'appStoreDescriptionImg',
				'appStoreDescriptionTitle', 'appStoreDescriptionLargeImg',
				'appStoreDescriptionPrice', 'appStoreDescriptionLargeImgTitle',
				'appStoreNotInSubscriptionHolder', 'appStorePriceHolder',
				'appStoreDescriptionLargeImgLocked', 'appStoreDescriptionUpDownArrows'
			],
			{
				show: function () {
					this.actionBar();
					this.appStoreDescriptionHolder.show();
				},
				hide: function () {
					this.appStoreDescriptionHolder.hide();
				},
				generate: function (product) {
					var ps = storeService.getProductPurchaseStatus(product.id);
					var app = beeAppProductService.getAppFromProduct(product);
					this.appStoreDescriptionTitle.text(product.title);
					this.appStoreDescriptionImg.attr('href', app.images.icon, NS.xlink);
					if (product.isAgeRestricted()) {
						this.appStoreDescriptionLargeImg.attr('href', '-', NS.xlink);
						this.appStoreDescriptionLargeImgLocked.show();
					} else {
						this.appStoreDescriptionLargeImgLocked.hide();
						this.appStoreDescriptionLargeImg.attr('href',
								product.poster, NS.xlink);
					}
					this.appStoreDescriptionText.svg(product.details.description);
					if (ps.isInOtherSubscription()) {
						this.appStorePriceHolder.hide();
						this.appStoreNotInSubscriptionHolder.show();
					} else {
						this.appStoreDescriptionPrice.text(
							beeAppProductService.getProductLabel(product, app)
						);
						this.appStoreNotInSubscriptionHolder.hide();
						this.appStorePriceHolder.show();
					}
				},
				actionBar: function () {
					var ps = storeService.getProductPurchaseStatus(that.product.id);
					var app = beeAppProductService.getAppFromProduct(that.product);
					var purchasable = !ps.isFree() && ps.isPayable() && app.isDeployed ||
						ps.isInOtherSubscription();
					var launchable = app.isLaunchReady() && (ps.isPurchased() ||
						(ps.isFree() && app.isInstalled));
					var installable = ps.isFree() && !app.isInstalled && app.isDeployed;
					var showGreen = launchable || installable || purchasable;
					var label = launchable ? 'BEE_STORE_LAUNCH' : installable ? 'BEE_STORE_INSTALL' :
						purchasable ? 'BEE_STORE_PURCHASE' : '';

					misc.dom.actionBar.set([
						['back', 'back'],
						['vertical', 'scrollContent'],
						showGreen ? ['green', label] : ['empty', null],
						['confirm', 'more']
					]);
				}
			}
		);

		that.product = product;
		that.dom.generate(product);

		setTimeout(function () {
			that.descrPanel = new ui.ScrollingPanel(
				that.dom.appStoreDescriptionScrollGroup[0],
				null,
				that.dom.appStoreDescriptionScroller[0],
				null,
				that.dom.appStoreDescriptionUpDownArrows[0]
			);
		}, 0);

		that.dom.show();
	};

	appDescription.destroy = function () {
		this.product = null;
		this.dom.hide();
	};

	appDescription.blur = function (caller) {
		if (caller !== 'BeeStoreAppOperations' && caller !== 'content_purchase' &&
			caller !== 'callOperatorDialog' &&
			caller !== 'subscriptionApp')
			this.dom.hide();
	};

	appDescription.focus = function (caller) {
		if (caller === 'content_purchase') {
			setTimeout(function() {
				this.dom.actionBar();
				this.dom.generate(this.product);
			}.bind(this), 2000);
		}
		this.dom.show();
	};

	var shortcutMenu =
		(function () {

			var smApp = new BS.App('ShortcutMenu', { helpId: 'shortcut_menu' });
			var prevAppList = [];
			var currAppList = [];
			var smDom = null;

			smApp.smItems = [];
			smApp.onInputEvent = function (keyPressedName) {
				var isFocused = am.lastLoaded(this.id);
				if (!isFocused || smApp.lock)
					return;

				switch (keyPressedName) {
				case 'back':
					am.pop();
					break;
				case 'left':
				case 'right':
					var shiftIndex = BS.portal.direction === 'rtl' ? -1 : 1;

					this._currentShortcutIndex = Array.calculateIndex(
							keyPressedName === 'left' ?
								this._currentShortcutIndex - shiftIndex :
								this._currentShortcutIndex + shiftIndex,
						this.smItems.length
					);

					smDom.updateMenu(this._currentShortcutIndex, keyPressedName);
					break;
				case 'ok':
					var liveTv = mm.getApp('liveTv');
					if (liveTv) {
						liveTv.blur('ShortcutMenu');
					}

					var app = currAppList[this._currentShortcutIndex];

					try {
						app.launch();
					} catch (e) {
						BS.logger.info(e.message);
					}

					break;
				}
			};

			smApp.startup = function () {
				smDom = new ModuleDom(
					[
						'sm_focus', 'sm_ani_off', 'sm_ani_on',
						'shortcutIconText', 'shortcutMenuLowQuality',
						'smHolder', 'smDefs'
					],
					{
						show: function (withAni) {
							smApp._state = 'shown';
							this['smHolder'].show();
							if (withAni) {
								this['sm_ani_on'].begin();
							}
						},
						hide: function (withAni) {
							if (smApp._state === 'hidden')
								return;
							smApp._state = 'hidden';
							if (withAni) {
								this['sm_ani_off'].begin(function () {
									if (smApp._state === 'hidden') {
										smDom['smHolder'].hide();
									}
								});
							} else {
								this['smHolder'].hide();
							}
						},
						setFocus: function () {
							smApp.lock = false;
							this['sm_focus'].show();
							this.shortcutIconText.show();
						},
						unsetFocus: function () {
							smApp.lock = true;
							this['sm_focus'].hide();
							this.shortcutIconText.hide();
						},
						updateMenu: function (index, key) {
							function ciIndex(position) {
								if (BS.portal.direction === 'rtl')
									return index - position;
								return index + position;
							}

							var ci = Array.calculateIndex;
							var mmListCount = smApp.smItems.length;
							var cIcons = [
									ci(ciIndex(-4), mmListCount),
									ci(ciIndex(-3), mmListCount),
									ci(ciIndex(-2), mmListCount),
									ci(ciIndex(-1), mmListCount),
									ci(index, mmListCount),
									ci(ciIndex(1), mmListCount),
									ci(ciIndex(2), mmListCount),
									ci(ciIndex(3), mmListCount),
									ci(ciIndex(4), mmListCount)
								];
							var mIconIndex = Math.floor(cIcons.length / 2);
							this.shortcutIconText.svg(smApp.smItems[cIcons[mIconIndex]].title);

							for (var i = 0; i < cIcons.length; i++)
								this.iconsDom.eq(i)
									.attr('href', '#' + smApp.smItems[cIcons[i]].id, NS.xlink);

							if (key)
								this.anis.filter('#shortcut_inFrom' + key).begin();
						}
					},
					function() {}
				);

				smApp._state = 'hidden';
				smDom.iconsDom = smDom['smHolder'].find('.sm-icon');
				smDom.anis = $(BS.portal.direction === 'rtl' ?
					'#shortcut_inFromleft, #shortcut_inFromright' :
					'#shortcut_inFromright, #shortcut_inFromleft');

				smApp.dom = smDom;
				BS.ui.ActionBar($('#shortcutMenuActionBar'));
			};

			smApp.append = function (appObj) {
				if (!(appObj instanceof beeStoreAppRepo.BeeStoreApp))
					throw 'invalid-argument-provided';
				if (currAppList.indexOf(appObj) !== -1)
					throw 'app-already-hooked-here';
				currAppList.push(appObj);
			};

			smApp.remove = function (appObj) {
				if (!(appObj instanceof beeStoreAppRepo.BeeStoreApp))
					throw 'invalid-argument-provided';
				if (currAppList.indexOf(appObj) === -1)
					throw 'app-not-hooked-here';
				currAppList = Array.remove(currAppList, currAppList.indexOf(appObj));
			};

			smApp.rebuild = function (shortcutAppList) {
				var resultItems = [];
				for (var i = 0; i < shortcutAppList.length; i++) {
					var item = shortcutAppList[i];
					resultItems.push({ id: item.id, title: item.title });
				}
				return resultItems;
			};

			smApp.init = function () {
				if (currAppList.length === 0) {
					BS.logger.info('cannot show shortcut menu - NO shortcuts present');
					am.pop('no-shortcut');
					return;
				}
				function simplify(v) {
					return v.signature();
				}
				function displayItem(v) {
					return { id: v.id, title: v.title, icon: v.images.icon };
				}
				if (prevAppList.map(simplify).join('') !== currAppList.map(simplify).join('')) {
					smApp.smItems = currAppList.map(displayItem);
					smApp._currentShortcutIndex = 0;
					smDom.smDefs.svg(BS.ui.template('smIconsTpl', {'icons': smApp.smItems}));
					smDom.updateMenu(0);
				}
				prevAppList = [];
				for (var i = 0, len = currAppList.length; i < len; i++)
					prevAppList.push(currAppList[i]);
				smDom.show(true);
				smDom.setFocus();
			};

			smApp.destroy = function (callerModule, arg) {
				smDom.hide(arg && arg === 'no-shortcut' ? false : true);
				smDom.unsetFocus();
			};

			smApp.focus = function () {
				misc.adapterMainMenu.selectCModule('liveTv');
				smDom.setFocus();
				smDom.show();
			};

			smApp.blur = function () {
				smDom.unsetFocus();
				smDom.hide(false);
			};

			smApp.hide = function (withAni) {
				smDom.hide(withAni);
			};

			smApp.show = function (withAni) {
				smDom.show(withAni);
			};

			smApp.canBeShown = function () {
				return currAppList.length !== 0;
			};

			return smApp;
		})();

	var gameGround = new BS.App(
			'GameGround',
			{
				listenTo: [BS.InputManager.allKeys],
				inputMapper: BS.App.portalDirectionKeyMapper
			}
		);
	var gamesDom = {gamesHolder: null};
	var gamesKeysLocked = false;
	var fsShortcutPressed = false;
	var portalDisplayed = false;

	gameGround.onInputEvent = function (key) {
		if (gamesKeysLocked) {
			if (key !== 'fsTV')
				return;
			fsShortcutPressed = true;
			var a = gamesDom.gamesHolder.children()[0];
			a.getElementById('gameAni').endElement();
		}

		switch (key) {
		case 'back':
			am.pop();

			break;
		default:
			return true;
		}
	};

	gameGround.init = function (caller, url) {
		fsShortcutPressed = false;
		if (!url) {
			BS.logger.info('ERROR: gameGround.init should have url as an argument');
		}
		if (!gamesDom.gamesHolder) {
			gamesDom.gamesHolder = $('#gamesHolder');
		}
		gameGround.onGameStart(url);
	};

	gameGround.onGameStart = function (gameUrl) {
		var frame;
		gamesDom.gamesHolder.append(
			frame = $.parseSvg('<animation id="gameAni" width="1280" height="720"/>')
		);
		$(frame).attr('href', gameUrl, NS.xlink);
		document.documentElement.setFocus(frame);
		portalDisplayed = !misc.portalIsHidden();
		if (portalDisplayed) {
			misc.hidePortal();
		}
		media.stop();
		gamesKeysLocked = true;
		frame.beginElement();
		frame.addEventListener(
			'endEvent',
			function () {
				setTimeout(gameGround.onGameEnd, 350);
			},
			false
		);
		fsShortcutPressed = false;
	};

	gameGround.onGameEnd = function () {
		var liveTv = mm.getApp('liveTv');
		gamesDom.gamesHolder.text('');
		liveTv.setChannel(liveTv.getCurrentChannel());
		gamesKeysLocked = false;
		if (fsShortcutPressed) {
			misc.onInputEvent('fsTV');
		} else {
			if (portalDisplayed) {
				mm.getApp('Misc').showPortal();
			}
			am.pop();
		}
	};

	gameGround.destroy = function () {
		gamesKeysLocked = false;
	};

	var beeAppProductService = {
		getProductLabel: function(product, app) {
			var status = storeService.getProductPurchaseStatus(product.id);
			app = app || this.getAppFromProduct(product);

			if (status.isPurchased())
				return tr('BEE_STORE_INSTALLED');
			if (app.isInstalled)
				return tr('BEE_STORE_INSTALLED');
			if (status.isFree())
				return tr('BEE_STORE_INSTALL');
			if (status.isInOtherSubscription())
				return tr('BEE_STORE_NOT_IN_SUBSCRIPTION');
			if (status.isPayable() && !product.clientPurchaseEnabled)
				return tr('callOperatorBeeAppLabel');
			return this.getProductPrice(product).toLocaleString(languageCode);
		},
		getProductPrice: function(product) {
			var price = product.priceList[0].price;
			return price.value.formatPrice() + ' ' + price.symbol;
		},
		getAppFromProduct: function(product) {
			return beeStoreAppRepo.findById(product.items[0].id);
		}
	};

	new BS.Module(
		{
			id: 'Store',
			mmExtensions: {
				app: storeCategories,
				icon: 'apps',
				title: tr('BeeStore'),
				position: 4
			},
			startupTasks: [
				{
					name: 'Store UI',
					payload: function (params, callback) {
						bsRegionId = BS.portal.user.regionId;
						bsUserId = BS.portal.user.userId;

						BS.template.get('svg/store.svg').finally(callback);
						languageCode = BS.portal.user.language.label;
						beeStoreCategoryService = BeeSmartMain.beeStoreCategoryService;

						widgetBarService = BeeSmartMain.widgetBarService;
						widgetBarService.initialize(shortcutMenu);

						beeStoreAppRepo = BeeSmartMain.beeStoreAppRepository;
						beeStoreAppRepo.initialize(true).done();

						storeService = BeeSmartMain.storeService;
					}
				}
			]
		}
	)
		.register(appStore)
		.register(storeCategories)
		.register(appDescription)
		.register(shortcutMenu)
		.register(gameGround);

	BS.extend({
		type: 'ModuleConstructor',
		bindToProperty: 'appsExtensions',
		constructorAction: function (optionsObject) {
			for (var i = 0, len = optionsObject.length; i < len; i++) {
				var o = optionsObject[i];
				extraAppsItems.push(o);
			}
		},
		destructorAction: function () {}
	});
})(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	$.ModuleDom,
	BeeSmart.media,
	BeeSmart.logger,
	BeeSmart.InputManager.keyGroups
);

(function (BS, q, mm, am, ui, ModuleDom) {
	var promotions = new BS.App('Promotions', {
		helpId: 'sidebar_promotions', isDefault: true,
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	var misc = mm.getApp('Misc');
	var promoRepo = null;

	promotions.startup = function () {
		this.dom = new ModuleDom([
			'promotionsModule', 'promotion_content', 'promotionsMenu', 'promotionsMenuSelector',
			'promotionsInfoText'
		], {
			showSubModule: function (name, titleKeyword) {
				var dref = this[name];
				if (this.currSB)
					this.currSB.hide();

				dref.show();

				if (name === 'promotionsInfoText') {
					misc.dom.navigationPop();

				}
				else {
					this.promotionsInfoText.hide();
					misc.dom.navigationPush(tr(titleKeyword));
				}

				this.currSB = dref;
			},
			actionBar: function (buttonVector) {
				misc.dom.actionBar.set(buttonVector);
			},
			hideSubModule: function () {
				if (this.currSB) {
					this.currSB.hide();
					misc.dom.navigationReset();
				}
			},
			subModuleDescription: function (desc) {
				this.promotionsInfoText.show();
				this.promotionsInfoText.first().svg(desc);
			}
		});

		this.currentSubMenu = new ui.Menu(this.dom.promotionsMenuSelector[0]).newMenuItems();
	};

	promotions.onInputEvent = function (keyPressedName) {
		switch (keyPressedName) {
		case 'back':
		case 'left':
			am.pop();
			break;
		case 'up':
		case 'down':
			this.currentSubMenu[keyPressedName === 'up' ? 'previous' : 'next']();
			break;
		case 'ok':
		case 'right':
			if (this.currentSubMenu.size() === 0)
				return;

			this.showSelectedPromotion();
			break;
		}
	};

	promotions.showSelectedPromotion = function() {
		var ce = this.currentSubMenu.currentInfo();
		this.currentSubMenu.select(function () {
			am.push(promotionContent, ce);
		});
	};

	promotions.callerAppId = null;
	promotions.preselectedPromoId = null;
	promotions.init = function (callerAppId, promotionId) {
		this.callerAppId = callerAppId;
		this.preselectedPromoId = promotionId;

		if (this.callerAppId === null) {
			misc.showPortal();
			misc.adapterMainMenu.showCModule('' + this);
		}

		if (this.callerAppId === 'promotionPopup') {
			misc.dom.setModuleTitle(BeeSmartPromotions.mmExtensions.title);
			$('#currentModuleLogo').attr('href',
				'#mmi-' + BeeSmartPromotions.mmExtensions.icon, NS.xlink);
		}

		this.dom.subModuleDescription(tr('promotionsNotes'));
		this.setListActionBar();

		this.redrawMenu();

		this.dom.promotionsModule.show();
	};

	promotions.destroy = function () {
		this.dom.hideSubModule();
		this.dom.promotionsModule.hide();

		if (this.callerAppId === 'promotionPopup')
			misc.hidePortal();
	};

	promotions.focus = function () {
		this.dom.showSubModule('promotionsInfoText', '');
		this.dom.promotionsMenu.show();
		this.setListActionBar();
	};

	promotions.setListActionBar = function() {
		this.dom.actionBar([
			['back', 'toMainMenu'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'confirm']
		]);
	};

	promotions.blur = function (callingModule) {
		if (callingModule !== misc.adapterMainMenu.appId)
			this.dom.promotionsMenu.hide();
	};

	promotions.redrawMenu = function () {
		var that = this;
		var jumpTo = -1;
		var menuItems = [];
		var promoList = promoRepo.promotions;

		if (am.isLoaded('Promotions')) {
			if (promoList === null || promoList.length === 0) {
				ui.generalAlert(tr('genericEmptyMenu'));
				this.dom.promotionsMenu.hide();
			} else
				this.dom.promotionsMenu.show();
		}
		promoList.forEach(function (promo, i) {
			menuItems.push(promo.title);

			if (promo.id === that.preselectedPromoId) {
				jumpTo = i;
			}
		});
		menuItems = ui.template('standardMenuTemplate',
			{'text': menuItems, 'selector': this.dom.promotionsMenuSelector});
		this.currentSubMenu.setItems(menuItems, promoList).show();

		if (this.preselectedPromoId > -1) {
			this.currentSubMenu.jump(jumpTo, true, 0);
			this.showSelectedPromotion();
		}
	};

	var promotionContent = new BS.App(
		'promotion_content',
		{
			helpId: 'sidebar_promotions',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);
	promotionContent.onInputEvent = function (keyPressedName) {
		switch (keyPressedName) {
		case 'left':
		case 'back':
			am.pop();
			break;
		case 'up':
		case 'down':
			if (!this.descrPanel)
				return;

			if (keyPressedName === 'up')
				this.descrPanel.moveUp();
			else
				this.descrPanel.moveDown();
			break;
		}
	};

	promotionContent.init = function (caller, promotion) {
		promotions.dom.showSubModule(this.id, promotion.title);
		promotions.dom.actionBar([
			['back', 'back'], ['vertical', 'scrollContent'],
			['empty', null], ['empty', null]
		]);

		this.dom.fillPromotionsContent(promotion);
	};

	promotionContent.destroy = function () {
		this.descrPanel.destroy();
		this.descrPanel = null;
	};

	promotionContent.startup = function () {
		var that = this;
		that.dom = new ModuleDom([
			'promotionsTitleDescription', 'promotionsDescrPanel', 'promotionsContentText',
			'promotionsContentUpDownArrows'
		], {
			promotionsImage: new ui.Image($('#promotionsImage')),
			fillPromotionsContent: function (promotion) {
				this.promotionsTitleDescription.svg(promotion.title);
				this.promotionsImage.href = promotion.picture;
				this.promotionsContentText.svg(promotion.text.escapedBeeText());

				promotionContent.descrPanel = new ui.ScrollingPanel(
					$('#promotionsScrollGroup')[0],
					null,
					$('#promotionsContentScroller')[0],
					null,
					$('#promotionsContentUpDownArrows')[0]
				);
			}
		});
	};

	var BeeSmartPromotions = new BS.Module({
		id: 'Promotions',
		requiredLicense: 'promotions',
		mmExtensions: {
			app: promotions,
			icon: 'promotions',
			title: 'promotions',
			position: 6
		},
		startupTasks: [{
			name: 'Promotions UI',
			payload: function (params, callback) {
				var svgGet = BS.template.get('svg/promotions.svg');
				promoRepo = BeeSmart.promotionRepository;
				var promoRepoUpdate = promoRepo.updatePromotions()
					.finally(promotionRepositoryUpdater);
				q.allSettled([svgGet, promoRepoUpdate]).done(callback);
			}
		}]
	});

	function promotionRepositoryUpdater() {
		var audit = 'PROMOTIONS .promotionRepositoryUpdater()';
		q.delay(promoRepo.cacheValidDuration).then(function() {
			if (BS.device.power !== 'on')
				return;
			return promoRepo.newPromotions.then(function (newPromos) {
				BS.logger.info('%s Received %s new promotions', audit, newPromos.length);
				var showPopup = misc.portalIsHidden() && am.lastLoaded('liveTv');
				if (newPromos.length !== 0 && showPopup) {
					am.push(mm.getApp('notificationViewController'), newPromos);
				}
			}.bind(this)).catch(function (ex) {
				BS.logger.info('%s Could not get promotions: %s', audit, ex);
				BS.logger.log(ex);
			});
		}).finally(promotionRepositoryUpdater).done();
	}

	BeeSmartPromotions.register(promotions);
	BeeSmartPromotions.register(promotionContent);
})
(
	BeeSmart,
	Q,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.ui,
	$.ModuleDom
);

(function (BS) {

	var bill = new BS.App('Bills', {
		helpId: 'sidebar_bill', isDefault: true,
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	var mm = BS.modMgr;
	var am = BS.appMgr;
	var ui = BS.ui;
	var ModuleDom = $.ModuleDom;
	var billingServicesAvailable;
	var _formats = BS.portal.local.formats;
	var misc = mm.getApp('Misc');
	var user;

	BS.evMgr.bind('onBeeSmartLoginSuccess', function () {
		user = BS.portal.user;
	});

	bill.menu = null;
	bill.subMenu = null;
	bill.pastAvailableData = null;
	bill.initedUnits = null;

	var serviceMap = {
		'all': {
			'type': 'all',
			'trans': 'billingSummary'
		},
		'vod': {
			'type': 'on-demand',
			'trans': 'billingVod'
		},
		'livetv': {
			'type': 'live',
			'trans': 'billingChannels'
		},
		'payperview': {
			'type': 'show-view',
			'trans': 'billingPrograms'
		},
		'store': {
			'type': 'bee-app',
			'trans': 'billingStore'
		},
		'npvrquota': {
			'type': 'npvr-quota',
			'trans': 'billingRecQuota'
		},
		'catchup': {
			'type': 'catch-up-tv-window',
			'trans': 'billingCatchup'
		},
		'unknown': {
			'type': 'no-type-in-cdr',
			'trans': 'billingUnknown'
		}
	};

	bill.generateMenuItems = function () {
		var that = this;
		billingServicesAvailable = BS.config.get('Billing.BILLING_SERVICE_AVAILABLE');

		this.pastAvailableData = 5;
		var i;
		var date = new Date();
		var items = [];
		var infos = [];
		var text;
		var service;
		this.initedUnits = [];

		for (i = 0; i <= this.pastAvailableData; i++) {
			this.initedUnits[i] = new Date(date);
			date.setMonth(date.getMonth() - 1);
		}

		if (!this.menu)
			this.menu = new ui.Menu(that.dom['billingMenuSelector'][0]);

		for (i = 0; i < billingServicesAvailable.length; i++) {
			service = billingServicesAvailable[i].toLowerCase();
			text = service in serviceMap ? tr(serviceMap[service].trans) : '';

			if (text !== '') {
				var infoObj = {'id': service, 'name': text};
				items.push(text);
				infos.push(infoObj);
			}
		}

		items = ui.template('standardMenuTemplate',
			{'text': items, 'selector': that.dom['billingMenuSelector']});
		if (!this.subMenu)
			this.subMenu = this.menu.newMenuItems().setItems(items, infos);
		else
			this.subMenu.setItems(items, infos);

		this.subMenu.show();
	};

	bill.onInputEvent = function (keyPressedName) {
		var that = this;

		switch (keyPressedName) {
		case 'back':
		case 'left':
			am.pop();
			break;

		case 'up':
		case 'down':
			if (keyPressedName === 'up')
				that.subMenu.previous();
			else
				that.subMenu.next();
			break;

		case 'ok':
		case 'right':
			that.subMenu.select(function () {
				am.push(
					billContent,
					that.subMenu.currentInfo().id,
					that.subMenu.currentInfo().name
				);
			});

			break;
		default:
			break;
		}
	};

	bill.init = function () {
		var that = this;
		that.dom = that.dom || new ModuleDom(
			['billingModule', 'billingMenu', 'billingModuleInfoText', 'billingMenuSelector'],
			{
				toggleDefaultContent: function (value) {
					if (value === true) {
						that.dom['billingModule'].show();
					} else {
						that.dom['billingModule'].hide();
					}
				},
				actionBar: function (buttonVector) {
					misc.dom.actionBar.set(buttonVector);
				}
			}
		);

		if (that.subMenu === null)
			bill.generateMenuItems();

		that.subMenu.jump(0, true);
		that.dom.toggleDefaultContent(true);
		that.dom.actionBar([
			['back', 'toMainMenu'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'confirm']
		]);

	};

	bill.destroy = function () {
		this.dom.toggleDefaultContent(false);

	};

	bill.focus = function () {
		this.dom.toggleDefaultContent(true);
		this.dom.actionBar([
			['back', 'toMainMenu'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'confirm']
		]);
	};

	var billContent = new BS.App('billContent', {
		helpId: 'billContent',
		inputMapper: BS.App.portalDirectionKeyMapper
	});

	billContent.currentlyViewingFor = 0;
	billContent.currentServiceId = null;

	billContent.onInputEvent = function (keyPressedName) {

		if (this.lock)
			return;

		switch (keyPressedName) {
		case 'back':
		case 'left':
			am.pop('billContent');
			break;

		case 'up':
		case 'down':
			if (!this.descrPanel)
				break;

			if (keyPressedName === 'up')
				this.descrPanel.moveUp();
			else
				this.descrPanel.moveDown();
			break;

		case 'green':
			am.push(billDateChange, this.currentlyViewingFor);
			break;

		default:
			break;
		}
	};

	billContent.init = function (callerAppId, billId, billName) {
		var that = this;

		if (!billId) {
			am.pop();
			return;
		}

		that.dom = that.dom || new ModuleDom(
			[
				'billContent', 'currBillDateText', 'billContentScrollGroup',
				'billContentScroller', 'billContentText', 'billDisclaimerText',
				'billContentUpDownArrows'
			],
			{
				toggleDefaultContent: function (value) {
					if (value === true) {
						that.dom['billContent'].show();
					} else {
						that.dom['billContent'].hide();
					}
				}
			}
		);

		that.currentServiceId = billId;
		bill.dom.toggleDefaultContent(false);
		that.dom.toggleDefaultContent(true);
		misc.dom.navigationPush(billName);

		var billContent = null;

		ui.toggleLoader(true);
		that.lock = true;

		BS.request.Get(
			'/restapi/rest/%d/%d/bill'.sprintf(user.regionId, user.userId),
			{accept: 'json'}
		).then(function (response) {
				var currDate = new Date(Date.now());
				var year = currDate.getFullYear();
				var month = currDate.getMonth() + 1;
				var lastBill = response.data[response.data.length - 1];

				billContent = lastBill.month === month && lastBill.year === year ? lastBill : null;
				if (billContent) {
					billContent.bill.forEach(function (bill) {
						bill.currency = that.localizeCurrency(bill.currency);
					});
					billContent.currency = that.localizeCurrency(billContent.currency);
				}
			}).catch(function(ex) {
				if (ex.data && ex.data.errors && ex.data.errors[0]) {
					var errorMessage = ex.data.errors[0].exceptionMessage;
					BS.logger.trace('BILL exception occurred: %s', errorMessage);
				} else {
					BS.logger.log(ex);
				}

			}).finally(function () {
				bill.dom.actionBar(
					[
						['back', 'back'],
						['green', 'billPleaseSelectText'],
						['empty', null],
						['vertical', 'scrollContent']
					]
				);
				that.drawBills(billContent, 0);
				ui.toggleLoader(false);
				that.currentlyViewingFor = 0;
				that.lock = false;

			}).done();
	};

	billContent.localizeCurrency = function (currency) {
		return BS.PurchaseModel.Price.showSymbol ?
			BS.PurchaseModel.Price.currencyToSymbolMap[currency] : currency;
	};

	billContent.drawBills = function (listOfBills, curr) {
		var that = this;
		var drawBill = true;
		var billType = serviceMap[bill.subMenu.currentInfo().id].type;
		var listTypeExists = false;
		var list;
		that.dom['billContentText'].text('');
		that.currentlyViewingFor = curr;

		if (!listOfBills || listOfBills === null) {
			drawBill = false;
		} else if (billType === 'all') {
			drawBill = true;
		} else {
			list = listOfBills.bill || listOfBills;
			list.forEach(function (e) {
				if (e.type === billType)
					listTypeExists = true;
			});
			drawBill = listTypeExists;
		}

		if (!drawBill) {
			ui.generalAlert(tr('billNoData'));
		} else {

			if (billType && billType !== 'all') {

				list.forEach(function (e) {
					if (e.type === billType) {
						listOfBills.currency = e.currency;
						listOfBills.bill = e.items;
						listOfBills.sum = e.sum;
					}
				});

				listOfBills.bill.sort(function (a, b) {
					if (a['consumptionDate'] < b['consumptionDate']) return -1;
					if (a['consumptionDate'] > b['consumptionDate']) return 1;
					return 0;
				});
			} else {
				listOfBills.bill.sort(function (a, b) {
					if (a.type < b.type) return -1;
					if (a.type > b.type) return 1;
					return 0;
				});
			}

			var a = ui.template('billContentItemTemplateLasko', {
				'title': tr('billTableTitleRow_Title'),
				'date': that.currentServiceId !== 'all' ? tr('billTableTitleRow_Date') : '',
				'price': tr('billTableTitleRow_Price'),
				'bills': listOfBills.bill,
				'setBillTitle': function (bill) {
					if (bill.name)
						return bill.name;

					var item;
					for (item in serviceMap) {
						if (bill.type === serviceMap[item].type && serviceMap.hasOwnProperty(item))
							return tr(serviceMap[item].trans);
					}
					BS.logger.info('BILLING :: Unknown bill type %s', bill.type);
					return 'unknown-service';
				},
				'setBillDate': function (bill) {
					var date;
					if (bill['consumptionDate']) {
						date = new Date(bill['consumptionDate']).toFormatedString(
							BS.portal.local.formats.date);
					}
					return date;
				},
				'setYPosition': function (item, height, offset) {
					return (height * (item - 1)) + offset;
				},
				'setTotalYPosition': function (height, offset) {
					return (height * listOfBills.bill.length) + offset;
				},
				'setBillPrice': function (bill, divider) {
					var price = bill.price || bill.sum;
					var currency = listOfBills.currency || _formats.currencySign;
					return price.formatPrice().toString().concat(divider, currency)
						.toLocaleString(BS.portal.user.language.label);
				},
				'setTotalPrice': function (divider) {
					var currency = listOfBills.currency || _formats.currencySign;
					return listOfBills.sum.formatPrice().toString().concat(divider, currency)
						.toLocaleString(BS.portal.user.language.label);
				}
			});

			that.dom['billContentText'].append($.parseSvg(a));
		}

		that.descrPanel = new ui.ScrollingPanel(
			that.dom['billContentScrollGroup'][0],
			null,
			that.dom['billContentScroller'][0],
			null,
			that.dom['billContentUpDownArrows'][0]
		);

		that.dom['currBillDateText'].svg(
				tr('currentlyViewingBillForDate') + ': ' +
				new Date(bill.initedUnits[that.currentlyViewingFor]).toFormatedString('MMM yyyy')
		);
	};

	billContent.focus = function (callerAppId, args) {
		var that = this;
		if (callerAppId !== 'billDateChange' || args === undefined)
			return;

		var date = args;

		ui.toggleLoader(true);
		that.lock = true;

		var newDate = new Date(Date.now() - 2628000000 * date);
		var formattedDate = '%s-%s'.sprintf(newDate.getFullYear(),
				newDate.getMonth() + 1);
		var billSummary = bill.subMenu.currentInfo().id === 'all';
		var billContent = null;
		var url = billSummary ?
			'/restapi/rest/%d/%d/bill'.sprintf(user.regionId, user.userId) :
			'/restapi/rest/%d/%d/bill/%s'.sprintf(user.regionId, user.userId,
				formattedDate);

		BS.request.Get(url, {accept: 'json'}).then(function (response) {
			if (!billSummary) {
				response.data.forEach(function (e) {
					e.currency = that.localizeCurrency(e.currency);
					billContent = response.data;
				});
				return;
			}

			response.data.forEach(function (e) {
				var yearMonth = formattedDate.split('-');
				if (e.year === parseInt(yearMonth[0]) && e.month === parseInt(yearMonth[1], 10)) {
					e.currency = that.localizeCurrency(e.currency);
					e.bill.forEach(function (bill) {
						bill.currency = that.localizeCurrency(bill.currency);
					});

					billContent = e;
				}
			});
		}).finally(function () {
			that.drawBills(billContent, date);
			ui.toggleLoader(false);
			that.lock = false;
		}).done();
	};

	billContent.destroy = function () {
		this.dom.toggleDefaultContent(false);

		if (this.descrPanel) {
			this.descrPanel.destroy();
			this.descrPanel = false;
		}

		this.dom['billContentText'].text('');
		misc.dom.navigationPop();
	};


	var billDateChange = new BS.App('billDateChange', {
		type: 'popup',
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	billDateChange.forDate = null;

	billDateChange.onInputEvent = function (keyPressedName) {
		switch (keyPressedName) {
		case 'up':
			if (this.forDate === 0)
				break;

			this.forDate--;
			this.dom.changeDate(this.forDate);
			break;

		case 'down':
			if (this.forDate === bill.pastAvailableData)
				break;

			this.forDate++;
			this.dom.changeDate(this.forDate);
			break;

		case 'ok':
			am.pop(this.forDate);
			break;

		case 'green':
		case 'back':
		case 'left':
			am.pop();
			break;

		default:
			break;
		}
	};

	billDateChange.init = function (callerAppId, onDate) {
		if (onDate === null) {
			am.pop();
			return;
		}

		var that = this;
		that.dom = that.dom || new ModuleDom(
			[
				'billDateChangeDialog', 'billDateChangeDate', 'billDateChangeDialogShow',
				'billDateChangeDialogHide', 'billDateChangeDialogActionBar'
			],
			{
				showMenu: function () {
					this['billDateChangeDialog'].show();
					this['billDateChangeDialogShow'].begin();
				},
				hideMenu: function () {
					this['billDateChangeDialogHide'].begin(function () {
						that.dom['billDateChangeDialog'].hide();
					});
				},
				changeDate: function (onDate) {
					that.dom['billDateChangeDate'].text(
						new Date(bill.initedUnits[onDate]).toFormatedString('MMM yyyy')
					);

					that.forDate = onDate;
				}
			}
		);

		that.actionBar = new ui.ActionBar(that.dom['billDateChangeDialogActionBar']);
		that.dom.showMenu();
		that.dom.changeDate(onDate);
	};

	billDateChange.destroy = function () {
		this.dom.hideMenu();
	};


	new BS.Module(
		{
			id: 'Bills',
			requiredLicense: 'billing',
			mmExtensions: {
				app: bill,
				icon: 'bill',
				title: 'billing',
				position: 8
			},

			startupTasks: [
				{
					name: 'Billing UI',
					payload: function (params, callback) {
						BS.template.get('svg/billing.svg').finally(callback);
					}
				}
			]
		}
	).register(bill)
		.register(billContent)
		.register(billDateChange);
})(BeeSmart);

(function (BS, q) {
	var helpMenu = new BS.App('sidebar_helpmenu', {
		isDefault: true,
		helpId: 'sidebar_helpmenu',
		inputMapper: BS.App.portalDirectionKeyMapper
	});

	var mm = BS.modMgr;
	var am = BS.appMgr;
	var ui = BS.ui;
	var ModuleDom = $.ModuleDom;
	var misc = mm.getApp('Misc');
	var helpListData = null;
	helpMenu.dom = null;
	helpMenu.subMenu = null;
	helpMenu.menu = null;
	helpMenu.onInputEvent = function (key) {
		if (['back', 'left'].indexOf(key) !== -1 && (this.lock || helpListData === null)) {
			return;
		}
		switch (key) {
		case 'back':
		case 'left':
			am.pop();
			break;
		case 'up':
		case 'down':
			helpMenu.subMenu[key === 'up' ? 'previous' : 'next']();
			break;
		case 'right':
		case 'ok':
			helpMenu.subMenu.select(function () {
				if (helpMenu.subMenu.currentInfo() === undefined) return;
				ui.toggleLoader(true);
				BS.request.Get(
					'/stb/legacy-gateway/HelpItemService/getHelpItemForRegion',
					{data: {'arg0': helpMenu.subMenu.currentInfo().id}}
				).then(function (result) {
					misc.dom.navigationPush(helpMenu.subMenu.currentInfo().name);
					am.push(helpContent, result.data.result);
				}).catch(function (ex) {
					ui.generalAlert(tr('UNKNOWN_ERROR'));
					BS.logger.log(ex);
				}).finally(function () {
					ui.toggleLoader(false);
				});
			});
			break;
		}
	};
	helpMenu.init = function () {
		var that = this;
		if (!this.initialized) {
			BS.ui.toggleLoader(true);
			that.lock = true;
			var pFetchTpl = BS.template.get('svg/help.svg');
			var pFetchData = BS.request
				.Get('/stb/legacy-gateway/HelpItemService/getHelpItemsForRegion')
					.then(function (response) {
						helpListData = response.data ? response.data.result : null;
					})
					.catch (function (x) {
						BS.logger.log(x);
						helpListData = [];
					});
			q.all([pFetchData, pFetchTpl])
				.then(function () {
					that.initialized = true;
					that.dom = new ModuleDom(
						['helpModule'],
						{
							showMenu: function () {
								that.dom.helpModule.show();
								misc.dom.actionBar.set([
									['back', 'toMainMenu'], ['vertical', 'select'],
									['empty', null], ['confirm', 'confirm']
								]);
							},
							hideMenu: function () {
								that.dom.helpModule.hide();
							}
						}
					);
					that.destroy = that.dom.hideMenu.bind(that);
					that.generateMenuItems(helpListData);
					that.dom.showMenu();
				})
				.catch(function handleConnErr(err) {
					BS.logger.info('Unable to initialize `Help` app due to:\n' + err);
					am.pop();
				})
				.finally(function () {
					that.lock = false;
					BS.ui.toggleLoader(false);
				})
				.done();
		}
		if (this.subMenu) {
			that.dom.showMenu();
			that.subMenu.jump(0, true);
		}
	};
	helpMenu.focus = function () {
		this.dom.showMenu();
	};
	helpMenu.generateMenuItems = function (itemList) {
		var that = helpMenu;
		var infos = [];
		var items = [];
		if (!that.menu) that.menu = new ui.Menu($('#helpMenuSelector')[0]);
		if (itemList) {
			for (var i = 0; i < itemList.length; i++) {
				var item = itemList[i];
				items.push(item['prop_help_item_name']);
				infos.push({
					'name': item['prop_help_item_name'],
					'id': item['prop_ID_help_item']
				});
			}
		}
		items = ui.template('standardMenuTemplate',
			{'text': items, 'selector': $('#helpMenuSelector')});
		if (!that.subMenu) that.subMenu = that.menu.newMenuItems();
		that.subMenu.setItems(items, infos);
		that.subMenu.show();
	};

	var helpContent = new BS.App('helpmenuContent', {
		helpId: 'helpmenuContent',
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	helpContent.panel = null;
	helpContent.onInputEvent = function (key) {
		switch (key) {
		case 'up':
		case 'down':
			if (helpContent.panel) {
				if (key === 'up') helpContent.panel.moveUp();
				else helpContent.panel.moveDown();
			}
			break;
		case 'left':
		case 'back':
			am.pop();

			break;
		default:
			break;
		}
	};
	helpContent.init = function (callerAppId, data) {
		var that = helpContent;
		if (!this.initialized) {
			initialize();
			this.initialized = true;
		}
		helpMenu.dom.hideMenu();
		that.dom['helpmenuContent_content'].svg(data['prop_help_item_desc']);
		if (that.panel) that.panel.destroy();
		that.panel = new ui.ScrollingPanel(
			that.dom['helpmenuContent_content_holder'][0],
			null,
			that.dom['helpmenuContent_scroller'][0],
			null,
			that.dom['helpmenuContent_upDownArrows'][0]
		);
		that.dom.showMenu();
		that.panel.reinit();

		function initialize() {
			helpContent.dom = new ModuleDom(
				[
					'helpmenuContentHolder', 'helpmenuContent_content',
					'helpmenuContent_content_holder', 'helpmenuContent_scroller',
					'helpmenuContent_upDownArrows'
				],
				{
					showMenu: function () {
						this.helpmenuContentHolder.show();
						misc.dom.actionBar.set([
							['left', 'back'], ['vertical', 'scrollContent'],
							['empty', null], ['empty', null]
						]);
					},
					hideMenu: function () {
						this.helpmenuContentHolder.hide();
						misc.dom.navigationPop();
						helpContent.dom['helpmenuContent_content'].text('');
					}
				}
			);
		}
	};
	helpContent.destroy = function () {
		helpContent.dom.hideMenu();
	};

	new BS.Module(
		{
			id: 'Help',
			requiredLicense: 'helpmenu',
			mmExtensions: {
				app: helpMenu,
				icon: 'helpmenu',
				title: 'help',
				position: 9
			}
		}
	).register(helpMenu)
		.register(helpContent);


})(BeeSmart, Q);

(function(BS){

var voipRedirect = {phoneNotification: false, redirectNum: ''};

var keys = BS.InputManager.keyGroups;
var	voip = new BS.App('voip', {
		isDefault: true, requiredLicense: 'voiplog',
		inputMapper: BS.App.portalDirectionKeyMapper
	});
var	mm = BS.modMgr;
var	am = BS.appMgr;
var	ui = BS.ui;
var	ModuleDom = $.ModuleDom;
var	keyboard = BS.modMgr.getApp('keyboard');
var	misc = mm.getApp('Misc');
var	_formats = BS.portal.local.formats;
var	BeeSmartMain = mm.getModule('BeeSmartMain');
var	extraVoipItems = [
		{
			name: 'allCalls',
			key: 'allCalls',
			introText: 'allCalls_text',
			position: 1
		},
		{
			name: 'dialedCalls',
			key: 'dialedCalls',
			introText: 'dialedCalls_text',
			position: 2
		},
		{
			name: 'recievedCalls',
			key: 'recievedCalls',
			introText: 'recievedCalls_text',
			position: 3
		},
		{
			name: 'missedCalls',
			key: 'missedCalls',
			introText: 'missedCalls_text',
			position: 4
		}
	];

voip.callTypeTranslation = {
	'DIALED' : tr('dialedCall'),'RECEIVED' : tr('recievedCall'), 'MISSED' : tr('missedCall')
};
voip.keyLock = false;
voip.onInputEvent = function(keyPressedName){
	if(voip.keyLock)
		return;

	switch(keyPressedName){
	case 'back':
	case 'left':
		am.pop();
		break;
	case 'up':
	case 'down':
		voip.subMenu[keyPressedName === 'up' ? 'previous' : 'next']();
		break;
	case 'right':
		case 'ok':
			voip.keyLock = true;
		voip.subMenu.select(function () {
			var serviceData = {};

			switch (voip.subMenu.currentInfo().key){
				case 'dialedCalls':
					serviceData = {type: 'dialed'};
				break;
				case 'recievedCalls':
					serviceData = {type: 'received'};
				break;
				case 'missedCalls':
					serviceData = {type: 'missed'};
				break;
			}

			serviceData.limit = true;

			am.push(voipContent,serviceData);
			misc.dom.navigationPush(voip.subMenu.currentInfo().name);

		});

		break;
	}
};

voip.init = function(){
	var r = voip;
	if (r.subMenu) r.subMenu.jump(0, true);
	r.dom.showMenu();
	if (voipRedirect.phoneNotification === false && voipRedirect.redirectNum === ''){
		BS.logger.info('voip.init error because there are no voip options set...');
		ui.generalAlert(tr('VoipModuleIsDisabled'), 5e3);
		am.pop();
		return;
	}
};

voip.startup = function(){
	voip.dom = new ModuleDom (
		[
			'voipModule', 'voipMenu', 'voipMenuSelector', 'voipInfoText'
		],
		{
			showMenu : function(){
				this.voipModule.show();
				this.voipMenu.show();
				this.actionBar([['back', 'toMainMenu'], ['vertical', 'select'],
					['empty', null], ['confirm', 'confirm']
				]);
			},
			hideMenu : function(){
				this.voipMenu.hide();
				this.voipModule.hide();
			},
			subModuleDescription: function(desc){
				this.voipInfoText.svg(desc);
			},
			actionBar:function(buttonVector){
				misc.dom.actionBar.set(buttonVector);
			}
		}
	);


	var r = voip;
	r.menu = new ui.Menu(r.dom.voipMenuSelector[0]);

	var items = [];
	var infos = [];
	var p;

	for (var i = 0, len = extraVoipItems.length; i < len; i++){
		p = extraVoipItems[i].position;
		extraVoipItems[i].position = p < 0 ? Math.abs((len + p) % len + 1) : p;
	}
	extraVoipItems.sort(function(a, b){
		return a.position - b.position;
	});

	for (var i = 0, len = extraVoipItems.length; i < len; i++){
		var o = extraVoipItems[i];
		var	obj = {name:tr(o.name), key:o.key, introText:tr(o.introText)};

		items.push(obj.name);
		infos.push(obj);

	}
	items = ui.template('standardMenuTemplate',{'text':items,'selector':r.dom.voipMenuSelector});
	if (!r.subMenu)
		r.subMenu = r.menu.newMenuItems();

	r.subMenu.setItems(items, infos).show();

	r.subMenu.onFinish(function(index, info){
		r.dom.subModuleDescription(info.introText);
	});
};

voip.focus = function(){this.dom.showMenu();};
voip.destroy = function(){this.dom.hideMenu();};


var voipContent = new BS.App('voipContent', {requiredLicense:'voiplog',
	inputMapper: BS.App.portalDirectionKeyMapper
});
voipContent.menu = null;
voipContent.date = {'from':null,'till':null};
voipContent.onInputEvent = function(keyPressedName){
	if(voip.keyLock)
		return;
	switch (keyPressedName) {
		case 'back':
		case 'left':
			am.pop('voipContent');

			break;
		case 'up':
		case 'down':
			if (!voipContent.menu)
			return;

			voipContent.subMenu[keyPressedName === 'up' ? 'previous' : 'next']();

			break;
		case 'green':
			if (!mm.isAllowed('voipcallcontrol') || !voipContent.menu || !voipContent.subMenu)
				return;

			var c = voipContent.subMenu.currentInfo();
			var	callDirection = 'incoming';

			if (c.type && c.type.toLowerCase() === 'dialed')
				callDirection = 'outgoing';

			if (mm.appExists('clickToDial'))
				am.push(
					mm.getApp('clickToDial'),
					{	'name': callDirection === 'outgoing' ? c.destination : c.source,
						'phoneNo': callDirection === 'outgoing' ? c.destination : c.source
					}
				);
			else
				BS.logger.info('APP clickToDial DOES NOT EXITS!!! CANT MAKE CALL !!!');

			break;
		case 'ok':
			break;
		default:
			break;
	}
};

voipContent.startup = function(){
	if (BS.skinConfiguration.enablePhoneMenuItem) {
		var bss = BS.BeeSmartSettings;
		bss.nodeExtra.appendChild(
			new bss.SettingNode(
				'sett_voip',
				'sett_descVoip',
				['defaultUser', 'subUser'],
				1,
				mm.getApp('PhoneRedirectOptions')
			)
		);
	}
};

voipContent.init = function(callerApId, requestData){
	var that = voipContent;

	that.dom = that.dom || new ModuleDom(
		['voipContentHolder','voipCurrDateText','voipContentMenu',
		'voipContentSelector','voipContentSlider',
		'voipContentTitleTemplate','voipContentTitle','voipContentDate',
		'voipCurrentContentDate'
		],
		{
			showMenu : function(){
				this.voipContentHolder.show();
				voip.dom.actionBar(
					[
						['back', 'back'],
						['vertical', 'scrollContent'],
						['empty', null],
						mm.isAllowed('voipcallcontrol') && voipContent.menu ?
							['green', 'clickToDial'] :
							['empty', null]
					]
				);
			},
			hideMenu : function(){
				this.voipContentHolder.hide();
				misc.dom.navigationPop();
			}
		}
	);

	voip.dom.hideMenu();

	ui.toggleLoader(true);

	var bsRegionId = BS.portal.user.regionId;
	var	bsUserId = BS.portal.user.userId;

	BS.request.Get(
		'/restapi/rest/%d/%d/voip/call-list'
			.sprintf(bsRegionId, bsUserId),
		{
			accept: 'json',
			data: requestData
		}
	).complete(function(response){
		ui.toggleLoader(false);
		var s = response && response.success;
		if (!s){
			voip.keyLock = false;
			am.pop();
			return;
		}

		that.fillCalls(response.data);
		that.dom.showMenu();
		voip.keyLock = false;
	});
};

voipContent.fillCalls = function(callList){
	var r = voipContent;

	r.dom.voipContentTitle.text('');

	var titleSvg = '';
	var	callKey = voip.subMenu.currentInfo().key;

	switch (callKey){
		case 'allCalls':
			titleSvg = ui.template('voipContentTitleTemplateAllCalls',{});
		break;
		case 'missedCalls':
			titleSvg = ui.template('voipContentTitleTemplateMissedCalls',{});
		break;
		default:
			titleSvg = ui.template('voipContentTitleTemplateOtherCalls',{
				'setTitle': function(from, to){
					return callKey === 'recievedCalls' ? tr(from) : tr(to);
				}
			});
		break;
	}

	r.dom.voipContentTitle.append($.parseSvg(titleSvg));

	var dateFrom = new Date(voipContent.date.from).toFormatedString(_formats.dateTime);
	var	dateTill = new Date(voipContent.date.till).toFormatedString(_formats.dateTime);
	var	dateText = '';

	r.dom.voipContentDate.trigger('setDate', {
		'setDate': function(d1, d2){
			dateText = tr('range').concat(d1, dateFrom, d2, dateTill);
		}
	});

	r.dom.voipCurrDateText.svg(dateText);

	if (r.menu){
		r.menu.destroy();
		r.menu = null;
	}

	if (!callList || callList.length == 0){
		ui.generalAlert(tr('callListEmpty'));
		r.dom.voipContentMenu.hide();
		return;
	}

	r.menu = new ui.Menu(r.dom.voipContentSelector[0]);
	r.dom.voipContentMenu.show();

	var items = [];
	var infos = [];
	var contentType = voip.subMenu.currentInfo().key;

	for (var i in callList){
		var call = callList[i];
		var	callType = voip.callTypeTranslation[call.type];
		var from = mm.appExists('myContacts')
			? mm.getApp('myContacts').returnBuddyName(call.source)
			: call.source;
		var to = mm.appExists('myContacts')
			? mm.getApp('myContacts').returnBuddyName(call.destination)
			: call.destination;
		var	obj = {
			'from': from.toLocaleString(BS.portal.language.label),
			'to': to.toLocaleString(BS.portal.language.label),
			'time': call.time,
			'dateTime': new Date(call.time).toFormatedString(BeeSmart.portal.local.formats.dateTime),
			'type': callType,
			'duration' : call.duration.toLocaleString(BS.portal.language.label),
			'contentType' : contentType
		};

		var callTime = '';

		r.dom.voipCurrentContentDate.trigger('setDate', {
			'setCurrentDate': function(format){
				var time = new Date(obj.time);
				var	tempFormat = BeeSmart.portal.local.formats.date;
				var	cDateTr = new Date(obj.time).toFormatedString(tempFormat);

				if (new Date().toFormatedString(tempFormat) == time.toFormatedString(tempFormat))
					cDateTr = time.toFormatedString(format);

				callTime = cDateTr;
			}
		});

		var titleSvg = '';
		var	callKey = voip.subMenu.currentInfo().key;

		switch (callKey){
			case 'allCalls':
				titleSvg = ui.template('voipContentItemAllCallsTemplate',
					{'call':obj, 'callTime': callTime});
			break;
			case 'missedCalls':
				titleSvg = ui.template('voipContentItemMissedCallsTemplate',
					{'call':obj, 'callTime': callTime});
			break;
			default:
				titleSvg = ui.template('voipContentItemOtherCallsTemplate',{
					'call':obj,
					'callTime': callTime,
					'setTitle': function(from, to){
						return callKey === 'recievedCalls' ? from : to;
					}
				});
			break;
		}

		items.push(titleSvg);
		infos.push(callList[i]);
	}

	r.subMenu = r.menu.newMenuItems().setItems(items, infos).show();

};

voipContent.destroy = function(){
	this.dom.hideMenu();
};

var phoneCall = new BS.App(
	'phoneCall',
	{
		listenTo: [keys.shortcuts],
		requiredLicense: 'voipcallindicator||voipcallcontrol',
		inputMapper: BS.App.portalDirectionKeyMapper
	}
);
phoneCall.popDownTimerRef = null;
phoneCall.callQueue = [];
phoneCall.getCallByIdFromQueue = function(callId){
	var r = phoneCall;
	for (var i = 0; i < r.callQueue.length; i++)
		if (r.callQueue[i].callId == callId)
			return {index: i, call: r.callQueue[i]};
	return null;
};
phoneCall.expirationQueue = [];
phoneCall.callerNameQueue = [];
phoneCall.noActionTimeoutDuration = 25000;
phoneCall.onInputEvent = function(keyPressedName){
	var beeCall;
	if (phoneCall.keyLock)
		return;

	switch(keyPressedName){
	case 'back':
		if (phoneCall.callQueue.length > 0)
			phoneCall.callQueue.pop();
		am.pop();
		break;
	case 'right':
		if (
			!mm.isAllowed('voipcallcontrol')
			|| !voipRedirect.phoneNotification
			|| !voipRedirect.redirectNum
			) return;
		if (beeCall = phoneCall.callQueue.pop()){
			phoneCall.onRedirect(beeCall.callId, voipRedirect.redirectNum);
			phoneCall.keyLock = true;
		}
		break;
	case 'left':
		if (!mm.isAllowed('voipcallcontrol'))
			return;
		if (beeCall = phoneCall.callQueue.pop()){
			phoneCall.onReject(beeCall.callId);
			phoneCall.keyLock = true;
		}
		break;
	}
};

phoneCall.onRedirect = function(beeCallId, redirectToNumber){
	if (!beeCallId || !redirectToNumber){
		BS.logger.info('error!one or more arguments were not supplied :' +
			'beeCallId:' + beeCallId +
			' number:' + redirectToNumber);
		return;
	}
	phoneCall.dom.clearPopDownTimer();
	phoneCall.popDownTimerRef = setTimeout(function(){am.pop();}, 3000);
	phoneCall.dom.phoneCallStatusText.text(
		tr('redirectingCallTo') + '  ' + redirectToNumber.toLocaleString(BS.portal.language.label)
	);

	if (redirectToNumber){
		var bsRegionId = BS.portal.user.regionId;
		var	bsUserId = BS.portal.user.userId;

		BS.request.Post(
				'/restapi/rest/%d/%d/voip/call/redirect'
					.sprintf(bsRegionId, bsUserId),
				{
					accept: 'json',
					data: {
						call_id: beeCallId,
						phone_num: redirectToNumber
					}
				}
			);
	}
	phoneCall.keyLock = true;
};

phoneCall.onReject = function(beeCallId){
	if (!beeCallId){
		BS.logger.info('error onReject! beeCallId wasn\'t supplied! ...beeCallId:'+beeCallId);
		return;
	}

	phoneCall.dom.clearPopDownTimer();
	phoneCall.popDownTimerRef = setTimeout(function(){
		am.pop();
	},3000);
	phoneCall.dom.phoneCallStatusText.text(tr('rejectingCall'));

	var bsRegionId = BS.portal.user.regionId;
	var	bsUserId = BS.portal.user.userId;

	BS.request.Post(
			'/restapi/rest/%d/%d/voip/call/reject'
				.sprintf(bsRegionId, bsUserId),
			{
				accept: 'json',
				data:{
					call_id: beeCallId
				}
			}
		);
	phoneCall.keyLock = true;
};

phoneCall.onCancel = function(beeCallId){
	if (!beeCallId){
		BS.logger.info('error onCancel! beeCallId wasn\'t supplied! ...beeCallId:'+beeCallId);
		return;
	}
	var r = phoneCall;
	var	call = r.getCallByIdFromQueue(beeCallId);
	var	indx = call ? call.index : -1;
	if (indx < 0)
		return;

	r.callQueue.splice(indx,1);
	r.dom.clearPopDownTimer();

	if (r.callQueue.length > 1) {
		am.pop();
	} else {
		r.popDownTimerRef = setTimeout(function(){
			am.pop();
		}, 3000);
		r.dom.phoneCallStatusText.text(tr('canceledCall'));
		r.keyLock = true;
	}
};

phoneCall.focus = function(){
	var r = phoneCall;
	var call = r.callQueue[r.callQueue.length - 1];
	if (!call)
		return;
	var beeCallId = call.callId;
	var callFrom = call.from;
	var re = call.expiration;
	var popAt = re - Date.now();

	if (popAt <= 0) {
		r.callQueue.pop();
		am.pop();

	} else {
		setTimeout(function(){
			r.dom.showCall(beeCallId, callFrom, popAt);
		},800);
	}
};

phoneCall.startup = function(){
	phoneCall.dom = new ModuleDom
	(
	[
		'phoneCall', 'phoneCallShow', 'phoneCallHide', 'phoneCallTextFrom',
		'phoneCallStatusText','phoneCallRedirectHolder','phoneCallRejectHolder',
		'phoneCallActionBar'
	],
	{
		showCall: function(beeCallId, callFromNumber, ringingExpiration, newCall){
			var r = phoneCall;
			var	defaultDelay = 20000;
			var	rx = typeof ringingExpiration != 'undefined' ?
					ringingExpiration : new Date().getTime() + defaultDelay
			;

			if (rx < 2000){
				BS.logger.info('SIP message arrived too late: It has been discarded!');
				am.pop(true);
				return;
			}
			if (Math.abs(new Date().getTime() - rx) > 30000)
				rx = new Date().getTime() + defaultDelay;

			this.phoneCall.show();
			this.phoneCallShow.begin();

			if (newCall) {
				if (mm.appExists('myContacts'))
					callFromNumber = mm.getApp('myContacts').returnBuddyName(callFromNumber);
				r.callQueue.push({callId: beeCallId, from: callFromNumber, expiration: rx});
			}

			this.phoneCallTextFrom.text(callFromNumber.toLocaleString(BS.portal.language.label));
			this.phoneCallStatusText.text('');

			r.keyLock = false;

			if (mm.isAllowed('voipcallcontrol')){
				if (voipRedirect && voipRedirect.redirectNum != '')
					r.actionBar.set([['back','back'],['right', 'redirect'],['left','reject']]);
				else
					r.actionBar.set([['back','back'],['empty', null],['left','reject']]);
			}

			this.clearPopDownTimer();

			r.popDownTimerRef = setTimeout(function(){
				r.callQueue.pop();
				am.pop();
			}, rx - new Date().getTime());
		},
		hideCall: function(noAnimation){
			this.clearPopDownTimer();
			function hidePopup(){
				phoneCall.dom.phoneCall.hide();
			}
			if (noAnimation)
				hidePopup();
			else
				this.phoneCallHide.begin(hidePopup);
		},
		clearPopDownTimer: function(){
			if (phoneCall.popDownTimerRef !== null){
				clearTimeout(phoneCall.popDownTimerRef);
				phoneCall.popDownTimerRef = null;
			}
		}
	}
	);
	phoneCall.actionBar = new ui.ActionBar(phoneCall.dom.phoneCallActionBar);
};

phoneCall.init = function(callerAppId, beeCallId, callFrom, ringingExpiration){
	phoneCall.dom.showCall(beeCallId, callFrom, ringingExpiration, true);
};
phoneCall.destroy = function(noAnimation){
	this.dom.hideCall(noAnimation && noAnimation === true);
};
var clickToDial = new BS.App('clickToDial', {requiredLicense:'voipcallcontrol',
	inputMapper: BS.App.portalDirectionKeyMapper
});
clickToDial.onInputEvent = function(keyPressedName){
	switch (keyPressedName) {
	case 'left':
	case 'back':
		am.pop();
		break;
	}
};
clickToDial.init = function(callerAppId, buddy) {
	var r = clickToDial;
	var	nickName = buddy.name != '' ? buddy.name : buddy.realName;

	var infoDialog = new BeeSmartMain.InfoDialog(
		'clickToDialConfirmation',
		{
			onBeforeExit: function(keyPressed){
				if (keyPressed !== 'ok')
					return;
				r.dom.show(nickName);
				var bsRegionId = BS.portal.user.regionId;
				var	bsUserId = BS.portal.user.userId;

				BS.request.Post(
					'/restapi/rest/%d/%d/voip/call/refer'
						.sprintf(bsRegionId, bsUserId),
					{
						accept: 'json',
						data: {
							phone_num: buddy.phoneNo
						}
					}
				).complete(function(response){});
			}
		}
	);
	BeeSmartMain.register(infoDialog);
	am.push(infoDialog, tr('clickToDial'), tr('dial_budy') + ' ' + nickName);
};

clickToDial.focus = function(caller, args){
	if (caller === 'clickToDialConfirmation')
		mm.getApp('clickToDialConfirmation').unregister();
	if (args === 'back' || args === 'left')
		am.pop();
};


clickToDial.destroy = function(){};

clickToDial.startup = function(){
	clickToDial.dom = new $.ModuleDom(
		['phoneNumberNicknameText', 'clickToDialHolder'],
		{
			show: function(info) {
				this.clickToDialHolder.show();
				this.phoneNumberNicknameText.text(info);

				setTimeout(function(){
					clickToDial.dom.hide();
					am.pop();
				}, 3000);
			},

			hide: function() {
				this.clickToDialHolder.hide();
			}
		}
	);
};

var settingsTelRedirect = new BS.App(
	'PhoneRedirectOptions',
	{
		requiredLicense: 'voipcallcontrol||voipcallindicator', helpId: 'SettingsPhoneRedirections',
		inputMapper: BS.App.portalDirectionKeyMapper
	}
);

settingsTelRedirect.onInputEvent = function(keyPressedName) {
	var r = settingsTelRedirect;
	switch(keyPressedName){
	case 'blue':
		if (r.subMenu.currentInfo().inputNumbers && mm.isAllowed('voipcallcontrol'))  {
			if (r.subMenu.info(1)) r.subMenu.info(1).value = '';
			var el = r.subMenu.itemElement(r.subMenu.currentIndex());
			el = $(el).first().next();
			el.text('');
		}
	break;
	case 'ok':
		if (r.subMenu.currentIndex() < 2) {
			var el1 = $(r.subMenu.itemElement(r.subMenu.currentIndex())).find('text');
			var	el =  $(el1[1]);
			var	nextValue = '';
			var	nextText = '';
			var	currentId = r.subMenu.currentInfo().id;

			if (currentId === 'enabled'){
				var notCurrValue = r.subMenu.currentInfo().value;

				nextText = notCurrValue ? tr('off') : tr('on');
				nextValue = !notCurrValue;

				if (currentId === 'enabled')
					r.dom.blurrItems(notCurrValue);
			}
			r.subMenu.currentInfo().value = nextValue;
			el.text(nextText);
		}
		break;
	case 'back':
	case 'left':
		var controlAllowed = mm.isAllowed('voipcallcontrol');
		var	uOpt = voipRedirect;
		var voipEnable = r.subMenu.info(0).value ? true : false;
		var	phoneNo = controlAllowed ?
			(r.subMenu.info(1) || {value: ''}).value :
			uOpt.redirectNum;
		var	bsRegionId = BS.portal.user.regionId;
		var	bsUserId = BS.portal.user.userId;
		var voipEnableST = r.subMenu.info(0).startingValue;
		var phoneNoST = (r.subMenu.info(1) || {}).startingValue;
		if (phoneNo !== phoneNoST || voipEnable !== voipEnableST) {
			BS.request.Post(
				'/restapi/rest/%d/%d/voip/settings'
					.sprintf(bsRegionId, bsUserId),
				{
					accept: 'json',
					data: {
						notification: voipEnable.toString(),
						phone_num: phoneNo.toString()
					}
				}
			).complete(function (response) {
				if (!response.success) {
					ui.generalAlert(tr('redirectSettingsErr'));
					return;
				}
				voipRedirect.phoneNotification = voipEnable;
				voipRedirect.redirectNum = phoneNo;
				am.pop();
				ui.generalAlert(tr('redirectSettingsSaved'));
			});
		} else
			am.pop();
		break;
	case 'up':
	case 'down':
		if (r.subMenu.info(0).value == 0){
			ui.generalAlert(tr('redirectNotEnabled'));
		} else
			r.subMenu[keyPressedName === 'up' ? 'previous' : 'next']();

		break;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
		if (!r.subMenu.currentInfo().inputNumbers)
			return;
		var el = r.subMenu.itemElement(r.subMenu.currentIndex());
		el = $(el).first().next();
		r.subMenu.currentInfo().value += keyPressedName.toString();
		el.text(r.subMenu.currentInfo().value.toLocaleString(BS.portal.language.label));

		break;
	default:
		break;
	}
};
settingsTelRedirect.init = function(){
	var that = settingsTelRedirect;
	var	sApp = mm.getApp('Settings').dom;

	that.dom = that.dom || new ModuleDom(
		[	'settingsTelRedirectSelector',
			'settingsTelRedirectMenuItemsTemplate'
		],
		{
			showMenu : function(){
				sApp.showSubModule('settingsTelRedirect', 'voipTitle');
				that.subMenu.jump(0);
				this.setActionBar();
			},
			blurrItems : function(mode){
				for (var i = 1;i < that.subMenu.size(); i++){
					var el = that.subMenu.itemElement(i);
					$(el)[mode == true ? 'addClass':'removeClass']('inputDisabled');

				}
			},
			setActionBar : function(){
				if (that.subMenu.currentInfo().inputNumbers)
					sApp.actionBar([
						['back', 'back'],
						['empty', null],
						['blue', 'clearField'],
						['numbers', 'edit']
					]);
				else
					sApp.actionBar([
						['back', 'back'],
						['empty', null],
						['empty', null],
						['confirm', 'changeValue']
					]);
			}
		}
	);

	var	items = [];
	var	infos = [];
	var	uOpt = voipRedirect;

	var	itemElements = [
		{
			'id': 'enabled',
			'value': uOpt.phoneNotification,
			'name': tr('voipOnOff'),
			'inputNumbers': false,
			'hidden': !mm.isAllowed('voipcallindicator'),
			'startingValue': uOpt.phoneNotification
		},
		{
			'id': 'number',
			'value': uOpt.redirectNum,
			'name': tr('redirectToNumber'),
			'inputNumbers': true,
			'hidden': !mm.isAllowed('voipcallcontrol'),
			'startingValue': uOpt.redirectNum
		}
	];

	if (that.menu) that.menu.destroy();
	that.menu = new ui.Menu(that.dom.settingsTelRedirectSelector[0]);

	itemElements.forEach(function (currItem, index){
		if (currItem.hidden) return;
		var itemText = '';
		if (typeof currItem.value === 'boolean') {
			itemText = currItem.value ? tr('on') : tr('off');
		} else if (currItem.value !== null) {
			itemText = currItem.value.toString();
		}

		items.push(ui.template(that.dom.settingsTelRedirectMenuItemsTemplate.text(),{
			'name': currItem.name,
			'value': itemText.toLocaleString(BS.portal.language.label),
			'setPosition': function (height) {
				return index * height;
			}
		}));
		infos.push(currItem);
	});
	that.subMenu = that.menu.newMenuItems().setItems(items,infos).show();
	that.subMenu.onFinish(function(){
		that.dom.setActionBar();
	});
	that.dom.blurrItems(!that.subMenu.info(0).value);
	that.dom.showMenu();
};

BS.msgMgr.registerMsgType('SipEvent');
BS.evMgr.bind('msg:onSipEvent', function(ev){
	if (!(mm.isAllowed('voipcallindicator') || mm.isAllowed('voipcallcontrol')))
		return;
	BS.logger.info('SIP message arrived: %s', BS.logger.isGreaterThanInfo() ? '' + ev : '');
	var message = ev.data.body;
	switch(message.type){
	case 1:
		if (am.isLoaded(phoneCall) ) {
			BS.logger.info('VOIP already active. Another call UI response prevented.');
			break;
		}
			am.push(phoneCall, message.beeCallId, message.fromId, message.ringingExpiration.time);
		break;
	case 2:
			phoneCall.onCancel(message.beeCallId);
		break;
	case 3:
		break;
	}
});



new BS.Module(
	{
		id: 'Voip',
		requiredLicense: 'voiplog',
		mmExtensions: {
			app: voip,
			icon: 'phone',
			title: 'voip',
			position: 10
		},
		startupTasks: [
			{
				name: 'VoIP UI',
				payload: function(params, callback){
					BS.template.get('svg/voip.svg').finally(callback);
				}
			},
			{
				name: 'VOIP settings items',
				payload: function(params, callback){
					var bsRegionId = BS.portal.user.regionId;
					var	bsUserId = BS.portal.user.userId;
					BS.request.Get(
						'/restapi/rest/%d/%d/voip/settings'.sprintf(bsRegionId, bsUserId),
						{accept: 'json'}
					).then(function(response){
						voipRedirect.phoneNotification = response.data.notification;
						voipRedirect.redirectNum = response.data.phoneNum ?
							response.data.phoneNum : '';
					}).finally(callback.bind(this, {}, true)).done();
				}
			}
		]
	}
).register(voip)
 .register(voipContent)
 .register(phoneCall)
 .register(settingsTelRedirect)
 .register(clickToDial);

})(BeeSmart);

(function(BS){

	var helpVectors = {
		'main': [
			['back', 'toMainMenu'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'confirm']
		],
		'contacts': [
			['back', 'back'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'more']
		],
		'search': [
			['back', 'back'],
			['vertical', 'select'],
			['empty', null],
			['confirm', 'confirm']
		],
		'add': [
			['back', 'back'],
			['vertical', 'select'],
			[BS.portal.direction === 'rtl' ? 'left' : 'right', 'clear'],
			['confirm', 'more']
		],
		'my_profile': [
			['back', 'back'],
			['empty', null],
			['empty', null],
			['empty', null]
		]
	};

	var BuddyList = {
		_list: [],
		_index: [],
		_get: function (id) {
			for (var i = 0, len = this._list.length; i < len; i++)
				if (this._list[i].id == id)
					return [this._list[i], i];

			return [false, false];
		},
		add: function (buddy) {
			this._list.push(buddy);
		},
		remove: function (id) {
			var tmpList = [];

			for (var i = 0, len = this._list.length; i < len; i++)
				if (this._list[i].id == id) {
					delete this._list[i];
				} else {
					tmpList.push(this._list[i]);
				}

			this._list = tmpList;
			return true;
		},
		get: function (id) {
			return this._get(id)[0];
		},
		Filters: {
			confirmed: {type: 'confirmed'},
			invitation: {type: 'invitation'},
			chatable: {type: 'chatable'}
		},
		getBuddyList: function (customFilter, doSort) {
			var filteredList = null;
			doSort = doSort || true;
			customFilter = customFilter || false;

			if (doSort) {
				this._list.sort(function (a, b) {
					var an = a.name === '' ? 300 : a.name[0].toLowerCase().charCodeAt(0),
						bn = b.name === '' ? 300 : b.name[0].toLowerCase().charCodeAt(0),
						r =
							(b.sortWeight = ((b.isContact === true ? 0 : 1000) + (b.confirmed
								=== true ? 0 : -2000) - bn)) -
							(a.sortWeight = ((a.isContact === true ? 0 : 1000) + (a.confirmed
								=== true ? 0 : -2000) - an));

					return r;
				});
				filteredList = this._list;
			}

			if (customFilter) {
				var filters = {
					'confirmed': function (item) {
						return item.confirmed;
					},
					'invitation': function (item) {
						return !item.confirmed;
					},
					'chatable': function (item) {
						return item.isChatable;
					},
					'nameMatch': function (item) {
						if (!customFilter.condition)
							throw 'Error: "condition" is property is missing on filter object.';

						return (customFilter.condition == item.name && filter.chatable(item));
					}
				};

				filteredList = this._list.filter(filters[customFilter.type]);
			}

			return filteredList;
		},
		update: function (id, props) {
			var parts = this._get(id),
				oldBuddy = parts[0];

			if (!parts[0])
				return;

			for (var i in props)
				if (i in oldBuddy)
					oldBuddy[i] = props[i];

			this._list[parts[1]] = oldBuddy;
			return this._get(id);
		},
		searchByPhone: function (phone) {
			for (var i = 0, len = this._list.length; i < len; i++)
				if (this._list[i].phoneNo == phone)
					return this._list[i];
			return false;

		}
	};
	BS.Contacts = { buddyRepository: BuddyList };

	var keys = BS.InputManager.keyGroups;
	var contactsMain = new BS.App('contactsMain', {
		isDefault: true,
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	var am = BS.appMgr;
	var mm = BS.modMgr;
	var ui = BS.ui;
	var keyboard = mm.getApp('keyboard');
	var misc = mm.getApp('Misc');
	var _formats = BS.portal.local.formats;
	var ModuleDom = $.ModuleDom;
	var BeeSmartMain = mm.getModule('BeeSmartMain');
	var languageCode = 'en';
	BS.evMgr.bind('onBeeSmartLoginSuccess', function() {
		languageCode = BS.portal.user.language.label;
	});


	contactsMain.onInputEvent = function (keyPressedName) {
		var r = contactsMain;
		switch (keyPressedName) {
		case 'back':
		case 'left':
			am.pop();
			break;
		case 'up':
		case 'down':
			r.subMenu[keyPressedName === 'up' ? 'previous' : 'next']();
			r.dom.setInfoText(r.subMenu.currentInfo().desc);
			break;
		case 'ok':
		case 'right':
			var selected = r.subMenu.currentInfo();
			am.push(mm.getApp(selected.app));
			break;
		}
	};

	contactsMain.init = function (caller, pushSubModule, selectedModule) {
		var r = contactsMain;
		r.dom.show();

		if (pushSubModule && pushSubModule !== misc.adapterMainMenu.appId) {
			r.subMenu.jump(2, true);
			am.push(mm.getApp(pushSubModule), selectedModule);

		} else if (pushSubModule && pushSubModule === misc.adapterMainMenu.appId)
			r.subMenu.jump(0, true);

		r.dom.actionBar(helpVectors.main);
	};

	contactsMain.destroy = function (caller) {
		var r = contactsMain;
		r.dom.hide();
	};

	contactsMain.focus = function (caller) {
		var r = contactsMain;
		r.dom.show();
		r.dom.actionBar(helpVectors.main);
	};

	contactsMain.blur = function (caller) {
		var r = contactsMain;
		r.dom.hide();
	};
	contactsMain.NO_AVATAR_IMG_LINK = '-';
	contactsMain.startup = function () {
		contactsMain.dom = new ModuleDom(
			['chatModule', 'chatMainMenu', 'chatMainMenuSelector', 'chatModuleInfoText'],
			{
				show: function () {
					this.chatModuleInfoText.show();
					this.setInfoText(contactsMain.subMenu.currentInfo().desc);
					this.chatModule.show();
					this.chatMainMenu.show();
				},
				setInfoText: function (desc) {
					this.chatModuleInfoText.first().text(tr(desc));
				},
				hide: function () {
					this.chatModuleInfoText.hide();
					this.chatMainMenu.hide();
					this.chatModule.hide();
				},
				actionBar: function (buttonVector) {
					misc.dom.actionBar.set(buttonVector);
				}
			}
		);

		var r = contactsMain;
		var items = [];
		var infos = [];
		var temp = [
			{
				id: 'myProfile',
				desc: 'myProfileDesc',
				app: 'myProfile',
				text: 'chatMyProfileTitle'
			},
			{
				id: 'myContacts',
				desc: 'myContactsDesc',
				app: 'myContacts',
				text: 'myContactsTitle'
			},
			{
				id: 'invitations',
				desc: 'invitationsDesc',
				app: 'myContacts',
				text: 'invitationsTitle'
			},
			{
				id: 'addContact',
				desc: 'addContactDesc',
				app: 'addContact',
				text: 'add_contact'
			}
		];
		r.menu = new ui.Menu(r.dom.chatMainMenuSelector[0]);
		r.subMenu = r.menu.newMenuItems();

		for (var i = 0, node; (node = temp[i++]);) {
			items.push(tr(node.text));
			infos.push(node);
		}

		items = ui.template('standardMenuTemplate',
			{'text': items, 'selector': r.dom.chatMainMenuSelector});
		r.subMenu.setItems(items, infos).show();
	};

	var myProfile = new BS.App('myProfile', {
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	myProfile.onInputEvent = function (keyPressedName) {
		switch (keyPressedName) {
		case 'back':
		case 'left':
			am.pop();
			break;
		}
	};

	myProfile.init = function (caller) {
		var r = myProfile;
		r.dom.show();
		contactsMain.dom.actionBar(helpVectors.my_profile);
	};

	myProfile.destroy = function(caller){
		myProfile.dom.hide();
	};

	myProfile.startup = function () {
		myProfile.dom = new ModuleDom(
			['myProfileHolder', 'mpTemplateHolder'],
			{
				avatarImage: new ui.Image($('#mpAvatar')),
				show: function () {
					var user = BS.portal.user;

					if (user) {
						var newData = [
							['realName', user.name ? user.name.encodeEntities() : null],
							['nickname', user.nickname.encodeEntities()],
							['genderSetting', user.gender === 'M' ? tr('male') : tr('female')],
							['myPhone', user.phoneNum],
							['personalMessage', user.pMessage],
							['email', user.email],
							['numberOfContacts', BuddyList.getBuddyList({type: 'confirmed'}).length
								.toLocaleString(languageCode)]
						];
						var svg = ui.template('mpTemplate', {
							'buddy': newData,
							'setBgWidth': function (profileWidth, concatWidth) {
								return profileWidth;
							}
						});
						myProfile.dom.mpTemplateHolder.append(svg);
						myProfile.dom.avatarImage.href = user.avatarLink ? user.avatarLink :
							'skin/%s/img/icons/default_buddy.png'
								.sprintf(BS.portal.user.skin.keyword);
						this.myProfileHolder.show();
					}
					misc.dom.navigationPush(tr(contactsMain.subMenu.currentInfo().text));

				},
				hide: function () {
					misc.dom.navigationReset();
					this.mpTemplateHolder.text('');
					this.myProfileHolder.hide();
				}
			}
		);

	};

	var myContacts = new BS.App('myContacts', {
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	myContacts.onInputEvent = function (keyPressedName) {
		var r = myContacts;
		switch (keyPressedName) {
		case 'left':
		case 'back':
			am.pop();
			break;
		case 'up':
		case 'down':
			if (this.currentSubMenu) {
				this.currentSubMenu[keyPressedName === 'up' ? 'previous' : 'next']();
				r.dom.profileInfo(r.currentSubMenu.currentInfo());
			}
			break;
		case 'ok':
		case 'right':
			if (!r.currentSubMenu)
				return;

			am.inContextOf(this).push(contactsPopupMenu, r.currentSubMenu.currentInfo());

			break;
		default:
			break;
		}
	};
	myContacts.init = function (caller, selectedModule) {
		var s = myContacts;
		contactsMain.dom.actionBar(helpVectors.contacts);
		s.getData(selectedModule || contactsMain.subMenu.currentInfo().id);
	};

	myContacts.getData = function (selectedModule) {
		var r = myContacts;

		function contactsMenu() {
			r.dom.setMenu(selectedModule);
			r.dom.show();
		}

		if (selectedModule === 'invitations') {
			BeeSmart.request.get('MessagingProfileService/getRequestsContactsForUser',
				function (s, d) {
					if (!s)
						return;

					if (d.length != 0)
						onContactRequestDialog.onRequestContactsData.setRequestContactsList(d);

					contactsMenu();
				});
			return;
		}

		contactsMenu();
	};

	myContacts.destroy = function () {
		myContacts.dom.hide();
	};

	myContacts.removeBuddy = function (buddy) {
		var isContact = buddy.isContact;
		var serviceName = isContact ? 'MessagingProfileService/removeMessagingProfileContactForUser' : 'ContentSharingService/removeBuddyProfile';
		var errMsg = isContact ? 'errorRemoveContact' : 'errorRemoveProfile';

		var infoDialog = new BeeSmartMain.InfoDialog(
			'remove_buddy',
			{
				onBeforeExit: function (keyPressed) {
					if (keyPressed === 'ok') {
						BS.request.get(serviceName, function (s, d) {
							if (!s) {
								l(errMsg);
								return;
							}

							BuddyList.remove(buddy.id);
							var t = contactsMain.subMenu.currentInfo().id === 'myContacts' ?
								'confirmed' : 'invitation';
							myContacts.regenerateBuddyMenu(t);
						}, [buddy.id]);
					}
				}
			}
		);
		BeeSmartMain.register(infoDialog);
		am.push(infoDialog, tr('myContactsTitle'), tr('buddy_list_remove'));
	};
	myContacts.focus = function (caller, arg1, arg2, arg3) {
		if (caller === 'contactAddDialog' || caller === 'contactEditDialog'
			|| caller === 'remove_buddy') {
			mm.getApp(caller).unregister();
			return;
		}
		if (caller === 'contactsPopupMenu' && arg1 === 'ok') {
			var buddy = this.currentSubMenu.currentInfo();
			switch (arg3) {
			case 'remove':
				this.removeBuddy(buddy);
				break;
			case 'call':
				am.push(mm.getApp('clickToDial'), buddy);
				break;
			case 'edit':
				myContacts.dom.hide();
				am.push(addContact, buddy);
				break;
			case 'approve':
				am.push(onContactRequestDialog, buddy);
				break;
			case 'reject':
				am.push(onContactRequestDialog, buddy);
				break;
			case 'startChat':
				if (!mm.isAllowed('chat'))
					return;
				chatStorage.addNewUserToChat(buddy.id);
				am.cutOff('liveTv');
				am.push(quickChat, buddy.id);
				break;
			}
			return;
		}

		contactsMain.dom.actionBar(helpVectors.contacts);
		myContacts.dom.show();
	};

	myContacts.startup = function () {
		myContacts.dom = new $.ModuleDom(
			[
				'contactsMenuHolder', 'contactsMenu', 'contactsMenuSelector', 'listSizeNull_fb',
				'contactInfoText', 'chatMenuRect', 'contactInfoTextTemplateHolder',
				'contactWaitingConfirmation', 'contactWaitingConfirmationText'
			],
			{
				show: function () {
					this.contactsMenuHolder.show();
				},
				setMenu: function (selected) {
					var r = myContacts;
					var t = selected === 'myContacts' ? 'confirmed' : 'invitation';

					if (BuddyList.getBuddyList({type: t}).length !== 0) {
						r.regenerateBuddyMenu(t);
						this.contactsMenu.show();
						this.profileInfo(r.currentSubMenu.currentInfo());
						this.contactsMenuSelector.show();

					} else {
						this.profileInfo();
						this.contactsMenuSelector.hide();
						this.contactsMenu.hide();
						this.emptyMenu();
						ui.generalAlert(tr('friend_list_empty'));
					}
					misc.dom.navigationPush(tr(contactsMain.subMenu.currentInfo().text));
				},
				hide: function () {
					misc.dom.navigationReset();
					this.contactsMenuHolder.hide();
				},
				profileInfo: function (buddy) {
					if (buddy) {
						var selected = contactsMain.subMenu.currentInfo().id;
						var newData = [];

						this.contactInfoText.show();

						if (selected === 'myContacts') {
							this.contactWaitingConfirmation.hide();

							if (buddy.isChatable)
								newData = [
									['realName', buddy.realName ? buddy.realName.encodeEntities()
										: null
									],
									['nickname', buddy.name.encodeEntities()],
									['genderSetting', buddy.gender],
									['myPhone', buddy.phoneNo],
									['personalMessage', buddy.msg],
									['email', buddy.email]
								];
							else
								newData = [
									['nickname', buddy.name],
									['myPhone', buddy.phoneNo]
								];
						} else {
							newData = [
								['realName', buddy.realName ?
									buddy.realName.encodeEntities() : null
								],
								['nickname', buddy.name]
							];
							this.contactWaitingConfirmation.show();
							this.contactWaitingConfirmationText.text(tr(buddy.requestOwner ?
								'waiting_confirmation' : 'waiting_your_confirmation')).show();
						}
						newData = newData.map(function mapToLocaleString(d) {
							return [d[0], d[1] ? d[1].toLocaleString(languageCode) : d[1]];
						});
						this.contactInfoTextTemplateHolder.text('');
						var svg = ui.template('mpTemplate', {
							'buddy': newData,
							'setBgWidth': function (profileWidth, concatWidth) {
								return concatWidth;
							}
						});
						this.contactInfoTextTemplateHolder.append(svg);

					} else {
						this.contactInfoText.hide();
					}
				},

				emptyMenu: function () {
					var r = myContacts;

					if (r.currentSubMenu) {
						this.contactsMenuSelector.hide();
						r.currentSubMenu.destroy();
						delete r.currentSubMenu;
					}
				}
			}
		);
	};

	myContacts.returnBuddyName = function (phoneNumber) {
		var buddy = BuddyList.searchByPhone(phoneNumber);
		if (buddy) {
			return buddy.name == '' ? buddy.phoneNo : buddy.name;
		} else
			return phoneNumber;
	};

	myContacts.onAskMessage = function (approve_reject, msg) {
		var a = new ui.Alert({autoHide: 5000});
		var nick = '';

		setTimeout(function () {
			a.destroy();
		}, 5100);

		var currMenu = contactsMain.subMenu.currentInfo().id === 'myContacts' ?
			'confirmed' : 'invitation';
		if (approve_reject === 'approve') {
			BS.request.get('MessagingProfileService/getProfileDetails', function (success, data) {
				if (!success || data == null)
					return;

				nick = BuddyList.get(msg.profileId).name;

				BuddyList.update(msg.profileId, {
					'phoneNo': data.prop_messaging_profile_phone_num,
					'isChatable': data.chatable == 1,
					'msg': data.personalMessage,
					'pictureLink': BS.imageUrlProvider.toImageUrl(data.avatarLink),
					'confirmed': true,
					'gender': data.gender === 'M' ? tr('male') : tr('female'),
					'email': data.prop_messaging_profile_email
				});

				myContacts.regenerateBuddyMenu(currMenu);

				ui.generalAlert(nick + ' ' + tr('buddy_' + approve_reject + '_feedback_msg'));

			}, [msg.profileId]);
			return;
		}


		nick = BuddyList.get(msg.profileId).name;
		BuddyList.remove(msg.profileId);
		myContacts.regenerateBuddyMenu(currMenu);

		ui.generalAlert(nick + ' ' + tr('buddy_' + approve_reject + '_feedback_msg'));
	};

	myContacts.regenerateBuddyMenu = function (selected) {
		var r = myContacts;
		r.dom.emptyMenu();
		var bl = !selected ? BuddyList.getBuddyList() : BuddyList.getBuddyList({type: selected});
		if (bl.length == 0) {
			r.dom.profileInfo();
			r.dom.contactsMenuSelector.hide();
			r.dom.contactsMenu.hide();
			r.dom.emptyMenu();
			ui.generalAlert(tr('friend_list_empty'));
			return;
		}

		r.dom.contactsMenuSelector.show();
		var items = [];
		var infos = [];

		for (var i in bl) {
			var buddy = bl[i];
			var skin = 'skin/'.concat(BeeSmart.portal.user.skin.keyword,'/img/icons/');

			var data = {};
			for (var att in buddy)
				if (buddy.hasOwnProperty(att))
					data[att] = typeof buddy[att] !== 'string' ?
						buddy[att] : buddy[att].encodeEntities();

			items.push(ui.template('templateChatChangeGraphic', {
				'userDetails': data,
				'setAvatarLink': function (phoneContact, buddyContact, width, height) {
					var url = buddy.pictureLink;
					if (url) {
						url = ui.Image.addImageSizeParamToUrl(url, width, height);
					}
					return url != '' ? url
						: (buddy.isContact ? skin.concat(phoneContact) : skin.concat(buddyContact));
				},
				'checkIfProfileIsContact': function (contact) {
					return buddy.phoneNo != '' ? skin.concat(contact) : '-';
				},
				'checkIfProfileIsBuddy': function (buddy) {
					return buddy.isChatable && buddy.confirmed ? skin.concat(contact) : '-';
				},
				'setSmallPosition': function (isContact, isBuddy) {
					return buddy.phoneNo != '' ? isContact : isBuddy;
				}
			}));
			infos.push(buddy);
		}

		if (r.menu)
			r.menu.destroy();

		r.menu = new ui.Menu(r.dom.contactsMenuSelector[0]);
		r.currentSubMenu = r.menu.newMenuItems();
		r.currentSubMenu.setItems(items, infos);
		r.currentSubMenu.show();
		r.dom.profileInfo(r.currentSubMenu.currentInfo());
	};


	var contactsPopupMenu = new BeeSmartMain.MenuListDialog(
		'contactsPopupMenu',
		null,
		{
			onBeforeExit: function (key) {
			}
		}
	);
	contactsPopupMenu.init = function (caller, mItem, options) {
		BeeSmartMain.MenuListDialog.prototype.init.call(
			this,
			'%s (%s)'.sprintf(tr('buddy_list_actions'), mItem.name)
		);
		var pushObj = [];
		if (!mItem.confirmed) {
			if (!mItem.requestOwner) {
				pushObj.push(
					{
						name: tr('approveBuddyContact'),
						key: 'approve',
						iconLink: '#recordingRecommend-big'
					}
				);
				pushObj.push({name: tr('reject'), key: 'reject', iconLink: '#errSmall1'});
			} else
				pushObj.push({name: tr('buddy_remove'), key: 'remove', iconLink: '#errSmall1'});
		} else {
			if (mItem.phoneNo != '' && mm.appExists('clickToDial'))
				pushObj.push({name: tr('buddy_call'), key: 'call', iconLink: '#buddy-phone'});
			if (mItem.isContact)
				pushObj.push({name: tr('buddy_edit'), key: 'edit', iconLink: '#buddy-pencil'});
			if (mItem.isChatable == 1 && mm.isAllowed('chat'))
				pushObj.push({name: tr('startChat'), key: 'startChat', iconLink: '#baloon'});

			pushObj.push({name: tr('buddy_remove'), key: 'remove', iconLink: '#errSmall1'});
		}
		this.fillActionMenu(pushObj);
	};
	BeeSmartMain.register(contactsPopupMenu);

	var contactsEditPopupMenu = new BeeSmartMain.MenuListDialog(
		'contactsEditPopupMenu', null, {}
	);
	contactsEditPopupMenu.init = function (caller, enterData, option) {
		BeeSmartMain.MenuListDialog.prototype.init.call(this, tr('buddy_list_actions'));
		var pushObj = [], name, i, node;
		if (option == 'add') {
			for (i = 0; (node = enterData[i++]);) {
				if (node.id == 'enterName' && node.text != '' ) {
					pushObj.push(
						{
							name: tr('startSearch'),
							key: 'searchContact',
							iconLink: '#magnifier'
						}
					);
					name = node.text;
					continue;
				}
				if (node.id === 'enterPhoneNo' && node.text != ''
					) {
					pushObj.push(
						{name: tr('add_contact'), key: 'createContact', iconLink: '#buddy-big'}
					);
					continue;
				}
			}
		} else if (option === 'edit') {
			for (i = 0; (node = enterData[i++]);) {
				if (node.id === 'enterName' && node.text != '' ) {
					name = node.text;
				}
				if (node.id === 'enterPhoneNo' && node.text != ''
					) {
					pushObj.push(
						{name: tr('edit_contact'), key: 'editContact', iconLink: '#buddy-pencil'}
					);
					continue;
				}
			}
		}
		this.fillActionMenu(pushObj);
	};
	BeeSmartMain.register(contactsEditPopupMenu);



	var addContact = new BS.App('addContact', {
		inputMapper: function (inputKey) {
			var keyMapper = {'left': 'right', 'right': 'left'};
			if (BS.portal.direction === 'rtl')
				return keyMapper[inputKey];
		}
	});
	addContact.onInputEvent = function (keyPressedName) {
		if (this.lock)
			return;

		var r = addContact;

		switch (keyPressedName) {
		case 'left':
		case 'back':
			am.pop();
			break;
		case 'keyboard':
			var enterList = r.enterDataMenu;
			if (enterList.currentInfo().id === 'enterName') {
				am.push(keyboard, r.dom.getEnterField(enterList.currentIndex()).text());
			}
			break;
		case 'right':
			r.dom.setEnterField(r.enterDataMenu.currentIndex(), '');
			break;
		case 'up':
		case 'down':
			r.enterDataMenu[keyPressedName === 'up' ? 'previous' : 'next']();
			break;
			break;
		case 'ok':
			if (r.dom.getEnterField(0).text().trim().length == 0 || r.dom.getEnterField(0).text()
				== '') {
				ui.generalAlert(tr('addContactMissingName'));
				r.dom.setEnterField(r.enterDataMenu.currentIndex(), '');
				return;
			}

			am.inContextOf(this).push(contactsEditPopupMenu, r.enterDataMenu.infoList(), r.option);
			break;
		default:
			if (!isNaN(parseInt(keyPressedName))) {
				var enterList = r.enterDataMenu;
				var enterField = r.dom.getEnterField(enterList.currentIndex());

				if (enterList.currentInfo().id === 'enterPhoneNo') {
					var t = parseInt(keyPressedName, 10);
					var inp = enterField;

					inp.text(inp.text() + t.toLocaleString(languageCode));
					enterList.currentInfo().text = enterList.currentInfo().text + t;

				} else {
					am.push(keyboard, enterField.text(), keyPressedName);
				}
			}
			break;
		}
	};
	addContact.init = function (caller, buddy) {
		var r = addContact;
		r.option = 'add';
		contactsMain.dom.actionBar(helpVectors.add);
		if (buddy) {
			r.option = 'edit';
			r.dom.clearEnterFields([buddy.name, buddy.phoneNo]);
		}
		r.dom.show();
	};
	addContact.destroy = function (caller) {
		var r = addContact;
		r.dom.clearEnterFields();
		r.dom.hide();
	};
	addContact.focus = function (caller, arg1, arg2, arg3) {
		var list = this.enterDataMenu.infoList();
		var currAction = { 'contactName': list[0].text, 'phoneNo': list[1].text};
		if (caller === 'contactsEditPopupMenu' && arg1 === 'ok') {
			switch (arg3) {
			case 'searchContact':
				am.push(searchContact, currAction.contactName);
				break;
			case 'createContact':
				var infoDialog = new BeeSmartMain.InfoDialog(
					'contactAddDialog',
					{
						onBeforeExit: function (keyPressed) {
							if (keyPressed === 'ok') {
								addContact.createContact(currAction.phoneNo,
									currAction.contactName);
							}
						}
					}
				);
				BeeSmartMain.register(infoDialog);
				am.push(infoDialog, tr('myContactsTitle'),
						tr('add_contact') + ' ' + currAction.contactName);
				break;
			case 'editContact':
				var infoDialog = new BeeSmartMain.InfoDialog(
					'contactEditDialog',
					{
						onBeforeExit: function (keyPressed) {
							if (keyPressed === 'ok') {
								addContact.updateContact(currAction.phoneNo, currAction.contactName,
									myContacts.currentSubMenu.currentInfo());
							}
						}
					}
				);
				BeeSmartMain.register(infoDialog);
				am.push(infoDialog, tr('myContactsTitle'),
						tr('edit_contact') + ' ' + currAction.contactName);
				break;
			}
			return;
		}

		switch (caller) {
		case 'keyboard':
			if (arg1 && arg1.length > 0)
				this.dom.setEnterField(this.enterDataMenu.currentIndex(), arg1.toString());
			contactsMain.dom.actionBar(helpVectors.add);
			break;
		case 'searchContact':
			am.pop();
			break;
		case 'contactAddDialog':
		case 'contactEditDialog':
			mm.getApp(caller).unregister();
			setTimeout(function () {
				if (am.lastLoaded(addContact)) {
					addContact.lock = false;
					am.pop();
				}
			}, 2000);
			break;
		}
	};
	addContact.createContact = function (phoneNo, nickName) {
		if (phoneNo == '' || nickName == '') {
			ui.generalAlert(tr('userCantBeAdded'));
			return;
		}
		this.lock = true;

		BS.request.get('MessagingProfileService/addMessagingProfileContactForUser',
			function (s, d) {

				if (!s || !d) {
					ui.generalAlert(tr('userAddedError'));
					return;
				}
				ui.generalAlert(tr('userAddedSuccess'));
				var item = formBudyListItem(d, true, nickName, '', phoneNo, false, '', '', true,
					false, '',
					'');

				BuddyList.add(item);
				myContacts.regenerateBuddyMenu();

			}, [phoneNo, nickName, nickName]);
	};

	addContact.updateContact = function (phoneNo, nickName, buddy) {
		if (phoneNo == '' || nickName == '') {
			ui.generalAlert(tr('userCantBeAdded'));
			return;
		}

		this.lock = true;

		BS.request.get('MessagingProfileService/updateContactForUser', function (s, d) {
			if (!s)
				return;

			BuddyList.update(buddy.id, {'name': nickName, 'phoneNo': phoneNo});
			myContacts.regenerateBuddyMenu();
			ui.generalAlert(tr('userUpdatedSuccess'));

		}, [buddy.id, nickName, phoneNo, '']);
	};

	addContact.startup = function (caller) {
		addContact.dom = new ModuleDom(
			[
				'addContactHolder', 'addContect_fb', 'enterPhoneNumber', 'enterContactDataTemplate',
				'enterContactDataSelector', 'enterContactDataMenu'
			],
			{
				show: function () {
					if (addContact.enterDataMenu)
						addContact.enterDataMenu.jump(0, true);
					misc.dom.navigationPush(tr(contactsMain.subMenu.currentInfo().text));
					this.addContactHolder.show();
				},
				hide: function () {
					misc.dom.navigationReset();
					this.addContactHolder.hide();
				},
				setEnterField: function (index, text) {
					$(addContact.enterDataMenu.itemElement(index))
						.find('text.add-contact-text').text(text);
					addContact.enterDataMenu.currentInfo().text = text;
				},
				getEnterField: function (index) {
					var r = addContact;
					return $(r.enterDataMenu.itemElement(index)).find('text').filter('.add-contact-text');
				},
				clearEnterFields: function (text) {
					var r = addContact;
					var enterList = r.enterDataMenu;
					text = text || ['', ''];
					for (var i = 0, len = enterList.size(); i < len; i++) {
						$(enterList.itemElement(i)).find('text').filter('.add-contact-text').text(text[i]);
						enterList.info(i).text = text[i];
					}
				}
			}
		);

		var r = addContact;

		r.menu = new ui.Menu(r.dom.enterContactDataSelector[0]);

		var infos = [
			{id: 'enterName', name: 'nickname', buttonType: 'keyboard', text: ''},
			{id: 'enterPhoneNo', name: 'myPhone', buttonType: 'numbers', text: ''}
		];
		var items = [];

		for (var i = 0, node; (node = infos[i++]);)
			items.push(ui.template('enterContactDataTemplate', {
				'key': node.name,
				'buttonType': node.buttonType,
				'setPosition': function (offset) {
					return i * offset;
				}
			}));

		r.enterDataMenu = r.menu.newMenuItems();
		r.enterDataMenu.setItems(items, infos).show();
	};

	var searchContact = new BS.App('searchContact');
	searchContact.onInputEvent = function (keyPressedName) {
		if (this.lock)
			return;

		var r = searchContact;

		switch (keyPressedName) {
		case 'back':
			am.pop();
			break;
		case 'ok':
			if (!r.searchMenu)
				return;

			var result = r.sendRequest(
				r.searchMenu.currentInfo(),
				function () {
					r.searchCloseTimeout = setTimeout(function () {
						am.pop();
					}, 3000);
				}
			);

			if (result.status == 'error')
				ui.generalAlert(result.msg);

			break;
		case 'up':
		case 'down':
			if (!r.searchMenu)
				break;

			r.searchMenu[keyPressedName == 'up' ? 'previous' : 'next']();
			break;
		}

		r.dom.clearSearchCloseTimeout();
	};
	searchContact.init = function (caller, textSearch) {
		var r = searchContact;
		r.search(textSearch);
		contactsMain.dom.actionBar(helpVectors.search);
		r.dom.show();
	};

	searchContact.destroy = function (caller) {
		var r = searchContact;
		r.dom.hide();
	};

	searchContact.search = function (searchText) {
		var r = searchContact;
		ui.toggleLoader();
		r.lock = true;

		BS.request.get('MessagingProfileService/searchUserProfile', function (s, d) {
			ui.toggleLoader();
			r.lock = false;

			if (!s || d.length == 0) {
				ui.generalAlert(tr('no_profiles_found'));

				if (r.menu) {
					r.menu.destroy();
					r.menu = false;
					delete r.menu;

				}
				r.dom.searchContactMenu.hide();

				r.searchCloseTimeout = setTimeout(function () {
					am.pop();
				}, 3000);
				return;
			}

			r.dom.show();
			r.dom.setSearchMenu(d);

		}, [searchText, 1]);
	};

	searchContact.sendRequest = function (prof, callback) {
		var r = searchContact;
		var callback = callback || function () {
		};
		var buddy = BuddyList.get(prof.idProfileFrom);

		if (buddy) {
			return {
				status: 'error',
				msg: tr(buddy.confirmed ? 'userAlreadyExist' : 'userAlreadyAddedButNotConfirmed')
			};
		}

		r.lock = true;

		BS.request.get('MessagingProfileService/askContactToJoinMessagingProfiles',
			function (s, d) {
				r.lock = false;
				if (!s) {
					ui.generalAlert(tr('userAddedError'));
					return;
				}
				ui.generalAlert(tr('userAddedSuccess'));

				BuddyList.add(
					formBudyListItem(prof.idProfileFrom, false, prof.nickname, prof.realName, '',
						true, '', '', prof.profileLinked, true, '', '')
				);
				myContacts.regenerateBuddyMenu();

				callback();
			}, [prof.idProfileFrom, tr('PleaseAddMeToYourBuddyList')]);

		return {status: 'ok', msg: ''};
	};

	searchContact.startup = function () {
		searchContact.dom = new ModuleDom(
			['searchContactHolder', 'searchContactMenu', 'searchContactMenuSelector',
				'searchContactTemplate', 'searchContect_fb', 'searchContactTemplate'
			],
			{
				show: function () {
					addContact.dom.hide();
					this.searchContactHolder.show();
				},
				hide: function () {
					if (searchContact.menu) {
						searchContact.menu.destroy();
						searchContact.menu = false;
						delete searchContact.menu;
						this.searchContactMenu.hide();
					}
					this.searchContactHolder.hide();
				},
				setSearchMenu: function (list) {
					var r = searchContact;

					if (r.menu) {
						r.menu.destroy();
						delete r.menu;
					}

					if (!r.menu)
						r.menu = new ui.Menu(this.searchContactMenuSelector[0]);


					var items = [];
					var infos = [];

					for (var i = 0; i < list.length; i++) {
						var profile = list[i];

						var profileData = {
							nickname: profile.nickname.encodeEntities(),
							realName: profile.realName ? profile.realName.encodeEntities() : null,
							profileLinked: profile.profileLinked,
							idProfileFrom: profile.idProfileFrom
						};

						items.push(ui.template('searchContactTemplate', {'profile': profileData}));
						infos.push(profile);
					}

					r.searchMenu = r.menu.newMenuItems();
					r.searchMenu.setItems(items, infos);
					this.searchContactMenu.show();
					r.searchMenu.show();
				},
				clearSearchCloseTimeout: function () {
					if (searchContact.searchCloseTimeout !== null) {
						clearTimeout(searchContact.searchCloseTimeout);
						searchContact.searchCloseTimeout = null;
					}
				}
			}
		);
	};

	var onContactRequestDialog = new BS.App('onContactRequestDialog', {
		listenTo: [keys.shortcuts], type: 'popup',
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	onContactRequestDialog.onRequestContactsData = {
		_requests: [],

		setRequestContactsList: function (requestList) {
			this._requests = requestList;

			var buddy_list = BuddyList.getBuddyList();
			var alreadyAdded = false;

			for (var j = 0, request; (request = this._requests[j++]);) {
				if (buddy_list.length == 0) {
					BuddyList.add(
						formBudyListItem(request.idProfileFrom, false, request.nickname,
							request.realName, '', request.chatable == 1, '', '', false, false, '',
							'')
					);
				} else {
					for (var i = 0, buddy; (buddy = buddy_list[i++]);) {
						if (buddy.id == request.idProfileFrom) {
							alreadyAdded = true;
							break;
						}

						alreadyAdded = false;
					}

					if (!alreadyAdded)
						BuddyList.add(
							formBudyListItem(request.idProfileFrom, false, request.nickname,
								request.realName, '', request.chatable == 1, '', '', false, false,
								'', '')
						);
				}
			}

			myContacts.regenerateBuddyMenu('invitation');
		},
		getRequestContactsList: function () {
			return this._requests;
		},
		removeRequestContact: function (id) {
			var tmpList = [];

			for (var i = 0, len = this._requests.length; i < len; i++)
				if (this._requests[i].idProfileFrom == id) {
					delete this._requests[i];
				} else {
					tmpList.push(this._requests[i]);
				}

			this._requests = tmpList;
			return true;
		}
	};

	onContactRequestDialog.onInputEvent = function (keyPressedName) {
		switch (keyPressedName) {
		case 'left':
		case 'back':
			am.pop();
			break;
		case 'ok':
			var action = contactsPopupMenu.actionMenu.currentInfo().key;
			onContactRequestDialog.approveOrReject(
					action == 'approve' ? 'approveRequestsContacts' : 'rejectRequestsContacts',
				onContactRequestDialog.message
			);
			break;
		default:
			break;
		}
	};
	onContactRequestDialog.setConcactRequest = function (msg, confirmCallback) {
		this.confirmMessage = confirmCallback || function () {
		};
		this.message = msg;
		this.dom.showOnMessage(tr('PleaseAddMeToYourBuddyList'), msg.name, msg.pictureLink);
	};

	onContactRequestDialog.init = function (callerAppId, msg, confirmCallback) {
		this.setConcactRequest(msg, confirmCallback);
	};

	onContactRequestDialog.destroy = function () {
		this.confirmMessage();
		this.dom.hideOnMessage();
	};

	onContactRequestDialog.approveOrReject = function (serviceName, msg) {
		var serviceCall = serviceName == 'approveRequestsContacts';

		BS.request.get('MessagingProfileService/' + serviceName, function (s, d) {
			if (!s) {
				ui.generalAlert(tr('profileOptionErr'));
				return;
			}

			ui.generalAlert(serviceCall ? tr('profileAccepted') : tr('profileRejected'));

			if (serviceCall) {
				BS.request.get('MessagingProfileService/getProfileDetails',
					function (success, data) {
						if (!success) {
							ui.generalAlert(tr('profileOptionErr'));
							return;
						}

						BuddyList.update(msg.id, {
							'phoneNo': data.prop_messaging_profile_phone_num,
							'isChatable': data.chatable == 1,
							'msg': data.personalMessage,
							'pictureLink': BS.imageUrlProvider.toImageUrl(data.avatarLink),
							'confirmed': true,
							'gender': data.gender == 'M' ? tr('male') : tr('female'),
							'email': data.prop_messaging_profile_email
						});

						myContacts.regenerateBuddyMenu('invitation');
					}, [msg.id]);
			} else {
				BuddyList.remove(msg.id);
				myContacts.regenerateBuddyMenu('invitation');
			}
			onContactRequestDialog.onRequestContactsData.removeRequestContact(msg.id);

			am.pop();
		}, [msg.id]);
	};

	onContactRequestDialog.startup = function () {
		onContactRequestDialog.dom = new $.ModuleDom(
			['msgRequest', 'nickRequest', 'onContactRequestDialog_fb',
				'onContactRequestDialog', 'onContactRequestDialogShow',
				'onContactRequestDialogActionBar'
			],
			{
				avatarRequestImage: new ui.Image($('#avatarRequest')),
				showOnMessage: function (message, profileName, avatarLink) {
					this.nickRequest.svg(tr(profileName));
					this.msgRequest.svg(tr(message));
					this.avatarRequestImage.href = avatarLink;
					this.onContactRequestDialog.show();
					this.onContactRequestDialogShow.begin();

					var action = contactsPopupMenu.actionMenu.currentInfo().key
						== 'approve' ? 'approveBuddyContact' : 'rejectBuddyContact';
					onContactRequestDialog.actionBar.set([
						['back', 'back'],
						['confirm', action]
					]);
				},

				hideOnMessage: function () {
					this.nickRequest.svg('');
					this.msgRequest.svg('');
					this.onContactRequestDialog.hide();
				}
			}
		);

		onContactRequestDialog.actionBar = new ui.ActionBar(onContactRequestDialog.dom.onContactRequestDialogActionBar);
	};

	var quickChat = new BS.App('quickChat', {
		requiredLicense: 'chat&&contacts',
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	quickChat.menuDirty = false;
	quickChat.transitionTimerRef = null;
	quickChat.transitionTime = 1000;
	quickChat.aniOn = [];
	quickChat.onInputEvent = function (keyPressedName) {
		var r = quickChat;
		switch (keyPressedName) {
		case 'back':
			am.pop();

			break;
		case 'blue':
			am.push(quickChatMenu);
			r.dom.QC_historyHolder.hide();

			break;
		case 'right':
		case 'left':
			if (!r.m) return;

			r.dom.startTransTimer();
			r.m[keyPressedName == 'left' ? 'previousColumn' : 'nextColumn']();

			break;
		case 'keyboard':
			if (!r.m)
				return;

			keyboard.enableFullKeyboard();
			am.push(keyboard);

			break;
		case 'up':
		case 'down':
			var lTv = mm.isAppAllowed('liveTv')
				&& !am.isLoaded(misc.adapterMainMenu.appId) ? mm.getApp('liveTv') : null;
			if (lTv)
				lTv.onInputEvent(keyPressedName);

			break;
		default:
			if (!isNaN(parseInt(keyPressedName)) && r.m) {
				keyboard.enableFullKeyboard();
				am.push(keyboard, '', keyPressedName);
			}
			break;
		}
	};
	quickChat.startup = function () {
		quickChat.dom = new $.ModuleDom(
			[
				'quickChatHolder', 'quickChatHolderShow', 'quickChatHolderHide', 'QC_historyHolder',
				'templateQCHistory', 'qc_limits', 'quick_chat_shelf', 'qc_buddyListMsgIndicRight',
				'qc_buddyListMsgIndicLeft', 'qc_buddyListEmpty', 'quickChatActionBar'
			],
			{
				toggleMenuEmptyText: function (mode) {
					this.qc_buddyListEmpty[mode == 'on' ? 'show' : 'hide']();
					this.quick_chat_shelf[mode == 'on' ? 'hide' : 'show']();
				},
				startTransTimer: function () {
					if (quickChat.transitionTimerRef) {
						clearTimeout(quickChat.transitionTimerRef);
						quickChat.transitionTimerRef = null;
					}
					quickChat.transitionTimerRef = setTimeout(
						function () {
							quickChat.dom.makeHistoryDisplay(quickChat.m.item.id);
						},
						quickChat.transitionTime
					);
				},
				makeUserMenu: function (jumpToUserId) {
					var currChatBuddyList = [];
					var r = quickChat;
					var cs = chatStorage;

					for (var i = 0; i < cs.currentChats.length; i++)
						currChatBuddyList.push(cs.getChattableUser(cs.currentChats[i]));

					if (r.m)
						r.m.destroy();

					r.menuDirty = false;

					if (chatStorage.currentChats.length == 0) {
						this.toggleMenuEmptyText('on');
						this.QC_historyHolder.hide();
						return;

					} else if (this.qc_buddyListEmpty.attr('display') != 'none') {
						this.toggleMenuEmptyText('off');
						this.QC_historyHolder.show();

					}

					r.m = new ui.ShelfMenu(r.chatShelfContainer);
					r.m.items = currChatBuddyList;

					if (jumpToUserId == 0 || jumpToUserId > 0)
						this.jumpToUser(jumpToUserId);

					r.aniOn = [];
					r.m.show();
					this.checkFreshMsgs();

				},
				jumpToUser: function (userId) {
					var indexOfUserInChats = chatStorage.getUserIndex(userId);
					if (quickChat.m && indexOfUserInChats != quickChat.m.index)
						quickChat.m.index = indexOfUserInChats;

					this.makeHistoryDisplay(userId);
				},
				checkFreshMsgs: function (index) {
					var cs = chatStorage;
					var r = quickChat;
					var currRow = parseInt((r.m && r.m.index ? r.m.index : 0)
						/ r.openedChatsPerRow);
					var upRow = false;
					var downRow = false;
					var cIndxRow = 0;
					var isDisplayedNow = function (cRow, index, itemsPerRow) {
						var startIndexInSeenRow = cRow * itemsPerRow;
						var endIndexInSeenRow = startIndexInSeenRow + itemsPerRow - 1;
						if (index >= startIndexInSeenRow && index <= endIndexInSeenRow)
							return true;
						return false;
					};
					var getIndexInsideRow = function (index, maxItemsPerRow) {
						return index % maxItemsPerRow;
					};
					if ((index === 0 || index > 0) && r.aniOn.indexOf(index) != -1) {
						r.aniOn.splice(r.aniOn.indexOf(index), 1);
						if (isDisplayedNow(currRow, index, r.openedChatsPerRow))
							$('#QC_SHELF_ITEM' + getIndexInsideRow(index,
								r.openedChatsPerRow)).first().first().end();

					}

					for (var i = 0; i < cs.currentChats.length; i++) {

						if (cs.getChatHistory(cs.currentChats[i]).fresh) {
							if (r.aniOn.indexOf(i) == -1) {
								r.aniOn.push(i);
								if (isDisplayedNow(currRow, i, r.openedChatsPerRow)) {
									$('#QC_SHELF_ITEM' + getIndexInsideRow(i,
										r.openedChatsPerRow)).first().first().begin();

								}
							}
							cIndxRow = parseInt(i / r.openedChatsPerRow);
							if (!upRow && cIndxRow < currRow)
								upRow = true;
							else if (!downRow && cIndxRow > currRow)
								downRow = true;
						}

					}
					if (upRow && r.aniOn.indexOf('leftAni') === -1) {
						this.qc_buddyListMsgIndicLeft.begin();
						r.aniOn.push('leftAni');

					} else if (!upRow && r.aniOn.indexOf('leftAni') != -1) {
						this.qc_buddyListMsgIndicLeft.end();
						r.aniOn.splice(r.aniOn.indexOf('leftAni'), 1);

					}

					if (downRow && r.aniOn.indexOf('rightAni') === -1) {
						this.qc_buddyListMsgIndicRight.begin();
						r.aniOn.push('rightAni');

					} else if (!downRow && r.aniOn.indexOf('rightAni') != -1) {
						this.qc_buddyListMsgIndicRight.end();
						r.aniOn.splice(r.aniOn.indexOf('rightAni'), 1);

					}
				},
				makeHistoryDisplay: function (userId) {
					var hist = chatStorage.getChatHistory(userId, true).history;
					var fullHeight = quickChat.maxHeight;
					var i = hist.length - 1;

					this.checkFreshMsgs(chatStorage.getUserIndex(userId));

					this.QC_historyHolder.text('').hide();

					if (!hist)
						return;

					while (i >= 0 && fullHeight > 0) {
						var fromTo = BS.portal.user.nickname;
						var histItem = $.parseSvg(ui.template(this.templateQCHistory.text(), {
							'historyTitle': fromTo + ', ' +
								new Date(hist[i].time).toFormatedString(_formats.time2),
							'historyText': hist[i].text
						}));

						this.QC_historyHolder.append(histItem);
						this.QC_historyHolder.show();

						var cHistItem = $(histItem);
						var titleHolder = cHistItem.first();
						var msgHolder = titleHolder.next();
						var titleBg = titleHolder.first();
						var titleText = titleHolder.first().next();
						var titleTextBBox = titleText[0].getBBox();
						var contentBg = msgHolder.first();
						var contentText = msgHolder.first().next();
						var contentTextBBox = contentText[0].getBBox();
						var togetherHeight = 0;

						titleBg.attr('width', titleTextBBox.width + 20);
						togetherHeight += titleBg[0].getBBox().height;

						contentBg.attr('height', contentTextBBox.height + 10);

						if (BS.portal.direction == 'ltr')
							titleHolder.attr('transform',
									'translate(' + (quickChat.maxWidth - titleTextBBox.width - 25)
									+ ', 1)');

						togetherHeight = togetherHeight + contentTextBBox.height + 10;

						cHistItem.attr('opacity', (fullHeight / quickChat.maxHeight));

						fullHeight = fullHeight - togetherHeight - 4;

						cHistItem.attr('transform', 'translate(0, ' + fullHeight + ')');
						i--;
					}

				},
				showMenu: function () {
					this.quickChatHolder.show();
					this.quickChatHolderShow.begin();
				},
				hideMenu: function () {
					this.quickChatHolderHide.begin(function () {
						quickChat.dom.quickChatHolder.hide();
					});
				}
			}
		);

		quickChat.maxHeight = parseInt(quickChat.dom.qc_limits[0].getBBox().height);
		quickChat.maxWidth = parseInt(quickChat.dom.qc_limits[0].getBBox().width);

		quickChat.openedChatsPerRow = parseInt(document.getElementById('quick_chat_shelf').getAttributeNS(NS.bee,
			'columns'), 10);

		quickChat.chatShelfContainer = new BS.ui.ShelfManager(
			$('#quick_chat_shelf')[0]
		);
		quickChat.actionBar = new ui.ActionBar(quickChat.dom.quickChatActionBar);

	};


	quickChat.init = function (callerAppId, userId) {
		var r = quickChat;

		if (typeof userId !== 'undefined' && userId >= 0)
			r.receiveMsgFromUser(userId, true);
		else if (!r.m || !r.m.item || r.menuDirty)
			r.dom.makeUserMenu(chatStorage.currentChats[0] ? chatStorage.currentChats[0] : false);
		else
			r.dom.makeHistoryDisplay(r.m.item.id);

		r.dom.showMenu();
	};

	quickChat.sendMsgToUser = function (userId, text) {
		var r = quickChat;
		var onSendAction = function (s, d) {
			if (s && d)
				r.dom.makeHistoryDisplay(userId);
		};

		chatStorage.sendChatMsg(userId, text, onSendAction);
	};

	quickChat.receiveMsgFromUser = function (userId, jumpToUser) {
		var r = quickChat;

		if (!(userId >= 0)) return;

		if (!r.m || !r.m.item || (chatStorage.currentChats.length == 1 && r.m.item.id != userId))
			jumpToUser = true;

		if (r.menuDirty)
			r.dom.makeUserMenu(jumpToUser === true ? userId : r.m.item.id);

		else if (jumpToUser)
			r.dom.jumpToUser(userId);

		else if (r.m.item.id == userId)
			r.dom.makeHistoryDisplay(userId);

		r.dom.checkFreshMsgs();

	};
	quickChat.blur = function (caller) {
		switch (caller) {
		case 'EpgMatrixView':
		case 'keyboard':
			this.dom.hideMenu();
			break;
		}
	};
	quickChat.focus = function (from, ar1, ar2) {
		var r = quickChat;
		var cs = chatStorage;

		switch (from) {
		case 'keyboard':
			this.dom.showMenu();
			if (ar1 && ar1.length > 0)
				r.sendMsgToUser(r.m.item.id, ar1);

			break;
		case 'chatMsgReceivedAlert':
			if (ar1 && ar2 && ar1 == 'keyboard' && ar2.length > 0) {
				r.focus(ar1, ar2);
				return;

			}
			break;
		case 'startChat':
			if (ar1 === true)
				r.dom.makeUserMenu(cs.currentChats[cs.currentChats.length - 1]);

			break;
		case 'quickChatMenu':
			switch (ar1) {
			case 'endChat':
				cs.endChatWithUser(r.m.item.id);

				if (cs.currentChats.length == 0) {
					am.pop();
					return;
				} else
					r.dom.makeUserMenu(
						cs.currentChats[r.m.index] ?
							cs.currentChats[r.m.index] :
							cs.currentChats[0]
					);

				break;
			case 'startNewChat':
				am.push(startChat, BuddyList.getBuddyList({type: 'chatable'}));
				break;
			default:
				break;
			}

			if (r.m && r.m.items.length > 0)
				r.dom.QC_historyHolder.show();

			break;
		case 'EpgMatrixView':
			this.dom.showMenu();

			break;

		}

	};

	quickChat.destroy = function () {
		quickChat.dom.hideMenu();
	};

	var quickChatMenu = new BS.App('quickChatMenu', {
		type: 'popup', requiredLicense: 'chat&&contacts',
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	quickChatMenu.onInputEvent = function (keyPressedName) {
		var r = quickChatMenu;
		switch (keyPressedName) {
		case 'left':
		case 'back':
			am.pop();

			break;
		case 'up':
		case 'down':
			r.subMenu[keyPressedName == 'up' ? 'previous' : 'next']();

			break;
		case 'ok':
			am.pop(r.subMenu.currentInfo().id);


			break;
		default:
			break;
		}
	};

	quickChatMenu.startup = function () {
		quickChatMenu.dom = new $.ModuleDom(
			[
				'quickChatMenuHolder',
				'qcMenu_menuSelector', 'templateQuickChatMenu',
				'displayQuickChatMenu',
				'quickChatMenuHolderActionBar'
			],
			{
				getAvailableActions: function () {
					var availableActions = [];

					if (chatStorage.currentChats.length
						!= BuddyList.getBuddyList({type: 'chatable'}).length)
						availableActions.push({'name': 'startNewChat', 'id': 'startNewChat'});

					if (chatStorage.currentChats.length > 0)
						availableActions.push({'name': 'endThisChat', 'id': 'endChat'});

					return availableActions;
				},
				showMenu: function () {
					this.displayQuickChatMenu.trigger('beginEvent');

				},
				hideMenu: function () {
					this.displayQuickChatMenu.trigger('endEvent');
				}
			}
		);
		quickChatMenu.actionBar = new ui.ActionBar(quickChatMenu.dom.quickChatMenuHolderActionBar);
	};

	quickChatMenu.init = function () {
		var r = quickChatMenu;
		var items = [];
		var infos = [];
		var actions = r.dom.getAvailableActions();

		if (r.menu)
			r.menu.destroy();

		for (var i = 0; i < actions.length; i++) {
			items.push(ui.template(r.dom.templateQuickChatMenu.text(), {
				'indx': i,
				'action': tr(actions[i].name),
				'setPosition': function (height) {
					return i * height;
				}
			}));
			infos.push(actions[i]);
		}

		r.menu = new ui.Menu(r.dom.qcMenu_menuSelector[0]);
		r.subMenu = r.menu.newMenuItems().setItems(items, infos).show();

		r.dom.showMenu();
	};
	quickChatMenu.destroy = function () {
		quickChatMenu.dom.hideMenu();
	};
	var chatMsgReceivedAlert = new BS.App('chatMsgReceivedAlert',
		{type: 'popup', requiredLicense: 'chat&&contacts'});
	chatMsgReceivedAlert.alertDisplayTime = 15000;
	chatMsgReceivedAlert.maxSimultaniousAlerts = 3;
	chatMsgReceivedAlert.alertTimerRef = null;
	chatMsgReceivedAlert.onAction = null;
	chatMsgReceivedAlert.onInputEvent = function (keyPressedName) {
		var r = chatMsgReceivedAlert;
		switch (keyPressedName) {
		case 'back':
			am.pop();
			break;
		case 'red':
			am.pop();
			r.onAction();
			break;
		default:
			am.pop();
			return true;
			break;
		}
	};

	chatMsgReceivedAlert.startup = function () {
		chatMsgReceivedAlert.dom = new $.ModuleDom(
			[
				'chatMsgReceivedAlertHolder', 'CMMsgAlertHolderShow',
				'CMMsgAlertHolderHide', 'chatMsgReceivedAlertContent',
				'templateChatMsgReceived', 'chatMsgReceivedAlertHolderActionBar'
			],
			{
				clearTimer: function () {
					if (chatMsgReceivedAlert.alertTimerRef) {
						clearTimeout(chatMsgReceivedAlert.alertTimerRef);
						chatMsgReceivedAlert.alertTimerRef = null;
					}
				},
				addAlert: function (nick, pictureLink, msg) {
					var r = chatMsgReceivedAlert;
					var previousAlerts = this.chatMsgReceivedAlertContent.children();
					var currAlert = $.parseSvg(ui.template(this.templateChatMsgReceived.text(),
						{
							'pictureLink': pictureLink,
							'msgTitle': nick + ', ' + new Date().toFormatedString(_formats.time2),
							'msgText': msg
						}));

					this.chatMsgReceivedAlertContent.append(currAlert);

					this.clearTimer();
					r.alertTimerRef = setTimeout(function () {
						am.pop();
					}, r.alertDisplayTime);

					var currAlertRef = $(currAlert);
					var bgBBox = currAlertRef.first()[0].getBBox();
					var y = -1 * parseInt(bgBBox.height);

					currAlertRef.attr('transform', 'translate(0,' + y + ')');

					for (var i = previousAlerts.length - 1; i >= 0; i--) {
						if (previousAlerts.length - i >= r.maxSimultaniousAlerts)
							$(previousAlerts[i]).text('');
						else {
							y -= (bgBBox.height + 3);
							$(previousAlerts[i]).attr('transform', 'translate(0,' + y + ')');
						}
					}

					this.chatMsgReceivedAlertHolder.show();
					this.CMMsgAlertHolderShow.begin();
				},
				hideAlert: function () {
					this.chatMsgReceivedAlertContent.text('');
					this.clearTimer();
					this.CMMsgAlertHolderHide.begin(function () {
						chatMsgReceivedAlert.dom.chatMsgReceivedAlertHolder.hide();
					});
				}
			},
			function () {
			}
		);
		chatMsgReceivedAlert.actionBar = new ui.ActionBar(chatMsgReceivedAlert.dom.chatMsgReceivedAlertHolderActionBar);
	};

	chatMsgReceivedAlert.init = function (callerAppId, userId, text, onActionBtn) {
		var r = chatMsgReceivedAlert;
		var userInfo = BuddyList.get(userId);

		if (!userInfo) {
			am.pop();
			return;
		}

		r.addNewAlert(userId, text, onActionBtn);
	};

	chatMsgReceivedAlert.addNewAlert = function (userId, text, onActionPressed) {
		var r = chatMsgReceivedAlert;
		var userInfo = BuddyList.get(userId);

		if (!userInfo)
			return;

		r.onAction = onActionPressed;
		r.dom.addAlert(userInfo.name, userInfo.pictureLink, text);

	};
	chatMsgReceivedAlert.destroy = function (caller, args) {
		this.dom.hideAlert();
	};
	chatMsgReceivedAlert.blur = function () {
		this.dom.clearTimer();
	};
	chatMsgReceivedAlert.focus = function (caller, args) {
		if (caller == 'keyboard' || caller == 'quickChatMenu')
			am.pop(caller, args);
		else
			am.pop();
	};

	var startChat = new BS.App(
		'startChat',
		{
			type: 'popup',
			listenTo: [keys.shortcuts],
			requiredLicense: 'chat&&contacts',
			inputMapper: BS.App.portalDirectionKeyMapper
		}
	);

	startChat.onInputEvent = function (keyPressedName) {
		switch (keyPressedName) {
		case 'left':
		case 'back':
			am.pop(false);
			break;
		case 'up':
		case 'down':
			this.startChatMenu[keyPressedName == 'up' ? 'previous' : 'next']();
			break;
		case 'ok':
			var userId = startChat.startChatMenu.currentInfo().id;

			chatStorage.addNewUserToChat(userId);
			am.pop(true);

			break;
		default:
			break;
		}
	};

	startChat.init = function (callerAppId, list) {
		this.dom.showStartChat();
		this.dom.fillStartChatMenu(list);
	};
	startChat.destroy = function () {
		startChat.dom.hideStartChat();
	};

	startChat.startup = function () {
		startChat.dom = new $.ModuleDom(
			[
				'startChat', 'startChat_menu', 'startChatMenuSelector',
				'templateStartChatMenu', 'startChatActionBar'
			],
			{
				showStartChat: function () {
					this.startChat.show();
				},
				hideStartChat: function () {
					this.startChat.hide();
				},
				fillStartChatMenu: function (list) {
					var r = startChat;
					var items = [];
					var infos = [];

					for (var i in list) {
						var buddy = list[i];
						if (chatStorage.getChattableUser(buddy.id) == false) {
							items.push(ui.template('templateStartChatMenu',
								{buddyDetails: buddy}));
							infos.push(buddy);
						}
					}
					if (!r.menu)
						r.menu = new ui.Menu(this.startChatMenuSelector[0]);

					if (!r.startChatMenu)
						r.startChatMenu = r.menu.newMenuItems();

					r.startChatMenu.setItems(items, infos).show();
				}
			}
		);
		startChat.actionBar = new ui.ActionBar(startChat.dom.startChatActionBar);
	};

	var chatStorage = {};
	chatStorage = {
		chatHistory: [],
		currentChats: [],
		maxHistoryLength: 10,
		endChatWithUser: function (userId) {
			var indx = chatStorage.currentChats.indexOf(userId);
			chatStorage.currentChats.splice(indx, 1);
			quickChat.menuDirty = true;
		},
		getChatHistory: function (userId, setToNotFresh) {
			for (var i = 0; i < chatStorage.chatHistory.length; i++) {
				var cHist = chatStorage.chatHistory[i];
				if (cHist.id == userId) {
					if (setToNotFresh)
						cHist.fresh = false;
					return {'history': cHist.history, 'fresh': cHist.fresh, 'index': i};
				}
			}
			return {'history': false, 'fresh': false, 'index': -1};
		},
		addTextToHistory: function (userId, text, direction) {
			var histObj = {'time': new Date().getTime(), 'direction': direction, 'text': text};
			var index = chatStorage.getChatHistory(userId, false).index;

			if (index !== -1) {
				var cHist = chatStorage.chatHistory[index];

				if (cHist.history.length > chatStorage.maxHistoryLength)
					cHist.history.shift();

				cHist.history.push(histObj);
				if (direction == 'in')
					cHist.fresh = true;
			}
		},
		getUserIndex: function (userId) {
			return chatStorage.currentChats.indexOf(parseInt(userId));
		},
		getChattableUser: function (userId) {
			var buddyObj = BuddyList.get(userId);
			var index = chatStorage.getUserIndex(userId);

			if (buddyObj && index != -1)
				return buddyObj;

			return false;
		},
		addNewUserToChat: function (userId) {
			if (chatStorage.getUserIndex(userId) === -1)
				chatStorage.currentChats.push(parseInt(userId));

			if (!chatStorage.getChatHistory(userId).history)
				chatStorage.chatHistory.push({'id': userId, 'history': [], 'fresh': false});

			quickChat.menuDirty = true;
		},
		sendChatMsg: function (userId, text, onAction) {
			BS.request.get('ChatMessageService/sendChatMessage',
				function (s, d) {
					chatStorage.addTextToHistory(userId, text, 'out');
					onAction(s, d);
				},
				[chatStorage.getChattableUser(userId).name, text]
			);
		},
		receiveChatMsg: function (message) {
			if (!message || !message.fromId || !message.content
				|| !BuddyList.get(parseInt(message.fromId))) {
				BS.logger.trace('chat message receiving error...');
				BS.logger.trace('msg obj present :', message ? true : false);
				BS.logger.trace('message.fromId present :', parseInt(message.fromId) ? true : false);
				BS.logger.trace('message.content present :',
						message.content && message.content.length > 0 ? true : false);
				BS.logger.trace('user in our buddy list :',
					BuddyList.get(parseInt(message.fromId)) ? true : false);
				return;
			}
			var userId = message.fromId;
			var msgContent = message.content;
			var qc = quickChat;
			var chatUser = chatStorage.getChattableUser(userId);

			if (!chatUser)
				chatStorage.addNewUserToChat(userId);

			chatStorage.addTextToHistory(userId, msgContent, 'in');

			var qcOn = am.isLoaded('quickChat');
			var caOn = am.isLoaded('chatMsgReceivedAlert');

			if (!am.isLoaded('beeSmartLockDialog')) return;

			if (!qcOn) {
				if (caOn)
					chatMsgReceivedAlert.addNewAlert(userId, msgContent, function () {
						am.push(quickChat, userId);
					});
				else
					am.push(chatMsgReceivedAlert, userId, msgContent, function () {
						am.push(quickChat, userId);
					});
			}

			else if (qcOn) {
				if (!chatUser)
					am.push(chatMsgReceivedAlert, userId, msgContent, function () {
						quickChat.receiveMsgFromUser(userId, true);
					});

				qc.receiveMsgFromUser(userId, false);
			}
		}
	};


	function formBudyListItem(id, isContact, name, realName, phoneNo, isChatable, msg, pictureLink,
		confirmed, requestOwner, gender, email) {
		if (arguments.length == 1) {
			var buddy = id;
			var genderSign = buddy.gender;
			return {
				'id': buddy.isContact ? buddy.prop_ID_messaging_profile_c : buddy.prop_ID_messaging_profile,
				'isContact': buddy.isContact,
				'name': buddy.isContact ? buddy.prop_messaging_profile_c_name : buddy.prop_messaging_profile_nickname,
				'realName': buddy.realName,
				'phoneNo': buddy.prop_messaging_profile_phone_num,
				'isChatable': buddy.chatable == 1,
				'msg': buddy.personalMessage,
				'pictureLink': buddy.avatarLink ? BS.imageUrlProvider.toAbsolute(buddy.avatarLink) :
					(buddy.isContact ? 'skin/' + BS.portal.user.skin.keyword
						+ '/img/icons/default_phone.png' :
						contactsMain.NO_AVATAR_IMG_LINK),
				'confirmed': buddy.isContact ? true : buddy.isContactRequestApproved == 1,
				'requestOwner': buddy.requestOwner,
				'gender': genderSign == 'M' ? tr('male') : tr('female'),
				'email': buddy.prop_messaging_profile_email
			};

		} else
			return {
				'id': arguments[0],
				'isContact': arguments[1],
				'name': arguments[2],
				'realName': arguments[3],
				'phoneNo': arguments[4],
				'isChatable': arguments[5],
				'msg': arguments[6],
				'pictureLink': arguments[7],
				'confirmed': arguments[8],
				'requestOwner': arguments[9],
				'gender': arguments[10],
				'email': arguments[11]
			};
	}

	BS.msgMgr.registerMsgType('Chat');
	BS.evMgr.bind('msg:onChat', function (ev) {
		if (chatStorage) {
			chatStorage.receiveChatMsg(ev.data.body);
		}
	});

	BS.msgMgr.registerMsgType('ProfileChangeEvent');

	BS.evMgr.bind('msg:onProfileChangeEvent', function (ev) {
		var message = ev.data.body;
		if (!message) {
			BS.logger.info('# NO MESSAGE AT onBuddyConfirmMessage EVENT HANDLER!');
			return;
		}
		if (mm.appExists('myContacts')) {
			switch (message.eventType) {
			case 0:
				break;
			case 1:
				myContacts.onAskMessage('approve', message);
				break;
			case 2:
				myContacts.onAskMessage('reject', message);
				break;
			case 3:
				break;
			case 4:
				myContacts.onAskMessage('delete', message);
				break;
			}
		}
	});

	new BS.Module(
		{
			id: 'Contacts',
			requiredLicense: 'contacts',
			mmExtensions: {
				app: contactsMain,
				icon: 'contacts',
				title: 'contacts',
				position: 12
			},
			startupTasks: [
				{
					name: 'Contacts UI',
					payload: function (params, callback) {
						BS.template.get('svg/contacts.svg').finally(callback);
					}
				},
				{
					name: 'Contacts buddy list',
					payload: function (params, callback) {
						var user = BS.portal.user;
						BS.request.Get('/restapi/rest/%s/%s/social/buddies'.sprintf(user.regionId,
							user.userId), {
							accept: 'json'
						}).complete(function (response) {
							callback({}, response.success);
							if (!response.success || !BS.modMgr.isAllowed('contacts'))
								return;

							for (var i in response.data) {
								var buddy = response.data[i];
								if (buddy.status == 0)
									continue;
								BuddyList.add(formBudyListItem(buddy));
							}
						});
					},
					finished: function (d) {
					}
				}
			]
		}
	).register(contactsMain)
		.register(myContacts)
		.register(addContact)
		.register(searchContact)
		.register(myProfile)
		.register(quickChat)
		.register(quickChatMenu)
		.register(startChat)
		.register(chatMsgReceivedAlert)
		.register(onContactRequestDialog);

})(BeeSmart);

(function (BS, q) {
	var searchResults = new BS.App('searchResults', {
		isDefault: true,
		helpId: 'search',
		requiredLicense: 'search'
	});
	var searchPopup = new BS.App('searchPopup', {
		type: 'popup',
		helpId: 'search',
		requiredLicense: 'search',
		inputMapper: BS.App.portalDirectionKeyMapper
	});
	var mm = BS.modMgr;
	var am = BS.appMgr;
	var ui = BS.ui;
	var showRepo, showService;
	var keyboard = mm.getApp('keyboard');
	var misc = mm.getApp('Misc');

	var TYPE_EPG = 'PROGRAM';
	var TYPE_MOVIE = 'INFO';
	var TYPE_IMAGE = 'IMAGE';
	var TYPE_CHANNEL = 'CHANNEL';

	var CRITERIA_NAME = 'NAME';
	var CRITERIA_DESCRIPTION = 'DESCRIPTION';
	var CRITERIA_GENRE = 'GENRE';
	var CRITERIA_CAST = 'CAST';

	var BeeSmartMain = mm.getModule('BeeSmartMain');
	var tvLib = BeeSmartMain.tvLibrary;
	var liveTv = mm.getApp('liveTv');
	var tvCatRepo = BS.repositories.tvCategoryRepo;


	searchResults.dom = {};
	searchResults.alert = null;
	searchResults.actionBar = [
		['back', 'toMainMenu'],
		['vertical', 'select'],
		['blue', 'newSearch'],
		['confirm', 'confirm']
	];

	searchResults.searchText = null;
	searchResults.hits = [];

	searchResults.init = function (caller, searchText, hits) {
		this.dom.searchResults = this.dom.searchResults || $('#searchResults');
		this.dom.searchResults.show();

		this.dom.searchHits = this.dom.searchHits || $('#searchHits');

		this.dom.searchResultText = this.dom.searchResultText || $('#searchResultText');
		this.dom.searchResultCount = this.dom.searchResultCount || $('#searchResultCount');

		this.dom.searchHitsSelector = this.dom.searchHitsSelector || $('#searchHitsSelector');
		this.hitsSelector = this.hitsSelector || new ui.Menu(this.dom.searchHitsSelector[0]);

		misc.dom.actionBar.set(this.actionBar);

		this.alert = this.alert || new BS.ui.Alert({autoHide:3000});

		if (hits || this.hits.length > 0) {
			this.displayResults(searchText, hits);
		}
		else {
			this.dom.searchResultText.hide();
			this.dom.searchResultCount.hide();
			this.dom.searchHits.hide();
			am.inContextOf(searchResults).push(searchPopup);
		}
	};

	searchResults.destroy = function () {
		this.dom.searchResults.hide();
	};

	searchResults.focus = function (caller, searchText, hits, arg2) {
		var that = this;

		if (caller === 'epgTvShowDetails') {
			misc.showPortal('excludeMenu');
		}

		if (caller === 'vodContent' || caller === 'vodCategory') {
			this.dom.searchResults.show();
			misc.dom.actionBar.set(this.actionBar);
			return;
		}

		if (caller === 'pinCheckDialog') {
			if (arg2)
				that.onHitSelected();
			return;
		}

		if (hits || that.hits && that.hits.length) {
			that.displayResults(searchText, hits);
		} else {
			am.pop();
		}
	};

	searchResults.displayResults = function (searchText, hits) {
		var that = this;
		var channel;
		if (hits) {
			that.searchText = searchText;
			that.hits = hits;
		}

		that.items = [];

		var showableHits = [];

		if (that.hits && that.hits.length) {
			for (var i = 0; i < that.hits.length; i++) {
				var hit = that.hits[i];
				hit.start = parseInt(hit.start, 10);
				hit.end = parseInt(hit.end, 10);

				var dayStart = (new Date((new Date()).getFullYear(), (new Date()).getMonth(),
					(new Date()).getDate())).getTime();
				var tomorrowStart = dayStart + 86400000;
				var tomorrowEnd = tomorrowStart + 86400000;
				var title = '';
				var info = '';

				switch (hit.type) {
				case TYPE_CHANNEL:
					title = hit.channel.number + '. ' + hit.channel.name;
					break;

				case TYPE_EPG:
					try {
						channel = tvLib.getChannelById(hit.program.channelId);
					} catch (ex) {
						continue;
					}
					if (!showRepo || !showService) {
						searchResults.hits.splice(i, 1);
						continue;
					}

					var prog = showRepo.containsId(hit.id) ?
						showRepo.getById(hit.id) : new BS.ShowModel.TvShow(hit.program);

					if (!prog.isShowAllowed()) {
						searchResults.hits.splice(i, 1);
						continue;
					}

					title = channel.name + ', ' + hit.program.title;
					var start = parseInt(hit.program.start, 10);
					var date = new Date(start);
					if (start >= dayStart && start < tomorrowStart) {
						info = tr('today');
					} else if (start >= tomorrowStart && start < tomorrowEnd) {
						info = tr('tomorrow');
					} else {
						info = date.toFormatedString(BS.portal.local.formats.date);
					}

					info += ', ' + date.toFormatedString(BS.portal.local.formats.time) + ' (';
					var durationInMinutes = parseInt(hit.program.duration, 10);
					if (durationInMinutes) info += durationInMinutes.toMovieFormat2('m');
					info += ')';

					break;
				case TYPE_MOVIE:
					if (BS.portal.user.checkParentalLimit(hit.contentInfo.ageRating) === false) {
						continue;
					}
					title = hit.contentInfo.title;
					var durationInSeconds = hit.contentInfo.details.runtime;
					if (durationInSeconds) {
						info = (durationInSeconds / 60).toFixed(0) + tr('min');
					}

					break;
				case TYPE_IMAGE:
					title = hit.title;
					info = hit.extraData.description;

					break;
				}

				showableHits.push(hit);
				that.items.push({
					'type': hit.type === TYPE_MOVIE ?
						'vod' : hit.type === TYPE_EPG ?
						'epg' : hit.type.toLowerCase(),
					'title': title.encodeEntities(),
					'info': info.encodeEntities()
				});
			}

			that.hits = showableHits;

			var searchResultText = tr('searchResults') + ': <tspan class="text-alternate">'
				+ that.searchText + '</tspan>';
			var searchResultCount = '(';
			searchResultCount += that.items.length + ' ' + tr('searchFound') + ')';

			that.dom.searchResultText.svg(searchResultText);
			that.dom.searchResultCount.text(searchResultCount);

			var hitItems = ui.template('searchHitTemplate', {
				'items': that.items,
				'selector': that.dom.searchHitsSelector
			});

			if (!that.resultsMenu) {
				that.resultsMenu = that.hitsSelector.newMenuItems();
			}

			that.resultsMenu.setItems(hitItems, that.items);
			that.resultsMenu.show();
			that.dom.searchHits.show();
			that.dom.searchResultText.show();
			that.dom.searchResultCount.show();
		} else {
			that.dom.searchHits.hide();
			that.dom.searchResultText.text(tr('searchNothingFound'));
			that.dom.searchResultText.show();
			that.dom.searchResultCount.hide();
		}
	};

	searchResults.onInputEvent = function (keyPressedName) {
		switch (keyPressedName) {
		case 'left':
		case 'back':
			switch (searchPopup.caller) {
			case 'tvPanel':
			case 'Vod':
				am.pop();
				misc.adapterMainMenu.showCModule(searchPopup.caller);
				break;
			case 'myImages':
				am.pop();
				misc.adapterMainMenu.showCModule('MyRecordings', [searchPopup.caller]);
				break;
			default:
				am.cutOff(misc.adapterMainMenu.appId);
				break;
			}
			searchPopup.caller = null;
			break;
		case 'up':
		case 'down':
			if (keyPressedName === 'up')
				this.resultsMenu.previous();
			else
				this.resultsMenu.next();
			break;

		case 'blue':
			this.dom.searchResultText.hide();
			this.dom.searchResultCount.hide();
			this.dom.searchHits.hide();
			am.inContextOf(searchResults).push(searchPopup);
			break;

		case 'ok':
			if (!this.resultsMenu)
				return;
			this.onHitSelected();
			break;
		}
	};
	searchResults.onHitSelected = function (hit) {
		hit = hit || this.hits[this.resultsMenu.currentIndex()];
		switch (hit.type) {
		case TYPE_CHANNEL:
			am.cutOff('liveTv');
			tvCatRepo.getAllCategory().then(function(allChannelsCat){
				liveTv.setCurrentCategory(allChannelsCat);
				liveTv.switchToChannel(hit.channel);
			});

			break;
		case TYPE_EPG:
			var show = showRepo.getById(hit.program.id);
			if (!show)
				show = new BS.ShowModel.TvShow(hit.program);

			if (BS.portal.user.checkParentalLimit(show.rating)) {
				am.push(mm.getApp('epgTvShowDetails'), show);
			} else {
				am.inContextOf(searchResults).push(mm.getApp('pinCheckDialog'));
			}

			break;
		case TYPE_MOVIE:
			if (BS.portal.user.checkParentalLimit(hit.contentInfo.ageRating)) {
				ui.toggleLoader(true);
				BeeSmartMain.vodModelService
					.getMovieWithId(hit.contentInfo.id)
					.then(function (movie) {
						searchResults.dom.searchResults.hide();
						mm.getModule('Vod').showMovie(movie);
					})
					.catch(function(ex) {
						BS.logger.trace('SEARCH: exception: %s', ex);
						searchResults.alert.show(tr('movieNotFound'));
					})
					.finally(function() {
						ui.toggleLoader(false);
					})
					.done();
			} else {
				am.inContextOf(searchResults).push(mm.getApp('pinCheckDialog'));
			}

			break;
		case TYPE_IMAGE:
			var galleryObj = {
				'photoUrl': hit.extraData.photoUrl,
				'dateTaken': hit.extraData.dateTaken
			};
			am.inContextOf(searchResults).push(mm.getApp('imageDetails'), galleryObj);

			break;
		}
	};



	searchPopup.dom = {};
	searchPopup.init = function (caller) {
		this.caller = caller;

		this.searchText = '';
		this.menu = [];
		this.menuIndex = 0;

		this.menu[0] = [];

		if (mm.isAllowed('epg') && mm.isAllowed('livetv')) {
			this.menu[0].push({
				'key': 'EPG',
				'translationKey': tr('billingLivetv'),
				'value': caller === 'tvPanel'
			});
		}

		if (mm.isAllowed('vod')) {
			this.menu[0].push({
				'key': 'VOD',
				'translationKey': tr('billingVod'),
				'value': caller === 'Vod'
			});
		}

		this.menu[0].push({
			'key': TYPE_IMAGE,
			'translationKey': tr('searchImages'),
			'value': caller === 'myImages'
		});

		this.menu[1] = [
			{
				'key': CRITERIA_NAME,
				'translationKey': tr('realName'),
				'value': false
			},
			{
				'key': CRITERIA_DESCRIPTION,
				'translationKey': tr('searchDescription'),
				'value': false
			},
			{
				'key': CRITERIA_GENRE,
				'translationKey': tr('searchGenre'),
				'value': false
			},
			{
				'key': CRITERIA_CAST,
				'translationKey': tr('searchCast'),
				'value': false
			}
		];

		this.subMenu = [
			{
				'index': 0,
				'translationKey': tr('searchType')
			},
			{
				'index': 0,
				'translationKey': tr('searchCriteria')
			}
		];

		this.dom.searchPopup = this.dom.searchPopup || $('#searchPopup');

		this.dom.searchInput = this.dom.searchInput || $('#searchInput');
		this.dom.searchFilter = this.dom.searchFilter || $('#searchFilter');
		this.dom.searchMenuTitle = this.dom.searchMenuTitle || $('#searchMenuTitle');
		this.dom.searchFilterSwitch = this.dom.searchFilterSwitch || $('#searchFilterSwitch');
		this.dom.searchNavigateLeft = this.dom.searchNavigateLeft || $('#searchNavigateLeft');
		this.dom.searchNavigateRight = this.dom.searchNavigateRight || $('#searchNavigateRight');
		this.dom.actionBar = this.dom.actionBar || new ui.ActionBar($('#searchButtons'));
		this.dom.searchInput.text(this.searchText);
		this.changeSearchFilter();
		this.dom.searchPopup.show();
	};

	searchPopup.destroy = function () {
		this.dom.searchPopup.hide();
	};

	searchPopup.focus = function (caller, kbdText) {
		switch (caller) {
		case 'keyboard':
			searchPopup.searchText = kbdText;
			this.dom.searchInput.text(searchPopup.searchText);
			break;
		}
	};

	searchPopup.onInputEvent = function (keyPressedName) {
		var isKeyboard = /^[\w\s]$/;

		if (isKeyboard.test(keyPressedName)) {
			keyboard.enableSpecialChars(['*']);
			am.push(keyboard, this.dom.searchInput.text(), keyPressedName);
		}
		else {
			switch (keyPressedName) {
			case 'back':
				am.pop('noSearch');
				this.caller = null;
				break;
			case 'blue':
				this.searchText = this.dom.searchInput.text();
				ui.toggleLoader(true);
				this.lock = true;
				var searchType = this.getSelectedKeys(0);
				var searchCriteria = this.getSelectedKeys(1);
				var dataObj = {};

				dataObj['query'] = this.searchText;
				if (searchType && searchType.length)
					dataObj['search_type'] = searchType;

				if (searchCriteria && searchCriteria.length)
					dataObj['search_criteria'] = searchCriteria;

				BS.request.Get('/restapi/rest/%d/%d/search'
					.sprintf(BS.portal.user.regionId, BS.portal.user.userId), {
					accept: 'json',
					data: dataObj,
					timeout: 60000,
					preventEvent: true
				}).then(function (response) {
					dataGetterCallback(response.data);
				}, function () {
					dataGetterCallback([]);
				}).done();
				break;
			case 'keyboard':
				keyboard.enableSpecialChars(['*']);
				am.push(keyboard, this.dom.searchInput.text());

				break;
			case 'up':
			case 'down':
			case 'left':
			case 'right':
			case 'ok':
				this.changeSearchFilter(keyPressedName);

				break;
			}
		}
	};

	searchPopup.getSelectedKeys = function (menuIndex) {
		if (!(menuIndex in this.menu))
			return '';

		return this.menu[menuIndex]
			.filter(function(menu) {
				return menu.value;
			})
			.map(function(menu) {
				return menu.key;
			})
			.join(',');
	};

	function channelNameHit(chObj) {
		return {
			type: TYPE_CHANNEL,
			channel: chObj
		};
	}

	function dataGetterCallback(hits) {
		searchPopup.lock = false;
		ui.toggleLoader(false);
		var searchString = searchPopup.searchText.toLowerCase().trim();
		var searchType = searchPopup.getSelectedKeys(0);
		var searchCriteria = searchPopup.getSelectedKeys(1);
		var channelNameHits = {'100-percent-match': [], 'match': []};
		var promise = Q();
		if (searchType === ''
			|| searchType.indexOf('EPG') !== -1
			&& (searchCriteria === '' || searchCriteria.indexOf(CRITERIA_NAME) !== -1)
		) {
			promise = tvCatRepo.getAllCategory().then(function(allChannelsCat) {
				allChannelsCat.getChannels().then(function (chans) {
					var len = chans ? chans.length : 0;
					for (var i = 0; i < len; i++) {
						var name = chans[i].name.toLowerCase();
						var parts = name.split(' ');
						for (var j = 0, jlen = parts.length; j < jlen; j++) {
							var part = parts[j];
							if (part === searchString) {
								channelNameHits['100-percent-match'].push(channelNameHit(chans[i]));
								break;
							} else if (part.indexOf(searchString) === 0) {
								channelNameHits['match'].push(channelNameHit(chans[i]));
								break;
							}
						}
					}

					hits = hits.concat(channelNameHits['100-percent-match']);

					hits = hits.concat(channelNameHits['match']);
				});
			});
		}

		promise.then(function() {
			am.pop(searchPopup.searchText, hits);
			if (searchPopup.caller !== 'searchResults') {
				misc.adapterMainMenu.showCModule('searchResults', [searchPopup.searchText, hits]);
			}
		}).done();
	}

	searchPopup.changeSearchFilter = function (key) {
		if (key === 'ok') {
			this.menu[this.menuIndex][this.subMenu[this.menuIndex].index].value =
				!this.menu[searchPopup.menuIndex][this.subMenu[this.menuIndex].index].value;

			if (this.menu[this.menuIndex][this.subMenu[this.menuIndex].index].key === -1) {
				for (var i in this.menu[this.menuIndex]) {
					this.menu[this.menuIndex][i].value =
						this.menu[this.menuIndex][this.subMenu[this.menuIndex].index].value;
				}
			}
		}
		else {
			this.dom.searchNavigateLeft.show();
			this.dom.searchNavigateRight.show();

			switch (key) {
			case 'up':
				--this.menuIndex;

				if (this.menuIndex < 0) {
					this.menuIndex = this.subMenu.length - 1;
				}

				this.subMenu[this.menuIndex].index = 0;

				break;

			case 'down':
				++this.menuIndex;

				if (this.menuIndex >= this.subMenu.length) {
					this.menuIndex = 0;
				}

				this.subMenu[this.menuIndex].index = 0;

				break;

			case 'left':
				this.subMenu[this.menuIndex].index = Math.max(
					0, --this.subMenu[this.menuIndex].index);

				break;

			case 'right':
				this.subMenu[this.menuIndex].index = Math.min(
						this.menu[this.menuIndex].length - 1,
					++this.subMenu[this.menuIndex].index
				);

				break;
			}

			var navigateOption1 = BS.portal.direction === 'ltr' ?
				'searchNavigateLeft' : 'searchNavigateRight';
			var navigateOption2 = BS.portal.direction === 'ltr' ?
				'searchNavigateRight' : 'searchNavigateLeft';

			if (this.subMenu[this.menuIndex].index === 0) {
				this.dom[navigateOption1].hide();
			}

			if (this.subMenu[this.menuIndex].index === this.menu[this.menuIndex].length - 1) {
				this.dom[navigateOption2].hide();
			}

			this.dom.searchMenuTitle.text(this.subMenu[this.menuIndex].translationKey);
			this.dom.searchFilter.text(
				this.menu[this.menuIndex][this.subMenu[this.menuIndex].index].translationKey
			);
		}

		if (this.menu[this.menuIndex][this.subMenu[this.menuIndex].index].value) {
			this.dom.searchFilterSwitch.show();
		}
		else {
			this.dom.searchFilterSwitch.hide();
		}
	};

	BS.evMgr.bind('onBeeSmartReady', function () {
		if (mm.isAllowed('epg')) {
			showRepo = BS.ShowModel.showRepository;
			showService = BS.ShowModel.showService;
		}
	});

	var Search = new BS.Module({
		id: 'Search',
		requiredLicense: 'search',
		mmExtensions: {
			app: searchResults,
			icon: 'search',
			title: 'search',
			position: 14
		},
		startupTasks: [
			{
				name: 'Search module interface',
				payload: function (params, callback) {
					BS.template.get('svg/search.svg').finally(callback);
				}
			}
		]
	});

	Search.register(searchResults);
	Search.register(searchPopup);
})
(
	BeeSmart,
	Q
);

(function (BS, em, am, mm) {
	var ui = BS.ui;
	var bss = BS.BeeSmartSettings;
	var ModuleDom = $.ModuleDom;
	var misc = mm.getApp('Misc');
	var bsMain = mm.getModule('BeeSmartMain');
	var appVodPlayer = mm.getApp('vodPlayer');
	var appVodContent = mm.getApp('vodContent');
	var appLiveTv = mm.getApp('liveTv');
	var vodModuleId = mm.getModule('Vod').id;
	var beeStoreAppId = mm.getApp('AppStoreCategories').id;
	var myRecordingsModuleId = mm.getModule('MyRecordings').id;
	var promoModuleId = mm.getModule('Promotions').id;
	var billModuleId = mm.getModule('Bills').id;
	var epgMatrixViewAppId = mm.getApp('EpgMatrixView').id;
	var searchPopupAppId = 'searchPopup';


	var adManager;
	var taBlockRunner;

	var taFavouriteAds = new BS.App(
		'taFavouriteAds',
		{helpId: 'taFavoriteAds'}
	);

	taFavouriteAds.onInputEvent = function (keyPressedName) {
		var r = taFavouriteAds;

		switch (keyPressedName) {
		case 'left':
		case 'back':
			r.update();
			break;
		case 'up':
		case 'down':
			keyPressedName === 'up' ? r.subMenu.previous() : r.subMenu.next();
			break;
		case 'right':
		case 'ok':
			r.dom.toggleFavourite(r.subMenu.currentIndex());
			break;
		}
	};
	taFavouriteAds.update = function () {
		var interesting = [];
		var annoying = [];
		var that = this;
		var changed = false;

		ui.toggleLoader();
		that.itemList.forEach(function (item) {
			if (item.state === 1)
				interesting.push(item.id);
			else if (item.state === 0)
				annoying.push(item.id);
		});

		that.currentState.forEach(function (item, i) {
			var state = item.interesting ? 1 : (item.annoying ? 0 : 2);
			if (state !== that.itemList[i].state)
				changed = true;
		});

		if (changed) {
			BS.request.Post('/restapi/rest/%d/%d/target-advertising/product-types'.sprintf(
				BS.portal.user.regionId, BS.portal.user.userId), {
				accept: 'json',
				data: {
					annoying: annoying.join(','),
					interesting: interesting.join(',')
				}
			}).complete(function (response) {
				ui.toggleLoader();
				if (response.success) {
					ui.generalAlert(tr('productTypesUpdated'));
					am.pop();
				} else
					ui.generalAlert(tr('productTypesUpdatingFailed'));
			});
		} else {
			am.pop();
			ui.toggleLoader();
		}
	};
	taFavouriteAds.init = function () {
		var that = taFavouriteAds;
		that.dom = that.dom || new ModuleDom(
				[
					'taFavoriteAds', 'ta_menu_selector'
				],
				{
					show: function () {
						var actionBarSet = [
							['back', 'back'],
							['vertical', 'select'],
							['empty', null],
							['confirm', 'selectUserBtn']
						];
						this.actionBar(actionBarSet);
						this['taFavoriteAds'].show();
					},
					hide: function () {
						this['taFavoriteAds'].hide();
					},
					actionBar: function (buttonVector) {
						misc.dom.actionBar.set(buttonVector);
					},
					toggleFavourite: function (index) {
						var adType = that.subMenu.currentInfo();
						var itemEl = that.subMenu.itemElement(index);

						adType.state = adType.state === 0 ? 2 : (adType.state === 2 ? 1 : 0);
						itemEl.firstElementChild.nextElementSibling.setAttribute('xlink:href',
							adType.state === 0 ? '#errSmall' : (adType.state
							=== 1 ? '#okSmall' : '#blank'));
					}
				}
			);
		var r = taFavouriteAds;
		var infos = [];
		var items = [];
		ui.toggleLoader();
		r.itemList = [];

		if (r.menu) {
			r.subMenu.destroy();

			r.menu.destroy();
			r.menu = null;
		}

		r.menu = new ui.Menu(r.dom.ta_menu_selector[0]);

		BS.request.Get('/restapi/rest/%d/%d/target-advertising/product-types'
			.sprintf(BS.portal.user.regionId,
				BS.portal.user.userId), {
			accept: 'json'
		}).complete(function (response) {
			ui.toggleLoader();
			var d = response.data;
			r.currentState = d;
			if (!response.success || !d) {
				BS.logger.trace('ERROR: ad interest list fetch failed.');
			} else {
				for (var i in d) {
					var item = d[i],
						obj = {
							id: item.id,
							state: item.interesting ? 1 : (item.annoying ? 0 : 2),
							title: item.name
						};
					r.itemList.push(obj);
					infos.push(obj);
					items.push(ui.template('taFavoriteAdsListTemplate', {
						'setLink': function () {
							return obj.state === 0 ? '#errSmall' :
								(obj.state === 1 ? '#okSmall' : '#blank');
						},
						'setAdType': function () {
							return obj.title;
						}
					}));
				}
			}

			r.subMenu = r.menu.newMenuItems();
			r.subMenu.setItems(items, infos).show();
			taFavouriteAds.dom.show();
		});
	};

	taFavouriteAds.focus = function () {
		taFavouriteAds.dom.show();
	};
	taFavouriteAds.destroy = function () {
		taFavouriteAds.dom.hide();
	};


	new BS.Module({
		id: 'TargetAdvertising',
	requiredLicense: 'targetadvert',
		startupTasks: [
			{
				name: 'TargetAdvertising UI',
				payload: function (params, callback) {
				BS.template.get('svg/ta.svg').then(function (){
						if (BS.skinConfiguration.enableTaMenuItem) {
							bss.nodeExtras.appendChild(
								new bss.SettingNode(
									'sett_ta', 'sett_taMsg', ['defaultUser', 'subUser'], 3,
									taFavouriteAds, null
								)
							);
						}
						adManager = new BS.TaModel.AdManager(
							BS.TaModel.taService,
							BS.TaModel.blockRepository
						);
						BS.TaModel.adManager = adManager;
						taBlockRunner = new BS.TaModel.TaBlockRunner(
							BS.TaModel.taService,
							BS.TaModel.blockRepository,
							BS.media,
							BS.TaModel.adManager
						);
						BS.TaModel.taBlockRunner = taBlockRunner;
						bindTAToEvents();
					}).finally(callback);
				}
			}
		]
	}).register(taFavouriteAds);

	function bindTAToEvents() {
		em.bind('onVideoPositionChangedEvent', function () {
			if (am.lastLoaded(appVodPlayer.id)) {
				var blockContext = BS.TaModel.blockRepository.blockContext;
				taBlockRunner.setBlock(blockContext.ON_DEMAND_VIDEO, taBlockRunner._contentId).done();
			}
		});

		em.bind('onVideoResumePlaybackEvent', function () {
			if (am.lastLoaded(appVodPlayer.id)) {
				var blockContext = BS.TaModel.blockRepository.blockContext;
				taBlockRunner.setBlock(blockContext.ON_DEMAND_VIDEO, taBlockRunner._contentId).done();
			}
		});

		em.bind('onAppStackChange', function (e) {
			var appId = e.data.appId;
			if (e.data.action === 'push') {
				var blockContext = BS.TaModel.blockRepository.blockContext;
				if (appId === vodModuleId) {
					taBlockRunner.setBlock(blockContext.MOVIES, '').done();
				} else if (appId === beeStoreAppId) {
					taBlockRunner.setBlock(blockContext.APPS, '').done();
				} else if (appId === myRecordingsModuleId) {
					taBlockRunner.setBlock(blockContext.RECORDED, '').done();
				} else if (appId === promoModuleId || appId === billModuleId ||
					appId === searchPopupAppId) {
					taBlockRunner.setBlock(blockContext.OTHER, '').done();
				} else if (appId === epgMatrixViewAppId) {
					taBlockRunner.setBlock(blockContext.PROGRAM_GUIDE, '').done();
				}
			} else {
				if ((taBlockRunner._startedBlock || taBlockRunner._scheduledBlockTimer) &&
					(appId === vodModuleId || appId === beeStoreAppId || appId === promoModuleId ||
					appId === myRecordingsModuleId || appId === billModuleId ||
					appId === searchPopupAppId || appId === epgMatrixViewAppId)
				) {
					taBlockRunner._resetTimersAndHideSvg();
					taBlockRunner._clearScheduledBlockTimer();
				}
			}
		});

		em.bind('onChannelChange', function () {
			var blockContext = BS.TaModel.blockRepository.blockContext;
			taBlockRunner.setBlock(blockContext.LIVE_VIDEO,
				appLiveTv.getCurrentChannel().id.toString()).done();
		});

		em.bind('onVideoPlayerStart', function (ev) {
			var blockContext = BS.TaModel.blockRepository.blockContext;
			taBlockRunner.setBlock(blockContext.ON_DEMAND_VIDEO,
				ev.data.asset.id.toString()).done();
		});
		em.bind('onVideoPlayerExit', function () {
			taBlockRunner.stopBlock();
			taBlockRunner.taService.clearLastBlock();
		});

		em.bind('onKeypress', function (ev) {
			if (ev.data !== 'yellow')
				return;

			if (!taBlockRunner._startedBlock)
				return;

			if (adManager.currentAdd === null)
				return;

			if (!adManager.currentAdd.isClickable())
				return;

			if (am.lastLoaded('vodPlayer'))
				return;

			if (!am.isLoaded('Vod'))
				misc.adapterMainMenu.showCModule('Vod');

			if (am.lastLoaded(appVodContent))
				am.pop();

			if (am.lastLoaded('vodCategory'))
				mm.getApp('vodCategory').dom.hideContentList();

			bsMain.vodModelService.getMoviesWithMediaIds([adManager.currentAdd.clickableTarget])
				.then(function (contentList) {
					mm.getModule('Vod').showMovie(contentList[0]);
				});

			taBlockRunner.stopBlock();
			return false;
		});
	}

})(
	BeeSmart,
	BeeSmart.evMgr,
	BeeSmart.appMgr,
	BeeSmart.modMgr
);

(function (BS, mm, am, em, media) {
	var misc = mm.getApp('Misc');
	var appVodPlayer = mm.getApp('vodPlayer');
	var appLiveTv = mm.getApp('liveTv');

	var taProcessorStarted = false;
	var skinConfiguration = {};

	function AdManager(taService, blockRepo) {
		this.taService = taService;
		this.blockRepo = blockRepo;
		this.init();
		this._setGraphic();
	}

	AdManager.prototype = {
		showAnimation: false,
		currentAdd: null,
		countdownTimerIntervalRef: null,
		init: function () {
			var r = this;
			r.dom = r.dom || {
					taeImage: new BS.ui.Image($('#tae_image')),
					holder: $('#tae_graphics'),
					ta_switch_1: $('#ta_switch_1'),
					setGraphicViaSkin: $('#tae_handler'),
					clickableHolder: $('#tae_clickable'),
					videoClipHolder: $('#taVideoClip'),
					ta_trick_play_disabled: $('#ta_trick_play_disabled'),
					ta_trick_play_enabled: $('#ta_trick_play_enabled'),
					ta_clip_enabled_count_down: $('#ta_clip_enabled_count_down'),
					ta_clip_disabled_count_down: $('#ta_clip_disabled_count_down')
				};
		},
		_show: function () {
			this.dom.holder.show();
		},
		_hide: function () {
			this.dom.holder.hide();
		},
		_setGraphic: function () {
			this.dom.setGraphicViaSkin.trigger('setGraphic', {
				'tae': skinConfiguration
			});
		},
		_showClickableBar: function () {
			this.dom.clickableHolder.show();
		},
		hideClickableBar: function () {
			this.dom.clickableHolder.hide();
		},
		_showAndUpdateVideoClipHolder: function (trickPlayEnabled, countdownTimer) {

			this._updateVideoClipHoldersText(
				(tr('taCountDownMsg').sprintf(countdownTimer)));
			this._beginCountDownTimerInterval(countdownTimer);

			this.dom.videoClipHolder.show();

			this.dom.ta_trick_play_disabled[trickPlayEnabled ? 'hide' : 'show']();
			this.dom.ta_trick_play_enabled[trickPlayEnabled ? 'show' : 'hide']();
		},
		_hideVideoClipHolder: function () {
			this.dom.videoClipHolder.hide();
		},
		_updateVideoClipHoldersText: function (newText) {
			this.dom.ta_clip_enabled_count_down.text(newText);
			this.dom.ta_clip_disabled_count_down.text(newText);
		},
		_beginCountDownTimerInterval: function (countdownTimer) {
			this.countdownTimerIntervalRef = setTimeout(function () {
				this._clearCountDownTimerInterval();
				this._updateVideoClipHoldersText(
					(tr('taCountDownMsg').sprintf(--countdownTimer))
				);
				if (countdownTimer > 0) {
					this._beginCountDownTimerInterval(countdownTimer);
				}
			}.bind(this), 1000);
		},
		_clearCountDownTimerInterval: function () {
			if (this.countdownTimerIntervalRef !== null) {
				clearTimeout(this.countdownTimerIntervalRef);
				this.countdownTimerIntervalRef = null;
			}
		},
		handleVideoClipAdPlayOut: function (block, ad) {
			var that = this;
			var changePlayForSure = appVodPlayer.playForSure;
			appVodPlayer.playForSure = false;

			var resumeTimeout = null;
			var vodMoviePosition = media.position;
			var vodMovieObj = appVodPlayer.options['assetURLs'];

			function resumeVodContent() {
				clearResumeTimeout();
				media.playMediaResource(vodMovieObj, 'vod', function () {
					media.play(vodMoviePosition);
					appVodPlayer.dom.showPlayer();
				});

				if (media.playMode === 'pause')
					media.pause();

				var onVideoPlayHandler = em.bind('onVideoPlay', function () {
					appVodPlayer.playForSure = changePlayForSure;
					onVideoPlayHandler.unbind();
				});
			}

			function clearResumeTimeout() {
				appVodPlayer.lock = false;
				if (resumeTimeout !== null) {
					clearTimeout(resumeTimeout);
					resumeTimeout = null;
				}

				that._hideVideoClipHolder();
				onKeypressHandler.unbind();
			}

			media.playMediaResource(
				new BS.media.VendorMediaResources(ad.mediaResources),
				'vod',
				function () {
					if (!am.lastLoaded('vodPlayer')) {
						if (
							am.lastLoaded('resumeFromAutoBookmark')
							|| am.lastLoaded('clipBookmarks')
						)
							am.pop();
					}

					appVodPlayer.dom.hidePlayer();
					appVodPlayer.lock = true;

					that.taService.enlargeTriggeredAdNumber(ad.id);
					that.generateAdStatisticEvent(block.blockContext, ad.id);
				}
			);
			that._showAndUpdateVideoClipHolder(ad.isSkippable(), ad.duration);

			resumeTimeout = setTimeout(resumeVodContent, ad.duration * 1e3);

			var onKeypressHandler = em.bind('onKeypress', function (ev) {
				if (!am.lastLoaded('vodPlayer'))
					return;

				if (ev.data === 'stop') {
					clearResumeTimeout();
					return;
				}

				if (ev.data === 'fw' && ad.isSkippable())
					setTimeout(resumeVodContent, 0);
			});
		},
		setAdProperties: function (ad, displayContainer, blockType) {
			var that = this;
			this.currentAdd = ad;

			this.startAnimation = function () {
				var image = ad.bannerImages[0];
				var position = blockType === 'ON_DEMAND_VIDEO' || blockType === 'LIVE_VIDEO' ?
					skinConfiguration.graphicsPosition[displayContainer][0] :
					skinConfiguration.graphicTriggerPositions[blockType][0];

				if (position === undefined)
					position = 'translate(0, 20)';

				if (image === undefined)
					BS.logger.trace('\n## TaeEngine: Ad id ' + ad.id + ' does not have any image');

				that.dom.taeImage.href = image ? BS.imageUrlProvider.toImageUrl(image.link) : null;
				that.dom.holder.attr('transform', position);
				that.dom.ta_switch_1.begin();
			};
		},
		showAd: function (block) {
			var hasRightContext;

			if (block.isLiveBlockContext())
				hasRightContext = am.lastLoaded(appLiveTv.id);
			else if (block.isOnDemandBlockContext())
				hasRightContext = am.lastLoaded(appVodPlayer.id);
			else
				hasRightContext = true;

			if (hasRightContext) {
				BS.logger.trace('\n## TaeEngine: Scheduled ' + block.blockContext + ' ad hide '
					+ '(id=' + this.currentAdd.id + ', dur=' + this.currentAdd.duration + 's)'
					+ ' after ' + (this.currentAdd.duration ) + 's');

				this.hideClickableBar();
				if (this.currentAdd.isClickable() && !am.lastLoaded('vodPlayer'))
					this._showClickableBar();

				this.startAnimation();
				this._show();

				this.taService.enlargeTriggeredAdNumber(this.currentAdd.id);
				this.generateAdStatisticEvent(block.blockContext, this.currentAdd.id);
			} else {
				this._hide();
				BS.logger.trace('\n## TaeEngine:  skipping ad (id=' + this.currentAdd.id +
					'), not right context on the screen');
			}
		},
		generateAdStatisticEvent: function (type, adId) {
			var eventData = {};
			eventData.eventId = this.blockRepo.blockContext.isLiveContext(type) ?
				misc.eventIds.taLiveTv : misc.eventIds.taVod;
			eventData.uid = adId;
			eventData.start = Date.now();
			misc.event.write(eventData);
		},
		destroy: function () {
			this.currentAdd = null;
			this._hide();
		}
	};

	BS.TaModel.AdManager = AdManager;
})(
	BeeSmart,
	BeeSmart.modMgr,
	BeeSmart.appMgr,
	BeeSmart.evMgr,
	BeeSmart.media
);

(function (BS, q) {
	function TaBlockRunner(taService, blockRepo, media, adManager) {
		this.taService = taService;
		this.blockRepo = blockRepo;
		this.media = media;
		this.adManager = adManager;
		this._block = null;
		this._contentId = null;
		this._scheduledBlockTimer = 0;
		this._setBlockTimer = 0;
		this._resetAllTimers = 0;
		this._startedBlock = false;
	}

	TaBlockRunner.prototype = {
		_startedBlock: false,
		setBlock: function (contextType, contentId) {
			this.stopBlock();
			this._contentId = contentId;

			return this.taService.updateBlockAndAdRepository().then(function () {
				if (this._showAppBlock(contextType)) {
					return this._getAppBlock(contextType);
				} else if (this._showContentBlock(contextType)) {
					return this._getBlockForContentId(contextType, contentId);
				} else {
					BS.logger.trace('\n## TaeEngine: block context type is not supported! ' +
						'(type = ' + contextType + ')');
					return null;
				}
			}.bind(this)).then(function (block) {
				if (block) {
					this._block = block;
					this._scheduleBlock(block);
				} else {
					BS.logger.trace('\n## TaeEngine: block not found (contextType: ' + contextType +
						' contentId: ' + contentId + ')');
				}
				return q(true);
			}.bind(this));
		},
		_showAppBlock: function (contextType) {
			return this.blockRepo.blockContext.isAppContext(contextType);
		},
		_getAppBlock: function (contextType) {
			var block = this.taService.getBlocksByBlockContext(contextType)[0];
			if (block) {
				return block;
			} else {
				BS.logger.trace('\n## TaeEngine: block not found for trigger point ' +
					'(type = ' + contextType + ')');
				return null;
			}
		},
		_showContentBlock: function (contextType) {
			var blockContext = this.blockRepo.blockContext;
			return blockContext.isLiveContext(contextType) ||
				blockContext.isOnDemandContext(contextType);
		},
		_getBlockForContentId: function (contextType, contentId) {
			var blocks = this.taService.getBlocksByBlockContextAndContentId(contextType, contentId);
			var now = Date.now();
			var videoPosition = this.media.position ? Math.round(this.media.position / 1e3) : 0;
			return blocks.filter(function (block) {
					if (this.taService.isDisplayedRecently(block.id, contentId)) {
						return false;
					} else {
						return block.hasLiveVideoDisplayConditions(now) ||
							block.hasOnDemandVideoDisplayConditions(videoPosition);
					}
				}.bind(this))[0] || null;
		},
		stopBlock: function () {
			if (this._startedBlock)
				this._resetTimersAndHideSvg();
			if (this._scheduledBlockTimer) {
				this._clearScheduledBlockTimer();
			}
			this._block = null;
		},
		_scheduleBlock: function (block) {
			var startingTimestamp = 0;
			if (block.isLiveBlockContext()) {
				startingTimestamp = block.position;
			} else if (block.isOnDemandBlockContext()) {
				startingTimestamp = block.position * 1e3;
			}
			var timeout = this._getScheduleTimeout(block, startingTimestamp);
			timeout = timeout < 0 ? 0 : timeout;

			BS.logger.trace('\n## TaeEngine: processing will continue in ' + timeout / 1e3 + ' s '
				+ 'for block (id=' + block.id + ', name=' + block.name + ')');

			this._scheduledBlockTimer = setTimeout(function () {
				var adsList = this.taService.getAdsForBlock(block);
				if (block.isBanner()) {
					this._runBannerBlock(adsList);
				} else {
					this._runVideoOrFixedVideoBlock(adsList);
				}
			}.bind(this), timeout);
		},
		_getScheduleTimeout: function (block, startingTimestamp) {
			var timeout;
			if (block.isLiveBlockContext()) {
				timeout = startingTimestamp - Date.now();
			} else if (block.isOnDemandBlockContext()) {
				timeout = startingTimestamp - this.media.position;
			} else {
				timeout = startingTimestamp;
			}
			return timeout;
		},
		_clearScheduledBlockTimer: function () {
			if (this._scheduledBlockTimer) {
				BS.logger.trace('\n## TaeEngine: reset begin timer for tae display processor');
				clearTimeout(this._scheduledBlockTimer);
				this._scheduledBlockTimer = null;
			}
		},
		_runVideoOrFixedVideoBlock: function (adsList) {
			this._startedBlock = true;
			var ad = adsList.shift();

			if (!ad) {
				BS.logger.trace('\n## TaeEngine: There are no ads for block id ' + this._block.id);
				this.setBlock('ON_DEMAND_VIDEO', this._contentId);
			} else if (this.media.position) {
				this.taService.setLastBlock(this._block.id, this._contentId);
				this.adManager.handleVideoClipAdPlayOut(this._block, ad);
			} else {
				BS.logger.trace(
					'\n## TaeEngine: skipping block, vod player current watch seconds ' +
					'is NaN');
				this._resetTimersAndHideSvg();
			}
		},
		_runBannerBlock: function (adsList) {
			var blockStarts = this._getPositionInMs(this._block);
			this._startedBlock = true;

			BS.logger.trace('\n## TaeEngine: There is/are ' + adsList.length + ' ad(s) in block id '
				+ this._block.id);

			this._processBannerAdsDisplay(this._block, adsList, blockStarts);
		},
		_processBannerAdsDisplay: function (block, adsList, adStartingPosition) {
			var ad = adsList.shift();
			var adOffset = this._getScheduleTimeout(block, adStartingPosition);

			if (!ad || !BS.portal.isOnline) {
				this.taService.setLastBlock(block.id, this._contentId);
				this._finishRunningBlock(adOffset);
				return;
			}
			if (isNaN(adOffset)) {
				BS.logger.trace(
					'\n## TaeEngine: skipping block, vod player current watch seconds ' +
					'is NaN');
				this._resetTimersAndHideSvg();
				return;
			}

			var nextAdPosition = this._getNextAdStartingPosition(block, ad,
				adStartingPosition, adOffset);
			if (this._shouldRegulateJustMissedDisplayWindow(adOffset)) {
				adOffset = 0;
			}

			if (adOffset < 0) {
				BS.logger.trace('\n## TaeEngine: ' + block.blockContext + ' ad (id=' + ad.id +
					') too late: ' + (adOffset * 0.001));
				this._processBannerAdsDisplay(block, adsList, nextAdPosition);
				return;
			}

			BS.logger.trace(
				'\n## TaeEngine: Scheduled ' + block.blockContext + ' ad show (id=' + ad.id +
				', dur=' + ad.duration + 's) after ' + (adOffset / 1e3) + ' s');

			this._showAdTimer = setTimeout(function () {
				this.adManager.setAdProperties(ad, block.displayContainer, block.blockContext);
				this.adManager.showAd(block);
				this._processBannerAdsDisplay(block, adsList, nextAdPosition);
			}.bind(this), adOffset);
		},
		_getPositionInMs: function (block) {
			return block.isLiveBlockContext() ? block.position : block.position * 1e3;
		},
		_getNextAdStartingPosition: function (block, ad, currentAdStartingPosition, adOffset) {
			var nextAdPosition = currentAdStartingPosition;
			if (this._shouldRegulateJustMissedDisplayWindow(adOffset)) {
				nextAdPosition += (adOffset * -1) + ad.duration * 1e3;
			} else if (block.isOnDemandBlockContext() || block.isLiveBlockContext()) {
				nextAdPosition += ad.duration * 1e3;
			} else {
				nextAdPosition = ad.duration * 1e3;
			}
			return nextAdPosition;
		},
		_shouldRegulateJustMissedDisplayWindow: function (adOffset) {
			return adOffset < 0 && adOffset >= -100;
		},
		_finishRunningBlock: function (stopTime) {
			BS.logger.trace('\n## TaeEngine: No ads left! Stopping block runner, resetting ' +
				'timers and hiding graphics after ' + stopTime / 1e3 + ' s');
			if (this._block.isBanner()) {
				if (this._block.isLiveBlockContext() || this._block.isOnDemandBlockContext()) {
					this._setBlockTimer = setTimeout(function () {
						this.setBlock(this._block.blockContext, this._contentId).done();
					}.bind(this), stopTime);
				}
				this._resetTimersAndHideSvg(stopTime);
			}
		},
		_resetTimersAndHideSvg: function (stopTime) {
			if (stopTime === undefined)
				stopTime = 0;

			this._resetAllTimers = setTimeout(function () {
				if (this._showAdTimer) {
					clearTimeout(this._showAdTimer);
					this._showAdTimer = null;
				}
				if (this._resetAllTimers) {
					clearTimeout(this._resetAllTimers);
					this._resetAllTimers = null;
				}
				if (this._setBlockTimer) {
					clearTimeout(this._setBlockTimer);
					this._setBlockTimer = null;
				}
				this._startedBlock = false;
				this.adManager.destroy();
			}.bind(this), stopTime);
		}
	};

	BS.TaModel.TaBlockRunner = TaBlockRunner;
})(
	BeeSmart,
	Q
);


(function (BS, am, mm, q, ModuleDom) {

	var misc = mm.getApp('Misc');


	function Notification() {
		this._generateDomElements();
	}

	Notification.prototype = {
		dom: null,
		promotion: null,
		index: 0,
		numberOfPromos: 0,
		_generateDomElements: function () {
		},
		initialize: function (promotion, numberOfPromos, index) {
		},
		hide: function () {
		},
		move: function (direction) {
		},
		destroy: function () {
			this.hide();
			this.promotion = null;
			this.index = 0;
			this.numberOfPromos = 0;
			this.dom = null;
		}
	};


	function FullScreenNotification() {
		Notification.apply(this);
	}

	FullScreenNotification.prototype = {
		_generateDomElements: function () {
			var that = this;
			that.dom = new ModuleDom([
				'notifications', 'notificationsLiveStream', 'notificationsImage',
				'notificationsTitle', 'notificationsActionBar', 'notificationsLoadingImage',
				'notificationsNumber'
			], {
				adjust: function (numberOfPromos) {
					if (numberOfPromos === 1) {
						that.actionBar.set([
							['back', 'close'],
							['empty', null],
							['empty', null],
							['confirm', 'details']
						]);
						this.notificationsNumber.hide();
						this.notificationsTitle.attr('x', 0);
					} else {
						that.actionBar.set([
							['back', 'close'],
							['horizontal', 'promotion_next_prev'],
							['empty', null],
							['confirm', 'details']
						]);
					}
				}
			});
			that.actionBar = new BS.ui.ActionBar(that.dom.notificationsActionBar);
			that.videoWidthStart = $('#videoWidthStart');
			that.videoHeightStart = $('#videoHeightStart');
			that.videoXStart = $('#videoXStart');
			that.videoYStart = $('#videoYStart');
			that.videoWidthEnd = $('#videoWidthEnd');
			that.videoHeightEnd = $('#videoHeightEnd');
			that.videoXEnd = $('#videoXEnd');
			that.videoYEnd = $('#videoYEnd');
			that.image = new BS.ui.Image(that.dom.notificationsImage);
		},
		initialize: function (promotion, numberOfPromos, index) {
			this.promotion = promotion;
			this.index = index;
			this.numberOfPromos = numberOfPromos;
			this.dom.adjust(numberOfPromos);
			this.lock = true;
			this._setNotification(index);
			this.dom.notifications.show();
			this._shrinkVideo();
		},
		hide: function () {
			this._expandVideo();
			this.dom.notifications.hide();
		},
		_setNotification: function () {
			var that = this;
			that.dom.notificationsLoadingImage.show();
			that._setDetails().catch(function () {
				BS.logger.debug('Notifications error: loading image failed');
			}).finally(function () {
				that.dom.notificationsLoadingImage.hide();
				that.lock = false;
			});
		},
		_shrinkVideo: function () {
			BS.media.movePlayerTo(
				this.dom.notificationsLiveStream.attr('x'),
				this.dom.notificationsLiveStream.attr('y'),
				this.dom.notificationsLiveStream.attr('width'),
				this.dom.notificationsLiveStream.attr('height')
			);
		},
		_expandVideo: function () {
			BS.media.resetPlayerPosition();
		},
		_setDetails: function () {
			var that = this;
			var dfr = q.defer();

			that.image.href = null;
			that.image.href = that.promotion.picture;
			var bindObj = that.image.bind('SVGPostload', function (ev) {
				if (ev.target.naturalWidth === undefined) {
					dfr.reject('image-failed');
				} else {
					dfr.resolve();
				}
				bindObj.unbind();
			});

			that.dom.notificationsNumber.svg(
				'(%s/%s)'.sprintf(that.index + 1, that.numberOfPromos));
			that.dom.notificationsTitle.svg(that.promotion.title.encodeEntities());

			return dfr.promise;
		},
		destroy: function () {
			this.image.href = null;
			Notification.prototype.destroy.apply(this);
		}
	};
	Object.extend(FullScreenNotification, Notification);

	function SmallScreenNotification() {
		Notification.apply(this);
	}

	SmallScreenNotification.prototype = {
		descriptionPanel: null,
		_generateDomElements: function () {
			var that = this;
			that.dom = new ModuleDom([
				'ppSmallHolder', 'ppSmallActionBar', 'ppSmallTitle', 'ppSmallDescription',
				'ppSmallScrollGroup', 'ppSmallDescriptionSlider', 'ppSmallImage', 'ppSmallPageInfo'
			], {
				adjust: function (numberOfPromos) {
					if (numberOfPromos === 1) {
						that.actionBar.set([
							['back', 'close'],
							['confirm', 'details']
						]);
					} else {
						that.actionBar.set([
							['horizontal', 'promotion_next_prev'],
							['confirm', 'details']
						]);
					}
				}
			});
			that.actionBar = new BS.ui.ActionBar(that.dom.ppSmallActionBar);
			that.image = new BS.ui.Image(that.dom.ppSmallImage);
		},
		initialize: function (promotion, numberOfPromos, index) {
			this.promotion = promotion;
			this.index = index;
			this.numberOfPromos = numberOfPromos;
			this.dom.adjust(numberOfPromos);
			this.lock = true;
			this.dom.ppSmallHolder.show();
			this._setNotification(index);
		},
		hide: function () {
			this.dom.ppSmallHolder.hide();
		},
		_setNotification: function () {
			var that = this;
			that._setDetails().finally(function () {
				that.lock = false;
			});
		},
		_setDetails: function () {
			var that = this;
			var dfr = q.defer();
			this._destroyDescriptionPanel();
			this.dom.ppSmallTitle.text(that.promotion.title.encodeEntities());
			this.image.href = that.promotion.picture;
			this.dom.ppSmallDescription.svg(that.promotion.text.escapedBeeText());
			this.descriptionPanel = new BS.ui.ScrollingPanel(
				this.dom.ppSmallScrollGroup[0], null, this.dom.ppSmallDescriptionSlider[0]
			);
			return dfr.promise;
		},
		_destroyDescriptionPanel: function () {
			if (this.descriptionPanel) {
				this.descriptionPanel.destroy();
				this.descriptionPanel = null;
			}
		},
		move: function (direction) {
			if (!this.descriptionPanel || !this.descriptionPanel.verticalOverflow)
				return;
			if (direction === 'up') this.descriptionPanel.moveUp();
			else this.descriptionPanel.moveDown();
		},
		destroy: function () {
			Notification.prototype.destroy.apply(this);
			this._destroyDescriptionPanel();
		}
	};
	Object.extend(SmallScreenNotification, Notification);


	var notificationViewController = new BS.App('notificationViewController', {
		inputMapper: BS.App.portalDirectionKeyMapper
	});

	notificationViewController.currentPosition = 0;
	notificationViewController.notificationItems = [];

	notificationViewController.init = function (callerAppId, promotions) {
		this.notificationItems = promotions;
		this.currentPosition = 0;
		this.fullScreenNotification = new FullScreenNotification();
		this.smallScreenNotification = new SmallScreenNotification();

		this.notificationController = null;
		var promo = this.notificationItems[this.currentPosition];

		this.generateNotificationView(promo);
	};

	notificationViewController.generateNotificationView = function (promo) {
		if (promo.fullscreen) {
			this.notificationController = this.fullScreenNotification;
		} else {
			this.notificationController = this.smallScreenNotification;
		}
		this.notificationController.initialize(promo, this.notificationItems.length,
			this.currentPosition);
	};

	notificationViewController.navigate = function (direction) {
		if (direction === 'right') {
			this.currentPosition++;
			if (this.currentPosition >= this.notificationItems.length)
				this.currentPosition = 0;
		} else {
			this.currentPosition--;
			if (this.currentPosition < 0)
				this.currentPosition = this.notificationItems.length - 1;
		}

		this.hide();
		var promo = this.notificationItems[this.currentPosition];
		this.generateNotificationView(promo);
	};

	notificationViewController.move = function (direction) {
		this.notificationController.move(direction);
	};

	notificationViewController.destroy = function () {
		this.fullScreenNotification.destroy();
		this.smallScreenNotification.destroy();
		this.notificationController = null;
		this.fullScreenNotification = null;
		this.smallScreenNotification = null;
		this.currentPosition = 0;
		this.notificationItems = [];
	};

	notificationViewController.blur = function () {
		this.hide();
	};

	notificationViewController.hide = function () {
		this.notificationController.hide();
	};

	notificationViewController.onInputEvent = function (key) {
		switch (key) {
		case 'ok':
			var currentItemId = this.notificationItems[this.currentPosition].id;
			am.pop();
			misc.adapterMainMenu.showCModule('Promotions', [currentItemId]);
			break;
		case 'right':
		case 'left':
			this.navigate(key);
			break;
		case 'back':
			am.pop();
			break;
		case 'up':
		case 'down':
			this.move(key);
			break;
		}
	};

	var NotificationsModule = new BS.Module({
		id: 'NotificationsModule',
		requiredLicense: '',
		startupTasks: [
			{
				name: 'Notifications UI',
				payload: function (params, callback) {
					BS.template.get('svg/notifications.svg').finally(callback);
				}
			}
		]
	});
	NotificationsModule.register(notificationViewController);
})(
	BeeSmart,
	BeeSmart.appMgr,
	BeeSmart.modMgr,
	Q,
	$.ModuleDom
);
